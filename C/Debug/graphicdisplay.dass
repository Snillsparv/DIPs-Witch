
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#endif
}

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8fa 	bl	200001fc <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:
void init_app( void ) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000014:	4b05      	ldr	r3, [pc, #20]	; (2000002c <init_app+0x1c>)
20000016:	4a06      	ldr	r2, [pc, #24]	; (20000030 <init_app+0x20>)
20000018:	601a      	str	r2, [r3, #0]
	set_up_DIL();
2000001a:	f002 f85d 	bl	200020d8 <set_up_DIL>
	graphic_initialize();
2000001e:	f001 fb5d 	bl	200016dc <graphic_initialize>
	graphic_clear_screen();
20000022:	f001 fb92 	bl	2000174a <graphic_clear_screen>
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}
2000002c:	40021000 	andmi	r1, r2, r0
20000030:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000034 <initSprites>:
sprite tempTitleLight;
sprite tempPressBlack;
sprite tempPressGray;
sprite tempPressLight;

void initSprites( void ) {
20000034:	b580      	push	{r7, lr}
20000036:	b08a      	sub	sp, #40	; 0x28
20000038:	af00      	add	r7, sp, #0
	sprite *monsterPointer = &tempMonster;
2000003a:	4b49      	ldr	r3, [pc, #292]	; (20000160 <initSprites+0x12c>)
2000003c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(monsterPointer, monster_black_bits, monster_black_width, monster_black_height);
2000003e:	4949      	ldr	r1, [pc, #292]	; (20000164 <initSprites+0x130>)
20000040:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000042:	231e      	movs	r3, #30
20000044:	221e      	movs	r2, #30
20000046:	f002 f833 	bl	200020b0 <load_sprite>
	monster = monsterPointer;
2000004a:	4b47      	ldr	r3, [pc, #284]	; (20000168 <initSprites+0x134>)
2000004c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000004e:	601a      	str	r2, [r3, #0]
	
	sprite *monsterPointer2 = &tempMonsterLight;
20000050:	4b46      	ldr	r3, [pc, #280]	; (2000016c <initSprites+0x138>)
20000052:	623b      	str	r3, [r7, #32]
	load_sprite(monsterPointer2, monster_light_bits, monster_light_width, monster_light_height);
20000054:	4946      	ldr	r1, [pc, #280]	; (20000170 <initSprites+0x13c>)
20000056:	6a38      	ldr	r0, [r7, #32]
20000058:	231e      	movs	r3, #30
2000005a:	221e      	movs	r2, #30
2000005c:	f002 f828 	bl	200020b0 <load_sprite>
	monsterLight = monsterPointer2;
20000060:	4b44      	ldr	r3, [pc, #272]	; (20000174 <initSprites+0x140>)
20000062:	6a3a      	ldr	r2, [r7, #32]
20000064:	601a      	str	r2, [r3, #0]

	sprite *monsterPointer3 = &tempMonsterGray;
20000066:	4b44      	ldr	r3, [pc, #272]	; (20000178 <initSprites+0x144>)
20000068:	61fb      	str	r3, [r7, #28]
	load_sprite(monsterPointer3, monster_gray_bits, monster_gray_width, monster_gray_height);
2000006a:	4944      	ldr	r1, [pc, #272]	; (2000017c <initSprites+0x148>)
2000006c:	69f8      	ldr	r0, [r7, #28]
2000006e:	231e      	movs	r3, #30
20000070:	221e      	movs	r2, #30
20000072:	f002 f81d 	bl	200020b0 <load_sprite>
	monsterGray = monsterPointer3;
20000076:	4b42      	ldr	r3, [pc, #264]	; (20000180 <initSprites+0x14c>)
20000078:	69fa      	ldr	r2, [r7, #28]
2000007a:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempBg;
2000007c:	4b41      	ldr	r3, [pc, #260]	; (20000184 <initSprites+0x150>)
2000007e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer4, bg_bits, bg_width, bg_height);
20000080:	4941      	ldr	r1, [pc, #260]	; (20000188 <initSprites+0x154>)
20000082:	69b8      	ldr	r0, [r7, #24]
20000084:	2340      	movs	r3, #64	; 0x40
20000086:	2280      	movs	r2, #128	; 0x80
20000088:	f002 f812 	bl	200020b0 <load_sprite>
	bg = pointer4;
2000008c:	4b3f      	ldr	r3, [pc, #252]	; (2000018c <initSprites+0x158>)
2000008e:	69ba      	ldr	r2, [r7, #24]
20000090:	601a      	str	r2, [r3, #0]
	
	sprite *pointer5 = &tempCastleBlack;
20000092:	4b3f      	ldr	r3, [pc, #252]	; (20000190 <initSprites+0x15c>)
20000094:	617b      	str	r3, [r7, #20]
	load_sprite(pointer5, castle_black_bits, castle_black_width, castle_black_height);
20000096:	493f      	ldr	r1, [pc, #252]	; (20000194 <initSprites+0x160>)
20000098:	6978      	ldr	r0, [r7, #20]
2000009a:	2340      	movs	r3, #64	; 0x40
2000009c:	2280      	movs	r2, #128	; 0x80
2000009e:	f002 f807 	bl	200020b0 <load_sprite>
	castleBlack = pointer5;
200000a2:	4b3d      	ldr	r3, [pc, #244]	; (20000198 <initSprites+0x164>)
200000a4:	697a      	ldr	r2, [r7, #20]
200000a6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer6 = &tempCastleGray;
200000a8:	4b3c      	ldr	r3, [pc, #240]	; (2000019c <initSprites+0x168>)
200000aa:	613b      	str	r3, [r7, #16]
	load_sprite(pointer6, castle_gray_bits, castle_black_width, castle_black_height);
200000ac:	493c      	ldr	r1, [pc, #240]	; (200001a0 <initSprites+0x16c>)
200000ae:	6938      	ldr	r0, [r7, #16]
200000b0:	2340      	movs	r3, #64	; 0x40
200000b2:	2280      	movs	r2, #128	; 0x80
200000b4:	f001 fffc 	bl	200020b0 <load_sprite>
	castleGray = pointer6;
200000b8:	4b3a      	ldr	r3, [pc, #232]	; (200001a4 <initSprites+0x170>)
200000ba:	693a      	ldr	r2, [r7, #16]
200000bc:	601a      	str	r2, [r3, #0]
	
	sprite *pointer7 = &tempCastleLight;
200000be:	4b3a      	ldr	r3, [pc, #232]	; (200001a8 <initSprites+0x174>)
200000c0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer7, castle_light_bits, castle_black_width, castle_black_height);
200000c2:	493a      	ldr	r1, [pc, #232]	; (200001ac <initSprites+0x178>)
200000c4:	68f8      	ldr	r0, [r7, #12]
200000c6:	2340      	movs	r3, #64	; 0x40
200000c8:	2280      	movs	r2, #128	; 0x80
200000ca:	f001 fff1 	bl	200020b0 <load_sprite>
	castleLight = pointer7;
200000ce:	4b38      	ldr	r3, [pc, #224]	; (200001b0 <initSprites+0x17c>)
200000d0:	68fa      	ldr	r2, [r7, #12]
200000d2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer8 = &tempTitleLight;
200000d4:	4b37      	ldr	r3, [pc, #220]	; (200001b4 <initSprites+0x180>)
200000d6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, title_light_bits, title_black_width, title_black_height);
200000d8:	4937      	ldr	r1, [pc, #220]	; (200001b8 <initSprites+0x184>)
200000da:	68b8      	ldr	r0, [r7, #8]
200000dc:	231e      	movs	r3, #30
200000de:	2232      	movs	r2, #50	; 0x32
200000e0:	f001 ffe6 	bl	200020b0 <load_sprite>
	titleLight = pointer8;
200000e4:	4b35      	ldr	r3, [pc, #212]	; (200001bc <initSprites+0x188>)
200000e6:	68ba      	ldr	r2, [r7, #8]
200000e8:	601a      	str	r2, [r3, #0]
	sprite *pointer9 = &tempTitleGray;
200000ea:	4b35      	ldr	r3, [pc, #212]	; (200001c0 <initSprites+0x18c>)
200000ec:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, title_gray_bits, title_black_width, title_black_height);
200000ee:	4935      	ldr	r1, [pc, #212]	; (200001c4 <initSprites+0x190>)
200000f0:	6878      	ldr	r0, [r7, #4]
200000f2:	231e      	movs	r3, #30
200000f4:	2232      	movs	r2, #50	; 0x32
200000f6:	f001 ffdb 	bl	200020b0 <load_sprite>
	titleGray = pointer9;
200000fa:	4b33      	ldr	r3, [pc, #204]	; (200001c8 <initSprites+0x194>)
200000fc:	687a      	ldr	r2, [r7, #4]
200000fe:	601a      	str	r2, [r3, #0]
	sprite *pointer10 = &tempTitleBlack;
20000100:	4b32      	ldr	r3, [pc, #200]	; (200001cc <initSprites+0x198>)
20000102:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, title_black_bits, title_black_width, title_black_height);
20000104:	4932      	ldr	r1, [pc, #200]	; (200001d0 <initSprites+0x19c>)
20000106:	6838      	ldr	r0, [r7, #0]
20000108:	231e      	movs	r3, #30
2000010a:	2232      	movs	r2, #50	; 0x32
2000010c:	f001 ffd0 	bl	200020b0 <load_sprite>
	titleBlack = pointer10;	
20000110:	4b30      	ldr	r3, [pc, #192]	; (200001d4 <initSprites+0x1a0>)
20000112:	683a      	ldr	r2, [r7, #0]
20000114:	601a      	str	r2, [r3, #0]
	
	pointer8 = &tempPressLight;
20000116:	4b30      	ldr	r3, [pc, #192]	; (200001d8 <initSprites+0x1a4>)
20000118:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, press_light_bits, press_black_width, press_black_height);
2000011a:	4930      	ldr	r1, [pc, #192]	; (200001dc <initSprites+0x1a8>)
2000011c:	68b8      	ldr	r0, [r7, #8]
2000011e:	2323      	movs	r3, #35	; 0x23
20000120:	223c      	movs	r2, #60	; 0x3c
20000122:	f001 ffc5 	bl	200020b0 <load_sprite>
	pressLight = pointer8;
20000126:	4b2e      	ldr	r3, [pc, #184]	; (200001e0 <initSprites+0x1ac>)
20000128:	68ba      	ldr	r2, [r7, #8]
2000012a:	601a      	str	r2, [r3, #0]
	pointer9 = &tempPressGray;
2000012c:	4b2d      	ldr	r3, [pc, #180]	; (200001e4 <initSprites+0x1b0>)
2000012e:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, press_gray_bits, press_black_width, press_black_height);
20000130:	492d      	ldr	r1, [pc, #180]	; (200001e8 <initSprites+0x1b4>)
20000132:	6878      	ldr	r0, [r7, #4]
20000134:	2323      	movs	r3, #35	; 0x23
20000136:	223c      	movs	r2, #60	; 0x3c
20000138:	f001 ffba 	bl	200020b0 <load_sprite>
	pressGray = pointer9;
2000013c:	4b2b      	ldr	r3, [pc, #172]	; (200001ec <initSprites+0x1b8>)
2000013e:	687a      	ldr	r2, [r7, #4]
20000140:	601a      	str	r2, [r3, #0]
	pointer10 = &tempPressBlack;
20000142:	4b2b      	ldr	r3, [pc, #172]	; (200001f0 <initSprites+0x1bc>)
20000144:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, press_black_bits, press_black_width, press_black_height);
20000146:	492b      	ldr	r1, [pc, #172]	; (200001f4 <initSprites+0x1c0>)
20000148:	6838      	ldr	r0, [r7, #0]
2000014a:	2323      	movs	r3, #35	; 0x23
2000014c:	223c      	movs	r2, #60	; 0x3c
2000014e:	f001 ffaf 	bl	200020b0 <load_sprite>
	pressBlack = pointer10;	
20000152:	4b29      	ldr	r3, [pc, #164]	; (200001f8 <initSprites+0x1c4>)
20000154:	683a      	ldr	r2, [r7, #0]
20000156:	601a      	str	r2, [r3, #0]
	
	
}
20000158:	46c0      	nop			; (mov r8, r8)
2000015a:	46bd      	mov	sp, r7
2000015c:	b00a      	add	sp, #40	; 0x28
2000015e:	bd80      	pop	{r7, pc}
20000160:	20002904 	andcs	r2, r0, r4, lsl #18
20000164:	20004a28 	andcs	r4, r0, r8, lsr #20
20000168:	200028d8 	ldrdcs	r2, [r0], -r8
2000016c:	2000295c 	andcs	r2, r0, ip, asr r9
20000170:	20004aa0 	andcs	r4, r0, r0, lsr #21
20000174:	20002984 	andcs	r2, r0, r4, lsl #19
20000178:	20002924 	andcs	r2, r0, r4, lsr #18
2000017c:	20004b18 	andcs	r4, r0, r8, lsl fp
20000180:	20002994 	mulcs	r0, r4, r9
20000184:	20002998 	mulcs	r0, r8, r9
20000188:	20005d54 	andcs	r5, r0, r4, asr sp
2000018c:	20002920 	andcs	r2, r0, r0, lsr #18
20000190:	200028dc 	ldrdcs	r2, [r0], -ip
20000194:	20004ed8 	ldrdcs	r4, [r0], -r8
20000198:	20002900 	andcs	r2, r0, r0, lsl #18
2000019c:	20002978 	andcs	r2, r0, r8, ror r9
200001a0:	200052d8 	ldrdcs	r5, [r0], -r8
200001a4:	2000298c 	andcs	r2, r0, ip, lsl #19
200001a8:	2000294c 	andcs	r2, r0, ip, asr #18
200001ac:	200056d8 	ldrdcs	r5, [r0], -r8
200001b0:	2000293c 	andcs	r2, r0, ip, lsr r9
200001b4:	20002930 	andcs	r2, r0, r0, lsr r9
200001b8:	20005ad8 	ldrdcs	r5, [r0], -r8
200001bc:	20002988 	andcs	r2, r0, r8, lsl #19
200001c0:	200028f4 	strdcs	r2, [r0], -r4
200001c4:	20005bac 	andcs	r5, r0, ip, lsr #23
200001c8:	20002974 	andcs	r2, r0, r4, ror r9
200001cc:	20002914 	andcs	r2, r0, r4, lsl r9
200001d0:	20005c80 	andcs	r5, r0, r0, lsl #25
200001d4:	200029a4 	andcs	r2, r0, r4, lsr #19
200001d8:	20002940 	andcs	r2, r0, r0, asr #18
200001dc:	20004ca8 	andcs	r4, r0, r8, lsr #25
200001e0:	20002910 	andcs	r2, r0, r0, lsl r9
200001e4:	200028e8 	andcs	r2, r0, r8, ror #17
200001e8:	20004dc0 	andcs	r4, r0, r0, asr #27
200001ec:	20002958 	andcs	r2, r0, r8, asr r9
200001f0:	20002968 	andcs	r2, r0, r8, ror #18
200001f4:	20004b90 	mulcs	r0, r0, fp
200001f8:	20002990 	mulcs	r0, r0, r9

200001fc <main>:
	
int counter = 0;
int current_screen = START_SCREEN;
void main(void)
{
200001fc:	b590      	push	{r4, r7, lr}
200001fe:	4ceb      	ldr	r4, [pc, #940]	; (200005ac <main+0x3b0>)
20000200:	44a5      	add	sp, r4
20000202:	af00      	add	r7, sp, #0
 * 2. Draw it with method above.
 * 3. Show frame with some long fram_length for testing.
 * 
 * */
	
	init_app();	
20000204:	f7ff ff04 	bl	20000010 <init_app>
	initSprites();
20000208:	f7ff ff14 	bl	20000034 <initSprites>
	
	GameObject monsterObj;
	Image monsterImage;
	Image monsterImages[] = {monsterImage};
2000020c:	239b      	movs	r3, #155	; 0x9b
2000020e:	009b      	lsls	r3, r3, #2
20000210:	18fb      	adds	r3, r7, r3
20000212:	229e      	movs	r2, #158	; 0x9e
20000214:	0092      	lsls	r2, r2, #2
20000216:	18ba      	adds	r2, r7, r2
20000218:	ca13      	ldmia	r2!, {r0, r1, r4}
2000021a:	c313      	stmia	r3!, {r0, r1, r4}
	monsterObj.images = monsterImages;
2000021c:	23a1      	movs	r3, #161	; 0xa1
2000021e:	009b      	lsls	r3, r3, #2
20000220:	18fb      	adds	r3, r7, r3
20000222:	229b      	movs	r2, #155	; 0x9b
20000224:	0092      	lsls	r2, r2, #2
20000226:	18ba      	adds	r2, r7, r2
20000228:	601a      	str	r2, [r3, #0]
	load_image(&monsterObj.images[0], monster, monsterGray, monsterLight);
2000022a:	23a1      	movs	r3, #161	; 0xa1
2000022c:	009b      	lsls	r3, r3, #2
2000022e:	18fb      	adds	r3, r7, r3
20000230:	6818      	ldr	r0, [r3, #0]
20000232:	4bdf      	ldr	r3, [pc, #892]	; (200005b0 <main+0x3b4>)
20000234:	6819      	ldr	r1, [r3, #0]
20000236:	4bdf      	ldr	r3, [pc, #892]	; (200005b4 <main+0x3b8>)
20000238:	681a      	ldr	r2, [r3, #0]
2000023a:	4bdf      	ldr	r3, [pc, #892]	; (200005b8 <main+0x3bc>)
2000023c:	681b      	ldr	r3, [r3, #0]
2000023e:	f001 ff23 	bl	20002088 <load_image>
	monsterObj.xPos = 30;
20000242:	23a1      	movs	r3, #161	; 0xa1
20000244:	009b      	lsls	r3, r3, #2
20000246:	18fb      	adds	r3, r7, r3
20000248:	221e      	movs	r2, #30
2000024a:	605a      	str	r2, [r3, #4]
	monsterObj.yPos = 4;
2000024c:	23a1      	movs	r3, #161	; 0xa1
2000024e:	009b      	lsls	r3, r3, #2
20000250:	18fb      	adds	r3, r7, r3
20000252:	2204      	movs	r2, #4
20000254:	609a      	str	r2, [r3, #8]
	monsterObj.current_frame = 0;
20000256:	23a1      	movs	r3, #161	; 0xa1
20000258:	009b      	lsls	r3, r3, #2
2000025a:	18fb      	adds	r3, r7, r3
2000025c:	2200      	movs	r2, #0
2000025e:	615a      	str	r2, [r3, #20]
	monsterObj.update = playerUpdate;
20000260:	23a1      	movs	r3, #161	; 0xa1
20000262:	009b      	lsls	r3, r3, #2
20000264:	18fb      	adds	r3, r7, r3
20000266:	4ad5      	ldr	r2, [pc, #852]	; (200005bc <main+0x3c0>)
20000268:	60da      	str	r2, [r3, #12]
	
	GameObject titleObj;
	Image titleImage;
	Image titleImages[] = {titleImage};
2000026a:	238c      	movs	r3, #140	; 0x8c
2000026c:	009b      	lsls	r3, r3, #2
2000026e:	18fb      	adds	r3, r7, r3
20000270:	228f      	movs	r2, #143	; 0x8f
20000272:	0092      	lsls	r2, r2, #2
20000274:	18ba      	adds	r2, r7, r2
20000276:	ca13      	ldmia	r2!, {r0, r1, r4}
20000278:	c313      	stmia	r3!, {r0, r1, r4}
	titleObj.images = titleImages;
2000027a:	2392      	movs	r3, #146	; 0x92
2000027c:	009b      	lsls	r3, r3, #2
2000027e:	18fb      	adds	r3, r7, r3
20000280:	228c      	movs	r2, #140	; 0x8c
20000282:	0092      	lsls	r2, r2, #2
20000284:	18ba      	adds	r2, r7, r2
20000286:	601a      	str	r2, [r3, #0]
	load_image(&titleObj.images[0], titleBlack, titleGray, titleLight);
20000288:	2392      	movs	r3, #146	; 0x92
2000028a:	009b      	lsls	r3, r3, #2
2000028c:	18fb      	adds	r3, r7, r3
2000028e:	6818      	ldr	r0, [r3, #0]
20000290:	4bcb      	ldr	r3, [pc, #812]	; (200005c0 <main+0x3c4>)
20000292:	6819      	ldr	r1, [r3, #0]
20000294:	4bcb      	ldr	r3, [pc, #812]	; (200005c4 <main+0x3c8>)
20000296:	681a      	ldr	r2, [r3, #0]
20000298:	4bcb      	ldr	r3, [pc, #812]	; (200005c8 <main+0x3cc>)
2000029a:	681b      	ldr	r3, [r3, #0]
2000029c:	f001 fef4 	bl	20002088 <load_image>
	titleObj.xPos = 1;
200002a0:	2392      	movs	r3, #146	; 0x92
200002a2:	009b      	lsls	r3, r3, #2
200002a4:	18fb      	adds	r3, r7, r3
200002a6:	2201      	movs	r2, #1
200002a8:	605a      	str	r2, [r3, #4]
	titleObj.yPos = -40;
200002aa:	2392      	movs	r3, #146	; 0x92
200002ac:	009b      	lsls	r3, r3, #2
200002ae:	18fb      	adds	r3, r7, r3
200002b0:	2228      	movs	r2, #40	; 0x28
200002b2:	4252      	negs	r2, r2
200002b4:	609a      	str	r2, [r3, #8]
	titleObj.current_frame = 0;
200002b6:	2392      	movs	r3, #146	; 0x92
200002b8:	009b      	lsls	r3, r3, #2
200002ba:	18fb      	adds	r3, r7, r3
200002bc:	2200      	movs	r2, #0
200002be:	615a      	str	r2, [r3, #20]
	
	GameObject pressObj;
	Image pressImage;
	Image pressImages[] = {pressImage};
200002c0:	23fa      	movs	r3, #250	; 0xfa
200002c2:	005b      	lsls	r3, r3, #1
200002c4:	18fb      	adds	r3, r7, r3
200002c6:	2280      	movs	r2, #128	; 0x80
200002c8:	0092      	lsls	r2, r2, #2
200002ca:	18ba      	adds	r2, r7, r2
200002cc:	ca13      	ldmia	r2!, {r0, r1, r4}
200002ce:	c313      	stmia	r3!, {r0, r1, r4}
	pressObj.images = pressImages;
200002d0:	2383      	movs	r3, #131	; 0x83
200002d2:	009b      	lsls	r3, r3, #2
200002d4:	18fb      	adds	r3, r7, r3
200002d6:	22fa      	movs	r2, #250	; 0xfa
200002d8:	0052      	lsls	r2, r2, #1
200002da:	18ba      	adds	r2, r7, r2
200002dc:	601a      	str	r2, [r3, #0]
	load_image(&pressObj.images[0], pressBlack, pressLight, pressGray);
200002de:	2383      	movs	r3, #131	; 0x83
200002e0:	009b      	lsls	r3, r3, #2
200002e2:	18fb      	adds	r3, r7, r3
200002e4:	6818      	ldr	r0, [r3, #0]
200002e6:	4bb9      	ldr	r3, [pc, #740]	; (200005cc <main+0x3d0>)
200002e8:	6819      	ldr	r1, [r3, #0]
200002ea:	4bb9      	ldr	r3, [pc, #740]	; (200005d0 <main+0x3d4>)
200002ec:	681a      	ldr	r2, [r3, #0]
200002ee:	4bb9      	ldr	r3, [pc, #740]	; (200005d4 <main+0x3d8>)
200002f0:	681b      	ldr	r3, [r3, #0]
200002f2:	f001 fec9 	bl	20002088 <load_image>
	pressObj.xPos = 65-30;
200002f6:	2383      	movs	r3, #131	; 0x83
200002f8:	009b      	lsls	r3, r3, #2
200002fa:	18fb      	adds	r3, r7, r3
200002fc:	2223      	movs	r2, #35	; 0x23
200002fe:	605a      	str	r2, [r3, #4]
	pressObj.yPos = 29-15;
20000300:	2383      	movs	r3, #131	; 0x83
20000302:	009b      	lsls	r3, r3, #2
20000304:	18fb      	adds	r3, r7, r3
20000306:	220e      	movs	r2, #14
20000308:	609a      	str	r2, [r3, #8]
	pressObj.current_frame = 0;
2000030a:	2383      	movs	r3, #131	; 0x83
2000030c:	009b      	lsls	r3, r3, #2
2000030e:	18fb      	adds	r3, r7, r3
20000310:	2200      	movs	r2, #0
20000312:	615a      	str	r2, [r3, #20]
	monsterObj.image.grayImage = monsterGray;
	monsterObj.image.lightImage = monsterLight;
	*/
	GameObject castleObj;
	Image castleImage;
	Image castleImages[] = {castleImage};
20000314:	23dc      	movs	r3, #220	; 0xdc
20000316:	005b      	lsls	r3, r3, #1
20000318:	18fb      	adds	r3, r7, r3
2000031a:	22e2      	movs	r2, #226	; 0xe2
2000031c:	0052      	lsls	r2, r2, #1
2000031e:	18ba      	adds	r2, r7, r2
20000320:	ca13      	ldmia	r2!, {r0, r1, r4}
20000322:	c313      	stmia	r3!, {r0, r1, r4}
	castleObj.images = castleImages;
20000324:	23e8      	movs	r3, #232	; 0xe8
20000326:	005b      	lsls	r3, r3, #1
20000328:	18fb      	adds	r3, r7, r3
2000032a:	22dc      	movs	r2, #220	; 0xdc
2000032c:	0052      	lsls	r2, r2, #1
2000032e:	18ba      	adds	r2, r7, r2
20000330:	601a      	str	r2, [r3, #0]
	load_image(&castleObj.images[0], castleBlack, castleGray, castleLight);
20000332:	23e8      	movs	r3, #232	; 0xe8
20000334:	005b      	lsls	r3, r3, #1
20000336:	18fb      	adds	r3, r7, r3
20000338:	6818      	ldr	r0, [r3, #0]
2000033a:	4ba7      	ldr	r3, [pc, #668]	; (200005d8 <main+0x3dc>)
2000033c:	6819      	ldr	r1, [r3, #0]
2000033e:	4ba7      	ldr	r3, [pc, #668]	; (200005dc <main+0x3e0>)
20000340:	681a      	ldr	r2, [r3, #0]
20000342:	4ba7      	ldr	r3, [pc, #668]	; (200005e0 <main+0x3e4>)
20000344:	681b      	ldr	r3, [r3, #0]
20000346:	f001 fe9f 	bl	20002088 <load_image>
	castleObj.xPos = 1;
2000034a:	23e8      	movs	r3, #232	; 0xe8
2000034c:	005b      	lsls	r3, r3, #1
2000034e:	18fb      	adds	r3, r7, r3
20000350:	2201      	movs	r2, #1
20000352:	605a      	str	r2, [r3, #4]
	castleObj.yPos = 1;
20000354:	23e8      	movs	r3, #232	; 0xe8
20000356:	005b      	lsls	r3, r3, #1
20000358:	18fb      	adds	r3, r7, r3
2000035a:	2201      	movs	r2, #1
2000035c:	609a      	str	r2, [r3, #8]
	castleObj.current_frame = 0;
2000035e:	23e8      	movs	r3, #232	; 0xe8
20000360:	005b      	lsls	r3, r3, #1
20000362:	18fb      	adds	r3, r7, r3
20000364:	2200      	movs	r2, #0
20000366:	615a      	str	r2, [r3, #20]
	
	GameObject bird;
	init_bird( &bird );
20000368:	23ca      	movs	r3, #202	; 0xca
2000036a:	005b      	lsls	r3, r3, #1
2000036c:	18fb      	adds	r3, r7, r3
2000036e:	0018      	movs	r0, r3
20000370:	f000 febc 	bl	200010ec <init_bird>
	bird.xPos = 180;
20000374:	4b9b      	ldr	r3, [pc, #620]	; (200005e4 <main+0x3e8>)
20000376:	22aa      	movs	r2, #170	; 0xaa
20000378:	0092      	lsls	r2, r2, #2
2000037a:	4694      	mov	ip, r2
2000037c:	44bc      	add	ip, r7
2000037e:	4463      	add	r3, ip
20000380:	22b4      	movs	r2, #180	; 0xb4
20000382:	605a      	str	r2, [r3, #4]
	bird.yPos = 40;
20000384:	4b97      	ldr	r3, [pc, #604]	; (200005e4 <main+0x3e8>)
20000386:	22aa      	movs	r2, #170	; 0xaa
20000388:	0092      	lsls	r2, r2, #2
2000038a:	4694      	mov	ip, r2
2000038c:	44bc      	add	ip, r7
2000038e:	4463      	add	r3, ip
20000390:	2228      	movs	r2, #40	; 0x28
20000392:	609a      	str	r2, [r3, #8]
	bird.update = gameObjectUpdate;
20000394:	4b93      	ldr	r3, [pc, #588]	; (200005e4 <main+0x3e8>)
20000396:	22aa      	movs	r2, #170	; 0xaa
20000398:	0092      	lsls	r2, r2, #2
2000039a:	4694      	mov	ip, r2
2000039c:	44bc      	add	ip, r7
2000039e:	4463      	add	r3, ip
200003a0:	4a91      	ldr	r2, [pc, #580]	; (200005e8 <main+0x3ec>)
200003a2:	60da      	str	r2, [r3, #12]
	
	GameObject fire2;
	init_fire( &fire2 );
200003a4:	23b8      	movs	r3, #184	; 0xb8
200003a6:	005b      	lsls	r3, r3, #1
200003a8:	18fb      	adds	r3, r7, r3
200003aa:	0018      	movs	r0, r3
200003ac:	f000 fc9a 	bl	20000ce4 <init_fire>
	GameObject fire3;
	init_fire( &fire3 );
200003b0:	23a6      	movs	r3, #166	; 0xa6
200003b2:	005b      	lsls	r3, r3, #1
200003b4:	18fb      	adds	r3, r7, r3
200003b6:	0018      	movs	r0, r3
200003b8:	f000 fc94 	bl	20000ce4 <init_fire>
	GameObject fire4;
	init_fire( &fire4 );
200003bc:	2394      	movs	r3, #148	; 0x94
200003be:	005b      	lsls	r3, r3, #1
200003c0:	18fb      	adds	r3, r7, r3
200003c2:	0018      	movs	r0, r3
200003c4:	f000 fc8e 	bl	20000ce4 <init_fire>
	GameObject fire1;
	init_fire( &fire1 );
200003c8:	1d7b      	adds	r3, r7, #5
200003ca:	33ff      	adds	r3, #255	; 0xff
200003cc:	0018      	movs	r0, r3
200003ce:	f000 fc89 	bl	20000ce4 <init_fire>
	fire2.xPos = 98;
200003d2:	4b86      	ldr	r3, [pc, #536]	; (200005ec <main+0x3f0>)
200003d4:	22aa      	movs	r2, #170	; 0xaa
200003d6:	0092      	lsls	r2, r2, #2
200003d8:	4694      	mov	ip, r2
200003da:	44bc      	add	ip, r7
200003dc:	4463      	add	r3, ip
200003de:	2262      	movs	r2, #98	; 0x62
200003e0:	605a      	str	r2, [r3, #4]
	fire2.yPos = 26-12;
200003e2:	4b82      	ldr	r3, [pc, #520]	; (200005ec <main+0x3f0>)
200003e4:	22aa      	movs	r2, #170	; 0xaa
200003e6:	0092      	lsls	r2, r2, #2
200003e8:	4694      	mov	ip, r2
200003ea:	44bc      	add	ip, r7
200003ec:	4463      	add	r3, ip
200003ee:	220e      	movs	r2, #14
200003f0:	609a      	str	r2, [r3, #8]
	fire3.xPos = 115;
200003f2:	4b7f      	ldr	r3, [pc, #508]	; (200005f0 <main+0x3f4>)
200003f4:	22aa      	movs	r2, #170	; 0xaa
200003f6:	0092      	lsls	r2, r2, #2
200003f8:	4694      	mov	ip, r2
200003fa:	44bc      	add	ip, r7
200003fc:	4463      	add	r3, ip
200003fe:	2273      	movs	r2, #115	; 0x73
20000400:	605a      	str	r2, [r3, #4]
	fire3.yPos = 34-12;
20000402:	4b7b      	ldr	r3, [pc, #492]	; (200005f0 <main+0x3f4>)
20000404:	22aa      	movs	r2, #170	; 0xaa
20000406:	0092      	lsls	r2, r2, #2
20000408:	4694      	mov	ip, r2
2000040a:	44bc      	add	ip, r7
2000040c:	4463      	add	r3, ip
2000040e:	2216      	movs	r2, #22
20000410:	609a      	str	r2, [r3, #8]
	
	fire1.xPos = 85;
20000412:	4b78      	ldr	r3, [pc, #480]	; (200005f4 <main+0x3f8>)
20000414:	22aa      	movs	r2, #170	; 0xaa
20000416:	0092      	lsls	r2, r2, #2
20000418:	4694      	mov	ip, r2
2000041a:	44bc      	add	ip, r7
2000041c:	4463      	add	r3, ip
2000041e:	2255      	movs	r2, #85	; 0x55
20000420:	605a      	str	r2, [r3, #4]
	fire1.yPos = 23-12;
20000422:	4b74      	ldr	r3, [pc, #464]	; (200005f4 <main+0x3f8>)
20000424:	22aa      	movs	r2, #170	; 0xaa
20000426:	0092      	lsls	r2, r2, #2
20000428:	4694      	mov	ip, r2
2000042a:	44bc      	add	ip, r7
2000042c:	4463      	add	r3, ip
2000042e:	220b      	movs	r2, #11
20000430:	609a      	str	r2, [r3, #8]
	fire4.xPos = 71;
20000432:	4b71      	ldr	r3, [pc, #452]	; (200005f8 <main+0x3fc>)
20000434:	22aa      	movs	r2, #170	; 0xaa
20000436:	0092      	lsls	r2, r2, #2
20000438:	4694      	mov	ip, r2
2000043a:	44bc      	add	ip, r7
2000043c:	4463      	add	r3, ip
2000043e:	2247      	movs	r2, #71	; 0x47
20000440:	605a      	str	r2, [r3, #4]
	fire4.yPos = 27-11;
20000442:	4b6d      	ldr	r3, [pc, #436]	; (200005f8 <main+0x3fc>)
20000444:	22aa      	movs	r2, #170	; 0xaa
20000446:	0092      	lsls	r2, r2, #2
20000448:	4694      	mov	ip, r2
2000044a:	44bc      	add	ip, r7
2000044c:	4463      	add	r3, ip
2000044e:	2210      	movs	r2, #16
20000450:	609a      	str	r2, [r3, #8]
	//draw_game_object(&castleObj);
	
	fire2.animation_speed = 2;
20000452:	4b66      	ldr	r3, [pc, #408]	; (200005ec <main+0x3f0>)
20000454:	22aa      	movs	r2, #170	; 0xaa
20000456:	0092      	lsls	r2, r2, #2
20000458:	4694      	mov	ip, r2
2000045a:	44bc      	add	ip, r7
2000045c:	4463      	add	r3, ip
2000045e:	2202      	movs	r2, #2
20000460:	61da      	str	r2, [r3, #28]
	fire3.animation_speed = 2;
20000462:	4b63      	ldr	r3, [pc, #396]	; (200005f0 <main+0x3f4>)
20000464:	22aa      	movs	r2, #170	; 0xaa
20000466:	0092      	lsls	r2, r2, #2
20000468:	4694      	mov	ip, r2
2000046a:	44bc      	add	ip, r7
2000046c:	4463      	add	r3, ip
2000046e:	2202      	movs	r2, #2
20000470:	61da      	str	r2, [r3, #28]
	fire1.animation_speed = 2;
20000472:	4b60      	ldr	r3, [pc, #384]	; (200005f4 <main+0x3f8>)
20000474:	22aa      	movs	r2, #170	; 0xaa
20000476:	0092      	lsls	r2, r2, #2
20000478:	4694      	mov	ip, r2
2000047a:	44bc      	add	ip, r7
2000047c:	4463      	add	r3, ip
2000047e:	2202      	movs	r2, #2
20000480:	61da      	str	r2, [r3, #28]
	fire4.animation_speed = 2;
20000482:	4b5d      	ldr	r3, [pc, #372]	; (200005f8 <main+0x3fc>)
20000484:	22aa      	movs	r2, #170	; 0xaa
20000486:	0092      	lsls	r2, r2, #2
20000488:	4694      	mov	ip, r2
2000048a:	44bc      	add	ip, r7
2000048c:	4463      	add	r3, ip
2000048e:	2202      	movs	r2, #2
20000490:	61da      	str	r2, [r3, #28]
	
	fire2.update = gameObjectUpdate;
20000492:	4b56      	ldr	r3, [pc, #344]	; (200005ec <main+0x3f0>)
20000494:	22aa      	movs	r2, #170	; 0xaa
20000496:	0092      	lsls	r2, r2, #2
20000498:	4694      	mov	ip, r2
2000049a:	44bc      	add	ip, r7
2000049c:	4463      	add	r3, ip
2000049e:	4a52      	ldr	r2, [pc, #328]	; (200005e8 <main+0x3ec>)
200004a0:	60da      	str	r2, [r3, #12]
	fire3.update = gameObjectUpdate;
200004a2:	4b53      	ldr	r3, [pc, #332]	; (200005f0 <main+0x3f4>)
200004a4:	22aa      	movs	r2, #170	; 0xaa
200004a6:	0092      	lsls	r2, r2, #2
200004a8:	4694      	mov	ip, r2
200004aa:	44bc      	add	ip, r7
200004ac:	4463      	add	r3, ip
200004ae:	4a4e      	ldr	r2, [pc, #312]	; (200005e8 <main+0x3ec>)
200004b0:	60da      	str	r2, [r3, #12]
	fire1.update = gameObjectUpdate;
200004b2:	4b50      	ldr	r3, [pc, #320]	; (200005f4 <main+0x3f8>)
200004b4:	22aa      	movs	r2, #170	; 0xaa
200004b6:	0092      	lsls	r2, r2, #2
200004b8:	4694      	mov	ip, r2
200004ba:	44bc      	add	ip, r7
200004bc:	4463      	add	r3, ip
200004be:	4a4a      	ldr	r2, [pc, #296]	; (200005e8 <main+0x3ec>)
200004c0:	60da      	str	r2, [r3, #12]
	fire4.update = gameObjectUpdate;
200004c2:	4b4d      	ldr	r3, [pc, #308]	; (200005f8 <main+0x3fc>)
200004c4:	22aa      	movs	r2, #170	; 0xaa
200004c6:	0092      	lsls	r2, r2, #2
200004c8:	4694      	mov	ip, r2
200004ca:	44bc      	add	ip, r7
200004cc:	4463      	add	r3, ip
200004ce:	4a46      	ldr	r2, [pc, #280]	; (200005e8 <main+0x3ec>)
200004d0:	60da      	str	r2, [r3, #12]
	SlowText text8;
	SlowText text9;
	SlowText text10;
	SlowText text11;
	SlowText text12;
	init_slow_text(&text_kra, "*KRA!* *KRA!*", "   ", 1);
200004d2:	4a4a      	ldr	r2, [pc, #296]	; (200005fc <main+0x400>)
200004d4:	494a      	ldr	r1, [pc, #296]	; (20000600 <main+0x404>)
200004d6:	23f0      	movs	r3, #240	; 0xf0
200004d8:	18f8      	adds	r0, r7, r3
200004da:	2301      	movs	r3, #1
200004dc:	f002 f8e9 	bl	200026b2 <init_slow_text>
	init_slow_text(&text1, "For centuries the", "DILs-witches have", 1);
200004e0:	4a48      	ldr	r2, [pc, #288]	; (20000604 <main+0x408>)
200004e2:	4949      	ldr	r1, [pc, #292]	; (20000608 <main+0x40c>)
200004e4:	23dc      	movs	r3, #220	; 0xdc
200004e6:	18f8      	adds	r0, r7, r3
200004e8:	2301      	movs	r3, #1
200004ea:	f002 f8e2 	bl	200026b2 <init_slow_text>
	init_slow_text(&text2, "coiled in fear,", "    ", 1);
200004ee:	4a47      	ldr	r2, [pc, #284]	; (2000060c <main+0x410>)
200004f0:	4947      	ldr	r1, [pc, #284]	; (20000610 <main+0x414>)
200004f2:	23c8      	movs	r3, #200	; 0xc8
200004f4:	18f8      	adds	r0, r7, r3
200004f6:	2301      	movs	r3, #1
200004f8:	f002 f8db 	bl	200026b2 <init_slow_text>
	init_slow_text(&text3, "whenever they hear", "that a DIPs-witch", 1);
200004fc:	4a45      	ldr	r2, [pc, #276]	; (20000614 <main+0x418>)
200004fe:	4946      	ldr	r1, [pc, #280]	; (20000618 <main+0x41c>)
20000500:	23b4      	movs	r3, #180	; 0xb4
20000502:	18f8      	adds	r0, r7, r3
20000504:	2301      	movs	r3, #1
20000506:	f002 f8d4 	bl	200026b2 <init_slow_text>
	init_slow_text(&text4, "is near.", "   ", 1);
2000050a:	4a3c      	ldr	r2, [pc, #240]	; (200005fc <main+0x400>)
2000050c:	4943      	ldr	r1, [pc, #268]	; (2000061c <main+0x420>)
2000050e:	23a0      	movs	r3, #160	; 0xa0
20000510:	18f8      	adds	r0, r7, r3
20000512:	2301      	movs	r3, #1
20000514:	f002 f8cd 	bl	200026b2 <init_slow_text>
	init_slow_text(&text5, "So it is quite", "surprising, finding", 1);
20000518:	4a41      	ldr	r2, [pc, #260]	; (20000620 <main+0x424>)
2000051a:	4942      	ldr	r1, [pc, #264]	; (20000624 <main+0x428>)
2000051c:	238c      	movs	r3, #140	; 0x8c
2000051e:	18f8      	adds	r0, r7, r3
20000520:	2301      	movs	r3, #1
20000522:	f002 f8c6 	bl	200026b2 <init_slow_text>
	init_slow_text(&text6, "you here,", "    ", 1);
20000526:	4a39      	ldr	r2, [pc, #228]	; (2000060c <main+0x410>)
20000528:	493f      	ldr	r1, [pc, #252]	; (20000628 <main+0x42c>)
2000052a:	2378      	movs	r3, #120	; 0x78
2000052c:	18f8      	adds	r0, r7, r3
2000052e:	2301      	movs	r3, #1
20000530:	f002 f8bf 	bl	200026b2 <init_slow_text>
	init_slow_text(&text7, "queen Daffo of DILs,", "heir to king Lear.", 1);
20000534:	4a3d      	ldr	r2, [pc, #244]	; (2000062c <main+0x430>)
20000536:	493e      	ldr	r1, [pc, #248]	; (20000630 <main+0x434>)
20000538:	2364      	movs	r3, #100	; 0x64
2000053a:	18f8      	adds	r0, r7, r3
2000053c:	2301      	movs	r3, #1
2000053e:	f002 f8b8 	bl	200026b2 <init_slow_text>
	init_slow_text(&text8, "But maybe you're", "tempted, to loot", 1);
20000542:	4a3c      	ldr	r2, [pc, #240]	; (20000634 <main+0x438>)
20000544:	493c      	ldr	r1, [pc, #240]	; (20000638 <main+0x43c>)
20000546:	2350      	movs	r3, #80	; 0x50
20000548:	18f8      	adds	r0, r7, r3
2000054a:	2301      	movs	r3, #1
2000054c:	f002 f8b1 	bl	200026b2 <init_slow_text>
	init_slow_text(&text9, "from the riches,", "    ", 1);
20000550:	4a2e      	ldr	r2, [pc, #184]	; (2000060c <main+0x410>)
20000552:	493a      	ldr	r1, [pc, #232]	; (2000063c <main+0x440>)
20000554:	233c      	movs	r3, #60	; 0x3c
20000556:	18f8      	adds	r0, r7, r3
20000558:	2301      	movs	r3, #1
2000055a:	f002 f8aa 	bl	200026b2 <init_slow_text>
	init_slow_text(&text12, "wicked DIPs-witches.", "    ", 1);
2000055e:	4a2b      	ldr	r2, [pc, #172]	; (2000060c <main+0x410>)
20000560:	4937      	ldr	r1, [pc, #220]	; (20000640 <main+0x444>)
20000562:	0038      	movs	r0, r7
20000564:	2301      	movs	r3, #1
20000566:	f002 f8a4 	bl	200026b2 <init_slow_text>
	init_slow_text(&text10, "so grippily trea-", "sured by", 1);
2000056a:	4a36      	ldr	r2, [pc, #216]	; (20000644 <main+0x448>)
2000056c:	4936      	ldr	r1, [pc, #216]	; (20000648 <main+0x44c>)
2000056e:	2328      	movs	r3, #40	; 0x28
20000570:	18f8      	adds	r0, r7, r3
20000572:	2301      	movs	r3, #1
20000574:	f002 f89d 	bl	200026b2 <init_slow_text>
	init_slow_text(&text11, "Enter, brave witch,", "- reset the switch!", 1);
20000578:	4a34      	ldr	r2, [pc, #208]	; (2000064c <main+0x450>)
2000057a:	4935      	ldr	r1, [pc, #212]	; (20000650 <main+0x454>)
2000057c:	2314      	movs	r3, #20
2000057e:	18f8      	adds	r0, r7, r3
20000580:	2301      	movs	r3, #1
20000582:	f002 f896 	bl	200026b2 <init_slow_text>
	//ascii_write_part("Yeeaaah!!!", "This is working! :)", 5, 10);
	
	set_up_DIL();
20000586:	f001 fda7 	bl	200020d8 <set_up_DIL>
	clear_ascii();
2000058a:	f001 ff78 	bl	2000247e <clear_ascii>
	
	if(read_DIL() == 0) {
2000058e:	f001 fdaf 	bl	200020f0 <read_DIL>
20000592:	1e03      	subs	r3, r0, #0
20000594:	d102      	bne.n	2000059c <main+0x3a0>
		current_screen = SWITCH_LOCK; 
20000596:	4b2f      	ldr	r3, [pc, #188]	; (20000654 <main+0x458>)
20000598:	2200      	movs	r2, #0
2000059a:	601a      	str	r2, [r3, #0]
	}
	
	//Game loop
	while(1) {
			
		switch(current_screen) {
2000059c:	4b2d      	ldr	r3, [pc, #180]	; (20000654 <main+0x458>)
2000059e:	681b      	ldr	r3, [r3, #0]
200005a0:	2b00      	cmp	r3, #0
200005a2:	d062      	beq.n	2000066a <main+0x46e>
200005a4:	2b01      	cmp	r3, #1
200005a6:	d067      	beq.n	20000678 <main+0x47c>
200005a8:	e7f8      	b.n	2000059c <main+0x3a0>
200005aa:	46c0      	nop			; (mov r8, r8)
200005ac:	fffffd54 			; <UNDEFINED> instruction: 0xfffffd54
200005b0:	200028d8 	ldrdcs	r2, [r0], -r8
200005b4:	20002994 	mulcs	r0, r4, r9
200005b8:	20002984 	andcs	r2, r0, r4, lsl #19
200005bc:	20000e09 	andcs	r0, r0, r9, lsl #28
200005c0:	200029a4 	andcs	r2, r0, r4, lsr #19
200005c4:	20002974 	andcs	r2, r0, r4, ror r9
200005c8:	20002988 	andcs	r2, r0, r8, lsl #19
200005cc:	20002990 	mulcs	r0, r0, r9
200005d0:	20002910 	andcs	r2, r0, r0, lsl r9
200005d4:	20002958 	andcs	r2, r0, r8, asr r9
200005d8:	20002900 	andcs	r2, r0, r0, lsl #18
200005dc:	2000298c 	andcs	r2, r0, ip, lsl #19
200005e0:	2000293c 	andcs	r2, r0, ip, lsr r9
200005e4:	fffffeec 			; <UNDEFINED> instruction: 0xfffffeec
200005e8:	20000b19 	andcs	r0, r0, r9, lsl fp
200005ec:	fffffec8 			; <UNDEFINED> instruction: 0xfffffec8
200005f0:	fffffea4 			; <UNDEFINED> instruction: 0xfffffea4
200005f4:	fffffe5c 			; <UNDEFINED> instruction: 0xfffffe5c
200005f8:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
200005fc:	200067cc 	andcs	r6, r0, ip, asr #15
20000600:	200067d0 	ldrdcs	r6, [r0], -r0
20000604:	200067e0 	andcs	r6, r0, r0, ror #15
20000608:	200067f4 	strdcs	r6, [r0], -r4
2000060c:	20006808 	andcs	r6, r0, r8, lsl #16
20000610:	20006810 	andcs	r6, r0, r0, lsl r8
20000614:	20006820 	andcs	r6, r0, r0, lsr #16
20000618:	20006834 	andcs	r6, r0, r4, lsr r8
2000061c:	20006848 	andcs	r6, r0, r8, asr #16
20000620:	20006854 	andcs	r6, r0, r4, asr r8
20000624:	20006868 	andcs	r6, r0, r8, ror #16
20000628:	20006878 	andcs	r6, r0, r8, ror r8
2000062c:	20006884 	andcs	r6, r0, r4, lsl #17
20000630:	20006898 	mulcs	r0, r8, r8
20000634:	200068b0 			; <UNDEFINED> instruction: 0x200068b0
20000638:	200068c4 	andcs	r6, r0, r4, asr #17
2000063c:	200068d8 	ldrdcs	r6, [r0], -r8
20000640:	200068ec 	andcs	r6, r0, ip, ror #17
20000644:	20006904 	andcs	r6, r0, r4, lsl #18
20000648:	20006910 	andcs	r6, r0, r0, lsl r9
2000064c:	20006924 	andcs	r6, r0, r4, lsr #18
20000650:	20006938 	andcs	r6, r0, r8, lsr r9
20000654:	20006154 	andcs	r6, r0, r4, asr r1
			
			case SWITCH_LOCK:

				while(read_DIL() == 0){
					draw_game_object(&pressObj);
20000658:	2383      	movs	r3, #131	; 0x83
2000065a:	009b      	lsls	r3, r3, #2
2000065c:	18fb      	adds	r3, r7, r3
2000065e:	0018      	movs	r0, r3
20000660:	f001 fc9c 	bl	20001f9c <draw_game_object>
					show_frame(1);
20000664:	2001      	movs	r0, #1
20000666:	f001 fcda 	bl	2000201e <show_frame>
				while(read_DIL() == 0){
2000066a:	f001 fd41 	bl	200020f0 <read_DIL>
2000066e:	1e03      	subs	r3, r0, #0
20000670:	d0f2      	beq.n	20000658 <main+0x45c>
				}
				
				current_screen = START_SCREEN;
20000672:	4bd6      	ldr	r3, [pc, #856]	; (200009cc <main+0x7d0>)
20000674:	2201      	movs	r2, #1
20000676:	601a      	str	r2, [r3, #0]
			
			
			case START_SCREEN:
				
				counter++;
20000678:	4bd5      	ldr	r3, [pc, #852]	; (200009d0 <main+0x7d4>)
2000067a:	681b      	ldr	r3, [r3, #0]
2000067c:	1c5a      	adds	r2, r3, #1
2000067e:	4bd4      	ldr	r3, [pc, #848]	; (200009d0 <main+0x7d4>)
20000680:	601a      	str	r2, [r3, #0]
				
				if(titleObj.yPos < 1) {
20000682:	2392      	movs	r3, #146	; 0x92
20000684:	009b      	lsls	r3, r3, #2
20000686:	18fb      	adds	r3, r7, r3
20000688:	689b      	ldr	r3, [r3, #8]
2000068a:	2b00      	cmp	r3, #0
2000068c:	dc08      	bgt.n	200006a0 <main+0x4a4>
					titleObj.yPos++;
2000068e:	2392      	movs	r3, #146	; 0x92
20000690:	009b      	lsls	r3, r3, #2
20000692:	18fb      	adds	r3, r7, r3
20000694:	689b      	ldr	r3, [r3, #8]
20000696:	1c5a      	adds	r2, r3, #1
20000698:	2392      	movs	r3, #146	; 0x92
2000069a:	009b      	lsls	r3, r3, #2
2000069c:	18fb      	adds	r3, r7, r3
2000069e:	609a      	str	r2, [r3, #8]
				}
				
				draw_game_object(&castleObj);
200006a0:	23e8      	movs	r3, #232	; 0xe8
200006a2:	005b      	lsls	r3, r3, #1
200006a4:	18fb      	adds	r3, r7, r3
200006a6:	0018      	movs	r0, r3
200006a8:	f001 fc78 	bl	20001f9c <draw_game_object>
				draw_game_object(&fire2);
200006ac:	23b8      	movs	r3, #184	; 0xb8
200006ae:	005b      	lsls	r3, r3, #1
200006b0:	18fb      	adds	r3, r7, r3
200006b2:	0018      	movs	r0, r3
200006b4:	f001 fc72 	bl	20001f9c <draw_game_object>
				draw_game_object(&fire3);
200006b8:	23a6      	movs	r3, #166	; 0xa6
200006ba:	005b      	lsls	r3, r3, #1
200006bc:	18fb      	adds	r3, r7, r3
200006be:	0018      	movs	r0, r3
200006c0:	f001 fc6c 	bl	20001f9c <draw_game_object>
				draw_game_object(&fire1);
200006c4:	1d7b      	adds	r3, r7, #5
200006c6:	33ff      	adds	r3, #255	; 0xff
200006c8:	0018      	movs	r0, r3
200006ca:	f001 fc67 	bl	20001f9c <draw_game_object>
				draw_game_object(&fire4);
200006ce:	2394      	movs	r3, #148	; 0x94
200006d0:	005b      	lsls	r3, r3, #1
200006d2:	18fb      	adds	r3, r7, r3
200006d4:	0018      	movs	r0, r3
200006d6:	f001 fc61 	bl	20001f9c <draw_game_object>
				draw_game_object(&titleObj);
200006da:	2392      	movs	r3, #146	; 0x92
200006dc:	009b      	lsls	r3, r3, #2
200006de:	18fb      	adds	r3, r7, r3
200006e0:	0018      	movs	r0, r3
200006e2:	f001 fc5b 	bl	20001f9c <draw_game_object>
				draw_game_object(&bird);
200006e6:	23ca      	movs	r3, #202	; 0xca
200006e8:	005b      	lsls	r3, r3, #1
200006ea:	18fb      	adds	r3, r7, r3
200006ec:	0018      	movs	r0, r3
200006ee:	f001 fc55 	bl	20001f9c <draw_game_object>
				show_frame(1);
200006f2:	2001      	movs	r0, #1
200006f4:	f001 fc93 	bl	2000201e <show_frame>
				
				static int long_text = 40;
				static int short_text = 20;
				static int delay_until_text = 110;
				
				if (counter < delay_until_text - 25 && counter > delay_until_text - 60)
200006f8:	4bb6      	ldr	r3, [pc, #728]	; (200009d4 <main+0x7d8>)
200006fa:	681b      	ldr	r3, [r3, #0]
200006fc:	3b19      	subs	r3, #25
200006fe:	001a      	movs	r2, r3
20000700:	4bb3      	ldr	r3, [pc, #716]	; (200009d0 <main+0x7d4>)
20000702:	681b      	ldr	r3, [r3, #0]
20000704:	429a      	cmp	r2, r3
20000706:	dd13      	ble.n	20000730 <main+0x534>
20000708:	4bb2      	ldr	r3, [pc, #712]	; (200009d4 <main+0x7d8>)
2000070a:	681b      	ldr	r3, [r3, #0]
2000070c:	3b3c      	subs	r3, #60	; 0x3c
2000070e:	001a      	movs	r2, r3
20000710:	4baf      	ldr	r3, [pc, #700]	; (200009d0 <main+0x7d4>)
20000712:	681b      	ldr	r3, [r3, #0]
20000714:	429a      	cmp	r2, r3
20000716:	da0b      	bge.n	20000730 <main+0x534>
					text_kra.display(&text_kra, 20);
20000718:	4baf      	ldr	r3, [pc, #700]	; (200009d8 <main+0x7dc>)
2000071a:	22aa      	movs	r2, #170	; 0xaa
2000071c:	0092      	lsls	r2, r2, #2
2000071e:	4694      	mov	ip, r2
20000720:	44bc      	add	ip, r7
20000722:	4463      	add	r3, ip
20000724:	691b      	ldr	r3, [r3, #16]
20000726:	22f0      	movs	r2, #240	; 0xf0
20000728:	18ba      	adds	r2, r7, r2
2000072a:	2114      	movs	r1, #20
2000072c:	0010      	movs	r0, r2
2000072e:	4798      	blx	r3
				if (counter == delay_until_text - 25)
20000730:	4ba8      	ldr	r3, [pc, #672]	; (200009d4 <main+0x7d8>)
20000732:	681b      	ldr	r3, [r3, #0]
20000734:	3b19      	subs	r3, #25
20000736:	001a      	movs	r2, r3
20000738:	4ba5      	ldr	r3, [pc, #660]	; (200009d0 <main+0x7d4>)
2000073a:	681b      	ldr	r3, [r3, #0]
2000073c:	429a      	cmp	r2, r3
2000073e:	d101      	bne.n	20000744 <main+0x548>
					clear_ascii();
20000740:	f001 fe9d 	bl	2000247e <clear_ascii>
				
				if (counter < delay_until_text);
20000744:	4ba2      	ldr	r3, [pc, #648]	; (200009d0 <main+0x7d4>)
20000746:	681a      	ldr	r2, [r3, #0]
20000748:	4ba2      	ldr	r3, [pc, #648]	; (200009d4 <main+0x7d8>)
2000074a:	681b      	ldr	r3, [r3, #0]
2000074c:	429a      	cmp	r2, r3
2000074e:	da00      	bge.n	20000752 <main+0x556>
20000750:	e16a      	b.n	20000a28 <main+0x82c>
				else if (counter < delay_until_text + 1*long_text)
20000752:	4ba0      	ldr	r3, [pc, #640]	; (200009d4 <main+0x7d8>)
20000754:	681a      	ldr	r2, [r3, #0]
20000756:	4ba1      	ldr	r3, [pc, #644]	; (200009dc <main+0x7e0>)
20000758:	681b      	ldr	r3, [r3, #0]
2000075a:	18d2      	adds	r2, r2, r3
2000075c:	4b9c      	ldr	r3, [pc, #624]	; (200009d0 <main+0x7d4>)
2000075e:	681b      	ldr	r3, [r3, #0]
20000760:	429a      	cmp	r2, r3
20000762:	dd0c      	ble.n	2000077e <main+0x582>
					text1.display(&text1, 20);
20000764:	4b9e      	ldr	r3, [pc, #632]	; (200009e0 <main+0x7e4>)
20000766:	22aa      	movs	r2, #170	; 0xaa
20000768:	0092      	lsls	r2, r2, #2
2000076a:	4694      	mov	ip, r2
2000076c:	44bc      	add	ip, r7
2000076e:	4463      	add	r3, ip
20000770:	691b      	ldr	r3, [r3, #16]
20000772:	22dc      	movs	r2, #220	; 0xdc
20000774:	18ba      	adds	r2, r7, r2
20000776:	2114      	movs	r1, #20
20000778:	0010      	movs	r0, r2
2000077a:	4798      	blx	r3
2000077c:	e154      	b.n	20000a28 <main+0x82c>
				else if(counter < delay_until_text + 1*long_text + 1*short_text)
2000077e:	4b95      	ldr	r3, [pc, #596]	; (200009d4 <main+0x7d8>)
20000780:	681a      	ldr	r2, [r3, #0]
20000782:	4b96      	ldr	r3, [pc, #600]	; (200009dc <main+0x7e0>)
20000784:	681b      	ldr	r3, [r3, #0]
20000786:	18d2      	adds	r2, r2, r3
20000788:	4b96      	ldr	r3, [pc, #600]	; (200009e4 <main+0x7e8>)
2000078a:	681b      	ldr	r3, [r3, #0]
2000078c:	18d2      	adds	r2, r2, r3
2000078e:	4b90      	ldr	r3, [pc, #576]	; (200009d0 <main+0x7d4>)
20000790:	681b      	ldr	r3, [r3, #0]
20000792:	429a      	cmp	r2, r3
20000794:	dd0c      	ble.n	200007b0 <main+0x5b4>
					text2.display(&text2, 20);
20000796:	4b94      	ldr	r3, [pc, #592]	; (200009e8 <main+0x7ec>)
20000798:	22aa      	movs	r2, #170	; 0xaa
2000079a:	0092      	lsls	r2, r2, #2
2000079c:	4694      	mov	ip, r2
2000079e:	44bc      	add	ip, r7
200007a0:	4463      	add	r3, ip
200007a2:	691b      	ldr	r3, [r3, #16]
200007a4:	22c8      	movs	r2, #200	; 0xc8
200007a6:	18ba      	adds	r2, r7, r2
200007a8:	2114      	movs	r1, #20
200007aa:	0010      	movs	r0, r2
200007ac:	4798      	blx	r3
200007ae:	e13b      	b.n	20000a28 <main+0x82c>
				else if(counter < delay_until_text + 2*long_text + 1*short_text)
200007b0:	4b8a      	ldr	r3, [pc, #552]	; (200009dc <main+0x7e0>)
200007b2:	681b      	ldr	r3, [r3, #0]
200007b4:	005a      	lsls	r2, r3, #1
200007b6:	4b87      	ldr	r3, [pc, #540]	; (200009d4 <main+0x7d8>)
200007b8:	681b      	ldr	r3, [r3, #0]
200007ba:	18d2      	adds	r2, r2, r3
200007bc:	4b89      	ldr	r3, [pc, #548]	; (200009e4 <main+0x7e8>)
200007be:	681b      	ldr	r3, [r3, #0]
200007c0:	18d2      	adds	r2, r2, r3
200007c2:	4b83      	ldr	r3, [pc, #524]	; (200009d0 <main+0x7d4>)
200007c4:	681b      	ldr	r3, [r3, #0]
200007c6:	429a      	cmp	r2, r3
200007c8:	dd0c      	ble.n	200007e4 <main+0x5e8>
					text3.display(&text3, 20);
200007ca:	4b88      	ldr	r3, [pc, #544]	; (200009ec <main+0x7f0>)
200007cc:	22aa      	movs	r2, #170	; 0xaa
200007ce:	0092      	lsls	r2, r2, #2
200007d0:	4694      	mov	ip, r2
200007d2:	44bc      	add	ip, r7
200007d4:	4463      	add	r3, ip
200007d6:	691b      	ldr	r3, [r3, #16]
200007d8:	22b4      	movs	r2, #180	; 0xb4
200007da:	18ba      	adds	r2, r7, r2
200007dc:	2114      	movs	r1, #20
200007de:	0010      	movs	r0, r2
200007e0:	4798      	blx	r3
200007e2:	e121      	b.n	20000a28 <main+0x82c>
				else if(counter < delay_until_text + 2*long_text + 2*short_text)
200007e4:	4b7d      	ldr	r3, [pc, #500]	; (200009dc <main+0x7e0>)
200007e6:	681b      	ldr	r3, [r3, #0]
200007e8:	005a      	lsls	r2, r3, #1
200007ea:	4b7a      	ldr	r3, [pc, #488]	; (200009d4 <main+0x7d8>)
200007ec:	681b      	ldr	r3, [r3, #0]
200007ee:	18d2      	adds	r2, r2, r3
200007f0:	4b7c      	ldr	r3, [pc, #496]	; (200009e4 <main+0x7e8>)
200007f2:	681b      	ldr	r3, [r3, #0]
200007f4:	005b      	lsls	r3, r3, #1
200007f6:	18d2      	adds	r2, r2, r3
200007f8:	4b75      	ldr	r3, [pc, #468]	; (200009d0 <main+0x7d4>)
200007fa:	681b      	ldr	r3, [r3, #0]
200007fc:	429a      	cmp	r2, r3
200007fe:	dd0c      	ble.n	2000081a <main+0x61e>
					text4.display(&text4, 20);
20000800:	4b7b      	ldr	r3, [pc, #492]	; (200009f0 <main+0x7f4>)
20000802:	22aa      	movs	r2, #170	; 0xaa
20000804:	0092      	lsls	r2, r2, #2
20000806:	4694      	mov	ip, r2
20000808:	44bc      	add	ip, r7
2000080a:	4463      	add	r3, ip
2000080c:	691b      	ldr	r3, [r3, #16]
2000080e:	22a0      	movs	r2, #160	; 0xa0
20000810:	18ba      	adds	r2, r7, r2
20000812:	2114      	movs	r1, #20
20000814:	0010      	movs	r0, r2
20000816:	4798      	blx	r3
20000818:	e106      	b.n	20000a28 <main+0x82c>
				else if(counter < delay_until_text + 3*long_text + 2*short_text)
2000081a:	4b70      	ldr	r3, [pc, #448]	; (200009dc <main+0x7e0>)
2000081c:	681a      	ldr	r2, [r3, #0]
2000081e:	0013      	movs	r3, r2
20000820:	005b      	lsls	r3, r3, #1
20000822:	189a      	adds	r2, r3, r2
20000824:	4b6b      	ldr	r3, [pc, #428]	; (200009d4 <main+0x7d8>)
20000826:	681b      	ldr	r3, [r3, #0]
20000828:	18d2      	adds	r2, r2, r3
2000082a:	4b6e      	ldr	r3, [pc, #440]	; (200009e4 <main+0x7e8>)
2000082c:	681b      	ldr	r3, [r3, #0]
2000082e:	005b      	lsls	r3, r3, #1
20000830:	18d2      	adds	r2, r2, r3
20000832:	4b67      	ldr	r3, [pc, #412]	; (200009d0 <main+0x7d4>)
20000834:	681b      	ldr	r3, [r3, #0]
20000836:	429a      	cmp	r2, r3
20000838:	dd0c      	ble.n	20000854 <main+0x658>
					text5.display(&text5, 15);
2000083a:	4b6e      	ldr	r3, [pc, #440]	; (200009f4 <main+0x7f8>)
2000083c:	22aa      	movs	r2, #170	; 0xaa
2000083e:	0092      	lsls	r2, r2, #2
20000840:	4694      	mov	ip, r2
20000842:	44bc      	add	ip, r7
20000844:	4463      	add	r3, ip
20000846:	691b      	ldr	r3, [r3, #16]
20000848:	228c      	movs	r2, #140	; 0x8c
2000084a:	18ba      	adds	r2, r7, r2
2000084c:	210f      	movs	r1, #15
2000084e:	0010      	movs	r0, r2
20000850:	4798      	blx	r3
20000852:	e0e9      	b.n	20000a28 <main+0x82c>
				else if(counter < delay_until_text + 3*long_text + 3*short_text)
20000854:	4b61      	ldr	r3, [pc, #388]	; (200009dc <main+0x7e0>)
20000856:	681a      	ldr	r2, [r3, #0]
20000858:	0013      	movs	r3, r2
2000085a:	005b      	lsls	r3, r3, #1
2000085c:	189a      	adds	r2, r3, r2
2000085e:	4b5d      	ldr	r3, [pc, #372]	; (200009d4 <main+0x7d8>)
20000860:	681b      	ldr	r3, [r3, #0]
20000862:	18d1      	adds	r1, r2, r3
20000864:	4b5f      	ldr	r3, [pc, #380]	; (200009e4 <main+0x7e8>)
20000866:	681a      	ldr	r2, [r3, #0]
20000868:	0013      	movs	r3, r2
2000086a:	005b      	lsls	r3, r3, #1
2000086c:	189b      	adds	r3, r3, r2
2000086e:	18ca      	adds	r2, r1, r3
20000870:	4b57      	ldr	r3, [pc, #348]	; (200009d0 <main+0x7d4>)
20000872:	681b      	ldr	r3, [r3, #0]
20000874:	429a      	cmp	r2, r3
20000876:	dd0c      	ble.n	20000892 <main+0x696>
					text6.display(&text6, 20);
20000878:	4b5f      	ldr	r3, [pc, #380]	; (200009f8 <main+0x7fc>)
2000087a:	22aa      	movs	r2, #170	; 0xaa
2000087c:	0092      	lsls	r2, r2, #2
2000087e:	4694      	mov	ip, r2
20000880:	44bc      	add	ip, r7
20000882:	4463      	add	r3, ip
20000884:	691b      	ldr	r3, [r3, #16]
20000886:	2278      	movs	r2, #120	; 0x78
20000888:	18ba      	adds	r2, r7, r2
2000088a:	2114      	movs	r1, #20
2000088c:	0010      	movs	r0, r2
2000088e:	4798      	blx	r3
20000890:	e0ca      	b.n	20000a28 <main+0x82c>
				else if(counter < delay_until_text + 4*long_text + 3*short_text + 3)
20000892:	4b52      	ldr	r3, [pc, #328]	; (200009dc <main+0x7e0>)
20000894:	681b      	ldr	r3, [r3, #0]
20000896:	009a      	lsls	r2, r3, #2
20000898:	4b4e      	ldr	r3, [pc, #312]	; (200009d4 <main+0x7d8>)
2000089a:	681b      	ldr	r3, [r3, #0]
2000089c:	18d1      	adds	r1, r2, r3
2000089e:	4b51      	ldr	r3, [pc, #324]	; (200009e4 <main+0x7e8>)
200008a0:	681a      	ldr	r2, [r3, #0]
200008a2:	0013      	movs	r3, r2
200008a4:	005b      	lsls	r3, r3, #1
200008a6:	189b      	adds	r3, r3, r2
200008a8:	18cb      	adds	r3, r1, r3
200008aa:	1cda      	adds	r2, r3, #3
200008ac:	4b48      	ldr	r3, [pc, #288]	; (200009d0 <main+0x7d4>)
200008ae:	681b      	ldr	r3, [r3, #0]
200008b0:	429a      	cmp	r2, r3
200008b2:	dd0c      	ble.n	200008ce <main+0x6d2>
					text7.display(&text7, 20);
200008b4:	4b51      	ldr	r3, [pc, #324]	; (200009fc <main+0x800>)
200008b6:	22aa      	movs	r2, #170	; 0xaa
200008b8:	0092      	lsls	r2, r2, #2
200008ba:	4694      	mov	ip, r2
200008bc:	44bc      	add	ip, r7
200008be:	4463      	add	r3, ip
200008c0:	691b      	ldr	r3, [r3, #16]
200008c2:	2264      	movs	r2, #100	; 0x64
200008c4:	18ba      	adds	r2, r7, r2
200008c6:	2114      	movs	r1, #20
200008c8:	0010      	movs	r0, r2
200008ca:	4798      	blx	r3
200008cc:	e0ac      	b.n	20000a28 <main+0x82c>
				else if(counter < delay_until_text + 5*long_text + 3*short_text + 2)
200008ce:	4b43      	ldr	r3, [pc, #268]	; (200009dc <main+0x7e0>)
200008d0:	681a      	ldr	r2, [r3, #0]
200008d2:	0013      	movs	r3, r2
200008d4:	009b      	lsls	r3, r3, #2
200008d6:	189a      	adds	r2, r3, r2
200008d8:	4b3e      	ldr	r3, [pc, #248]	; (200009d4 <main+0x7d8>)
200008da:	681b      	ldr	r3, [r3, #0]
200008dc:	18d1      	adds	r1, r2, r3
200008de:	4b41      	ldr	r3, [pc, #260]	; (200009e4 <main+0x7e8>)
200008e0:	681a      	ldr	r2, [r3, #0]
200008e2:	0013      	movs	r3, r2
200008e4:	005b      	lsls	r3, r3, #1
200008e6:	189b      	adds	r3, r3, r2
200008e8:	18cb      	adds	r3, r1, r3
200008ea:	1c9a      	adds	r2, r3, #2
200008ec:	4b38      	ldr	r3, [pc, #224]	; (200009d0 <main+0x7d4>)
200008ee:	681b      	ldr	r3, [r3, #0]
200008f0:	429a      	cmp	r2, r3
200008f2:	dd0c      	ble.n	2000090e <main+0x712>
					text8.display(&text8, 20);
200008f4:	4b42      	ldr	r3, [pc, #264]	; (20000a00 <main+0x804>)
200008f6:	22aa      	movs	r2, #170	; 0xaa
200008f8:	0092      	lsls	r2, r2, #2
200008fa:	4694      	mov	ip, r2
200008fc:	44bc      	add	ip, r7
200008fe:	4463      	add	r3, ip
20000900:	691b      	ldr	r3, [r3, #16]
20000902:	2250      	movs	r2, #80	; 0x50
20000904:	18ba      	adds	r2, r7, r2
20000906:	2114      	movs	r1, #20
20000908:	0010      	movs	r0, r2
2000090a:	4798      	blx	r3
2000090c:	e08c      	b.n	20000a28 <main+0x82c>
				else if(counter < delay_until_text + 5*long_text + 4*short_text + 2)
2000090e:	4b33      	ldr	r3, [pc, #204]	; (200009dc <main+0x7e0>)
20000910:	681a      	ldr	r2, [r3, #0]
20000912:	0013      	movs	r3, r2
20000914:	009b      	lsls	r3, r3, #2
20000916:	189a      	adds	r2, r3, r2
20000918:	4b2e      	ldr	r3, [pc, #184]	; (200009d4 <main+0x7d8>)
2000091a:	681b      	ldr	r3, [r3, #0]
2000091c:	18d2      	adds	r2, r2, r3
2000091e:	4b31      	ldr	r3, [pc, #196]	; (200009e4 <main+0x7e8>)
20000920:	681b      	ldr	r3, [r3, #0]
20000922:	009b      	lsls	r3, r3, #2
20000924:	18d3      	adds	r3, r2, r3
20000926:	1c9a      	adds	r2, r3, #2
20000928:	4b29      	ldr	r3, [pc, #164]	; (200009d0 <main+0x7d4>)
2000092a:	681b      	ldr	r3, [r3, #0]
2000092c:	429a      	cmp	r2, r3
2000092e:	dd0c      	ble.n	2000094a <main+0x74e>
					text9.display(&text9, 20);
20000930:	4b34      	ldr	r3, [pc, #208]	; (20000a04 <main+0x808>)
20000932:	22aa      	movs	r2, #170	; 0xaa
20000934:	0092      	lsls	r2, r2, #2
20000936:	4694      	mov	ip, r2
20000938:	44bc      	add	ip, r7
2000093a:	4463      	add	r3, ip
2000093c:	691b      	ldr	r3, [r3, #16]
2000093e:	223c      	movs	r2, #60	; 0x3c
20000940:	18ba      	adds	r2, r7, r2
20000942:	2114      	movs	r1, #20
20000944:	0010      	movs	r0, r2
20000946:	4798      	blx	r3
20000948:	e06e      	b.n	20000a28 <main+0x82c>
				else if(counter < delay_until_text + 6*long_text + 4*short_text - 2 + 2)
2000094a:	4b24      	ldr	r3, [pc, #144]	; (200009dc <main+0x7e0>)
2000094c:	681a      	ldr	r2, [r3, #0]
2000094e:	0013      	movs	r3, r2
20000950:	005b      	lsls	r3, r3, #1
20000952:	189b      	adds	r3, r3, r2
20000954:	005b      	lsls	r3, r3, #1
20000956:	001a      	movs	r2, r3
20000958:	4b1e      	ldr	r3, [pc, #120]	; (200009d4 <main+0x7d8>)
2000095a:	681b      	ldr	r3, [r3, #0]
2000095c:	18d2      	adds	r2, r2, r3
2000095e:	4b21      	ldr	r3, [pc, #132]	; (200009e4 <main+0x7e8>)
20000960:	681b      	ldr	r3, [r3, #0]
20000962:	009b      	lsls	r3, r3, #2
20000964:	18d2      	adds	r2, r2, r3
20000966:	4b1a      	ldr	r3, [pc, #104]	; (200009d0 <main+0x7d4>)
20000968:	681b      	ldr	r3, [r3, #0]
2000096a:	429a      	cmp	r2, r3
2000096c:	dd0c      	ble.n	20000988 <main+0x78c>
					text10.display(&text10, 15);
2000096e:	4b26      	ldr	r3, [pc, #152]	; (20000a08 <main+0x80c>)
20000970:	22aa      	movs	r2, #170	; 0xaa
20000972:	0092      	lsls	r2, r2, #2
20000974:	4694      	mov	ip, r2
20000976:	44bc      	add	ip, r7
20000978:	4463      	add	r3, ip
2000097a:	691b      	ldr	r3, [r3, #16]
2000097c:	2228      	movs	r2, #40	; 0x28
2000097e:	18ba      	adds	r2, r7, r2
20000980:	210f      	movs	r1, #15
20000982:	0010      	movs	r0, r2
20000984:	4798      	blx	r3
20000986:	e04f      	b.n	20000a28 <main+0x82c>
				else if(counter < delay_until_text + 6*long_text + 5*short_text + 3 + 2)
20000988:	4b14      	ldr	r3, [pc, #80]	; (200009dc <main+0x7e0>)
2000098a:	681a      	ldr	r2, [r3, #0]
2000098c:	0013      	movs	r3, r2
2000098e:	005b      	lsls	r3, r3, #1
20000990:	189b      	adds	r3, r3, r2
20000992:	005b      	lsls	r3, r3, #1
20000994:	001a      	movs	r2, r3
20000996:	4b0f      	ldr	r3, [pc, #60]	; (200009d4 <main+0x7d8>)
20000998:	681b      	ldr	r3, [r3, #0]
2000099a:	18d1      	adds	r1, r2, r3
2000099c:	4b11      	ldr	r3, [pc, #68]	; (200009e4 <main+0x7e8>)
2000099e:	681a      	ldr	r2, [r3, #0]
200009a0:	0013      	movs	r3, r2
200009a2:	009b      	lsls	r3, r3, #2
200009a4:	189b      	adds	r3, r3, r2
200009a6:	18cb      	adds	r3, r1, r3
200009a8:	1d5a      	adds	r2, r3, #5
200009aa:	4b09      	ldr	r3, [pc, #36]	; (200009d0 <main+0x7d4>)
200009ac:	681b      	ldr	r3, [r3, #0]
200009ae:	429a      	cmp	r2, r3
200009b0:	dd2e      	ble.n	20000a10 <main+0x814>
					text12.display(&text12, 15);
200009b2:	4b16      	ldr	r3, [pc, #88]	; (20000a0c <main+0x810>)
200009b4:	22aa      	movs	r2, #170	; 0xaa
200009b6:	0092      	lsls	r2, r2, #2
200009b8:	4694      	mov	ip, r2
200009ba:	44bc      	add	ip, r7
200009bc:	4463      	add	r3, ip
200009be:	691b      	ldr	r3, [r3, #16]
200009c0:	003a      	movs	r2, r7
200009c2:	210f      	movs	r1, #15
200009c4:	0010      	movs	r0, r2
200009c6:	4798      	blx	r3
200009c8:	e02e      	b.n	20000a28 <main+0x82c>
200009ca:	46c0      	nop			; (mov r8, r8)
200009cc:	20006154 	andcs	r6, r0, r4, asr r1
200009d0:	200028c4 	andcs	r2, r0, r4, asr #17
200009d4:	20006158 	andcs	r6, r0, r8, asr r1
200009d8:	fffffe48 			; <UNDEFINED> instruction: 0xfffffe48
200009dc:	2000615c 	andcs	r6, r0, ip, asr r1
200009e0:	fffffe34 			; <UNDEFINED> instruction: 0xfffffe34
200009e4:	20006160 	andcs	r6, r0, r0, ror #2
200009e8:	fffffe20 			; <UNDEFINED> instruction: 0xfffffe20
200009ec:	fffffe0c 			; <UNDEFINED> instruction: 0xfffffe0c
200009f0:	fffffdf8 			; <UNDEFINED> instruction: 0xfffffdf8
200009f4:	fffffde4 			; <UNDEFINED> instruction: 0xfffffde4
200009f8:	fffffdd0 			; <UNDEFINED> instruction: 0xfffffdd0
200009fc:	fffffdbc 			; <UNDEFINED> instruction: 0xfffffdbc
20000a00:	fffffda8 			; <UNDEFINED> instruction: 0xfffffda8
20000a04:	fffffd94 			; <UNDEFINED> instruction: 0xfffffd94
20000a08:	fffffd80 			; <UNDEFINED> instruction: 0xfffffd80
20000a0c:	fffffd58 			; <UNDEFINED> instruction: 0xfffffd58
				else {
					text11.display(&text11, 20);
20000a10:	4b36      	ldr	r3, [pc, #216]	; (20000aec <main+0x8f0>)
20000a12:	22aa      	movs	r2, #170	; 0xaa
20000a14:	0092      	lsls	r2, r2, #2
20000a16:	4694      	mov	ip, r2
20000a18:	44bc      	add	ip, r7
20000a1a:	4463      	add	r3, ip
20000a1c:	691b      	ldr	r3, [r3, #16]
20000a1e:	2214      	movs	r2, #20
20000a20:	18ba      	adds	r2, r7, r2
20000a22:	2114      	movs	r1, #20
20000a24:	0010      	movs	r0, r2
20000a26:	4798      	blx	r3
				}
				
				
				fire2.update(&fire2);
20000a28:	4b31      	ldr	r3, [pc, #196]	; (20000af0 <main+0x8f4>)
20000a2a:	22aa      	movs	r2, #170	; 0xaa
20000a2c:	0092      	lsls	r2, r2, #2
20000a2e:	4694      	mov	ip, r2
20000a30:	44bc      	add	ip, r7
20000a32:	4463      	add	r3, ip
20000a34:	68db      	ldr	r3, [r3, #12]
20000a36:	22b8      	movs	r2, #184	; 0xb8
20000a38:	0052      	lsls	r2, r2, #1
20000a3a:	18ba      	adds	r2, r7, r2
20000a3c:	0010      	movs	r0, r2
20000a3e:	4798      	blx	r3
				fire3.update(&fire3);
20000a40:	4b2c      	ldr	r3, [pc, #176]	; (20000af4 <main+0x8f8>)
20000a42:	22aa      	movs	r2, #170	; 0xaa
20000a44:	0092      	lsls	r2, r2, #2
20000a46:	4694      	mov	ip, r2
20000a48:	44bc      	add	ip, r7
20000a4a:	4463      	add	r3, ip
20000a4c:	68db      	ldr	r3, [r3, #12]
20000a4e:	22a6      	movs	r2, #166	; 0xa6
20000a50:	0052      	lsls	r2, r2, #1
20000a52:	18ba      	adds	r2, r7, r2
20000a54:	0010      	movs	r0, r2
20000a56:	4798      	blx	r3
				fire1.update(&fire1);
20000a58:	4b27      	ldr	r3, [pc, #156]	; (20000af8 <main+0x8fc>)
20000a5a:	22aa      	movs	r2, #170	; 0xaa
20000a5c:	0092      	lsls	r2, r2, #2
20000a5e:	4694      	mov	ip, r2
20000a60:	44bc      	add	ip, r7
20000a62:	4463      	add	r3, ip
20000a64:	68db      	ldr	r3, [r3, #12]
20000a66:	1d7a      	adds	r2, r7, #5
20000a68:	32ff      	adds	r2, #255	; 0xff
20000a6a:	0010      	movs	r0, r2
20000a6c:	4798      	blx	r3
				fire4.update(&fire4);
20000a6e:	4b23      	ldr	r3, [pc, #140]	; (20000afc <main+0x900>)
20000a70:	22aa      	movs	r2, #170	; 0xaa
20000a72:	0092      	lsls	r2, r2, #2
20000a74:	4694      	mov	ip, r2
20000a76:	44bc      	add	ip, r7
20000a78:	4463      	add	r3, ip
20000a7a:	68db      	ldr	r3, [r3, #12]
20000a7c:	2294      	movs	r2, #148	; 0x94
20000a7e:	0052      	lsls	r2, r2, #1
20000a80:	18ba      	adds	r2, r7, r2
20000a82:	0010      	movs	r0, r2
20000a84:	4798      	blx	r3
				bird.update(&bird);
20000a86:	4b1e      	ldr	r3, [pc, #120]	; (20000b00 <main+0x904>)
20000a88:	22aa      	movs	r2, #170	; 0xaa
20000a8a:	0092      	lsls	r2, r2, #2
20000a8c:	4694      	mov	ip, r2
20000a8e:	44bc      	add	ip, r7
20000a90:	4463      	add	r3, ip
20000a92:	68db      	ldr	r3, [r3, #12]
20000a94:	22ca      	movs	r2, #202	; 0xca
20000a96:	0052      	lsls	r2, r2, #1
20000a98:	18ba      	adds	r2, r7, r2
20000a9a:	0010      	movs	r0, r2
20000a9c:	4798      	blx	r3
				bird.xPos -= 2;
20000a9e:	4b18      	ldr	r3, [pc, #96]	; (20000b00 <main+0x904>)
20000aa0:	22aa      	movs	r2, #170	; 0xaa
20000aa2:	0092      	lsls	r2, r2, #2
20000aa4:	4694      	mov	ip, r2
20000aa6:	44bc      	add	ip, r7
20000aa8:	4463      	add	r3, ip
20000aaa:	685b      	ldr	r3, [r3, #4]
20000aac:	1e9a      	subs	r2, r3, #2
20000aae:	4b14      	ldr	r3, [pc, #80]	; (20000b00 <main+0x904>)
20000ab0:	21aa      	movs	r1, #170	; 0xaa
20000ab2:	0089      	lsls	r1, r1, #2
20000ab4:	468c      	mov	ip, r1
20000ab6:	44bc      	add	ip, r7
20000ab8:	4463      	add	r3, ip
20000aba:	605a      	str	r2, [r3, #4]
				if (counter % 2 == 0) {
20000abc:	4b11      	ldr	r3, [pc, #68]	; (20000b04 <main+0x908>)
20000abe:	681b      	ldr	r3, [r3, #0]
20000ac0:	001a      	movs	r2, r3
20000ac2:	2301      	movs	r3, #1
20000ac4:	4013      	ands	r3, r2
20000ac6:	d000      	beq.n	20000aca <main+0x8ce>
20000ac8:	e568      	b.n	2000059c <main+0x3a0>
					bird.yPos--;
20000aca:	4b0d      	ldr	r3, [pc, #52]	; (20000b00 <main+0x904>)
20000acc:	22aa      	movs	r2, #170	; 0xaa
20000ace:	0092      	lsls	r2, r2, #2
20000ad0:	4694      	mov	ip, r2
20000ad2:	44bc      	add	ip, r7
20000ad4:	4463      	add	r3, ip
20000ad6:	689b      	ldr	r3, [r3, #8]
20000ad8:	1e5a      	subs	r2, r3, #1
20000ada:	4b09      	ldr	r3, [pc, #36]	; (20000b00 <main+0x904>)
20000adc:	21aa      	movs	r1, #170	; 0xaa
20000ade:	0089      	lsls	r1, r1, #2
20000ae0:	468c      	mov	ip, r1
20000ae2:	44bc      	add	ip, r7
20000ae4:	4463      	add	r3, ip
20000ae6:	609a      	str	r2, [r3, #8]
		switch(current_screen) {
20000ae8:	e558      	b.n	2000059c <main+0x3a0>
20000aea:	46c0      	nop			; (mov r8, r8)
20000aec:	fffffd6c 			; <UNDEFINED> instruction: 0xfffffd6c
20000af0:	fffffec8 			; <UNDEFINED> instruction: 0xfffffec8
20000af4:	fffffea4 			; <UNDEFINED> instruction: 0xfffffea4
20000af8:	fffffe5c 			; <UNDEFINED> instruction: 0xfffffe5c
20000afc:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20000b00:	fffffeec 			; <UNDEFINED> instruction: 0xfffffeec
20000b04:	200028c4 	andcs	r2, r0, r4, asr #17

20000b08 <render>:
GameObject* gameObjects[100];
int nGameObjects = 0;


void render(GameObject* this)
{
20000b08:	b580      	push	{r7, lr}
20000b0a:	b082      	sub	sp, #8
20000b0c:	af00      	add	r7, sp, #0
20000b0e:	6078      	str	r0, [r7, #4]
    
}
20000b10:	46c0      	nop			; (mov r8, r8)
20000b12:	46bd      	mov	sp, r7
20000b14:	b002      	add	sp, #8
20000b16:	bd80      	pop	{r7, pc}

20000b18 <gameObjectUpdate>:

void gameObjectUpdate(GameObject *this) {
20000b18:	b580      	push	{r7, lr}
20000b1a:	b082      	sub	sp, #8
20000b1c:	af00      	add	r7, sp, #0
20000b1e:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
20000b20:	687b      	ldr	r3, [r7, #4]
20000b22:	6a1b      	ldr	r3, [r3, #32]
20000b24:	1c5a      	adds	r2, r3, #1
20000b26:	687b      	ldr	r3, [r7, #4]
20000b28:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
20000b2a:	687b      	ldr	r3, [r7, #4]
20000b2c:	6a1a      	ldr	r2, [r3, #32]
20000b2e:	687b      	ldr	r3, [r7, #4]
20000b30:	69db      	ldr	r3, [r3, #28]
20000b32:	429a      	cmp	r2, r3
20000b34:	d10f      	bne.n	20000b56 <gameObjectUpdate+0x3e>
		this->animation_counter = 0;
20000b36:	687b      	ldr	r3, [r7, #4]
20000b38:	2200      	movs	r2, #0
20000b3a:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20000b3c:	687b      	ldr	r3, [r7, #4]
20000b3e:	695b      	ldr	r3, [r3, #20]
20000b40:	1c5a      	adds	r2, r3, #1
20000b42:	687b      	ldr	r3, [r7, #4]
20000b44:	699b      	ldr	r3, [r3, #24]
20000b46:	0019      	movs	r1, r3
20000b48:	0010      	movs	r0, r2
20000b4a:	f001 feb5 	bl	200028b8 <__aeabi_idivmod>
20000b4e:	000b      	movs	r3, r1
20000b50:	001a      	movs	r2, r3
20000b52:	687b      	ldr	r3, [r7, #4]
20000b54:	615a      	str	r2, [r3, #20]
	}
}
20000b56:	46c0      	nop			; (mov r8, r8)
20000b58:	46bd      	mov	sp, r7
20000b5a:	b002      	add	sp, #8
20000b5c:	bd80      	pop	{r7, pc}
	...

20000b60 <initSprites>:
Image fire2Image;
Image fire3Image;
Image fire4Image;
Image fire5Image;
Image fireImages[5];
static void initSprites( void ) {	
20000b60:	b580      	push	{r7, lr}
20000b62:	b08c      	sub	sp, #48	; 0x30
20000b64:	af00      	add	r7, sp, #0
	sprite *pointer0 = &tempFireBlack;
20000b66:	4b3e      	ldr	r3, [pc, #248]	; (20000c60 <initSprites+0x100>)
20000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer0, fire_black_2_bits, fire1_gray_width, fire1_gray_height);
20000b6a:	493e      	ldr	r1, [pc, #248]	; (20000c64 <initSprites+0x104>)
20000b6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20000b6e:	230c      	movs	r3, #12
20000b70:	2208      	movs	r2, #8
20000b72:	f001 fa9d 	bl	200020b0 <load_sprite>
	fireBlack = pointer0;
20000b76:	4b3c      	ldr	r3, [pc, #240]	; (20000c68 <initSprites+0x108>)
20000b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20000b7a:	601a      	str	r2, [r3, #0]
	
	sprite *pointer1 = &tempFire1Gray;
20000b7c:	4b3b      	ldr	r3, [pc, #236]	; (20000c6c <initSprites+0x10c>)
20000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer1, fire1_gray_bits, fire1_gray_width, fire1_gray_height);
20000b80:	493b      	ldr	r1, [pc, #236]	; (20000c70 <initSprites+0x110>)
20000b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20000b84:	230c      	movs	r3, #12
20000b86:	2208      	movs	r2, #8
20000b88:	f001 fa92 	bl	200020b0 <load_sprite>
	fire1Gray = pointer1;
20000b8c:	4b39      	ldr	r3, [pc, #228]	; (20000c74 <initSprites+0x114>)
20000b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
20000b90:	601a      	str	r2, [r3, #0]

	sprite *pointer2 = &tempFire1Light;
20000b92:	4b39      	ldr	r3, [pc, #228]	; (20000c78 <initSprites+0x118>)
20000b94:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer2, fire1_light_bits, fire1_gray_width, fire1_gray_height);
20000b96:	4939      	ldr	r1, [pc, #228]	; (20000c7c <initSprites+0x11c>)
20000b98:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000b9a:	230c      	movs	r3, #12
20000b9c:	2208      	movs	r2, #8
20000b9e:	f001 fa87 	bl	200020b0 <load_sprite>
	fire1Light = pointer2;
20000ba2:	4b37      	ldr	r3, [pc, #220]	; (20000c80 <initSprites+0x120>)
20000ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000ba6:	601a      	str	r2, [r3, #0]

	sprite *pointer3 = &tempFire2Gray;
20000ba8:	4b36      	ldr	r3, [pc, #216]	; (20000c84 <initSprites+0x124>)
20000baa:	623b      	str	r3, [r7, #32]
	load_sprite(pointer3, fire2_gray_bits, fire1_gray_width, fire1_gray_height);
20000bac:	4936      	ldr	r1, [pc, #216]	; (20000c88 <initSprites+0x128>)
20000bae:	6a38      	ldr	r0, [r7, #32]
20000bb0:	230c      	movs	r3, #12
20000bb2:	2208      	movs	r2, #8
20000bb4:	f001 fa7c 	bl	200020b0 <load_sprite>
	fire2Gray = pointer3;
20000bb8:	4b34      	ldr	r3, [pc, #208]	; (20000c8c <initSprites+0x12c>)
20000bba:	6a3a      	ldr	r2, [r7, #32]
20000bbc:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempFire2Light;
20000bbe:	4b34      	ldr	r3, [pc, #208]	; (20000c90 <initSprites+0x130>)
20000bc0:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer4, fire2_light_bits, fire1_gray_width, fire1_gray_height);
20000bc2:	4934      	ldr	r1, [pc, #208]	; (20000c94 <initSprites+0x134>)
20000bc4:	69f8      	ldr	r0, [r7, #28]
20000bc6:	230c      	movs	r3, #12
20000bc8:	2208      	movs	r2, #8
20000bca:	f001 fa71 	bl	200020b0 <load_sprite>
	fire2Light = pointer4;
20000bce:	4b32      	ldr	r3, [pc, #200]	; (20000c98 <initSprites+0x138>)
20000bd0:	69fa      	ldr	r2, [r7, #28]
20000bd2:	601a      	str	r2, [r3, #0]

	sprite *pointer5 = &tempFire3Gray;
20000bd4:	4b31      	ldr	r3, [pc, #196]	; (20000c9c <initSprites+0x13c>)
20000bd6:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer5, fire3_gray_bits, fire1_gray_width, fire1_gray_height);
20000bd8:	4931      	ldr	r1, [pc, #196]	; (20000ca0 <initSprites+0x140>)
20000bda:	69b8      	ldr	r0, [r7, #24]
20000bdc:	230c      	movs	r3, #12
20000bde:	2208      	movs	r2, #8
20000be0:	f001 fa66 	bl	200020b0 <load_sprite>
	fire3Gray = pointer5;
20000be4:	4b2f      	ldr	r3, [pc, #188]	; (20000ca4 <initSprites+0x144>)
20000be6:	69ba      	ldr	r2, [r7, #24]
20000be8:	601a      	str	r2, [r3, #0]

	sprite *pointer6 = &tempFire3Light;
20000bea:	4b2f      	ldr	r3, [pc, #188]	; (20000ca8 <initSprites+0x148>)
20000bec:	617b      	str	r3, [r7, #20]
	load_sprite(pointer6, fire3_light_bits, fire1_gray_width, fire1_gray_height);
20000bee:	492f      	ldr	r1, [pc, #188]	; (20000cac <initSprites+0x14c>)
20000bf0:	6978      	ldr	r0, [r7, #20]
20000bf2:	230c      	movs	r3, #12
20000bf4:	2208      	movs	r2, #8
20000bf6:	f001 fa5b 	bl	200020b0 <load_sprite>
	fire3Light = pointer6;
20000bfa:	4b2d      	ldr	r3, [pc, #180]	; (20000cb0 <initSprites+0x150>)
20000bfc:	697a      	ldr	r2, [r7, #20]
20000bfe:	601a      	str	r2, [r3, #0]

	sprite *pointer7 = &tempFire4Gray;
20000c00:	4b2c      	ldr	r3, [pc, #176]	; (20000cb4 <initSprites+0x154>)
20000c02:	613b      	str	r3, [r7, #16]
	load_sprite(pointer7, fire4_gray_bits, fire1_gray_width, fire1_gray_height);
20000c04:	492c      	ldr	r1, [pc, #176]	; (20000cb8 <initSprites+0x158>)
20000c06:	6938      	ldr	r0, [r7, #16]
20000c08:	230c      	movs	r3, #12
20000c0a:	2208      	movs	r2, #8
20000c0c:	f001 fa50 	bl	200020b0 <load_sprite>
	fire4Gray = pointer7;
20000c10:	4b2a      	ldr	r3, [pc, #168]	; (20000cbc <initSprites+0x15c>)
20000c12:	693a      	ldr	r2, [r7, #16]
20000c14:	601a      	str	r2, [r3, #0]

	sprite *pointer8 = &tempFire4Light;
20000c16:	4b2a      	ldr	r3, [pc, #168]	; (20000cc0 <initSprites+0x160>)
20000c18:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer8, fire4_light_bits, fire1_gray_width, fire1_gray_height);
20000c1a:	492a      	ldr	r1, [pc, #168]	; (20000cc4 <initSprites+0x164>)
20000c1c:	68f8      	ldr	r0, [r7, #12]
20000c1e:	230c      	movs	r3, #12
20000c20:	2208      	movs	r2, #8
20000c22:	f001 fa45 	bl	200020b0 <load_sprite>
	fire4Light = pointer8;
20000c26:	4b28      	ldr	r3, [pc, #160]	; (20000cc8 <initSprites+0x168>)
20000c28:	68fa      	ldr	r2, [r7, #12]
20000c2a:	601a      	str	r2, [r3, #0]

	sprite *pointer9 = &tempFire5Gray;
20000c2c:	4b27      	ldr	r3, [pc, #156]	; (20000ccc <initSprites+0x16c>)
20000c2e:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer9, fire5_gray_bits, fire1_gray_width, fire1_gray_height);
20000c30:	4927      	ldr	r1, [pc, #156]	; (20000cd0 <initSprites+0x170>)
20000c32:	68b8      	ldr	r0, [r7, #8]
20000c34:	230c      	movs	r3, #12
20000c36:	2208      	movs	r2, #8
20000c38:	f001 fa3a 	bl	200020b0 <load_sprite>
	fire5Gray = pointer9;
20000c3c:	4b25      	ldr	r3, [pc, #148]	; (20000cd4 <initSprites+0x174>)
20000c3e:	68ba      	ldr	r2, [r7, #8]
20000c40:	601a      	str	r2, [r3, #0]

	sprite *pointer10 = &tempFire5Light;
20000c42:	4b25      	ldr	r3, [pc, #148]	; (20000cd8 <initSprites+0x178>)
20000c44:	607b      	str	r3, [r7, #4]
	load_sprite(pointer10, fire5_light_bits, fire1_gray_width, fire1_gray_height);
20000c46:	4925      	ldr	r1, [pc, #148]	; (20000cdc <initSprites+0x17c>)
20000c48:	6878      	ldr	r0, [r7, #4]
20000c4a:	230c      	movs	r3, #12
20000c4c:	2208      	movs	r2, #8
20000c4e:	f001 fa2f 	bl	200020b0 <load_sprite>
	fire5Light = pointer10;
20000c52:	4b23      	ldr	r3, [pc, #140]	; (20000ce0 <initSprites+0x180>)
20000c54:	687a      	ldr	r2, [r7, #4]
20000c56:	601a      	str	r2, [r3, #0]
}
20000c58:	46c0      	nop			; (mov r8, r8)
20000c5a:	46bd      	mov	sp, r7
20000c5c:	b00c      	add	sp, #48	; 0x30
20000c5e:	bd80      	pop	{r7, pc}
20000c60:	20002b70 	andcs	r2, r0, r0, ror fp
20000c64:	20006164 	andcs	r6, r0, r4, ror #2
20000c68:	20002c68 	andcs	r2, r0, r8, ror #24
20000c6c:	20002c5c 	andcs	r2, r0, ip, asr ip
20000c70:	20006170 	andcs	r6, r0, r0, ror r1
20000c74:	20002c80 	andcs	r2, r0, r0, lsl #25
20000c78:	20002c38 	andcs	r2, r0, r8, lsr ip
20000c7c:	2000617c 	andcs	r6, r0, ip, ror r1
20000c80:	20002b38 	andcs	r2, r0, r8, lsr fp
20000c84:	20002b64 	andcs	r2, r0, r4, ror #22
20000c88:	20006188 	andcs	r6, r0, r8, lsl #3
20000c8c:	20002c7c 	andcs	r2, r0, ip, ror ip
20000c90:	20002c6c 	andcs	r2, r0, ip, ror #24
20000c94:	20006194 	mulcs	r0, r4, r1
20000c98:	20002c54 	andcs	r2, r0, r4, asr ip
20000c9c:	20002c1c 	andcs	r2, r0, ip, lsl ip
20000ca0:	200061a0 	andcs	r6, r0, r0, lsr #3
20000ca4:	20002b48 	andcs	r2, r0, r8, asr #22
20000ca8:	20002b3c 	andcs	r2, r0, ip, lsr fp
20000cac:	200061ac 	andcs	r6, r0, ip, lsr #3
20000cb0:	20002c78 	andcs	r2, r0, r8, ror ip
20000cb4:	20002b4c 	andcs	r2, r0, ip, asr #22
20000cb8:	200061b8 			; <UNDEFINED> instruction: 0x200061b8
20000cbc:	20002c34 	andcs	r2, r0, r4, lsr ip
20000cc0:	20002b88 	andcs	r2, r0, r8, lsl #23
20000cc4:	200061c4 	andcs	r6, r0, r4, asr #3
20000cc8:	20002ba0 	andcs	r2, r0, r0, lsr #23
20000ccc:	20002c10 	andcs	r2, r0, r0, lsl ip
20000cd0:	200061d0 	ldrdcs	r6, [r0], -r0
20000cd4:	20002c50 	andcs	r2, r0, r0, asr ip
20000cd8:	20002c44 	andcs	r2, r0, r4, asr #24
20000cdc:	200061dc 	ldrdcs	r6, [r0], -ip
20000ce0:	20002c58 	andcs	r2, r0, r8, asr ip

20000ce4 <init_fire>:
	
void init_fire( GameObject *fireObj ) {
20000ce4:	b590      	push	{r4, r7, lr}
20000ce6:	b083      	sub	sp, #12
20000ce8:	af00      	add	r7, sp, #0
20000cea:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20000cec:	4b30      	ldr	r3, [pc, #192]	; (20000db0 <init_fire+0xcc>)
20000cee:	681b      	ldr	r3, [r3, #0]
20000cf0:	2b00      	cmp	r3, #0
20000cf2:	d049      	beq.n	20000d88 <init_fire+0xa4>
		initSprites();
20000cf4:	f7ff ff34 	bl	20000b60 <initSprites>
		firstTime = 0;			
20000cf8:	4b2d      	ldr	r3, [pc, #180]	; (20000db0 <init_fire+0xcc>)
20000cfa:	2200      	movs	r2, #0
20000cfc:	601a      	str	r2, [r3, #0]

		fireImages[0] = fire1Image;
20000cfe:	4b2d      	ldr	r3, [pc, #180]	; (20000db4 <init_fire+0xd0>)
20000d00:	4a2d      	ldr	r2, [pc, #180]	; (20000db8 <init_fire+0xd4>)
20000d02:	ca13      	ldmia	r2!, {r0, r1, r4}
20000d04:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[1] = fire2Image;
20000d06:	4b2b      	ldr	r3, [pc, #172]	; (20000db4 <init_fire+0xd0>)
20000d08:	4a2c      	ldr	r2, [pc, #176]	; (20000dbc <init_fire+0xd8>)
20000d0a:	330c      	adds	r3, #12
20000d0c:	ca13      	ldmia	r2!, {r0, r1, r4}
20000d0e:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[2] = fire3Image;
20000d10:	4b28      	ldr	r3, [pc, #160]	; (20000db4 <init_fire+0xd0>)
20000d12:	4a2b      	ldr	r2, [pc, #172]	; (20000dc0 <init_fire+0xdc>)
20000d14:	3318      	adds	r3, #24
20000d16:	ca13      	ldmia	r2!, {r0, r1, r4}
20000d18:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[3] = fire4Image;
20000d1a:	4b26      	ldr	r3, [pc, #152]	; (20000db4 <init_fire+0xd0>)
20000d1c:	4a29      	ldr	r2, [pc, #164]	; (20000dc4 <init_fire+0xe0>)
20000d1e:	3324      	adds	r3, #36	; 0x24
20000d20:	ca13      	ldmia	r2!, {r0, r1, r4}
20000d22:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[4] = fire5Image;
20000d24:	4b23      	ldr	r3, [pc, #140]	; (20000db4 <init_fire+0xd0>)
20000d26:	4a28      	ldr	r2, [pc, #160]	; (20000dc8 <init_fire+0xe4>)
20000d28:	3330      	adds	r3, #48	; 0x30
20000d2a:	ca13      	ldmia	r2!, {r0, r1, r4}
20000d2c:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&fireImages[0], fire1Gray, fire1Light, fireBlack);
20000d2e:	4b27      	ldr	r3, [pc, #156]	; (20000dcc <init_fire+0xe8>)
20000d30:	6819      	ldr	r1, [r3, #0]
20000d32:	4b27      	ldr	r3, [pc, #156]	; (20000dd0 <init_fire+0xec>)
20000d34:	681a      	ldr	r2, [r3, #0]
20000d36:	4b27      	ldr	r3, [pc, #156]	; (20000dd4 <init_fire+0xf0>)
20000d38:	681b      	ldr	r3, [r3, #0]
20000d3a:	481e      	ldr	r0, [pc, #120]	; (20000db4 <init_fire+0xd0>)
20000d3c:	f001 f9a4 	bl	20002088 <load_image>
		load_image(&fireImages[1], fire2Gray, fire2Light, fireBlack);
20000d40:	4b25      	ldr	r3, [pc, #148]	; (20000dd8 <init_fire+0xf4>)
20000d42:	6819      	ldr	r1, [r3, #0]
20000d44:	4b25      	ldr	r3, [pc, #148]	; (20000ddc <init_fire+0xf8>)
20000d46:	681a      	ldr	r2, [r3, #0]
20000d48:	4b22      	ldr	r3, [pc, #136]	; (20000dd4 <init_fire+0xf0>)
20000d4a:	681b      	ldr	r3, [r3, #0]
20000d4c:	4824      	ldr	r0, [pc, #144]	; (20000de0 <init_fire+0xfc>)
20000d4e:	f001 f99b 	bl	20002088 <load_image>
		load_image(&fireImages[2], fire3Gray, fire3Light, fireBlack);
20000d52:	4b24      	ldr	r3, [pc, #144]	; (20000de4 <init_fire+0x100>)
20000d54:	6819      	ldr	r1, [r3, #0]
20000d56:	4b24      	ldr	r3, [pc, #144]	; (20000de8 <init_fire+0x104>)
20000d58:	681a      	ldr	r2, [r3, #0]
20000d5a:	4b1e      	ldr	r3, [pc, #120]	; (20000dd4 <init_fire+0xf0>)
20000d5c:	681b      	ldr	r3, [r3, #0]
20000d5e:	4823      	ldr	r0, [pc, #140]	; (20000dec <init_fire+0x108>)
20000d60:	f001 f992 	bl	20002088 <load_image>
		load_image(&fireImages[3], fire4Gray, fire4Light, fireBlack);
20000d64:	4b22      	ldr	r3, [pc, #136]	; (20000df0 <init_fire+0x10c>)
20000d66:	6819      	ldr	r1, [r3, #0]
20000d68:	4b22      	ldr	r3, [pc, #136]	; (20000df4 <init_fire+0x110>)
20000d6a:	681a      	ldr	r2, [r3, #0]
20000d6c:	4b19      	ldr	r3, [pc, #100]	; (20000dd4 <init_fire+0xf0>)
20000d6e:	681b      	ldr	r3, [r3, #0]
20000d70:	4821      	ldr	r0, [pc, #132]	; (20000df8 <init_fire+0x114>)
20000d72:	f001 f989 	bl	20002088 <load_image>
		load_image(&fireImages[4], fire5Gray, fire5Light, fireBlack);
20000d76:	4b21      	ldr	r3, [pc, #132]	; (20000dfc <init_fire+0x118>)
20000d78:	6819      	ldr	r1, [r3, #0]
20000d7a:	4b21      	ldr	r3, [pc, #132]	; (20000e00 <init_fire+0x11c>)
20000d7c:	681a      	ldr	r2, [r3, #0]
20000d7e:	4b15      	ldr	r3, [pc, #84]	; (20000dd4 <init_fire+0xf0>)
20000d80:	681b      	ldr	r3, [r3, #0]
20000d82:	4820      	ldr	r0, [pc, #128]	; (20000e04 <init_fire+0x120>)
20000d84:	f001 f980 	bl	20002088 <load_image>
	}
	
	fireObj->images = fireImages;
20000d88:	687b      	ldr	r3, [r7, #4]
20000d8a:	4a0a      	ldr	r2, [pc, #40]	; (20000db4 <init_fire+0xd0>)
20000d8c:	601a      	str	r2, [r3, #0]

	fireObj->current_frame = 0;
20000d8e:	687b      	ldr	r3, [r7, #4]
20000d90:	2200      	movs	r2, #0
20000d92:	615a      	str	r2, [r3, #20]
	fireObj->n_frames = 5;
20000d94:	687b      	ldr	r3, [r7, #4]
20000d96:	2205      	movs	r2, #5
20000d98:	619a      	str	r2, [r3, #24]
	fireObj->animation_speed = 1;
20000d9a:	687b      	ldr	r3, [r7, #4]
20000d9c:	2201      	movs	r2, #1
20000d9e:	61da      	str	r2, [r3, #28]
	fireObj->animation_counter = 0;
20000da0:	687b      	ldr	r3, [r7, #4]
20000da2:	2200      	movs	r2, #0
20000da4:	621a      	str	r2, [r3, #32]
}
20000da6:	46c0      	nop			; (mov r8, r8)
20000da8:	46bd      	mov	sp, r7
20000daa:	b003      	add	sp, #12
20000dac:	bd90      	pop	{r4, r7, pc}
20000dae:	46c0      	nop			; (mov r8, r8)
20000db0:	200061e8 	andcs	r6, r0, r8, ror #3
20000db4:	20002bd4 	ldrdcs	r2, [r0], -r4
20000db8:	20002b94 	mulcs	r0, r4, fp
20000dbc:	20002b58 	andcs	r2, r0, r8, asr fp
20000dc0:	20002b7c 	andcs	r2, r0, ip, ror fp
20000dc4:	20002c28 	andcs	r2, r0, r8, lsr #24
20000dc8:	20002bc8 	andcs	r2, r0, r8, asr #23
20000dcc:	20002c80 	andcs	r2, r0, r0, lsl #25
20000dd0:	20002b38 	andcs	r2, r0, r8, lsr fp
20000dd4:	20002c68 	andcs	r2, r0, r8, ror #24
20000dd8:	20002c7c 	andcs	r2, r0, ip, ror ip
20000ddc:	20002c54 	andcs	r2, r0, r4, asr ip
20000de0:	20002be0 	andcs	r2, r0, r0, ror #23
20000de4:	20002b48 	andcs	r2, r0, r8, asr #22
20000de8:	20002c78 	andcs	r2, r0, r8, ror ip
20000dec:	20002bec 	andcs	r2, r0, ip, ror #23
20000df0:	20002c34 	andcs	r2, r0, r4, lsr ip
20000df4:	20002ba0 	andcs	r2, r0, r0, lsr #23
20000df8:	20002bf8 	strdcs	r2, [r0], -r8
20000dfc:	20002c50 	andcs	r2, r0, r0, asr ip
20000e00:	20002c58 	andcs	r2, r0, r8, asr ip
20000e04:	20002c04 	andcs	r2, r0, r4, lsl #24

20000e08 <playerUpdate>:
#include "gpio.h"
#include "controls.h"
#include "gameobject.h"
#include "player.h"

void playerUpdate(GameObject *this) {
20000e08:	b580      	push	{r7, lr}
20000e0a:	b082      	sub	sp, #8
20000e0c:	af00      	add	r7, sp, #0
20000e0e:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
20000e10:	687b      	ldr	r3, [r7, #4]
20000e12:	6a1b      	ldr	r3, [r3, #32]
20000e14:	1c5a      	adds	r2, r3, #1
20000e16:	687b      	ldr	r3, [r7, #4]
20000e18:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
20000e1a:	687b      	ldr	r3, [r7, #4]
20000e1c:	6a1a      	ldr	r2, [r3, #32]
20000e1e:	687b      	ldr	r3, [r7, #4]
20000e20:	69db      	ldr	r3, [r3, #28]
20000e22:	429a      	cmp	r2, r3
20000e24:	d10f      	bne.n	20000e46 <playerUpdate+0x3e>
		this->animation_counter = 0;
20000e26:	687b      	ldr	r3, [r7, #4]
20000e28:	2200      	movs	r2, #0
20000e2a:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20000e2c:	687b      	ldr	r3, [r7, #4]
20000e2e:	695b      	ldr	r3, [r3, #20]
20000e30:	1c5a      	adds	r2, r3, #1
20000e32:	687b      	ldr	r3, [r7, #4]
20000e34:	699b      	ldr	r3, [r3, #24]
20000e36:	0019      	movs	r1, r3
20000e38:	0010      	movs	r0, r2
20000e3a:	f001 fd3d 	bl	200028b8 <__aeabi_idivmod>
20000e3e:	000b      	movs	r3, r1
20000e40:	001a      	movs	r2, r3
20000e42:	687b      	ldr	r3, [r7, #4]
20000e44:	615a      	str	r2, [r3, #20]
	
	static lastRightValue = 0;
	static lastLeftValue = 0; 
	static speed = 0;
	
	if (!lastRightValue && read_DIL_single(RIGHT_TRIGGER)){
20000e46:	4b23      	ldr	r3, [pc, #140]	; (20000ed4 <playerUpdate+0xcc>)
20000e48:	681b      	ldr	r3, [r3, #0]
20000e4a:	2b00      	cmp	r3, #0
20000e4c:	d109      	bne.n	20000e62 <playerUpdate+0x5a>
20000e4e:	2000      	movs	r0, #0
20000e50:	f001 f958 	bl	20002104 <read_DIL_single>
20000e54:	1e03      	subs	r3, r0, #0
20000e56:	d004      	beq.n	20000e62 <playerUpdate+0x5a>
		speed += SPEED_ADD;
20000e58:	4b1f      	ldr	r3, [pc, #124]	; (20000ed8 <playerUpdate+0xd0>)
20000e5a:	681b      	ldr	r3, [r3, #0]
20000e5c:	1cda      	adds	r2, r3, #3
20000e5e:	4b1e      	ldr	r3, [pc, #120]	; (20000ed8 <playerUpdate+0xd0>)
20000e60:	601a      	str	r2, [r3, #0]
	}
	
	if (!lastLeftValue && read_DIL_single(LEFT_TRIGGER)){
20000e62:	4b1e      	ldr	r3, [pc, #120]	; (20000edc <playerUpdate+0xd4>)
20000e64:	681b      	ldr	r3, [r3, #0]
20000e66:	2b00      	cmp	r3, #0
20000e68:	d109      	bne.n	20000e7e <playerUpdate+0x76>
20000e6a:	2007      	movs	r0, #7
20000e6c:	f001 f94a 	bl	20002104 <read_DIL_single>
20000e70:	1e03      	subs	r3, r0, #0
20000e72:	d004      	beq.n	20000e7e <playerUpdate+0x76>
		speed -= SPEED_ADD;
20000e74:	4b18      	ldr	r3, [pc, #96]	; (20000ed8 <playerUpdate+0xd0>)
20000e76:	681b      	ldr	r3, [r3, #0]
20000e78:	1eda      	subs	r2, r3, #3
20000e7a:	4b17      	ldr	r3, [pc, #92]	; (20000ed8 <playerUpdate+0xd0>)
20000e7c:	601a      	str	r2, [r3, #0]
	}
	
	this->xPos += speed;
20000e7e:	687b      	ldr	r3, [r7, #4]
20000e80:	685a      	ldr	r2, [r3, #4]
20000e82:	4b15      	ldr	r3, [pc, #84]	; (20000ed8 <playerUpdate+0xd0>)
20000e84:	681b      	ldr	r3, [r3, #0]
20000e86:	18d2      	adds	r2, r2, r3
20000e88:	687b      	ldr	r3, [r7, #4]
20000e8a:	605a      	str	r2, [r3, #4]
	
	if (speed > 0){
20000e8c:	4b12      	ldr	r3, [pc, #72]	; (20000ed8 <playerUpdate+0xd0>)
20000e8e:	681b      	ldr	r3, [r3, #0]
20000e90:	2b00      	cmp	r3, #0
20000e92:	dd05      	ble.n	20000ea0 <playerUpdate+0x98>
		speed--;
20000e94:	4b10      	ldr	r3, [pc, #64]	; (20000ed8 <playerUpdate+0xd0>)
20000e96:	681b      	ldr	r3, [r3, #0]
20000e98:	1e5a      	subs	r2, r3, #1
20000e9a:	4b0f      	ldr	r3, [pc, #60]	; (20000ed8 <playerUpdate+0xd0>)
20000e9c:	601a      	str	r2, [r3, #0]
20000e9e:	e008      	b.n	20000eb2 <playerUpdate+0xaa>
	}
	else if (speed < 0){
20000ea0:	4b0d      	ldr	r3, [pc, #52]	; (20000ed8 <playerUpdate+0xd0>)
20000ea2:	681b      	ldr	r3, [r3, #0]
20000ea4:	2b00      	cmp	r3, #0
20000ea6:	da04      	bge.n	20000eb2 <playerUpdate+0xaa>
		speed++;
20000ea8:	4b0b      	ldr	r3, [pc, #44]	; (20000ed8 <playerUpdate+0xd0>)
20000eaa:	681b      	ldr	r3, [r3, #0]
20000eac:	1c5a      	adds	r2, r3, #1
20000eae:	4b0a      	ldr	r3, [pc, #40]	; (20000ed8 <playerUpdate+0xd0>)
20000eb0:	601a      	str	r2, [r3, #0]
	}
	
	lastRightValue = read_DIL_single(RIGHT_TRIGGER);
20000eb2:	2000      	movs	r0, #0
20000eb4:	f001 f926 	bl	20002104 <read_DIL_single>
20000eb8:	0002      	movs	r2, r0
20000eba:	4b06      	ldr	r3, [pc, #24]	; (20000ed4 <playerUpdate+0xcc>)
20000ebc:	601a      	str	r2, [r3, #0]
	lastLeftValue = read_DIL_single(LEFT_TRIGGER);
20000ebe:	2007      	movs	r0, #7
20000ec0:	f001 f920 	bl	20002104 <read_DIL_single>
20000ec4:	0002      	movs	r2, r0
20000ec6:	4b05      	ldr	r3, [pc, #20]	; (20000edc <playerUpdate+0xd4>)
20000ec8:	601a      	str	r2, [r3, #0]
	
20000eca:	46c0      	nop			; (mov r8, r8)
20000ecc:	46bd      	mov	sp, r7
20000ece:	b002      	add	sp, #8
20000ed0:	bd80      	pop	{r7, pc}
20000ed2:	46c0      	nop			; (mov r8, r8)
20000ed4:	200028cc 	andcs	r2, r0, ip, asr #17
20000ed8:	200028d0 	ldrdcs	r2, [r0], -r0
20000edc:	200028d4 	ldrdcs	r2, [r0], -r4

20000ee0 <initSprites>:
Image bird5Image;
Image bird6Image;
//Image bird7Image;
//Image bird8Image;
Image birdImages[6];
static void initSprites( void ) {	
20000ee0:	b580      	push	{r7, lr}
20000ee2:	b090      	sub	sp, #64	; 0x40
20000ee4:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempBirdLight;
20000ee6:	4b54      	ldr	r3, [pc, #336]	; (20001038 <initSprites+0x158>)
20000ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
	load_sprite(pointer11, bird1_light_bits, bird1_black_width, bird1_black_height);
20000eea:	4954      	ldr	r1, [pc, #336]	; (2000103c <initSprites+0x15c>)
20000eec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
20000eee:	2319      	movs	r3, #25
20000ef0:	2219      	movs	r2, #25
20000ef2:	f001 f8dd 	bl	200020b0 <load_sprite>
	bird1Light = pointer11;
20000ef6:	4b52      	ldr	r3, [pc, #328]	; (20001040 <initSprites+0x160>)
20000ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20000efa:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempBirdGray;
20000efc:	4b51      	ldr	r3, [pc, #324]	; (20001044 <initSprites+0x164>)
20000efe:	63bb      	str	r3, [r7, #56]	; 0x38
	load_sprite(pointer12, bird1_gray_bits, bird1_black_width, bird1_black_height);
20000f00:	4951      	ldr	r1, [pc, #324]	; (20001048 <initSprites+0x168>)
20000f02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20000f04:	2319      	movs	r3, #25
20000f06:	2219      	movs	r2, #25
20000f08:	f001 f8d2 	bl	200020b0 <load_sprite>
	bird1Gray = pointer12;
20000f0c:	4b4f      	ldr	r3, [pc, #316]	; (2000104c <initSprites+0x16c>)
20000f0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
20000f10:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempBirdBlack;
20000f12:	4b4f      	ldr	r3, [pc, #316]	; (20001050 <initSprites+0x170>)
20000f14:	637b      	str	r3, [r7, #52]	; 0x34
	load_sprite(pointer13, bird1_black_bits, bird1_black_width, bird1_black_height);
20000f16:	494f      	ldr	r1, [pc, #316]	; (20001054 <initSprites+0x174>)
20000f18:	6b78      	ldr	r0, [r7, #52]	; 0x34
20000f1a:	2319      	movs	r3, #25
20000f1c:	2219      	movs	r2, #25
20000f1e:	f001 f8c7 	bl	200020b0 <load_sprite>
	bird1Black = pointer13;	
20000f22:	4b4d      	ldr	r3, [pc, #308]	; (20001058 <initSprites+0x178>)
20000f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20000f26:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempBird2Light;
20000f28:	4b4c      	ldr	r3, [pc, #304]	; (2000105c <initSprites+0x17c>)
20000f2a:	633b      	str	r3, [r7, #48]	; 0x30
	load_sprite(pointer14, bird2_light_bits, bird2_black_width, bird2_black_height);
20000f2c:	494c      	ldr	r1, [pc, #304]	; (20001060 <initSprites+0x180>)
20000f2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
20000f30:	2319      	movs	r3, #25
20000f32:	2219      	movs	r2, #25
20000f34:	f001 f8bc 	bl	200020b0 <load_sprite>
	bird2Light = pointer14;
20000f38:	4b4a      	ldr	r3, [pc, #296]	; (20001064 <initSprites+0x184>)
20000f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20000f3c:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempBird2Gray;
20000f3e:	4b4a      	ldr	r3, [pc, #296]	; (20001068 <initSprites+0x188>)
20000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer15, bird2_gray_bits, bird2_black_width, bird2_black_height);
20000f42:	494a      	ldr	r1, [pc, #296]	; (2000106c <initSprites+0x18c>)
20000f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20000f46:	2319      	movs	r3, #25
20000f48:	2219      	movs	r2, #25
20000f4a:	f001 f8b1 	bl	200020b0 <load_sprite>
	bird2Gray = pointer15;
20000f4e:	4b48      	ldr	r3, [pc, #288]	; (20001070 <initSprites+0x190>)
20000f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20000f52:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempBird2Black;
20000f54:	4b47      	ldr	r3, [pc, #284]	; (20001074 <initSprites+0x194>)
20000f56:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer16, bird2_black_bits, bird2_black_width, bird2_black_height);
20000f58:	4947      	ldr	r1, [pc, #284]	; (20001078 <initSprites+0x198>)
20000f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20000f5c:	2319      	movs	r3, #25
20000f5e:	2219      	movs	r2, #25
20000f60:	f001 f8a6 	bl	200020b0 <load_sprite>
	bird2Black = pointer16;
20000f64:	4b45      	ldr	r3, [pc, #276]	; (2000107c <initSprites+0x19c>)
20000f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
20000f68:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempBird3Light;
20000f6a:	4b45      	ldr	r3, [pc, #276]	; (20001080 <initSprites+0x1a0>)
20000f6c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(finalPointer, bird3_light_bits, bird3_black_width, bird3_black_height);
20000f6e:	4945      	ldr	r1, [pc, #276]	; (20001084 <initSprites+0x1a4>)
20000f70:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000f72:	2319      	movs	r3, #25
20000f74:	2219      	movs	r2, #25
20000f76:	f001 f89b 	bl	200020b0 <load_sprite>
	bird3Light = finalPointer;
20000f7a:	4b43      	ldr	r3, [pc, #268]	; (20001088 <initSprites+0x1a8>)
20000f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000f7e:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempBird3Gray;
20000f80:	4b42      	ldr	r3, [pc, #264]	; (2000108c <initSprites+0x1ac>)
20000f82:	623b      	str	r3, [r7, #32]
	load_sprite(pointer17, bird3_gray_bits, bird3_black_width, bird3_black_height);
20000f84:	4942      	ldr	r1, [pc, #264]	; (20001090 <initSprites+0x1b0>)
20000f86:	6a38      	ldr	r0, [r7, #32]
20000f88:	2319      	movs	r3, #25
20000f8a:	2219      	movs	r2, #25
20000f8c:	f001 f890 	bl	200020b0 <load_sprite>
	bird3Gray = pointer17;
20000f90:	4b40      	ldr	r3, [pc, #256]	; (20001094 <initSprites+0x1b4>)
20000f92:	6a3a      	ldr	r2, [r7, #32]
20000f94:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempBird3Black;
20000f96:	4b40      	ldr	r3, [pc, #256]	; (20001098 <initSprites+0x1b8>)
20000f98:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer18, bird3_black_bits, bird3_black_width, bird3_black_height);
20000f9a:	4940      	ldr	r1, [pc, #256]	; (2000109c <initSprites+0x1bc>)
20000f9c:	69f8      	ldr	r0, [r7, #28]
20000f9e:	2319      	movs	r3, #25
20000fa0:	2219      	movs	r2, #25
20000fa2:	f001 f885 	bl	200020b0 <load_sprite>
	bird3Black = pointer18;	
20000fa6:	4b3e      	ldr	r3, [pc, #248]	; (200010a0 <initSprites+0x1c0>)
20000fa8:	69fa      	ldr	r2, [r7, #28]
20000faa:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempBird4Light;
20000fac:	4b3d      	ldr	r3, [pc, #244]	; (200010a4 <initSprites+0x1c4>)
20000fae:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer19, bird4_light_bits, bird4_black_width, bird4_black_height);
20000fb0:	493d      	ldr	r1, [pc, #244]	; (200010a8 <initSprites+0x1c8>)
20000fb2:	69b8      	ldr	r0, [r7, #24]
20000fb4:	2319      	movs	r3, #25
20000fb6:	2219      	movs	r2, #25
20000fb8:	f001 f87a 	bl	200020b0 <load_sprite>
	bird4Light = pointer19;
20000fbc:	4b3b      	ldr	r3, [pc, #236]	; (200010ac <initSprites+0x1cc>)
20000fbe:	69ba      	ldr	r2, [r7, #24]
20000fc0:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempBird4Gray;
20000fc2:	4b3b      	ldr	r3, [pc, #236]	; (200010b0 <initSprites+0x1d0>)
20000fc4:	617b      	str	r3, [r7, #20]
	load_sprite(pointer20, bird4_gray_bits, bird4_black_width, bird4_black_height);
20000fc6:	493b      	ldr	r1, [pc, #236]	; (200010b4 <initSprites+0x1d4>)
20000fc8:	6978      	ldr	r0, [r7, #20]
20000fca:	2319      	movs	r3, #25
20000fcc:	2219      	movs	r2, #25
20000fce:	f001 f86f 	bl	200020b0 <load_sprite>
	bird4Gray = pointer20;
20000fd2:	4b39      	ldr	r3, [pc, #228]	; (200010b8 <initSprites+0x1d8>)
20000fd4:	697a      	ldr	r2, [r7, #20]
20000fd6:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempBird4Black;
20000fd8:	4b38      	ldr	r3, [pc, #224]	; (200010bc <initSprites+0x1dc>)
20000fda:	613b      	str	r3, [r7, #16]
	load_sprite(pointer21, bird4_black_bits, bird4_black_width, bird4_black_height);
20000fdc:	4938      	ldr	r1, [pc, #224]	; (200010c0 <initSprites+0x1e0>)
20000fde:	6938      	ldr	r0, [r7, #16]
20000fe0:	2319      	movs	r3, #25
20000fe2:	2219      	movs	r2, #25
20000fe4:	f001 f864 	bl	200020b0 <load_sprite>
	bird4Black = pointer21;	
20000fe8:	4b36      	ldr	r3, [pc, #216]	; (200010c4 <initSprites+0x1e4>)
20000fea:	693a      	ldr	r2, [r7, #16]
20000fec:	601a      	str	r2, [r3, #0]
	
	sprite *pointer22 = &tempBird5Light;
20000fee:	4b36      	ldr	r3, [pc, #216]	; (200010c8 <initSprites+0x1e8>)
20000ff0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer22, bird5_light_bits, bird5_black_width, bird5_black_height);
20000ff2:	4936      	ldr	r1, [pc, #216]	; (200010cc <initSprites+0x1ec>)
20000ff4:	68f8      	ldr	r0, [r7, #12]
20000ff6:	2319      	movs	r3, #25
20000ff8:	2219      	movs	r2, #25
20000ffa:	f001 f859 	bl	200020b0 <load_sprite>
	bird5Light = pointer22;
20000ffe:	4b34      	ldr	r3, [pc, #208]	; (200010d0 <initSprites+0x1f0>)
20001000:	68fa      	ldr	r2, [r7, #12]
20001002:	601a      	str	r2, [r3, #0]
	sprite *pointer23 = &tempBird5Gray;
20001004:	4b33      	ldr	r3, [pc, #204]	; (200010d4 <initSprites+0x1f4>)
20001006:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer23, bird5_gray_bits, bird5_black_width, bird5_black_height);
20001008:	4933      	ldr	r1, [pc, #204]	; (200010d8 <initSprites+0x1f8>)
2000100a:	68b8      	ldr	r0, [r7, #8]
2000100c:	2319      	movs	r3, #25
2000100e:	2219      	movs	r2, #25
20001010:	f001 f84e 	bl	200020b0 <load_sprite>
	bird5Gray = pointer23;
20001014:	4b31      	ldr	r3, [pc, #196]	; (200010dc <initSprites+0x1fc>)
20001016:	68ba      	ldr	r2, [r7, #8]
20001018:	601a      	str	r2, [r3, #0]
	sprite *pointer24 = &tempBird5Black;
2000101a:	4b31      	ldr	r3, [pc, #196]	; (200010e0 <initSprites+0x200>)
2000101c:	607b      	str	r3, [r7, #4]
	load_sprite(pointer24, bird5_black_bits, bird5_black_width, bird5_black_height);
2000101e:	4931      	ldr	r1, [pc, #196]	; (200010e4 <initSprites+0x204>)
20001020:	6878      	ldr	r0, [r7, #4]
20001022:	2319      	movs	r3, #25
20001024:	2219      	movs	r2, #25
20001026:	f001 f843 	bl	200020b0 <load_sprite>
	bird5Black = pointer24;
2000102a:	4b2f      	ldr	r3, [pc, #188]	; (200010e8 <initSprites+0x208>)
2000102c:	687a      	ldr	r2, [r7, #4]
2000102e:	601a      	str	r2, [r3, #0]
}
20001030:	46c0      	nop			; (mov r8, r8)
20001032:	46bd      	mov	sp, r7
20001034:	b010      	add	sp, #64	; 0x40
20001036:	bd80      	pop	{r7, pc}
20001038:	20002d74 	andcs	r2, r0, r4, ror sp
2000103c:	200062b4 			; <UNDEFINED> instruction: 0x200062b4
20001040:	20002d80 	andcs	r2, r0, r0, lsl #27
20001044:	20002d10 	andcs	r2, r0, r0, lsl sp
20001048:	20006250 	andcs	r6, r0, r0, asr r2
2000104c:	20002c88 	andcs	r2, r0, r8, lsl #25
20001050:	20002d00 	andcs	r2, r0, r0, lsl #26
20001054:	200061ec 	andcs	r6, r0, ip, ror #3
20001058:	20002cf0 	strdcs	r2, [r0], -r0
2000105c:	20002d84 	andcs	r2, r0, r4, lsl #27
20001060:	200063e0 	andcs	r6, r0, r0, ror #7
20001064:	20002e24 	andcs	r2, r0, r4, lsr #28
20001068:	20002d2c 	andcs	r2, r0, ip, lsr #26
2000106c:	2000637c 	andcs	r6, r0, ip, ror r3
20001070:	20002d70 	andcs	r2, r0, r0, ror sp
20001074:	20002e0c 	andcs	r2, r0, ip, lsl #28
20001078:	20006318 	andcs	r6, r0, r8, lsl r3
2000107c:	20002cec 	andcs	r2, r0, ip, ror #25
20001080:	20002da8 	andcs	r2, r0, r8, lsr #27
20001084:	2000650c 	andcs	r6, r0, ip, lsl #10
20001088:	20002d38 	andcs	r2, r0, r8, lsr sp
2000108c:	20002db4 			; <UNDEFINED> instruction: 0x20002db4
20001090:	200064a8 	andcs	r6, r0, r8, lsr #9
20001094:	20002d0c 	andcs	r2, r0, ip, lsl #26
20001098:	20002d64 	andcs	r2, r0, r4, ror #26
2000109c:	20006444 	andcs	r6, r0, r4, asr #8
200010a0:	20002ce4 	andcs	r2, r0, r4, ror #25
200010a4:	20002d9c 	mulcs	r0, ip, sp
200010a8:	20006638 	andcs	r6, r0, r8, lsr r6
200010ac:	20002c84 	andcs	r2, r0, r4, lsl #25
200010b0:	20002e18 	andcs	r2, r0, r8, lsl lr
200010b4:	200065d4 	ldrdcs	r6, [r0], -r4
200010b8:	20002ce8 	andcs	r2, r0, r8, ror #25
200010bc:	20002c9c 	mulcs	r0, ip, ip
200010c0:	20006570 	andcs	r6, r0, r0, ror r5
200010c4:	20002e08 	andcs	r2, r0, r8, lsl #28
200010c8:	20002d20 	andcs	r2, r0, r0, lsr #26
200010cc:	20006764 	andcs	r6, r0, r4, ror #14
200010d0:	20002d60 	andcs	r2, r0, r0, ror #26
200010d4:	20002d3c 	andcs	r2, r0, ip, lsr sp
200010d8:	20006700 	andcs	r6, r0, r0, lsl #14
200010dc:	20002d1c 	andcs	r2, r0, ip, lsl sp
200010e0:	20002d48 	andcs	r2, r0, r8, asr #26
200010e4:	2000669c 	mulcs	r0, ip, r6
200010e8:	20002c98 	mulcs	r0, r8, ip

200010ec <init_bird>:
	
void init_bird( GameObject *birdObj ) {
200010ec:	b590      	push	{r4, r7, lr}
200010ee:	b083      	sub	sp, #12
200010f0:	af00      	add	r7, sp, #0
200010f2:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
200010f4:	4b37      	ldr	r3, [pc, #220]	; (200011d4 <init_bird+0xe8>)
200010f6:	681b      	ldr	r3, [r3, #0]
200010f8:	2b00      	cmp	r3, #0
200010fa:	d057      	beq.n	200011ac <init_bird+0xc0>
		initSprites();
200010fc:	f7ff fef0 	bl	20000ee0 <initSprites>
		firstTime = 0;			
20001100:	4b34      	ldr	r3, [pc, #208]	; (200011d4 <init_bird+0xe8>)
20001102:	2200      	movs	r2, #0
20001104:	601a      	str	r2, [r3, #0]

		birdImages[0] = bird1Image;
20001106:	4b34      	ldr	r3, [pc, #208]	; (200011d8 <init_bird+0xec>)
20001108:	4a34      	ldr	r2, [pc, #208]	; (200011dc <init_bird+0xf0>)
2000110a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000110c:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[1] = bird2Image;
2000110e:	4b32      	ldr	r3, [pc, #200]	; (200011d8 <init_bird+0xec>)
20001110:	4a33      	ldr	r2, [pc, #204]	; (200011e0 <init_bird+0xf4>)
20001112:	330c      	adds	r3, #12
20001114:	ca13      	ldmia	r2!, {r0, r1, r4}
20001116:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[2] = bird3Image;
20001118:	4b2f      	ldr	r3, [pc, #188]	; (200011d8 <init_bird+0xec>)
2000111a:	4a32      	ldr	r2, [pc, #200]	; (200011e4 <init_bird+0xf8>)
2000111c:	3318      	adds	r3, #24
2000111e:	ca13      	ldmia	r2!, {r0, r1, r4}
20001120:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[3] = bird4Image;
20001122:	4b2d      	ldr	r3, [pc, #180]	; (200011d8 <init_bird+0xec>)
20001124:	4a30      	ldr	r2, [pc, #192]	; (200011e8 <init_bird+0xfc>)
20001126:	3324      	adds	r3, #36	; 0x24
20001128:	ca13      	ldmia	r2!, {r0, r1, r4}
2000112a:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[4] = bird5Image;
2000112c:	4b2a      	ldr	r3, [pc, #168]	; (200011d8 <init_bird+0xec>)
2000112e:	4a2f      	ldr	r2, [pc, #188]	; (200011ec <init_bird+0x100>)
20001130:	3330      	adds	r3, #48	; 0x30
20001132:	ca13      	ldmia	r2!, {r0, r1, r4}
20001134:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[5] = bird6Image;
20001136:	4b28      	ldr	r3, [pc, #160]	; (200011d8 <init_bird+0xec>)
20001138:	4a2d      	ldr	r2, [pc, #180]	; (200011f0 <init_bird+0x104>)
2000113a:	333c      	adds	r3, #60	; 0x3c
2000113c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000113e:	c313      	stmia	r3!, {r0, r1, r4}
//		birdImages[6] = bird7Image;
		//birdImages[7] = bird8Image;
		
		load_image(&birdImages[0], bird1Black, bird1Gray, bird1Light);
20001140:	4b2c      	ldr	r3, [pc, #176]	; (200011f4 <init_bird+0x108>)
20001142:	6819      	ldr	r1, [r3, #0]
20001144:	4b2c      	ldr	r3, [pc, #176]	; (200011f8 <init_bird+0x10c>)
20001146:	681a      	ldr	r2, [r3, #0]
20001148:	4b2c      	ldr	r3, [pc, #176]	; (200011fc <init_bird+0x110>)
2000114a:	681b      	ldr	r3, [r3, #0]
2000114c:	4822      	ldr	r0, [pc, #136]	; (200011d8 <init_bird+0xec>)
2000114e:	f000 ff9b 	bl	20002088 <load_image>
		load_image(&birdImages[1], bird2Black, bird2Gray, bird2Light);
20001152:	4b2b      	ldr	r3, [pc, #172]	; (20001200 <init_bird+0x114>)
20001154:	6819      	ldr	r1, [r3, #0]
20001156:	4b2b      	ldr	r3, [pc, #172]	; (20001204 <init_bird+0x118>)
20001158:	681a      	ldr	r2, [r3, #0]
2000115a:	4b2b      	ldr	r3, [pc, #172]	; (20001208 <init_bird+0x11c>)
2000115c:	681b      	ldr	r3, [r3, #0]
2000115e:	482b      	ldr	r0, [pc, #172]	; (2000120c <init_bird+0x120>)
20001160:	f000 ff92 	bl	20002088 <load_image>
		load_image(&birdImages[2], bird3Black, bird3Gray, bird3Light);
20001164:	4b2a      	ldr	r3, [pc, #168]	; (20001210 <init_bird+0x124>)
20001166:	6819      	ldr	r1, [r3, #0]
20001168:	4b2a      	ldr	r3, [pc, #168]	; (20001214 <init_bird+0x128>)
2000116a:	681a      	ldr	r2, [r3, #0]
2000116c:	4b2a      	ldr	r3, [pc, #168]	; (20001218 <init_bird+0x12c>)
2000116e:	681b      	ldr	r3, [r3, #0]
20001170:	482a      	ldr	r0, [pc, #168]	; (2000121c <init_bird+0x130>)
20001172:	f000 ff89 	bl	20002088 <load_image>
		load_image(&birdImages[3], bird4Black, bird4Gray, bird4Light);
20001176:	4b2a      	ldr	r3, [pc, #168]	; (20001220 <init_bird+0x134>)
20001178:	6819      	ldr	r1, [r3, #0]
2000117a:	4b2a      	ldr	r3, [pc, #168]	; (20001224 <init_bird+0x138>)
2000117c:	681a      	ldr	r2, [r3, #0]
2000117e:	4b2a      	ldr	r3, [pc, #168]	; (20001228 <init_bird+0x13c>)
20001180:	681b      	ldr	r3, [r3, #0]
20001182:	482a      	ldr	r0, [pc, #168]	; (2000122c <init_bird+0x140>)
20001184:	f000 ff80 	bl	20002088 <load_image>
		load_image(&birdImages[4], bird5Black, bird5Gray, bird5Light);
20001188:	4b29      	ldr	r3, [pc, #164]	; (20001230 <init_bird+0x144>)
2000118a:	6819      	ldr	r1, [r3, #0]
2000118c:	4b29      	ldr	r3, [pc, #164]	; (20001234 <init_bird+0x148>)
2000118e:	681a      	ldr	r2, [r3, #0]
20001190:	4b29      	ldr	r3, [pc, #164]	; (20001238 <init_bird+0x14c>)
20001192:	681b      	ldr	r3, [r3, #0]
20001194:	4829      	ldr	r0, [pc, #164]	; (2000123c <init_bird+0x150>)
20001196:	f000 ff77 	bl	20002088 <load_image>
		
		//load_image(&birdImages[7], bird2Black, bird2Gray, bird2Light);
		load_image(&birdImages[5], bird3Black, bird3Gray, bird3Light);
2000119a:	4b1d      	ldr	r3, [pc, #116]	; (20001210 <init_bird+0x124>)
2000119c:	6819      	ldr	r1, [r3, #0]
2000119e:	4b1d      	ldr	r3, [pc, #116]	; (20001214 <init_bird+0x128>)
200011a0:	681a      	ldr	r2, [r3, #0]
200011a2:	4b1d      	ldr	r3, [pc, #116]	; (20001218 <init_bird+0x12c>)
200011a4:	681b      	ldr	r3, [r3, #0]
200011a6:	4826      	ldr	r0, [pc, #152]	; (20001240 <init_bird+0x154>)
200011a8:	f000 ff6e 	bl	20002088 <load_image>
		//load_image(&birdImages[5], bird4Black, bird4Gray, bird4Light);
	}
	
	birdObj->images = birdImages;
200011ac:	687b      	ldr	r3, [r7, #4]
200011ae:	4a0a      	ldr	r2, [pc, #40]	; (200011d8 <init_bird+0xec>)
200011b0:	601a      	str	r2, [r3, #0]

	birdObj->current_frame = 0;
200011b2:	687b      	ldr	r3, [r7, #4]
200011b4:	2200      	movs	r2, #0
200011b6:	615a      	str	r2, [r3, #20]
	birdObj->n_frames = 6;
200011b8:	687b      	ldr	r3, [r7, #4]
200011ba:	2206      	movs	r2, #6
200011bc:	619a      	str	r2, [r3, #24]
	birdObj->animation_speed = 1;
200011be:	687b      	ldr	r3, [r7, #4]
200011c0:	2201      	movs	r2, #1
200011c2:	61da      	str	r2, [r3, #28]
	birdObj->animation_counter = 0;
200011c4:	687b      	ldr	r3, [r7, #4]
200011c6:	2200      	movs	r2, #0
200011c8:	621a      	str	r2, [r3, #32]
}
200011ca:	46c0      	nop			; (mov r8, r8)
200011cc:	46bd      	mov	sp, r7
200011ce:	b003      	add	sp, #12
200011d0:	bd90      	pop	{r4, r7, pc}
200011d2:	46c0      	nop			; (mov r8, r8)
200011d4:	200067c8 	andcs	r6, r0, r8, asr #15
200011d8:	20002dc0 	andcs	r2, r0, r0, asr #27
200011dc:	20002cd8 	ldrdcs	r2, [r0], -r8
200011e0:	20002ca8 	andcs	r2, r0, r8, lsr #25
200011e4:	20002d90 	mulcs	r0, r0, sp
200011e8:	20002cf4 	strdcs	r2, [r0], -r4
200011ec:	20002d54 	andcs	r2, r0, r4, asr sp
200011f0:	20002c8c 	andcs	r2, r0, ip, lsl #25
200011f4:	20002cf0 	strdcs	r2, [r0], -r0
200011f8:	20002c88 	andcs	r2, r0, r8, lsl #25
200011fc:	20002d80 	andcs	r2, r0, r0, lsl #27
20001200:	20002cec 	andcs	r2, r0, ip, ror #25
20001204:	20002d70 	andcs	r2, r0, r0, ror sp
20001208:	20002e24 	andcs	r2, r0, r4, lsr #28
2000120c:	20002dcc 	andcs	r2, r0, ip, asr #27
20001210:	20002ce4 	andcs	r2, r0, r4, ror #25
20001214:	20002d0c 	andcs	r2, r0, ip, lsl #26
20001218:	20002d38 	andcs	r2, r0, r8, lsr sp
2000121c:	20002dd8 	ldrdcs	r2, [r0], -r8
20001220:	20002e08 	andcs	r2, r0, r8, lsl #28
20001224:	20002ce8 	andcs	r2, r0, r8, ror #25
20001228:	20002c84 	andcs	r2, r0, r4, lsl #25
2000122c:	20002de4 	andcs	r2, r0, r4, ror #27
20001230:	20002c98 	mulcs	r0, r8, ip
20001234:	20002d1c 	andcs	r2, r0, ip, lsl sp
20001238:	20002d60 	andcs	r2, r0, r0, ror #26
2000123c:	20002df0 	strdcs	r2, [r0], -r0
20001240:	20002dfc 	strdcs	r2, [r0], -ip

20001244 <delay_250ns>:
#include "graphics.h"


void delay_250ns(void){
20001244:	b580      	push	{r7, lr}
20001246:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20001248:	4b0c      	ldr	r3, [pc, #48]	; (2000127c <delay_250ns+0x38>)
2000124a:	2200      	movs	r2, #0
2000124c:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1);
2000124e:	4b0c      	ldr	r3, [pc, #48]	; (20001280 <delay_250ns+0x3c>)
20001250:	2229      	movs	r2, #41	; 0x29
20001252:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20001254:	4b0b      	ldr	r3, [pc, #44]	; (20001284 <delay_250ns+0x40>)
20001256:	2200      	movs	r2, #0
20001258:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000125a:	4b08      	ldr	r3, [pc, #32]	; (2000127c <delay_250ns+0x38>)
2000125c:	2205      	movs	r2, #5
2000125e:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
20001260:	46c0      	nop			; (mov r8, r8)
20001262:	4b06      	ldr	r3, [pc, #24]	; (2000127c <delay_250ns+0x38>)
20001264:	681a      	ldr	r2, [r3, #0]
20001266:	2380      	movs	r3, #128	; 0x80
20001268:	025b      	lsls	r3, r3, #9
2000126a:	4013      	ands	r3, r2
2000126c:	d0f9      	beq.n	20001262 <delay_250ns+0x1e>
	*STK_CTRL = 0;
2000126e:	4b03      	ldr	r3, [pc, #12]	; (2000127c <delay_250ns+0x38>)
20001270:	2200      	movs	r2, #0
20001272:	601a      	str	r2, [r3, #0]
}
20001274:	46c0      	nop			; (mov r8, r8)
20001276:	46bd      	mov	sp, r7
20001278:	bd80      	pop	{r7, pc}
2000127a:	46c0      	nop			; (mov r8, r8)
2000127c:	e000e010 	and	lr, r0, r0, lsl r0
20001280:	e000e014 	and	lr, r0, r4, lsl r0
20001284:	e000e018 	and	lr, r0, r8, lsl r0

20001288 <delay_500ns>:

void delay_500ns(void){
20001288:	b580      	push	{r7, lr}
2000128a:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
2000128c:	4b0c      	ldr	r3, [pc, #48]	; (200012c0 <delay_500ns+0x38>)
2000128e:	2200      	movs	r2, #0
20001290:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/2) -1);
20001292:	4b0c      	ldr	r3, [pc, #48]	; (200012c4 <delay_500ns+0x3c>)
20001294:	2253      	movs	r2, #83	; 0x53
20001296:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20001298:	4b0b      	ldr	r3, [pc, #44]	; (200012c8 <delay_500ns+0x40>)
2000129a:	2200      	movs	r2, #0
2000129c:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000129e:	4b08      	ldr	r3, [pc, #32]	; (200012c0 <delay_500ns+0x38>)
200012a0:	2205      	movs	r2, #5
200012a2:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
200012a4:	46c0      	nop			; (mov r8, r8)
200012a6:	4b06      	ldr	r3, [pc, #24]	; (200012c0 <delay_500ns+0x38>)
200012a8:	681a      	ldr	r2, [r3, #0]
200012aa:	2380      	movs	r3, #128	; 0x80
200012ac:	025b      	lsls	r3, r3, #9
200012ae:	4013      	ands	r3, r2
200012b0:	d0f9      	beq.n	200012a6 <delay_500ns+0x1e>
	*STK_CTRL = 0;
200012b2:	4b03      	ldr	r3, [pc, #12]	; (200012c0 <delay_500ns+0x38>)
200012b4:	2200      	movs	r2, #0
200012b6:	601a      	str	r2, [r3, #0]
}
200012b8:	46c0      	nop			; (mov r8, r8)
200012ba:	46bd      	mov	sp, r7
200012bc:	bd80      	pop	{r7, pc}
200012be:	46c0      	nop			; (mov r8, r8)
200012c0:	e000e010 	and	lr, r0, r0, lsl r0
200012c4:	e000e014 	and	lr, r0, r4, lsl r0
200012c8:	e000e018 	and	lr, r0, r8, lsl r0

200012cc <delay_micro>:

void delay_micro(unsigned int us){
200012cc:	b580      	push	{r7, lr}
200012ce:	b082      	sub	sp, #8
200012d0:	af00      	add	r7, sp, #0
200012d2:	6078      	str	r0, [r7, #4]
	while(us--) {
200012d4:	e007      	b.n	200012e6 <delay_micro+0x1a>
		delay_250ns();
200012d6:	f7ff ffb5 	bl	20001244 <delay_250ns>
		delay_250ns();
200012da:	f7ff ffb3 	bl	20001244 <delay_250ns>
		delay_250ns();
200012de:	f7ff ffb1 	bl	20001244 <delay_250ns>
		delay_250ns();
200012e2:	f7ff ffaf 	bl	20001244 <delay_250ns>
	while(us--) {
200012e6:	687b      	ldr	r3, [r7, #4]
200012e8:	1e5a      	subs	r2, r3, #1
200012ea:	607a      	str	r2, [r7, #4]
200012ec:	2b00      	cmp	r3, #0
200012ee:	d1f2      	bne.n	200012d6 <delay_micro+0xa>
	}
}
200012f0:	46c0      	nop			; (mov r8, r8)
200012f2:	46bd      	mov	sp, r7
200012f4:	b002      	add	sp, #8
200012f6:	bd80      	pop	{r7, pc}

200012f8 <delay_milli>:

void delay_milli(unsigned int ms){
200012f8:	b580      	push	{r7, lr}
200012fa:	b082      	sub	sp, #8
200012fc:	af00      	add	r7, sp, #0
200012fe:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		while(ms--)
			delay_micro(1);
	#else
		while(ms--)
20001300:	e004      	b.n	2000130c <delay_milli+0x14>
			delay_micro(1000);
20001302:	23fa      	movs	r3, #250	; 0xfa
20001304:	009b      	lsls	r3, r3, #2
20001306:	0018      	movs	r0, r3
20001308:	f7ff ffe0 	bl	200012cc <delay_micro>
		while(ms--)
2000130c:	687b      	ldr	r3, [r7, #4]
2000130e:	1e5a      	subs	r2, r3, #1
20001310:	607a      	str	r2, [r7, #4]
20001312:	2b00      	cmp	r3, #0
20001314:	d1f5      	bne.n	20001302 <delay_milli+0xa>
	#endif
}
20001316:	46c0      	nop			; (mov r8, r8)
20001318:	46bd      	mov	sp, r7
2000131a:	b002      	add	sp, #8
2000131c:	bd80      	pop	{r7, pc}

2000131e <clear_thisBackBuffer>:
uint8_t draw_buffer_black_light[1024]; // 128 * 64 / 8
uint8_t draw_buffer_black_gray_light[1024]; // 128 * 64 / 8
uint8_t backBuffer[1024]; // 128 * 64 / 8
uint8_t backBufferGray[1024]; // 128 * 64 / 8
uint8_t backBufferLight[1024]; // 128 * 64 / 8
void clear_thisBackBuffer(uint8_t *buffer) {
2000131e:	b580      	push	{r7, lr}
20001320:	b084      	sub	sp, #16
20001322:	af00      	add	r7, sp, #0
20001324:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < 1024; i++)
20001326:	2300      	movs	r3, #0
20001328:	60fb      	str	r3, [r7, #12]
2000132a:	e007      	b.n	2000133c <clear_thisBackBuffer+0x1e>
		buffer[i] = 0;
2000132c:	68fb      	ldr	r3, [r7, #12]
2000132e:	687a      	ldr	r2, [r7, #4]
20001330:	18d3      	adds	r3, r2, r3
20001332:	2200      	movs	r2, #0
20001334:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
20001336:	68fb      	ldr	r3, [r7, #12]
20001338:	3301      	adds	r3, #1
2000133a:	60fb      	str	r3, [r7, #12]
2000133c:	68fb      	ldr	r3, [r7, #12]
2000133e:	4a03      	ldr	r2, [pc, #12]	; (2000134c <clear_thisBackBuffer+0x2e>)
20001340:	4293      	cmp	r3, r2
20001342:	ddf3      	ble.n	2000132c <clear_thisBackBuffer+0xe>
}
20001344:	46c0      	nop			; (mov r8, r8)
20001346:	46bd      	mov	sp, r7
20001348:	b004      	add	sp, #16
2000134a:	bd80      	pop	{r7, pc}
2000134c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20001350 <clear_backBuffer>:
void clear_backBuffer() {
20001350:	b580      	push	{r7, lr}
20001352:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20001354:	4b03      	ldr	r3, [pc, #12]	; (20001364 <clear_backBuffer+0x14>)
20001356:	0018      	movs	r0, r3
20001358:	f7ff ffe1 	bl	2000131e <clear_thisBackBuffer>
}
2000135c:	46c0      	nop			; (mov r8, r8)
2000135e:	46bd      	mov	sp, r7
20001360:	bd80      	pop	{r7, pc}
20001362:	46c0      	nop			; (mov r8, r8)
20001364:	20003628 	andcs	r3, r0, r8, lsr #12

20001368 <clear_all_backBuffers>:
void clear_all_backBuffers() {
20001368:	b580      	push	{r7, lr}
2000136a:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
2000136c:	4b07      	ldr	r3, [pc, #28]	; (2000138c <clear_all_backBuffers+0x24>)
2000136e:	0018      	movs	r0, r3
20001370:	f7ff ffd5 	bl	2000131e <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferGray);
20001374:	4b06      	ldr	r3, [pc, #24]	; (20001390 <clear_all_backBuffers+0x28>)
20001376:	0018      	movs	r0, r3
20001378:	f7ff ffd1 	bl	2000131e <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferLight);
2000137c:	4b05      	ldr	r3, [pc, #20]	; (20001394 <clear_all_backBuffers+0x2c>)
2000137e:	0018      	movs	r0, r3
20001380:	f7ff ffcd 	bl	2000131e <clear_thisBackBuffer>
}
20001384:	46c0      	nop			; (mov r8, r8)
20001386:	46bd      	mov	sp, r7
20001388:	bd80      	pop	{r7, pc}
2000138a:	46c0      	nop			; (mov r8, r8)
2000138c:	20003628 	andcs	r3, r0, r8, lsr #12
20001390:	20002e28 	andcs	r2, r0, r8, lsr #28
20001394:	20004628 	andcs	r4, r0, r8, lsr #12

20001398 <graphic_ctrl_bit_set>:

/* välj grafik-display och ettställ de bitar som är 1 i x */
static void graphic_ctrl_bit_set( uint8_t x) {
20001398:	b580      	push	{r7, lr}
2000139a:	b084      	sub	sp, #16
2000139c:	af00      	add	r7, sp, #0
2000139e:	0002      	movs	r2, r0
200013a0:	1dfb      	adds	r3, r7, #7
200013a2:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
200013a4:	4a0f      	ldr	r2, [pc, #60]	; (200013e4 <graphic_ctrl_bit_set+0x4c>)
200013a6:	230f      	movs	r3, #15
200013a8:	18fb      	adds	r3, r7, r3
200013aa:	7812      	ldrb	r2, [r2, #0]
200013ac:	701a      	strb	r2, [r3, #0]
	c |= x;
200013ae:	230f      	movs	r3, #15
200013b0:	18fb      	adds	r3, r7, r3
200013b2:	220f      	movs	r2, #15
200013b4:	18b9      	adds	r1, r7, r2
200013b6:	1dfa      	adds	r2, r7, #7
200013b8:	7809      	ldrb	r1, [r1, #0]
200013ba:	7812      	ldrb	r2, [r2, #0]
200013bc:	430a      	orrs	r2, r1
200013be:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
200013c0:	230f      	movs	r3, #15
200013c2:	18fb      	adds	r3, r7, r3
200013c4:	220f      	movs	r2, #15
200013c6:	18ba      	adds	r2, r7, r2
200013c8:	7812      	ldrb	r2, [r2, #0]
200013ca:	2104      	movs	r1, #4
200013cc:	438a      	bics	r2, r1
200013ce:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
200013d0:	4a04      	ldr	r2, [pc, #16]	; (200013e4 <graphic_ctrl_bit_set+0x4c>)
200013d2:	230f      	movs	r3, #15
200013d4:	18fb      	adds	r3, r7, r3
200013d6:	781b      	ldrb	r3, [r3, #0]
200013d8:	7013      	strb	r3, [r2, #0]
}
200013da:	46c0      	nop			; (mov r8, r8)
200013dc:	46bd      	mov	sp, r7
200013de:	b004      	add	sp, #16
200013e0:	bd80      	pop	{r7, pc}
200013e2:	46c0      	nop			; (mov r8, r8)
200013e4:	40021014 	andmi	r1, r2, r4, lsl r0

200013e8 <graphic_ctrl_bit_clear>:
/* välj grafik-display och nollställ de bitar som är 1 i x */
static void graphic_ctrl_bit_clear( uint8_t x) {
200013e8:	b580      	push	{r7, lr}
200013ea:	b084      	sub	sp, #16
200013ec:	af00      	add	r7, sp, #0
200013ee:	0002      	movs	r2, r0
200013f0:	1dfb      	adds	r3, r7, #7
200013f2:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
200013f4:	4a11      	ldr	r2, [pc, #68]	; (2000143c <graphic_ctrl_bit_clear+0x54>)
200013f6:	230f      	movs	r3, #15
200013f8:	18fb      	adds	r3, r7, r3
200013fa:	7812      	ldrb	r2, [r2, #0]
200013fc:	701a      	strb	r2, [r3, #0]
	c &= ~x;
200013fe:	1dfb      	adds	r3, r7, #7
20001400:	781b      	ldrb	r3, [r3, #0]
20001402:	b25b      	sxtb	r3, r3
20001404:	43db      	mvns	r3, r3
20001406:	b25b      	sxtb	r3, r3
20001408:	220f      	movs	r2, #15
2000140a:	18ba      	adds	r2, r7, r2
2000140c:	7812      	ldrb	r2, [r2, #0]
2000140e:	b252      	sxtb	r2, r2
20001410:	4013      	ands	r3, r2
20001412:	b25a      	sxtb	r2, r3
20001414:	230f      	movs	r3, #15
20001416:	18fb      	adds	r3, r7, r3
20001418:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
2000141a:	230f      	movs	r3, #15
2000141c:	18fb      	adds	r3, r7, r3
2000141e:	220f      	movs	r2, #15
20001420:	18ba      	adds	r2, r7, r2
20001422:	7812      	ldrb	r2, [r2, #0]
20001424:	2104      	movs	r1, #4
20001426:	438a      	bics	r2, r1
20001428:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
2000142a:	4a04      	ldr	r2, [pc, #16]	; (2000143c <graphic_ctrl_bit_clear+0x54>)
2000142c:	230f      	movs	r3, #15
2000142e:	18fb      	adds	r3, r7, r3
20001430:	781b      	ldrb	r3, [r3, #0]
20001432:	7013      	strb	r3, [r2, #0]
}
20001434:	46c0      	nop			; (mov r8, r8)
20001436:	46bd      	mov	sp, r7
20001438:	b004      	add	sp, #16
2000143a:	bd80      	pop	{r7, pc}
2000143c:	40021014 	andmi	r1, r2, r4, lsl r0

20001440 <select_controller>:
void select_controller( uint8_t controller) {
20001440:	b580      	push	{r7, lr}
20001442:	b082      	sub	sp, #8
20001444:	af00      	add	r7, sp, #0
20001446:	0002      	movs	r2, r0
20001448:	1dfb      	adds	r3, r7, #7
2000144a:	701a      	strb	r2, [r3, #0]
	switch (controller) {
2000144c:	1dfb      	adds	r3, r7, #7
2000144e:	781b      	ldrb	r3, [r3, #0]
20001450:	2b08      	cmp	r3, #8
20001452:	d00f      	beq.n	20001474 <select_controller+0x34>
20001454:	dc02      	bgt.n	2000145c <select_controller+0x1c>
20001456:	2b00      	cmp	r3, #0
20001458:	d005      	beq.n	20001466 <select_controller+0x26>
		case (B_CS1|B_CS2): 
			graphic_ctrl_bit_set(B_CS1); 
			graphic_ctrl_bit_set(B_CS2); 
			break;
	}
}
2000145a:	e020      	b.n	2000149e <select_controller+0x5e>
	switch (controller) {
2000145c:	2b10      	cmp	r3, #16
2000145e:	d010      	beq.n	20001482 <select_controller+0x42>
20001460:	2b18      	cmp	r3, #24
20001462:	d015      	beq.n	20001490 <select_controller+0x50>
}
20001464:	e01b      	b.n	2000149e <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20001466:	2008      	movs	r0, #8
20001468:	f7ff ffbe 	bl	200013e8 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_clear(B_CS2); 
2000146c:	2010      	movs	r0, #16
2000146e:	f7ff ffbb 	bl	200013e8 <graphic_ctrl_bit_clear>
			break;
20001472:	e014      	b.n	2000149e <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
20001474:	2008      	movs	r0, #8
20001476:	f7ff ff8f 	bl	20001398 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2); 
2000147a:	2010      	movs	r0, #16
2000147c:	f7ff ffb4 	bl	200013e8 <graphic_ctrl_bit_clear>
			break;
20001480:	e00d      	b.n	2000149e <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20001482:	2008      	movs	r0, #8
20001484:	f7ff ffb0 	bl	200013e8 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2); 
20001488:	2010      	movs	r0, #16
2000148a:	f7ff ff85 	bl	20001398 <graphic_ctrl_bit_set>
			break;
2000148e:	e006      	b.n	2000149e <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
20001490:	2008      	movs	r0, #8
20001492:	f7ff ff81 	bl	20001398 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_set(B_CS2); 
20001496:	2010      	movs	r0, #16
20001498:	f7ff ff7e 	bl	20001398 <graphic_ctrl_bit_set>
			break;
2000149c:	46c0      	nop			; (mov r8, r8)
}
2000149e:	46c0      	nop			; (mov r8, r8)
200014a0:	46bd      	mov	sp, r7
200014a2:	b002      	add	sp, #8
200014a4:	bd80      	pop	{r7, pc}

200014a6 <graphic_wait_ready>:

void graphic_wait_ready( void ) {
200014a6:	b580      	push	{r7, lr}
200014a8:	b082      	sub	sp, #8
200014aa:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
200014ac:	2040      	movs	r0, #64	; 0x40
200014ae:	f7ff ff9b 	bl	200013e8 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
200014b2:	4b14      	ldr	r3, [pc, #80]	; (20001504 <graphic_wait_ready+0x5e>)
200014b4:	4a14      	ldr	r2, [pc, #80]	; (20001508 <graphic_wait_ready+0x62>)
200014b6:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
200014b8:	2001      	movs	r0, #1
200014ba:	f7ff ff95 	bl	200013e8 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
200014be:	2002      	movs	r0, #2
200014c0:	f7ff ff6a 	bl	20001398 <graphic_ctrl_bit_set>
	delay_500ns();
200014c4:	f7ff fee0 	bl	20001288 <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
200014c8:	2040      	movs	r0, #64	; 0x40
200014ca:	f7ff ff65 	bl	20001398 <graphic_ctrl_bit_set>
		delay_500ns();
200014ce:	f7ff fedb 	bl	20001288 <delay_500ns>
		c = *portIdrHigh & LCD_BUSY; //...
200014d2:	4b0e      	ldr	r3, [pc, #56]	; (2000150c <graphic_wait_ready+0x66>)
200014d4:	781b      	ldrb	r3, [r3, #0]
200014d6:	b2da      	uxtb	r2, r3
200014d8:	1dfb      	adds	r3, r7, #7
200014da:	217f      	movs	r1, #127	; 0x7f
200014dc:	438a      	bics	r2, r1
200014de:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
200014e0:	2040      	movs	r0, #64	; 0x40
200014e2:	f7ff ff81 	bl	200013e8 <graphic_ctrl_bit_clear>
		delay_500ns();
200014e6:	f7ff fecf 	bl	20001288 <delay_500ns>
		/*if (*portIdrHigh & 0x80 == 0x80) {
			break; }*/
		if (c == 0) break;
200014ea:	1dfb      	adds	r3, r7, #7
200014ec:	781b      	ldrb	r3, [r3, #0]
200014ee:	2b00      	cmp	r3, #0
200014f0:	d000      	beq.n	200014f4 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
200014f2:	e7e9      	b.n	200014c8 <graphic_wait_ready+0x22>
		if (c == 0) break;
200014f4:	46c0      	nop			; (mov r8, r8)
	}
	//graphic_ctrl_bit_set(B_E); //<--
	*portModer = 0x55555555;	
200014f6:	4b03      	ldr	r3, [pc, #12]	; (20001504 <graphic_wait_ready+0x5e>)
200014f8:	4a05      	ldr	r2, [pc, #20]	; (20001510 <graphic_wait_ready+0x6a>)
200014fa:	601a      	str	r2, [r3, #0]
}
200014fc:	46c0      	nop			; (mov r8, r8)
200014fe:	46bd      	mov	sp, r7
20001500:	b002      	add	sp, #8
20001502:	bd80      	pop	{r7, pc}
20001504:	40021000 	andmi	r1, r2, r0
20001508:	00005555 	andeq	r5, r0, r5, asr r5
2000150c:	40021011 	andmi	r1, r2, r1, lsl r0
20001510:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20001514 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20001514:	b580      	push	{r7, lr}
20001516:	b084      	sub	sp, #16
20001518:	af00      	add	r7, sp, #0
2000151a:	0002      	movs	r2, r0
2000151c:	1dfb      	adds	r3, r7, #7
2000151e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001520:	2040      	movs	r0, #64	; 0x40
20001522:	f7ff ff61 	bl	200013e8 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20001526:	4b1c      	ldr	r3, [pc, #112]	; (20001598 <graphic_read+0x84>)
20001528:	4a1c      	ldr	r2, [pc, #112]	; (2000159c <graphic_read+0x88>)
2000152a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
2000152c:	2001      	movs	r0, #1
2000152e:	f7ff ff33 	bl	20001398 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW);
20001532:	2002      	movs	r0, #2
20001534:	f7ff ff30 	bl	20001398 <graphic_ctrl_bit_set>
	select_controller(controller);
20001538:	1dfb      	adds	r3, r7, #7
2000153a:	781b      	ldrb	r3, [r3, #0]
2000153c:	0018      	movs	r0, r3
2000153e:	f7ff ff7f 	bl	20001440 <select_controller>
	delay_500ns();
20001542:	f7ff fea1 	bl	20001288 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20001546:	2040      	movs	r0, #64	; 0x40
20001548:	f7ff ff26 	bl	20001398 <graphic_ctrl_bit_set>
	delay_500ns();
2000154c:	f7ff fe9c 	bl	20001288 <delay_500ns>
	unsigned char rv = *portIdrHigh;
20001550:	4a13      	ldr	r2, [pc, #76]	; (200015a0 <graphic_read+0x8c>)
20001552:	230f      	movs	r3, #15
20001554:	18fb      	adds	r3, r7, r3
20001556:	7812      	ldrb	r2, [r2, #0]
20001558:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000155a:	2040      	movs	r0, #64	; 0x40
2000155c:	f7ff ff44 	bl	200013e8 <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
20001560:	4b0d      	ldr	r3, [pc, #52]	; (20001598 <graphic_read+0x84>)
20001562:	4a10      	ldr	r2, [pc, #64]	; (200015a4 <graphic_read+0x90>)
20001564:	601a      	str	r2, [r3, #0]
	
	if(controller == B_CS1) {
20001566:	1dfb      	adds	r3, r7, #7
20001568:	781b      	ldrb	r3, [r3, #0]
2000156a:	2b08      	cmp	r3, #8
2000156c:	d104      	bne.n	20001578 <graphic_read+0x64>
		select_controller(B_CS1);
2000156e:	2008      	movs	r0, #8
20001570:	f7ff ff66 	bl	20001440 <select_controller>
		graphic_wait_ready();
20001574:	f7ff ff97 	bl	200014a6 <graphic_wait_ready>
	}
	if(controller == B_CS2) {
20001578:	1dfb      	adds	r3, r7, #7
2000157a:	781b      	ldrb	r3, [r3, #0]
2000157c:	2b10      	cmp	r3, #16
2000157e:	d104      	bne.n	2000158a <graphic_read+0x76>
		select_controller(B_CS2);
20001580:	2010      	movs	r0, #16
20001582:	f7ff ff5d 	bl	20001440 <select_controller>
		graphic_wait_ready();
20001586:	f7ff ff8e 	bl	200014a6 <graphic_wait_ready>
	}
	
	return rv;
2000158a:	230f      	movs	r3, #15
2000158c:	18fb      	adds	r3, r7, r3
2000158e:	781b      	ldrb	r3, [r3, #0]
}
20001590:	0018      	movs	r0, r3
20001592:	46bd      	mov	sp, r7
20001594:	b004      	add	sp, #16
20001596:	bd80      	pop	{r7, pc}
20001598:	40021000 	andmi	r1, r2, r0
2000159c:	00005555 	andeq	r5, r0, r5, asr r5
200015a0:	40021011 	andmi	r1, r2, r1, lsl r0
200015a4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200015a8 <graphic_read_data>:

graphic_read_data(uint8_t controller) {
200015a8:	b580      	push	{r7, lr}
200015aa:	b082      	sub	sp, #8
200015ac:	af00      	add	r7, sp, #0
200015ae:	0002      	movs	r2, r0
200015b0:	1dfb      	adds	r3, r7, #7
200015b2:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200015b4:	1dfb      	adds	r3, r7, #7
200015b6:	781b      	ldrb	r3, [r3, #0]
200015b8:	0018      	movs	r0, r3
200015ba:	f7ff ffab 	bl	20001514 <graphic_read>
	graphic_read(controller);
200015be:	1dfb      	adds	r3, r7, #7
200015c0:	781b      	ldrb	r3, [r3, #0]
200015c2:	0018      	movs	r0, r3
200015c4:	f7ff ffa6 	bl	20001514 <graphic_read>
}
200015c8:	46c0      	nop			; (mov r8, r8)
200015ca:	0018      	movs	r0, r3
200015cc:	46bd      	mov	sp, r7
200015ce:	b002      	add	sp, #8
200015d0:	bd80      	pop	{r7, pc}

200015d2 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
200015d2:	b580      	push	{r7, lr}
200015d4:	b082      	sub	sp, #8
200015d6:	af00      	add	r7, sp, #0
200015d8:	0002      	movs	r2, r0
200015da:	1dfb      	adds	r3, r7, #7
200015dc:	701a      	strb	r2, [r3, #0]
200015de:	1dbb      	adds	r3, r7, #6
200015e0:	1c0a      	adds	r2, r1, #0
200015e2:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value; //I
200015e4:	4a19      	ldr	r2, [pc, #100]	; (2000164c <graphic_write+0x7a>)
200015e6:	1dfb      	adds	r3, r7, #7
200015e8:	781b      	ldrb	r3, [r3, #0]
200015ea:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200015ec:	1dbb      	adds	r3, r7, #6
200015ee:	781b      	ldrb	r3, [r3, #0]
200015f0:	0018      	movs	r0, r3
200015f2:	f7ff ff25 	bl	20001440 <select_controller>
	delay_500ns();
200015f6:	f7ff fe47 	bl	20001288 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200015fa:	2040      	movs	r0, #64	; 0x40
200015fc:	f7ff fecc 	bl	20001398 <graphic_ctrl_bit_set>
	delay_500ns();
20001600:	f7ff fe42 	bl	20001288 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20001604:	2040      	movs	r0, #64	; 0x40
20001606:	f7ff feef 	bl	200013e8 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
2000160a:	1dbb      	adds	r3, r7, #6
2000160c:	781b      	ldrb	r3, [r3, #0]
2000160e:	2208      	movs	r2, #8
20001610:	4013      	ands	r3, r2
20001612:	d004      	beq.n	2000161e <graphic_write+0x4c>
		select_controller(B_CS1);
20001614:	2008      	movs	r0, #8
20001616:	f7ff ff13 	bl	20001440 <select_controller>
		graphic_wait_ready();
2000161a:	f7ff ff44 	bl	200014a6 <graphic_wait_ready>
	}
	if(controller & B_CS2) {
2000161e:	1dbb      	adds	r3, r7, #6
20001620:	781b      	ldrb	r3, [r3, #0]
20001622:	2210      	movs	r2, #16
20001624:	4013      	ands	r3, r2
20001626:	d004      	beq.n	20001632 <graphic_write+0x60>
		select_controller(B_CS2);
20001628:	2010      	movs	r0, #16
2000162a:	f7ff ff09 	bl	20001440 <select_controller>
		graphic_wait_ready();
2000162e:	f7ff ff3a 	bl	200014a6 <graphic_wait_ready>
	}
	
	*portOdrHigh = 0;	//I
20001632:	4b06      	ldr	r3, [pc, #24]	; (2000164c <graphic_write+0x7a>)
20001634:	2200      	movs	r2, #0
20001636:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20001638:	2040      	movs	r0, #64	; 0x40
2000163a:	f7ff fead 	bl	20001398 <graphic_ctrl_bit_set>
	select_controller(0);
2000163e:	2000      	movs	r0, #0
20001640:	f7ff fefe 	bl	20001440 <select_controller>
}
20001644:	46c0      	nop			; (mov r8, r8)
20001646:	46bd      	mov	sp, r7
20001648:	b002      	add	sp, #8
2000164a:	bd80      	pop	{r7, pc}
2000164c:	40021015 	andmi	r1, r2, r5, lsl r0

20001650 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller) {
20001650:	b580      	push	{r7, lr}
20001652:	b082      	sub	sp, #8
20001654:	af00      	add	r7, sp, #0
20001656:	0002      	movs	r2, r0
20001658:	1dfb      	adds	r3, r7, #7
2000165a:	701a      	strb	r2, [r3, #0]
2000165c:	1dbb      	adds	r3, r7, #6
2000165e:	1c0a      	adds	r2, r1, #0
20001660:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001662:	2040      	movs	r0, #64	; 0x40
20001664:	f7ff fec0 	bl	200013e8 <graphic_ctrl_bit_clear>
	select_controller(controller);
20001668:	1dbb      	adds	r3, r7, #6
2000166a:	781b      	ldrb	r3, [r3, #0]
2000166c:	0018      	movs	r0, r3
2000166e:	f7ff fee7 	bl	20001440 <select_controller>
	graphic_ctrl_bit_clear(B_RS);
20001672:	2001      	movs	r0, #1
20001674:	f7ff feb8 	bl	200013e8 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
20001678:	2002      	movs	r0, #2
2000167a:	f7ff feb5 	bl	200013e8 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
2000167e:	1dbb      	adds	r3, r7, #6
20001680:	781a      	ldrb	r2, [r3, #0]
20001682:	1dfb      	adds	r3, r7, #7
20001684:	781b      	ldrb	r3, [r3, #0]
20001686:	0011      	movs	r1, r2
20001688:	0018      	movs	r0, r3
2000168a:	f7ff ffa2 	bl	200015d2 <graphic_write>
}
2000168e:	46c0      	nop			; (mov r8, r8)
20001690:	46bd      	mov	sp, r7
20001692:	b002      	add	sp, #8
20001694:	bd80      	pop	{r7, pc}

20001696 <graphic_write_data>:
void graphic_write_data(uint8_t command, uint8_t controller) {
20001696:	b580      	push	{r7, lr}
20001698:	b082      	sub	sp, #8
2000169a:	af00      	add	r7, sp, #0
2000169c:	0002      	movs	r2, r0
2000169e:	1dfb      	adds	r3, r7, #7
200016a0:	701a      	strb	r2, [r3, #0]
200016a2:	1dbb      	adds	r3, r7, #6
200016a4:	1c0a      	adds	r2, r1, #0
200016a6:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200016a8:	2040      	movs	r0, #64	; 0x40
200016aa:	f7ff fe9d 	bl	200013e8 <graphic_ctrl_bit_clear>
	select_controller(controller);
200016ae:	1dbb      	adds	r3, r7, #6
200016b0:	781b      	ldrb	r3, [r3, #0]
200016b2:	0018      	movs	r0, r3
200016b4:	f7ff fec4 	bl	20001440 <select_controller>
	graphic_ctrl_bit_set(B_RS);
200016b8:	2001      	movs	r0, #1
200016ba:	f7ff fe6d 	bl	20001398 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200016be:	2002      	movs	r0, #2
200016c0:	f7ff fe92 	bl	200013e8 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200016c4:	1dbb      	adds	r3, r7, #6
200016c6:	781a      	ldrb	r2, [r3, #0]
200016c8:	1dfb      	adds	r3, r7, #7
200016ca:	781b      	ldrb	r3, [r3, #0]
200016cc:	0011      	movs	r1, r2
200016ce:	0018      	movs	r0, r3
200016d0:	f7ff ff7f 	bl	200015d2 <graphic_write>
}
200016d4:	46c0      	nop			; (mov r8, r8)
200016d6:	46bd      	mov	sp, r7
200016d8:	b002      	add	sp, #8
200016da:	bd80      	pop	{r7, pc}

200016dc <graphic_initialize>:

void graphic_initialize( void ) {
200016dc:	b580      	push	{r7, lr}
200016de:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200016e0:	2040      	movs	r0, #64	; 0x40
200016e2:	f7ff fe59 	bl	20001398 <graphic_ctrl_bit_set>
	delay_micro(10);
200016e6:	200a      	movs	r0, #10
200016e8:	f7ff fdf0 	bl	200012cc <delay_micro>
	
	graphic_ctrl_bit_clear(B_CS1);
200016ec:	2008      	movs	r0, #8
200016ee:	f7ff fe7b 	bl	200013e8 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
200016f2:	2010      	movs	r0, #16
200016f4:	f7ff fe78 	bl	200013e8 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
200016f8:	2020      	movs	r0, #32
200016fa:	f7ff fe75 	bl	200013e8 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
200016fe:	2040      	movs	r0, #64	; 0x40
20001700:	f7ff fe72 	bl	200013e8 <graphic_ctrl_bit_clear>
	//#define SIMULATOR
	delay_milli(30);
20001704:	201e      	movs	r0, #30
20001706:	f7ff fdf7 	bl	200012f8 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
2000170a:	2020      	movs	r0, #32
2000170c:	f7ff fe44 	bl	20001398 <graphic_ctrl_bit_set>
	delay_milli(100); //...
20001710:	2064      	movs	r0, #100	; 0x64
20001712:	f7ff fdf1 	bl	200012f8 <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20001716:	2118      	movs	r1, #24
20001718:	203e      	movs	r0, #62	; 0x3e
2000171a:	f7ff ff99 	bl	20001650 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
2000171e:	2118      	movs	r1, #24
20001720:	203f      	movs	r0, #63	; 0x3f
20001722:	f7ff ff95 	bl	20001650 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20001726:	2118      	movs	r1, #24
20001728:	20c0      	movs	r0, #192	; 0xc0
2000172a:	f7ff ff91 	bl	20001650 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
2000172e:	2118      	movs	r1, #24
20001730:	2040      	movs	r0, #64	; 0x40
20001732:	f7ff ff8d 	bl	20001650 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20001736:	2118      	movs	r1, #24
20001738:	20b8      	movs	r0, #184	; 0xb8
2000173a:	f7ff ff89 	bl	20001650 <graphic_write_command>
	select_controller(0);
2000173e:	2000      	movs	r0, #0
20001740:	f7ff fe7e 	bl	20001440 <select_controller>
}
20001744:	46c0      	nop			; (mov r8, r8)
20001746:	46bd      	mov	sp, r7
20001748:	bd80      	pop	{r7, pc}

2000174a <graphic_clear_screen>:
void graphic_clear_screen( void ) {	//Annat i slidesen
2000174a:	b580      	push	{r7, lr}
2000174c:	b082      	sub	sp, #8
2000174e:	af00      	add	r7, sp, #0
	uint8_t page;
	for (page = 0; page < 8; page++) {
20001750:	1dfb      	adds	r3, r7, #7
20001752:	2200      	movs	r2, #0
20001754:	701a      	strb	r2, [r3, #0]
20001756:	e023      	b.n	200017a0 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20001758:	1dfb      	adds	r3, r7, #7
2000175a:	781b      	ldrb	r3, [r3, #0]
2000175c:	2248      	movs	r2, #72	; 0x48
2000175e:	4252      	negs	r2, r2
20001760:	4313      	orrs	r3, r2
20001762:	b2db      	uxtb	r3, r3
20001764:	2118      	movs	r1, #24
20001766:	0018      	movs	r0, r3
20001768:	f7ff ff72 	bl	20001650 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
2000176c:	2118      	movs	r1, #24
2000176e:	2040      	movs	r0, #64	; 0x40
20001770:	f7ff ff6e 	bl	20001650 <graphic_write_command>
		uint8_t add;
		for (add = 0; add < 64; add++) {
20001774:	1dbb      	adds	r3, r7, #6
20001776:	2200      	movs	r2, #0
20001778:	701a      	strb	r2, [r3, #0]
2000177a:	e008      	b.n	2000178e <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
2000177c:	2118      	movs	r1, #24
2000177e:	2000      	movs	r0, #0
20001780:	f7ff ff89 	bl	20001696 <graphic_write_data>
		for (add = 0; add < 64; add++) {
20001784:	1dbb      	adds	r3, r7, #6
20001786:	781a      	ldrb	r2, [r3, #0]
20001788:	1dbb      	adds	r3, r7, #6
2000178a:	3201      	adds	r2, #1
2000178c:	701a      	strb	r2, [r3, #0]
2000178e:	1dbb      	adds	r3, r7, #6
20001790:	781b      	ldrb	r3, [r3, #0]
20001792:	2b3f      	cmp	r3, #63	; 0x3f
20001794:	d9f2      	bls.n	2000177c <graphic_clear_screen+0x32>
	for (page = 0; page < 8; page++) {
20001796:	1dfb      	adds	r3, r7, #7
20001798:	781a      	ldrb	r2, [r3, #0]
2000179a:	1dfb      	adds	r3, r7, #7
2000179c:	3201      	adds	r2, #1
2000179e:	701a      	strb	r2, [r3, #0]
200017a0:	1dfb      	adds	r3, r7, #7
200017a2:	781b      	ldrb	r3, [r3, #0]
200017a4:	2b07      	cmp	r3, #7
200017a6:	d9d7      	bls.n	20001758 <graphic_clear_screen+0xe>
		}
	}
}
200017a8:	46c0      	nop			; (mov r8, r8)
200017aa:	46bd      	mov	sp, r7
200017ac:	b002      	add	sp, #8
200017ae:	bd80      	pop	{r7, pc}

200017b0 <pixel>:

/** Color: 1=light 2=gray 3=black*/
void pixel(int x, int y, int set, int color) {
200017b0:	b580      	push	{r7, lr}
200017b2:	b086      	sub	sp, #24
200017b4:	af00      	add	r7, sp, #0
200017b6:	60f8      	str	r0, [r7, #12]
200017b8:	60b9      	str	r1, [r7, #8]
200017ba:	607a      	str	r2, [r7, #4]
200017bc:	603b      	str	r3, [r7, #0]
	uint8_t mask;
	int index = 0;
200017be:	2300      	movs	r3, #0
200017c0:	613b      	str	r3, [r7, #16]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) 
200017c2:	68fb      	ldr	r3, [r7, #12]
200017c4:	2b80      	cmp	r3, #128	; 0x80
200017c6:	dd00      	ble.n	200017ca <pixel+0x1a>
200017c8:	e0a6      	b.n	20001918 <pixel+0x168>
200017ca:	68fb      	ldr	r3, [r7, #12]
200017cc:	2b00      	cmp	r3, #0
200017ce:	dc00      	bgt.n	200017d2 <pixel+0x22>
200017d0:	e0a2      	b.n	20001918 <pixel+0x168>
200017d2:	68bb      	ldr	r3, [r7, #8]
200017d4:	2b40      	cmp	r3, #64	; 0x40
200017d6:	dd00      	ble.n	200017da <pixel+0x2a>
200017d8:	e09e      	b.n	20001918 <pixel+0x168>
200017da:	68bb      	ldr	r3, [r7, #8]
200017dc:	2b00      	cmp	r3, #0
200017de:	dc00      	bgt.n	200017e2 <pixel+0x32>
200017e0:	e09a      	b.n	20001918 <pixel+0x168>
		return;
	mask = 1 << ((y-1)%8);
200017e2:	68bb      	ldr	r3, [r7, #8]
200017e4:	3b01      	subs	r3, #1
200017e6:	4a4e      	ldr	r2, [pc, #312]	; (20001920 <pixel+0x170>)
200017e8:	4013      	ands	r3, r2
200017ea:	d504      	bpl.n	200017f6 <pixel+0x46>
200017ec:	3b01      	subs	r3, #1
200017ee:	2208      	movs	r2, #8
200017f0:	4252      	negs	r2, r2
200017f2:	4313      	orrs	r3, r2
200017f4:	3301      	adds	r3, #1
200017f6:	001a      	movs	r2, r3
200017f8:	2301      	movs	r3, #1
200017fa:	4093      	lsls	r3, r2
200017fc:	001a      	movs	r2, r3
200017fe:	2317      	movs	r3, #23
20001800:	18fb      	adds	r3, r7, r3
20001802:	701a      	strb	r2, [r3, #0]
	if(x > 64) {
20001804:	68fb      	ldr	r3, [r7, #12]
20001806:	2b40      	cmp	r3, #64	; 0x40
20001808:	dd05      	ble.n	20001816 <pixel+0x66>
		x -= 65;
2000180a:	68fb      	ldr	r3, [r7, #12]
2000180c:	3b41      	subs	r3, #65	; 0x41
2000180e:	60fb      	str	r3, [r7, #12]
		index = 512;
20001810:	2380      	movs	r3, #128	; 0x80
20001812:	009b      	lsls	r3, r3, #2
20001814:	613b      	str	r3, [r7, #16]
	}
	index += x + ((y-1)/8)*64;
20001816:	68bb      	ldr	r3, [r7, #8]
20001818:	3b01      	subs	r3, #1
2000181a:	2b00      	cmp	r3, #0
2000181c:	da00      	bge.n	20001820 <pixel+0x70>
2000181e:	3307      	adds	r3, #7
20001820:	10db      	asrs	r3, r3, #3
20001822:	019a      	lsls	r2, r3, #6
20001824:	68fb      	ldr	r3, [r7, #12]
20001826:	18d3      	adds	r3, r2, r3
20001828:	693a      	ldr	r2, [r7, #16]
2000182a:	18d3      	adds	r3, r2, r3
2000182c:	613b      	str	r3, [r7, #16]

	if(set == 0)
2000182e:	687b      	ldr	r3, [r7, #4]
20001830:	2b00      	cmp	r3, #0
20001832:	d106      	bne.n	20001842 <pixel+0x92>
		mask = ~mask;
20001834:	2317      	movs	r3, #23
20001836:	18fb      	adds	r3, r7, r3
20001838:	2217      	movs	r2, #23
2000183a:	18ba      	adds	r2, r7, r2
2000183c:	7812      	ldrb	r2, [r2, #0]
2000183e:	43d2      	mvns	r2, r2
20001840:	701a      	strb	r2, [r3, #0]

	switch (color) {
20001842:	683b      	ldr	r3, [r7, #0]
20001844:	2b02      	cmp	r3, #2
20001846:	d024      	beq.n	20001892 <pixel+0xe2>
20001848:	2b03      	cmp	r3, #3
2000184a:	d043      	beq.n	200018d4 <pixel+0x124>
2000184c:	2b01      	cmp	r3, #1
2000184e:	d164      	bne.n	2000191a <pixel+0x16a>
		case 1:	
			if(set)
20001850:	687b      	ldr	r3, [r7, #4]
20001852:	2b00      	cmp	r3, #0
20001854:	d00e      	beq.n	20001874 <pixel+0xc4>
				backBufferLight[index] |= mask;
20001856:	4a33      	ldr	r2, [pc, #204]	; (20001924 <pixel+0x174>)
20001858:	693b      	ldr	r3, [r7, #16]
2000185a:	18d3      	adds	r3, r2, r3
2000185c:	781a      	ldrb	r2, [r3, #0]
2000185e:	2317      	movs	r3, #23
20001860:	18fb      	adds	r3, r7, r3
20001862:	781b      	ldrb	r3, [r3, #0]
20001864:	4313      	orrs	r3, r2
20001866:	b2d9      	uxtb	r1, r3
20001868:	4a2e      	ldr	r2, [pc, #184]	; (20001924 <pixel+0x174>)
2000186a:	693b      	ldr	r3, [r7, #16]
2000186c:	18d3      	adds	r3, r2, r3
2000186e:	1c0a      	adds	r2, r1, #0
20001870:	701a      	strb	r2, [r3, #0]
			else
				backBufferLight[index] &= mask;
			break;
20001872:	e052      	b.n	2000191a <pixel+0x16a>
				backBufferLight[index] &= mask;
20001874:	4a2b      	ldr	r2, [pc, #172]	; (20001924 <pixel+0x174>)
20001876:	693b      	ldr	r3, [r7, #16]
20001878:	18d3      	adds	r3, r2, r3
2000187a:	781b      	ldrb	r3, [r3, #0]
2000187c:	2217      	movs	r2, #23
2000187e:	18ba      	adds	r2, r7, r2
20001880:	7812      	ldrb	r2, [r2, #0]
20001882:	4013      	ands	r3, r2
20001884:	b2d9      	uxtb	r1, r3
20001886:	4a27      	ldr	r2, [pc, #156]	; (20001924 <pixel+0x174>)
20001888:	693b      	ldr	r3, [r7, #16]
2000188a:	18d3      	adds	r3, r2, r3
2000188c:	1c0a      	adds	r2, r1, #0
2000188e:	701a      	strb	r2, [r3, #0]
			break;
20001890:	e043      	b.n	2000191a <pixel+0x16a>
		
		case 2:	
			if(set)
20001892:	687b      	ldr	r3, [r7, #4]
20001894:	2b00      	cmp	r3, #0
20001896:	d00e      	beq.n	200018b6 <pixel+0x106>
				backBufferGray[index] |= mask;
20001898:	4a23      	ldr	r2, [pc, #140]	; (20001928 <pixel+0x178>)
2000189a:	693b      	ldr	r3, [r7, #16]
2000189c:	18d3      	adds	r3, r2, r3
2000189e:	781a      	ldrb	r2, [r3, #0]
200018a0:	2317      	movs	r3, #23
200018a2:	18fb      	adds	r3, r7, r3
200018a4:	781b      	ldrb	r3, [r3, #0]
200018a6:	4313      	orrs	r3, r2
200018a8:	b2d9      	uxtb	r1, r3
200018aa:	4a1f      	ldr	r2, [pc, #124]	; (20001928 <pixel+0x178>)
200018ac:	693b      	ldr	r3, [r7, #16]
200018ae:	18d3      	adds	r3, r2, r3
200018b0:	1c0a      	adds	r2, r1, #0
200018b2:	701a      	strb	r2, [r3, #0]
			else
				backBufferGray[index] &= mask;
			break;
200018b4:	e031      	b.n	2000191a <pixel+0x16a>
				backBufferGray[index] &= mask;
200018b6:	4a1c      	ldr	r2, [pc, #112]	; (20001928 <pixel+0x178>)
200018b8:	693b      	ldr	r3, [r7, #16]
200018ba:	18d3      	adds	r3, r2, r3
200018bc:	781b      	ldrb	r3, [r3, #0]
200018be:	2217      	movs	r2, #23
200018c0:	18ba      	adds	r2, r7, r2
200018c2:	7812      	ldrb	r2, [r2, #0]
200018c4:	4013      	ands	r3, r2
200018c6:	b2d9      	uxtb	r1, r3
200018c8:	4a17      	ldr	r2, [pc, #92]	; (20001928 <pixel+0x178>)
200018ca:	693b      	ldr	r3, [r7, #16]
200018cc:	18d3      	adds	r3, r2, r3
200018ce:	1c0a      	adds	r2, r1, #0
200018d0:	701a      	strb	r2, [r3, #0]
			break;
200018d2:	e022      	b.n	2000191a <pixel+0x16a>
		
		case 3:	
			if(set)
200018d4:	687b      	ldr	r3, [r7, #4]
200018d6:	2b00      	cmp	r3, #0
200018d8:	d00e      	beq.n	200018f8 <pixel+0x148>
				backBuffer[index] |= mask;
200018da:	4a14      	ldr	r2, [pc, #80]	; (2000192c <pixel+0x17c>)
200018dc:	693b      	ldr	r3, [r7, #16]
200018de:	18d3      	adds	r3, r2, r3
200018e0:	781a      	ldrb	r2, [r3, #0]
200018e2:	2317      	movs	r3, #23
200018e4:	18fb      	adds	r3, r7, r3
200018e6:	781b      	ldrb	r3, [r3, #0]
200018e8:	4313      	orrs	r3, r2
200018ea:	b2d9      	uxtb	r1, r3
200018ec:	4a0f      	ldr	r2, [pc, #60]	; (2000192c <pixel+0x17c>)
200018ee:	693b      	ldr	r3, [r7, #16]
200018f0:	18d3      	adds	r3, r2, r3
200018f2:	1c0a      	adds	r2, r1, #0
200018f4:	701a      	strb	r2, [r3, #0]
			else
				backBuffer[index] &= mask;
			break;
200018f6:	e010      	b.n	2000191a <pixel+0x16a>
				backBuffer[index] &= mask;
200018f8:	4a0c      	ldr	r2, [pc, #48]	; (2000192c <pixel+0x17c>)
200018fa:	693b      	ldr	r3, [r7, #16]
200018fc:	18d3      	adds	r3, r2, r3
200018fe:	781b      	ldrb	r3, [r3, #0]
20001900:	2217      	movs	r2, #23
20001902:	18ba      	adds	r2, r7, r2
20001904:	7812      	ldrb	r2, [r2, #0]
20001906:	4013      	ands	r3, r2
20001908:	b2d9      	uxtb	r1, r3
2000190a:	4a08      	ldr	r2, [pc, #32]	; (2000192c <pixel+0x17c>)
2000190c:	693b      	ldr	r3, [r7, #16]
2000190e:	18d3      	adds	r3, r2, r3
20001910:	1c0a      	adds	r2, r1, #0
20001912:	701a      	strb	r2, [r3, #0]
			break;
20001914:	46c0      	nop			; (mov r8, r8)
20001916:	e000      	b.n	2000191a <pixel+0x16a>
		return;
20001918:	46c0      	nop			; (mov r8, r8)
			
	}

}
2000191a:	46bd      	mov	sp, r7
2000191c:	b006      	add	sp, #24
2000191e:	bd80      	pop	{r7, pc}
20001920:	80000007 	andhi	r0, r0, r7
20001924:	20004628 	andcs	r4, r0, r8, lsr #12
20001928:	20002e28 	andcs	r2, r0, r8, lsr #28
2000192c:	20003628 	andcs	r3, r0, r8, lsr #12

20001930 <pixel2>:


void pixel2(int x, int y, int set) {
20001930:	b580      	push	{r7, lr}
20001932:	b088      	sub	sp, #32
20001934:	af00      	add	r7, sp, #0
20001936:	60f8      	str	r0, [r7, #12]
20001938:	60b9      	str	r1, [r7, #8]
2000193a:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
2000193c:	68fb      	ldr	r3, [r7, #12]
2000193e:	2b00      	cmp	r3, #0
20001940:	dc00      	bgt.n	20001944 <pixel2+0x14>
20001942:	e0bc      	b.n	20001abe <pixel2+0x18e>
20001944:	68bb      	ldr	r3, [r7, #8]
20001946:	2b00      	cmp	r3, #0
20001948:	dc00      	bgt.n	2000194c <pixel2+0x1c>
2000194a:	e0b8      	b.n	20001abe <pixel2+0x18e>
2000194c:	68fb      	ldr	r3, [r7, #12]
2000194e:	2b80      	cmp	r3, #128	; 0x80
20001950:	dd00      	ble.n	20001954 <pixel2+0x24>
20001952:	e0b4      	b.n	20001abe <pixel2+0x18e>
20001954:	68bb      	ldr	r3, [r7, #8]
20001956:	2b40      	cmp	r3, #64	; 0x40
20001958:	dd00      	ble.n	2000195c <pixel2+0x2c>
2000195a:	e0b0      	b.n	20001abe <pixel2+0x18e>
	index = (y-1)/8;
2000195c:	68bb      	ldr	r3, [r7, #8]
2000195e:	3b01      	subs	r3, #1
20001960:	2b00      	cmp	r3, #0
20001962:	da00      	bge.n	20001966 <pixel2+0x36>
20001964:	3307      	adds	r3, #7
20001966:	10db      	asrs	r3, r3, #3
20001968:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
2000196a:	68bb      	ldr	r3, [r7, #8]
2000196c:	3b01      	subs	r3, #1
2000196e:	4a56      	ldr	r2, [pc, #344]	; (20001ac8 <pixel2+0x198>)
20001970:	4013      	ands	r3, r2
20001972:	d504      	bpl.n	2000197e <pixel2+0x4e>
20001974:	3b01      	subs	r3, #1
20001976:	2208      	movs	r2, #8
20001978:	4252      	negs	r2, r2
2000197a:	4313      	orrs	r3, r2
2000197c:	3301      	adds	r3, #1
2000197e:	2b07      	cmp	r3, #7
20001980:	d82c      	bhi.n	200019dc <pixel2+0xac>
20001982:	009a      	lsls	r2, r3, #2
20001984:	4b51      	ldr	r3, [pc, #324]	; (20001acc <pixel2+0x19c>)
20001986:	18d3      	adds	r3, r2, r3
20001988:	681b      	ldr	r3, [r3, #0]
2000198a:	469f      	mov	pc, r3
		case 0: mask = 1; break;
2000198c:	231f      	movs	r3, #31
2000198e:	18fb      	adds	r3, r7, r3
20001990:	2201      	movs	r2, #1
20001992:	701a      	strb	r2, [r3, #0]
20001994:	e022      	b.n	200019dc <pixel2+0xac>
		case 1: mask = 2; break;
20001996:	231f      	movs	r3, #31
20001998:	18fb      	adds	r3, r7, r3
2000199a:	2202      	movs	r2, #2
2000199c:	701a      	strb	r2, [r3, #0]
2000199e:	e01d      	b.n	200019dc <pixel2+0xac>
		case 2: mask = 4; break;
200019a0:	231f      	movs	r3, #31
200019a2:	18fb      	adds	r3, r7, r3
200019a4:	2204      	movs	r2, #4
200019a6:	701a      	strb	r2, [r3, #0]
200019a8:	e018      	b.n	200019dc <pixel2+0xac>
		case 3: mask = 8; break;
200019aa:	231f      	movs	r3, #31
200019ac:	18fb      	adds	r3, r7, r3
200019ae:	2208      	movs	r2, #8
200019b0:	701a      	strb	r2, [r3, #0]
200019b2:	e013      	b.n	200019dc <pixel2+0xac>
		case 4: mask = 0x10; break;
200019b4:	231f      	movs	r3, #31
200019b6:	18fb      	adds	r3, r7, r3
200019b8:	2210      	movs	r2, #16
200019ba:	701a      	strb	r2, [r3, #0]
200019bc:	e00e      	b.n	200019dc <pixel2+0xac>
		case 5: mask = 0x20; break;
200019be:	231f      	movs	r3, #31
200019c0:	18fb      	adds	r3, r7, r3
200019c2:	2220      	movs	r2, #32
200019c4:	701a      	strb	r2, [r3, #0]
200019c6:	e009      	b.n	200019dc <pixel2+0xac>
		case 6: mask = 0x40; break;
200019c8:	231f      	movs	r3, #31
200019ca:	18fb      	adds	r3, r7, r3
200019cc:	2240      	movs	r2, #64	; 0x40
200019ce:	701a      	strb	r2, [r3, #0]
200019d0:	e004      	b.n	200019dc <pixel2+0xac>
		case 7: mask = 0x80; break;
200019d2:	231f      	movs	r3, #31
200019d4:	18fb      	adds	r3, r7, r3
200019d6:	2280      	movs	r2, #128	; 0x80
200019d8:	701a      	strb	r2, [r3, #0]
200019da:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0)
200019dc:	687b      	ldr	r3, [r7, #4]
200019de:	2b00      	cmp	r3, #0
200019e0:	d106      	bne.n	200019f0 <pixel2+0xc0>
		mask = ~mask;
200019e2:	231f      	movs	r3, #31
200019e4:	18fb      	adds	r3, r7, r3
200019e6:	221f      	movs	r2, #31
200019e8:	18ba      	adds	r2, r7, r2
200019ea:	7812      	ldrb	r2, [r2, #0]
200019ec:	43d2      	mvns	r2, r2
200019ee:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
200019f0:	68fb      	ldr	r3, [r7, #12]
200019f2:	2b40      	cmp	r3, #64	; 0x40
200019f4:	dd07      	ble.n	20001a06 <pixel2+0xd6>
		controller = B_CS2;
200019f6:	231e      	movs	r3, #30
200019f8:	18fb      	adds	r3, r7, r3
200019fa:	2210      	movs	r2, #16
200019fc:	701a      	strb	r2, [r3, #0]
		x = x - 65;
200019fe:	68fb      	ldr	r3, [r7, #12]
20001a00:	3b41      	subs	r3, #65	; 0x41
20001a02:	60fb      	str	r3, [r7, #12]
20001a04:	e006      	b.n	20001a14 <pixel2+0xe4>
	} else {
		controller = B_CS1;
20001a06:	231e      	movs	r3, #30
20001a08:	18fb      	adds	r3, r7, r3
20001a0a:	2208      	movs	r2, #8
20001a0c:	701a      	strb	r2, [r3, #0]
		x = x-1;
20001a0e:	68fb      	ldr	r3, [r7, #12]
20001a10:	3b01      	subs	r3, #1
20001a12:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller );
20001a14:	68fb      	ldr	r3, [r7, #12]
20001a16:	b25b      	sxtb	r3, r3
20001a18:	2240      	movs	r2, #64	; 0x40
20001a1a:	4313      	orrs	r3, r2
20001a1c:	b25b      	sxtb	r3, r3
20001a1e:	b2da      	uxtb	r2, r3
20001a20:	231e      	movs	r3, #30
20001a22:	18fb      	adds	r3, r7, r3
20001a24:	781b      	ldrb	r3, [r3, #0]
20001a26:	0019      	movs	r1, r3
20001a28:	0010      	movs	r0, r2
20001a2a:	f7ff fe11 	bl	20001650 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller );
20001a2e:	69bb      	ldr	r3, [r7, #24]
20001a30:	b25b      	sxtb	r3, r3
20001a32:	2248      	movs	r2, #72	; 0x48
20001a34:	4252      	negs	r2, r2
20001a36:	4313      	orrs	r3, r2
20001a38:	b25b      	sxtb	r3, r3
20001a3a:	b2da      	uxtb	r2, r3
20001a3c:	231e      	movs	r3, #30
20001a3e:	18fb      	adds	r3, r7, r3
20001a40:	781b      	ldrb	r3, [r3, #0]
20001a42:	0019      	movs	r1, r3
20001a44:	0010      	movs	r0, r2
20001a46:	f7ff fe03 	bl	20001650 <graphic_write_command>
	
	c = graphic_read_data(controller);
20001a4a:	231e      	movs	r3, #30
20001a4c:	18fb      	adds	r3, r7, r3
20001a4e:	781b      	ldrb	r3, [r3, #0]
20001a50:	0018      	movs	r0, r3
20001a52:	f7ff fda9 	bl	200015a8 <graphic_read_data>
20001a56:	0002      	movs	r2, r0
20001a58:	2317      	movs	r3, #23
20001a5a:	18fb      	adds	r3, r7, r3
20001a5c:	701a      	strb	r2, [r3, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20001a5e:	68fb      	ldr	r3, [r7, #12]
20001a60:	b25b      	sxtb	r3, r3
20001a62:	2240      	movs	r2, #64	; 0x40
20001a64:	4313      	orrs	r3, r2
20001a66:	b25b      	sxtb	r3, r3
20001a68:	b2da      	uxtb	r2, r3
20001a6a:	231e      	movs	r3, #30
20001a6c:	18fb      	adds	r3, r7, r3
20001a6e:	781b      	ldrb	r3, [r3, #0]
20001a70:	0019      	movs	r1, r3
20001a72:	0010      	movs	r0, r2
20001a74:	f7ff fdec 	bl	20001650 <graphic_write_command>
	
	if(set)
20001a78:	687b      	ldr	r3, [r7, #4]
20001a7a:	2b00      	cmp	r3, #0
20001a7c:	d00a      	beq.n	20001a94 <pixel2+0x164>
		mask = mask | c;
20001a7e:	231f      	movs	r3, #31
20001a80:	18fb      	adds	r3, r7, r3
20001a82:	221f      	movs	r2, #31
20001a84:	18b9      	adds	r1, r7, r2
20001a86:	2217      	movs	r2, #23
20001a88:	18ba      	adds	r2, r7, r2
20001a8a:	7809      	ldrb	r1, [r1, #0]
20001a8c:	7812      	ldrb	r2, [r2, #0]
20001a8e:	430a      	orrs	r2, r1
20001a90:	701a      	strb	r2, [r3, #0]
20001a92:	e009      	b.n	20001aa8 <pixel2+0x178>
	else
		mask = mask & c;
20001a94:	231f      	movs	r3, #31
20001a96:	18fb      	adds	r3, r7, r3
20001a98:	221f      	movs	r2, #31
20001a9a:	18ba      	adds	r2, r7, r2
20001a9c:	2117      	movs	r1, #23
20001a9e:	1879      	adds	r1, r7, r1
20001aa0:	7812      	ldrb	r2, [r2, #0]
20001aa2:	7809      	ldrb	r1, [r1, #0]
20001aa4:	400a      	ands	r2, r1
20001aa6:	701a      	strb	r2, [r3, #0]
	
	graphic_write_data(mask, controller);
20001aa8:	231e      	movs	r3, #30
20001aaa:	18fb      	adds	r3, r7, r3
20001aac:	781a      	ldrb	r2, [r3, #0]
20001aae:	231f      	movs	r3, #31
20001ab0:	18fb      	adds	r3, r7, r3
20001ab2:	781b      	ldrb	r3, [r3, #0]
20001ab4:	0011      	movs	r1, r2
20001ab6:	0018      	movs	r0, r3
20001ab8:	f7ff fded 	bl	20001696 <graphic_write_data>
20001abc:	e000      	b.n	20001ac0 <pixel2+0x190>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20001abe:	46c0      	nop			; (mov r8, r8)
}
20001ac0:	46bd      	mov	sp, r7
20001ac2:	b008      	add	sp, #32
20001ac4:	bd80      	pop	{r7, pc}
20001ac6:	46c0      	nop			; (mov r8, r8)
20001ac8:	80000007 	andhi	r0, r0, r7
20001acc:	2000694c 	andcs	r6, r0, ip, asr #18

20001ad0 <graphic_draw_screen>:

void graphic_draw_screen(uint8_t *buffer) {
20001ad0:	b580      	push	{r7, lr}
20001ad2:	b086      	sub	sp, #24
20001ad4:	af00      	add	r7, sp, #0
20001ad6:	6078      	str	r0, [r7, #4]
	uint8_t i, j, controller, c;
	unsigned int k = 0;
20001ad8:	2300      	movs	r3, #0
20001ada:	613b      	str	r3, [r7, #16]
	for(c = 0; c < 2; c++) {
20001adc:	2315      	movs	r3, #21
20001ade:	18fb      	adds	r3, r7, r3
20001ae0:	2200      	movs	r2, #0
20001ae2:	701a      	strb	r2, [r3, #0]
20001ae4:	e056      	b.n	20001b94 <graphic_draw_screen+0xc4>
		controller = (c == 0) ? B_CS1 : B_CS2;
20001ae6:	2315      	movs	r3, #21
20001ae8:	18fb      	adds	r3, r7, r3
20001aea:	781b      	ldrb	r3, [r3, #0]
20001aec:	2b00      	cmp	r3, #0
20001aee:	d101      	bne.n	20001af4 <graphic_draw_screen+0x24>
20001af0:	2208      	movs	r2, #8
20001af2:	e000      	b.n	20001af6 <graphic_draw_screen+0x26>
20001af4:	2210      	movs	r2, #16
20001af6:	230f      	movs	r3, #15
20001af8:	18fb      	adds	r3, r7, r3
20001afa:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
20001afc:	2316      	movs	r3, #22
20001afe:	18fb      	adds	r3, r7, r3
20001b00:	2200      	movs	r2, #0
20001b02:	701a      	strb	r2, [r3, #0]
20001b04:	e03a      	b.n	20001b7c <graphic_draw_screen+0xac>
			graphic_write_command(LCD_SET_PAGE | j, controller);
20001b06:	2316      	movs	r3, #22
20001b08:	18fb      	adds	r3, r7, r3
20001b0a:	781b      	ldrb	r3, [r3, #0]
20001b0c:	2248      	movs	r2, #72	; 0x48
20001b0e:	4252      	negs	r2, r2
20001b10:	4313      	orrs	r3, r2
20001b12:	b2da      	uxtb	r2, r3
20001b14:	230f      	movs	r3, #15
20001b16:	18fb      	adds	r3, r7, r3
20001b18:	781b      	ldrb	r3, [r3, #0]
20001b1a:	0019      	movs	r1, r3
20001b1c:	0010      	movs	r0, r2
20001b1e:	f7ff fd97 	bl	20001650 <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
20001b22:	230f      	movs	r3, #15
20001b24:	18fb      	adds	r3, r7, r3
20001b26:	781b      	ldrb	r3, [r3, #0]
20001b28:	0019      	movs	r1, r3
20001b2a:	2040      	movs	r0, #64	; 0x40
20001b2c:	f7ff fd90 	bl	20001650 <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
20001b30:	2317      	movs	r3, #23
20001b32:	18fb      	adds	r3, r7, r3
20001b34:	2200      	movs	r2, #0
20001b36:	701a      	strb	r2, [r3, #0]
20001b38:	e014      	b.n	20001b64 <graphic_draw_screen+0x94>
				graphic_write_data(buffer[k], controller);
20001b3a:	687a      	ldr	r2, [r7, #4]
20001b3c:	693b      	ldr	r3, [r7, #16]
20001b3e:	18d3      	adds	r3, r2, r3
20001b40:	781a      	ldrb	r2, [r3, #0]
20001b42:	230f      	movs	r3, #15
20001b44:	18fb      	adds	r3, r7, r3
20001b46:	781b      	ldrb	r3, [r3, #0]
20001b48:	0019      	movs	r1, r3
20001b4a:	0010      	movs	r0, r2
20001b4c:	f7ff fda3 	bl	20001696 <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
20001b50:	2317      	movs	r3, #23
20001b52:	18fb      	adds	r3, r7, r3
20001b54:	781a      	ldrb	r2, [r3, #0]
20001b56:	2317      	movs	r3, #23
20001b58:	18fb      	adds	r3, r7, r3
20001b5a:	3201      	adds	r2, #1
20001b5c:	701a      	strb	r2, [r3, #0]
20001b5e:	693b      	ldr	r3, [r7, #16]
20001b60:	3301      	adds	r3, #1
20001b62:	613b      	str	r3, [r7, #16]
20001b64:	2317      	movs	r3, #23
20001b66:	18fb      	adds	r3, r7, r3
20001b68:	781b      	ldrb	r3, [r3, #0]
20001b6a:	2b3f      	cmp	r3, #63	; 0x3f
20001b6c:	d9e5      	bls.n	20001b3a <graphic_draw_screen+0x6a>
		for(j = 0; j < 8; j++) {
20001b6e:	2316      	movs	r3, #22
20001b70:	18fb      	adds	r3, r7, r3
20001b72:	781a      	ldrb	r2, [r3, #0]
20001b74:	2316      	movs	r3, #22
20001b76:	18fb      	adds	r3, r7, r3
20001b78:	3201      	adds	r2, #1
20001b7a:	701a      	strb	r2, [r3, #0]
20001b7c:	2316      	movs	r3, #22
20001b7e:	18fb      	adds	r3, r7, r3
20001b80:	781b      	ldrb	r3, [r3, #0]
20001b82:	2b07      	cmp	r3, #7
20001b84:	d9bf      	bls.n	20001b06 <graphic_draw_screen+0x36>
	for(c = 0; c < 2; c++) {
20001b86:	2315      	movs	r3, #21
20001b88:	18fb      	adds	r3, r7, r3
20001b8a:	781a      	ldrb	r2, [r3, #0]
20001b8c:	2315      	movs	r3, #21
20001b8e:	18fb      	adds	r3, r7, r3
20001b90:	3201      	adds	r2, #1
20001b92:	701a      	strb	r2, [r3, #0]
20001b94:	2315      	movs	r3, #21
20001b96:	18fb      	adds	r3, r7, r3
20001b98:	781b      	ldrb	r3, [r3, #0]
20001b9a:	2b01      	cmp	r3, #1
20001b9c:	d9a3      	bls.n	20001ae6 <graphic_draw_screen+0x16>
			}
		}
	}
}
20001b9e:	46c0      	nop			; (mov r8, r8)
20001ba0:	46bd      	mov	sp, r7
20001ba2:	b006      	add	sp, #24
20001ba4:	bd80      	pop	{r7, pc}

20001ba6 <draw_sprite>:


void grayScaleTest( void );


void draw_sprite(sprite* s, int x, int y, int set, int color) {
20001ba6:	b5b0      	push	{r4, r5, r7, lr}
20001ba8:	b08a      	sub	sp, #40	; 0x28
20001baa:	af00      	add	r7, sp, #0
20001bac:	60f8      	str	r0, [r7, #12]
20001bae:	60b9      	str	r1, [r7, #8]
20001bb0:	607a      	str	r2, [r7, #4]
20001bb2:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
20001bb4:	68fb      	ldr	r3, [r7, #12]
20001bb6:	681b      	ldr	r3, [r3, #0]
20001bb8:	2207      	movs	r2, #7
20001bba:	4013      	ands	r3, r2
20001bbc:	d104      	bne.n	20001bc8 <draw_sprite+0x22>
		width_in_bytes = s->width / 8;
20001bbe:	68fb      	ldr	r3, [r7, #12]
20001bc0:	681b      	ldr	r3, [r3, #0]
20001bc2:	08db      	lsrs	r3, r3, #3
20001bc4:	61bb      	str	r3, [r7, #24]
20001bc6:	e004      	b.n	20001bd2 <draw_sprite+0x2c>
	else
		width_in_bytes = (s->width / 8) + 1;
20001bc8:	68fb      	ldr	r3, [r7, #12]
20001bca:	681b      	ldr	r3, [r3, #0]
20001bcc:	08db      	lsrs	r3, r3, #3
20001bce:	3301      	adds	r3, #1
20001bd0:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++)
20001bd2:	2300      	movs	r3, #0
20001bd4:	627b      	str	r3, [r7, #36]	; 0x24
20001bd6:	e06a      	b.n	20001cae <draw_sprite+0x108>
		for (j = 0; j < width_in_bytes; j++) {
20001bd8:	2300      	movs	r3, #0
20001bda:	623b      	str	r3, [r7, #32]
20001bdc:	e060      	b.n	20001ca0 <draw_sprite+0xfa>
			unsigned char byte = s->data[i * width_in_bytes + j];
20001bde:	68fb      	ldr	r3, [r7, #12]
20001be0:	689b      	ldr	r3, [r3, #8]
20001be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001be4:	69b9      	ldr	r1, [r7, #24]
20001be6:	4351      	muls	r1, r2
20001be8:	6a3a      	ldr	r2, [r7, #32]
20001bea:	188a      	adds	r2, r1, r2
20001bec:	189a      	adds	r2, r3, r2
20001bee:	2317      	movs	r3, #23
20001bf0:	18fb      	adds	r3, r7, r3
20001bf2:	7812      	ldrb	r2, [r2, #0]
20001bf4:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
20001bf6:	2300      	movs	r3, #0
20001bf8:	61fb      	str	r3, [r7, #28]
20001bfa:	e04b      	b.n	20001c94 <draw_sprite+0xee>
				if (byte & (1 << k)){
20001bfc:	2317      	movs	r3, #23
20001bfe:	18fb      	adds	r3, r7, r3
20001c00:	781a      	ldrb	r2, [r3, #0]
20001c02:	69fb      	ldr	r3, [r7, #28]
20001c04:	411a      	asrs	r2, r3
20001c06:	0013      	movs	r3, r2
20001c08:	2201      	movs	r2, #1
20001c0a:	4013      	ands	r3, r2
20001c0c:	d03f      	beq.n	20001c8e <draw_sprite+0xe8>
					pixel(8 * j + k + x + 1, i + y + 1, set, color);
20001c0e:	6a3b      	ldr	r3, [r7, #32]
20001c10:	00da      	lsls	r2, r3, #3
20001c12:	69fb      	ldr	r3, [r7, #28]
20001c14:	18d2      	adds	r2, r2, r3
20001c16:	68bb      	ldr	r3, [r7, #8]
20001c18:	18d3      	adds	r3, r2, r3
20001c1a:	1c58      	adds	r0, r3, #1
20001c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001c1e:	687b      	ldr	r3, [r7, #4]
20001c20:	18d3      	adds	r3, r2, r3
20001c22:	1c59      	adds	r1, r3, #1
20001c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001c26:	683a      	ldr	r2, [r7, #0]
20001c28:	f7ff fdc2 	bl	200017b0 <pixel>
					
					if(set) {	//Remove the other colors from this pixel
20001c2c:	683b      	ldr	r3, [r7, #0]
20001c2e:	2b00      	cmp	r3, #0
20001c30:	d02d      	beq.n	20001c8e <draw_sprite+0xe8>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+1) % 3);
20001c32:	6a3b      	ldr	r3, [r7, #32]
20001c34:	00da      	lsls	r2, r3, #3
20001c36:	69fb      	ldr	r3, [r7, #28]
20001c38:	18d2      	adds	r2, r2, r3
20001c3a:	68bb      	ldr	r3, [r7, #8]
20001c3c:	18d3      	adds	r3, r2, r3
20001c3e:	1c5c      	adds	r4, r3, #1
20001c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001c42:	687b      	ldr	r3, [r7, #4]
20001c44:	18d3      	adds	r3, r2, r3
20001c46:	1c5d      	adds	r5, r3, #1
20001c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001c4a:	3301      	adds	r3, #1
20001c4c:	2103      	movs	r1, #3
20001c4e:	0018      	movs	r0, r3
20001c50:	f000 fe32 	bl	200028b8 <__aeabi_idivmod>
20001c54:	000b      	movs	r3, r1
20001c56:	2200      	movs	r2, #0
20001c58:	0029      	movs	r1, r5
20001c5a:	0020      	movs	r0, r4
20001c5c:	f7ff fda8 	bl	200017b0 <pixel>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+2) % 3);
20001c60:	6a3b      	ldr	r3, [r7, #32]
20001c62:	00da      	lsls	r2, r3, #3
20001c64:	69fb      	ldr	r3, [r7, #28]
20001c66:	18d2      	adds	r2, r2, r3
20001c68:	68bb      	ldr	r3, [r7, #8]
20001c6a:	18d3      	adds	r3, r2, r3
20001c6c:	1c5c      	adds	r4, r3, #1
20001c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001c70:	687b      	ldr	r3, [r7, #4]
20001c72:	18d3      	adds	r3, r2, r3
20001c74:	1c5d      	adds	r5, r3, #1
20001c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001c78:	3302      	adds	r3, #2
20001c7a:	2103      	movs	r1, #3
20001c7c:	0018      	movs	r0, r3
20001c7e:	f000 fe1b 	bl	200028b8 <__aeabi_idivmod>
20001c82:	000b      	movs	r3, r1
20001c84:	2200      	movs	r2, #0
20001c86:	0029      	movs	r1, r5
20001c88:	0020      	movs	r0, r4
20001c8a:	f7ff fd91 	bl	200017b0 <pixel>
			for (k =0; k < 8; k++) {
20001c8e:	69fb      	ldr	r3, [r7, #28]
20001c90:	3301      	adds	r3, #1
20001c92:	61fb      	str	r3, [r7, #28]
20001c94:	69fb      	ldr	r3, [r7, #28]
20001c96:	2b07      	cmp	r3, #7
20001c98:	ddb0      	ble.n	20001bfc <draw_sprite+0x56>
		for (j = 0; j < width_in_bytes; j++) {
20001c9a:	6a3b      	ldr	r3, [r7, #32]
20001c9c:	3301      	adds	r3, #1
20001c9e:	623b      	str	r3, [r7, #32]
20001ca0:	6a3a      	ldr	r2, [r7, #32]
20001ca2:	69bb      	ldr	r3, [r7, #24]
20001ca4:	429a      	cmp	r2, r3
20001ca6:	db9a      	blt.n	20001bde <draw_sprite+0x38>
	for (i = 0; i < s->height; i++)
20001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001caa:	3301      	adds	r3, #1
20001cac:	627b      	str	r3, [r7, #36]	; 0x24
20001cae:	68fb      	ldr	r3, [r7, #12]
20001cb0:	685a      	ldr	r2, [r3, #4]
20001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001cb4:	429a      	cmp	r2, r3
20001cb6:	d88f      	bhi.n	20001bd8 <draw_sprite+0x32>
					}
				}
			}
		}
}
20001cb8:	46c0      	nop			; (mov r8, r8)
20001cba:	46bd      	mov	sp, r7
20001cbc:	b00a      	add	sp, #40	; 0x28
20001cbe:	bdb0      	pop	{r4, r5, r7, pc}

20001cc0 <fillRectangle>:

void fillRectangle( int x, int y, int width, int height ){
20001cc0:	b580      	push	{r7, lr}
20001cc2:	b086      	sub	sp, #24
20001cc4:	af00      	add	r7, sp, #0
20001cc6:	60f8      	str	r0, [r7, #12]
20001cc8:	60b9      	str	r1, [r7, #8]
20001cca:	607a      	str	r2, [r7, #4]
20001ccc:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20001cce:	68fb      	ldr	r3, [r7, #12]
20001cd0:	617b      	str	r3, [r7, #20]
20001cd2:	e014      	b.n	20001cfe <fillRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20001cd4:	68bb      	ldr	r3, [r7, #8]
20001cd6:	613b      	str	r3, [r7, #16]
20001cd8:	e008      	b.n	20001cec <fillRectangle+0x2c>
			pixel(i, j, 1, 3);
20001cda:	6939      	ldr	r1, [r7, #16]
20001cdc:	6978      	ldr	r0, [r7, #20]
20001cde:	2303      	movs	r3, #3
20001ce0:	2201      	movs	r2, #1
20001ce2:	f7ff fd65 	bl	200017b0 <pixel>
		for (j = y; j < y + height; j++) {
20001ce6:	693b      	ldr	r3, [r7, #16]
20001ce8:	3301      	adds	r3, #1
20001cea:	613b      	str	r3, [r7, #16]
20001cec:	68ba      	ldr	r2, [r7, #8]
20001cee:	683b      	ldr	r3, [r7, #0]
20001cf0:	18d2      	adds	r2, r2, r3
20001cf2:	693b      	ldr	r3, [r7, #16]
20001cf4:	429a      	cmp	r2, r3
20001cf6:	dcf0      	bgt.n	20001cda <fillRectangle+0x1a>
	for (i = x; i < x + width; i++) {
20001cf8:	697b      	ldr	r3, [r7, #20]
20001cfa:	3301      	adds	r3, #1
20001cfc:	617b      	str	r3, [r7, #20]
20001cfe:	68fa      	ldr	r2, [r7, #12]
20001d00:	687b      	ldr	r3, [r7, #4]
20001d02:	18d2      	adds	r2, r2, r3
20001d04:	697b      	ldr	r3, [r7, #20]
20001d06:	429a      	cmp	r2, r3
20001d08:	dce4      	bgt.n	20001cd4 <fillRectangle+0x14>
		}
	}
}
20001d0a:	46c0      	nop			; (mov r8, r8)
20001d0c:	46bd      	mov	sp, r7
20001d0e:	b006      	add	sp, #24
20001d10:	bd80      	pop	{r7, pc}

20001d12 <clearRectangle>:

void clearRectangle( int x, int y, int width, int height ){
20001d12:	b580      	push	{r7, lr}
20001d14:	b086      	sub	sp, #24
20001d16:	af00      	add	r7, sp, #0
20001d18:	60f8      	str	r0, [r7, #12]
20001d1a:	60b9      	str	r1, [r7, #8]
20001d1c:	607a      	str	r2, [r7, #4]
20001d1e:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20001d20:	68fb      	ldr	r3, [r7, #12]
20001d22:	617b      	str	r3, [r7, #20]
20001d24:	e014      	b.n	20001d50 <clearRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20001d26:	68bb      	ldr	r3, [r7, #8]
20001d28:	613b      	str	r3, [r7, #16]
20001d2a:	e008      	b.n	20001d3e <clearRectangle+0x2c>
			pixel(i, j, 0, 3);
20001d2c:	6939      	ldr	r1, [r7, #16]
20001d2e:	6978      	ldr	r0, [r7, #20]
20001d30:	2303      	movs	r3, #3
20001d32:	2200      	movs	r2, #0
20001d34:	f7ff fd3c 	bl	200017b0 <pixel>
		for (j = y; j < y + height; j++) {
20001d38:	693b      	ldr	r3, [r7, #16]
20001d3a:	3301      	adds	r3, #1
20001d3c:	613b      	str	r3, [r7, #16]
20001d3e:	68ba      	ldr	r2, [r7, #8]
20001d40:	683b      	ldr	r3, [r7, #0]
20001d42:	18d2      	adds	r2, r2, r3
20001d44:	693b      	ldr	r3, [r7, #16]
20001d46:	429a      	cmp	r2, r3
20001d48:	dcf0      	bgt.n	20001d2c <clearRectangle+0x1a>
	for (i = x; i < x + width; i++) {
20001d4a:	697b      	ldr	r3, [r7, #20]
20001d4c:	3301      	adds	r3, #1
20001d4e:	617b      	str	r3, [r7, #20]
20001d50:	68fa      	ldr	r2, [r7, #12]
20001d52:	687b      	ldr	r3, [r7, #4]
20001d54:	18d2      	adds	r2, r2, r3
20001d56:	697b      	ldr	r3, [r7, #20]
20001d58:	429a      	cmp	r2, r3
20001d5a:	dce4      	bgt.n	20001d26 <clearRectangle+0x14>
		}
	}
}
20001d5c:	46c0      	nop			; (mov r8, r8)
20001d5e:	46bd      	mov	sp, r7
20001d60:	b006      	add	sp, #24
20001d62:	bd80      	pop	{r7, pc}

20001d64 <grayScaleTest>:


void grayScaleTest( void ) {
20001d64:	b590      	push	{r4, r7, lr}
20001d66:	b087      	sub	sp, #28
20001d68:	af00      	add	r7, sp, #0
	int x = 10;
20001d6a:	230a      	movs	r3, #10
20001d6c:	617b      	str	r3, [r7, #20]
	int y = 10;
20001d6e:	230a      	movs	r3, #10
20001d70:	613b      	str	r3, [r7, #16]
	int width = 70;
20001d72:	2346      	movs	r3, #70	; 0x46
20001d74:	60fb      	str	r3, [r7, #12]
	int height = 50;
20001d76:	2332      	movs	r3, #50	; 0x32
20001d78:	60bb      	str	r3, [r7, #8]
	
	int x2 = 50;
20001d7a:	2332      	movs	r3, #50	; 0x32
20001d7c:	607b      	str	r3, [r7, #4]
	
	fillRectangle(x, y, width, height);
20001d7e:	68bb      	ldr	r3, [r7, #8]
20001d80:	68fa      	ldr	r2, [r7, #12]
20001d82:	6939      	ldr	r1, [r7, #16]
20001d84:	6978      	ldr	r0, [r7, #20]
20001d86:	f7ff ff9b 	bl	20001cc0 <fillRectangle>
	
	int i;
	int k = 5;
20001d8a:	2305      	movs	r3, #5
20001d8c:	603b      	str	r3, [r7, #0]
	while(1) {
		clear_backBuffer();
20001d8e:	f7ff fadf 	bl	20001350 <clear_backBuffer>
		fillRectangle(x, y, width, height);
20001d92:	68bb      	ldr	r3, [r7, #8]
20001d94:	68fa      	ldr	r2, [r7, #12]
20001d96:	6939      	ldr	r1, [r7, #16]
20001d98:	6978      	ldr	r0, [r7, #20]
20001d9a:	f7ff ff91 	bl	20001cc0 <fillRectangle>
		clearRectangle(x+2+2, y+1, width-k, height-k); //outer square
20001d9e:	697b      	ldr	r3, [r7, #20]
20001da0:	1d18      	adds	r0, r3, #4
20001da2:	693b      	ldr	r3, [r7, #16]
20001da4:	1c59      	adds	r1, r3, #1
20001da6:	68fa      	ldr	r2, [r7, #12]
20001da8:	683b      	ldr	r3, [r7, #0]
20001daa:	1ad4      	subs	r4, r2, r3
20001dac:	68ba      	ldr	r2, [r7, #8]
20001dae:	683b      	ldr	r3, [r7, #0]
20001db0:	1ad3      	subs	r3, r2, r3
20001db2:	0022      	movs	r2, r4
20001db4:	f7ff ffad 	bl	20001d12 <clearRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20001db8:	697b      	ldr	r3, [r7, #20]
20001dba:	1c9a      	adds	r2, r3, #2
20001dbc:	683b      	ldr	r3, [r7, #0]
20001dbe:	18d0      	adds	r0, r2, r3
20001dc0:	693b      	ldr	r3, [r7, #16]
20001dc2:	1c99      	adds	r1, r3, #2
20001dc4:	68fb      	ldr	r3, [r7, #12]
20001dc6:	1f1a      	subs	r2, r3, #4
20001dc8:	683b      	ldr	r3, [r7, #0]
20001dca:	1ad4      	subs	r4, r2, r3
20001dcc:	68bb      	ldr	r3, [r7, #8]
20001dce:	1f1a      	subs	r2, r3, #4
20001dd0:	683b      	ldr	r3, [r7, #0]
20001dd2:	1ad3      	subs	r3, r2, r3
20001dd4:	0022      	movs	r2, r4
20001dd6:	f7ff ff9c 	bl	20001d12 <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20001dda:	4b2d      	ldr	r3, [pc, #180]	; (20001e90 <grayScaleTest+0x12c>)
20001ddc:	0018      	movs	r0, r3
20001dde:	f7ff fe77 	bl	20001ad0 <graphic_draw_screen>
		clear_backBuffer();
20001de2:	f7ff fab5 	bl	20001350 <clear_backBuffer>
		fillRectangle(x, y, width, height);
20001de6:	68bb      	ldr	r3, [r7, #8]
20001de8:	68fa      	ldr	r2, [r7, #12]
20001dea:	6939      	ldr	r1, [r7, #16]
20001dec:	6978      	ldr	r0, [r7, #20]
20001dee:	f7ff ff67 	bl	20001cc0 <fillRectangle>
		
		fillRectangle(x+2+2, y+1, width-k, height-k); //outer white square
20001df2:	697b      	ldr	r3, [r7, #20]
20001df4:	1d18      	adds	r0, r3, #4
20001df6:	693b      	ldr	r3, [r7, #16]
20001df8:	1c59      	adds	r1, r3, #1
20001dfa:	68fa      	ldr	r2, [r7, #12]
20001dfc:	683b      	ldr	r3, [r7, #0]
20001dfe:	1ad4      	subs	r4, r2, r3
20001e00:	68ba      	ldr	r2, [r7, #8]
20001e02:	683b      	ldr	r3, [r7, #0]
20001e04:	1ad3      	subs	r3, r2, r3
20001e06:	0022      	movs	r2, r4
20001e08:	f7ff ff5a 	bl	20001cc0 <fillRectangle>
		fillRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20001e0c:	697b      	ldr	r3, [r7, #20]
20001e0e:	1c9a      	adds	r2, r3, #2
20001e10:	683b      	ldr	r3, [r7, #0]
20001e12:	18d0      	adds	r0, r2, r3
20001e14:	693b      	ldr	r3, [r7, #16]
20001e16:	1c99      	adds	r1, r3, #2
20001e18:	68fb      	ldr	r3, [r7, #12]
20001e1a:	1f1a      	subs	r2, r3, #4
20001e1c:	683b      	ldr	r3, [r7, #0]
20001e1e:	1ad4      	subs	r4, r2, r3
20001e20:	68bb      	ldr	r3, [r7, #8]
20001e22:	1f1a      	subs	r2, r3, #4
20001e24:	683b      	ldr	r3, [r7, #0]
20001e26:	1ad3      	subs	r3, r2, r3
20001e28:	0022      	movs	r2, r4
20001e2a:	f7ff ff49 	bl	20001cc0 <fillRectangle>
		clearRectangle(x+12, y+5, 5, 5);
20001e2e:	697b      	ldr	r3, [r7, #20]
20001e30:	330c      	adds	r3, #12
20001e32:	0018      	movs	r0, r3
20001e34:	693b      	ldr	r3, [r7, #16]
20001e36:	1d59      	adds	r1, r3, #5
20001e38:	2305      	movs	r3, #5
20001e3a:	2205      	movs	r2, #5
20001e3c:	f7ff ff69 	bl	20001d12 <clearRectangle>
		
		graphic_draw_screen(draw_buffer_black);
20001e40:	4b13      	ldr	r3, [pc, #76]	; (20001e90 <grayScaleTest+0x12c>)
20001e42:	0018      	movs	r0, r3
20001e44:	f7ff fe44 	bl	20001ad0 <graphic_draw_screen>
		delay_milli(20);
20001e48:	2014      	movs	r0, #20
20001e4a:	f7ff fa55 	bl	200012f8 <delay_milli>
		
		clear_backBuffer();
20001e4e:	f7ff fa7f 	bl	20001350 <clear_backBuffer>
		fillRectangle(x, y, width, height);
20001e52:	68bb      	ldr	r3, [r7, #8]
20001e54:	68fa      	ldr	r2, [r7, #12]
20001e56:	6939      	ldr	r1, [r7, #16]
20001e58:	6978      	ldr	r0, [r7, #20]
20001e5a:	f7ff ff31 	bl	20001cc0 <fillRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20001e5e:	697b      	ldr	r3, [r7, #20]
20001e60:	1c9a      	adds	r2, r3, #2
20001e62:	683b      	ldr	r3, [r7, #0]
20001e64:	18d0      	adds	r0, r2, r3
20001e66:	693b      	ldr	r3, [r7, #16]
20001e68:	1c99      	adds	r1, r3, #2
20001e6a:	68fb      	ldr	r3, [r7, #12]
20001e6c:	1f1a      	subs	r2, r3, #4
20001e6e:	683b      	ldr	r3, [r7, #0]
20001e70:	1ad4      	subs	r4, r2, r3
20001e72:	68bb      	ldr	r3, [r7, #8]
20001e74:	1f1a      	subs	r2, r3, #4
20001e76:	683b      	ldr	r3, [r7, #0]
20001e78:	1ad3      	subs	r3, r2, r3
20001e7a:	0022      	movs	r2, r4
20001e7c:	f7ff ff49 	bl	20001d12 <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20001e80:	4b03      	ldr	r3, [pc, #12]	; (20001e90 <grayScaleTest+0x12c>)
20001e82:	0018      	movs	r0, r3
20001e84:	f7ff fe24 	bl	20001ad0 <graphic_draw_screen>
		
		delay_milli(20);
20001e88:	2014      	movs	r0, #20
20001e8a:	f7ff fa35 	bl	200012f8 <delay_milli>
		clear_backBuffer();
20001e8e:	e77e      	b.n	20001d8e <grayScaleTest+0x2a>
20001e90:	20003e28 	andcs	r3, r0, r8, lsr #28

20001e94 <set_up_draw_buffers>:
	}
}

/** Should prepare the different drawing buffers, before the drawing of each frame.*/
void set_up_draw_buffers( void ) {
20001e94:	b580      	push	{r7, lr}
20001e96:	b082      	sub	sp, #8
20001e98:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 1024; i++) {
20001e9a:	2300      	movs	r3, #0
20001e9c:	607b      	str	r3, [r7, #4]
20001e9e:	e065      	b.n	20001f6c <set_up_draw_buffers+0xd8>
		draw_buffer_black[i] = backBuffer[i] & (~backBufferGray[i] & ~backBufferLight[i]); //Had to work a bit on these
20001ea0:	4a36      	ldr	r2, [pc, #216]	; (20001f7c <set_up_draw_buffers+0xe8>)
20001ea2:	687b      	ldr	r3, [r7, #4]
20001ea4:	18d3      	adds	r3, r2, r3
20001ea6:	781b      	ldrb	r3, [r3, #0]
20001ea8:	b25b      	sxtb	r3, r3
20001eaa:	4935      	ldr	r1, [pc, #212]	; (20001f80 <set_up_draw_buffers+0xec>)
20001eac:	687a      	ldr	r2, [r7, #4]
20001eae:	188a      	adds	r2, r1, r2
20001eb0:	7811      	ldrb	r1, [r2, #0]
20001eb2:	4834      	ldr	r0, [pc, #208]	; (20001f84 <set_up_draw_buffers+0xf0>)
20001eb4:	687a      	ldr	r2, [r7, #4]
20001eb6:	1882      	adds	r2, r0, r2
20001eb8:	7812      	ldrb	r2, [r2, #0]
20001eba:	430a      	orrs	r2, r1
20001ebc:	b2d2      	uxtb	r2, r2
20001ebe:	b252      	sxtb	r2, r2
20001ec0:	43d2      	mvns	r2, r2
20001ec2:	b252      	sxtb	r2, r2
20001ec4:	4013      	ands	r3, r2
20001ec6:	b25b      	sxtb	r3, r3
20001ec8:	b2d9      	uxtb	r1, r3
20001eca:	4a2f      	ldr	r2, [pc, #188]	; (20001f88 <set_up_draw_buffers+0xf4>)
20001ecc:	687b      	ldr	r3, [r7, #4]
20001ece:	18d3      	adds	r3, r2, r3
20001ed0:	1c0a      	adds	r2, r1, #0
20001ed2:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray[i] = (backBuffer[i] | backBufferGray[i]) & ~backBufferLight[i]; //in order to make it possible
20001ed4:	4a29      	ldr	r2, [pc, #164]	; (20001f7c <set_up_draw_buffers+0xe8>)
20001ed6:	687b      	ldr	r3, [r7, #4]
20001ed8:	18d3      	adds	r3, r2, r3
20001eda:	781a      	ldrb	r2, [r3, #0]
20001edc:	4928      	ldr	r1, [pc, #160]	; (20001f80 <set_up_draw_buffers+0xec>)
20001ede:	687b      	ldr	r3, [r7, #4]
20001ee0:	18cb      	adds	r3, r1, r3
20001ee2:	781b      	ldrb	r3, [r3, #0]
20001ee4:	4313      	orrs	r3, r2
20001ee6:	b2db      	uxtb	r3, r3
20001ee8:	b25b      	sxtb	r3, r3
20001eea:	4926      	ldr	r1, [pc, #152]	; (20001f84 <set_up_draw_buffers+0xf0>)
20001eec:	687a      	ldr	r2, [r7, #4]
20001eee:	188a      	adds	r2, r1, r2
20001ef0:	7812      	ldrb	r2, [r2, #0]
20001ef2:	b252      	sxtb	r2, r2
20001ef4:	43d2      	mvns	r2, r2
20001ef6:	b252      	sxtb	r2, r2
20001ef8:	4013      	ands	r3, r2
20001efa:	b25b      	sxtb	r3, r3
20001efc:	b2d9      	uxtb	r1, r3
20001efe:	4a23      	ldr	r2, [pc, #140]	; (20001f8c <set_up_draw_buffers+0xf8>)
20001f00:	687b      	ldr	r3, [r7, #4]
20001f02:	18d3      	adds	r3, r2, r3
20001f04:	1c0a      	adds	r2, r1, #0
20001f06:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_light[i] = (backBuffer[i] | backBufferLight[i]) & ~backBufferGray[i]; //to show a lighter sprite
20001f08:	4a1c      	ldr	r2, [pc, #112]	; (20001f7c <set_up_draw_buffers+0xe8>)
20001f0a:	687b      	ldr	r3, [r7, #4]
20001f0c:	18d3      	adds	r3, r2, r3
20001f0e:	781a      	ldrb	r2, [r3, #0]
20001f10:	491c      	ldr	r1, [pc, #112]	; (20001f84 <set_up_draw_buffers+0xf0>)
20001f12:	687b      	ldr	r3, [r7, #4]
20001f14:	18cb      	adds	r3, r1, r3
20001f16:	781b      	ldrb	r3, [r3, #0]
20001f18:	4313      	orrs	r3, r2
20001f1a:	b2db      	uxtb	r3, r3
20001f1c:	b25b      	sxtb	r3, r3
20001f1e:	4918      	ldr	r1, [pc, #96]	; (20001f80 <set_up_draw_buffers+0xec>)
20001f20:	687a      	ldr	r2, [r7, #4]
20001f22:	188a      	adds	r2, r1, r2
20001f24:	7812      	ldrb	r2, [r2, #0]
20001f26:	b252      	sxtb	r2, r2
20001f28:	43d2      	mvns	r2, r2
20001f2a:	b252      	sxtb	r2, r2
20001f2c:	4013      	ands	r3, r2
20001f2e:	b25b      	sxtb	r3, r3
20001f30:	b2d9      	uxtb	r1, r3
20001f32:	4a17      	ldr	r2, [pc, #92]	; (20001f90 <set_up_draw_buffers+0xfc>)
20001f34:	687b      	ldr	r3, [r7, #4]
20001f36:	18d3      	adds	r3, r2, r3
20001f38:	1c0a      	adds	r2, r1, #0
20001f3a:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray_light[i] = backBuffer[i] | backBufferGray[i] | backBufferLight[i]; //on top of a darker one.
20001f3c:	4a0f      	ldr	r2, [pc, #60]	; (20001f7c <set_up_draw_buffers+0xe8>)
20001f3e:	687b      	ldr	r3, [r7, #4]
20001f40:	18d3      	adds	r3, r2, r3
20001f42:	781a      	ldrb	r2, [r3, #0]
20001f44:	490e      	ldr	r1, [pc, #56]	; (20001f80 <set_up_draw_buffers+0xec>)
20001f46:	687b      	ldr	r3, [r7, #4]
20001f48:	18cb      	adds	r3, r1, r3
20001f4a:	781b      	ldrb	r3, [r3, #0]
20001f4c:	4313      	orrs	r3, r2
20001f4e:	b2da      	uxtb	r2, r3
20001f50:	490c      	ldr	r1, [pc, #48]	; (20001f84 <set_up_draw_buffers+0xf0>)
20001f52:	687b      	ldr	r3, [r7, #4]
20001f54:	18cb      	adds	r3, r1, r3
20001f56:	781b      	ldrb	r3, [r3, #0]
20001f58:	4313      	orrs	r3, r2
20001f5a:	b2d9      	uxtb	r1, r3
20001f5c:	4a0d      	ldr	r2, [pc, #52]	; (20001f94 <set_up_draw_buffers+0x100>)
20001f5e:	687b      	ldr	r3, [r7, #4]
20001f60:	18d3      	adds	r3, r2, r3
20001f62:	1c0a      	adds	r2, r1, #0
20001f64:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 1024; i++) {
20001f66:	687b      	ldr	r3, [r7, #4]
20001f68:	3301      	adds	r3, #1
20001f6a:	607b      	str	r3, [r7, #4]
20001f6c:	687b      	ldr	r3, [r7, #4]
20001f6e:	4a0a      	ldr	r2, [pc, #40]	; (20001f98 <set_up_draw_buffers+0x104>)
20001f70:	4293      	cmp	r3, r2
20001f72:	dd95      	ble.n	20001ea0 <set_up_draw_buffers+0xc>
	}
}
20001f74:	46c0      	nop			; (mov r8, r8)
20001f76:	46bd      	mov	sp, r7
20001f78:	b002      	add	sp, #8
20001f7a:	bd80      	pop	{r7, pc}
20001f7c:	20003628 	andcs	r3, r0, r8, lsr #12
20001f80:	20002e28 	andcs	r2, r0, r8, lsr #28
20001f84:	20004628 	andcs	r4, r0, r8, lsr #12
20001f88:	20003e28 	andcs	r3, r0, r8, lsr #28
20001f8c:	20003228 	andcs	r3, r0, r8, lsr #4
20001f90:	20003a28 	andcs	r3, r0, r8, lsr #20
20001f94:	20004228 	andcs	r4, r0, r8, lsr #4
20001f98:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20001f9c <draw_game_object>:

void draw_game_object(GameObject *gObj) {
20001f9c:	b580      	push	{r7, lr}
20001f9e:	b086      	sub	sp, #24
20001fa0:	af02      	add	r7, sp, #8
20001fa2:	6078      	str	r0, [r7, #4]
	int frame = gObj->current_frame;
20001fa4:	687b      	ldr	r3, [r7, #4]
20001fa6:	695b      	ldr	r3, [r3, #20]
20001fa8:	60fb      	str	r3, [r7, #12]
	draw_sprite(gObj->images[frame].blackImage, gObj->xPos, gObj->yPos, 1, 3);
20001faa:	687b      	ldr	r3, [r7, #4]
20001fac:	6819      	ldr	r1, [r3, #0]
20001fae:	68fa      	ldr	r2, [r7, #12]
20001fb0:	0013      	movs	r3, r2
20001fb2:	005b      	lsls	r3, r3, #1
20001fb4:	189b      	adds	r3, r3, r2
20001fb6:	009b      	lsls	r3, r3, #2
20001fb8:	18cb      	adds	r3, r1, r3
20001fba:	6818      	ldr	r0, [r3, #0]
20001fbc:	687b      	ldr	r3, [r7, #4]
20001fbe:	6859      	ldr	r1, [r3, #4]
20001fc0:	687b      	ldr	r3, [r7, #4]
20001fc2:	689a      	ldr	r2, [r3, #8]
20001fc4:	2303      	movs	r3, #3
20001fc6:	9300      	str	r3, [sp, #0]
20001fc8:	2301      	movs	r3, #1
20001fca:	f7ff fdec 	bl	20001ba6 <draw_sprite>
	draw_sprite(gObj->images[frame].grayImage, gObj->xPos, gObj->yPos, 1, 2);
20001fce:	687b      	ldr	r3, [r7, #4]
20001fd0:	6819      	ldr	r1, [r3, #0]
20001fd2:	68fa      	ldr	r2, [r7, #12]
20001fd4:	0013      	movs	r3, r2
20001fd6:	005b      	lsls	r3, r3, #1
20001fd8:	189b      	adds	r3, r3, r2
20001fda:	009b      	lsls	r3, r3, #2
20001fdc:	18cb      	adds	r3, r1, r3
20001fde:	6858      	ldr	r0, [r3, #4]
20001fe0:	687b      	ldr	r3, [r7, #4]
20001fe2:	6859      	ldr	r1, [r3, #4]
20001fe4:	687b      	ldr	r3, [r7, #4]
20001fe6:	689a      	ldr	r2, [r3, #8]
20001fe8:	2302      	movs	r3, #2
20001fea:	9300      	str	r3, [sp, #0]
20001fec:	2301      	movs	r3, #1
20001fee:	f7ff fdda 	bl	20001ba6 <draw_sprite>
	draw_sprite(gObj->images[frame].lightImage, gObj->xPos, gObj->yPos, 1, 1);
20001ff2:	687b      	ldr	r3, [r7, #4]
20001ff4:	6819      	ldr	r1, [r3, #0]
20001ff6:	68fa      	ldr	r2, [r7, #12]
20001ff8:	0013      	movs	r3, r2
20001ffa:	005b      	lsls	r3, r3, #1
20001ffc:	189b      	adds	r3, r3, r2
20001ffe:	009b      	lsls	r3, r3, #2
20002000:	18cb      	adds	r3, r1, r3
20002002:	6898      	ldr	r0, [r3, #8]
20002004:	687b      	ldr	r3, [r7, #4]
20002006:	6859      	ldr	r1, [r3, #4]
20002008:	687b      	ldr	r3, [r7, #4]
2000200a:	689a      	ldr	r2, [r3, #8]
2000200c:	2301      	movs	r3, #1
2000200e:	9300      	str	r3, [sp, #0]
20002010:	2301      	movs	r3, #1
20002012:	f7ff fdc8 	bl	20001ba6 <draw_sprite>
}
20002016:	46c0      	nop			; (mov r8, r8)
20002018:	46bd      	mov	sp, r7
2000201a:	b004      	add	sp, #16
2000201c:	bd80      	pop	{r7, pc}

2000201e <show_frame>:


void show_frame(int frame_length) {
2000201e:	b580      	push	{r7, lr}
20002020:	b082      	sub	sp, #8
20002022:	af00      	add	r7, sp, #0
20002024:	6078      	str	r0, [r7, #4]
	set_up_draw_buffers();
20002026:	f7ff ff35 	bl	20001e94 <set_up_draw_buffers>
	
	while(frame_length--) {
2000202a:	e01b      	b.n	20002064 <show_frame+0x46>
		graphic_draw_screen(draw_buffer_black_gray_light);
2000202c:	4b13      	ldr	r3, [pc, #76]	; (2000207c <show_frame+0x5e>)
2000202e:	0018      	movs	r0, r3
20002030:	f7ff fd4e 	bl	20001ad0 <graphic_draw_screen>
		delay_milli(1);
20002034:	2001      	movs	r0, #1
20002036:	f7ff f95f 	bl	200012f8 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
2000203a:	4b11      	ldr	r3, [pc, #68]	; (20002080 <show_frame+0x62>)
2000203c:	0018      	movs	r0, r3
2000203e:	f7ff fd47 	bl	20001ad0 <graphic_draw_screen>
		delay_milli(1);
20002042:	2001      	movs	r0, #1
20002044:	f7ff f958 	bl	200012f8 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black_gray);
20002048:	4b0e      	ldr	r3, [pc, #56]	; (20002084 <show_frame+0x66>)
2000204a:	0018      	movs	r0, r3
2000204c:	f7ff fd40 	bl	20001ad0 <graphic_draw_screen>
		delay_milli(1);
20002050:	2001      	movs	r0, #1
20002052:	f7ff f951 	bl	200012f8 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20002056:	4b0a      	ldr	r3, [pc, #40]	; (20002080 <show_frame+0x62>)
20002058:	0018      	movs	r0, r3
2000205a:	f7ff fd39 	bl	20001ad0 <graphic_draw_screen>
		delay_milli(1);
2000205e:	2001      	movs	r0, #1
20002060:	f7ff f94a 	bl	200012f8 <delay_milli>
	while(frame_length--) {
20002064:	687b      	ldr	r3, [r7, #4]
20002066:	1e5a      	subs	r2, r3, #1
20002068:	607a      	str	r2, [r7, #4]
2000206a:	2b00      	cmp	r3, #0
2000206c:	d1de      	bne.n	2000202c <show_frame+0xe>
	}
	
	clear_all_backBuffers();	//Maybe we could be more effective by only clearing the necessary stuff,
2000206e:	f7ff f97b 	bl	20001368 <clear_all_backBuffers>
								//but let's keep it like this if it works.
20002072:	46c0      	nop			; (mov r8, r8)
20002074:	46bd      	mov	sp, r7
20002076:	b002      	add	sp, #8
20002078:	bd80      	pop	{r7, pc}
2000207a:	46c0      	nop			; (mov r8, r8)
2000207c:	20004228 	andcs	r4, r0, r8, lsr #4
20002080:	20003e28 	andcs	r3, r0, r8, lsr #28
20002084:	20003228 	andcs	r3, r0, r8, lsr #4

20002088 <load_image>:
#include "image.h"

void load_image( Image *image, sprite *blackImage, sprite *grayImage, sprite *lightImage ) {
20002088:	b580      	push	{r7, lr}
2000208a:	b084      	sub	sp, #16
2000208c:	af00      	add	r7, sp, #0
2000208e:	60f8      	str	r0, [r7, #12]
20002090:	60b9      	str	r1, [r7, #8]
20002092:	607a      	str	r2, [r7, #4]
20002094:	603b      	str	r3, [r7, #0]
	image->blackImage = blackImage;
20002096:	68fb      	ldr	r3, [r7, #12]
20002098:	68ba      	ldr	r2, [r7, #8]
2000209a:	601a      	str	r2, [r3, #0]
	image->grayImage = grayImage;
2000209c:	68fb      	ldr	r3, [r7, #12]
2000209e:	687a      	ldr	r2, [r7, #4]
200020a0:	605a      	str	r2, [r3, #4]
	image->lightImage = lightImage;
200020a2:	68fb      	ldr	r3, [r7, #12]
200020a4:	683a      	ldr	r2, [r7, #0]
200020a6:	609a      	str	r2, [r3, #8]
}
200020a8:	46c0      	nop			; (mov r8, r8)
200020aa:	46bd      	mov	sp, r7
200020ac:	b004      	add	sp, #16
200020ae:	bd80      	pop	{r7, pc}

200020b0 <load_sprite>:
#include "sprite.h"

void load_sprite(sprite* s, unsigned char* data, int width, int height)
{
200020b0:	b580      	push	{r7, lr}
200020b2:	b084      	sub	sp, #16
200020b4:	af00      	add	r7, sp, #0
200020b6:	60f8      	str	r0, [r7, #12]
200020b8:	60b9      	str	r1, [r7, #8]
200020ba:	607a      	str	r2, [r7, #4]
200020bc:	603b      	str	r3, [r7, #0]
	s->width = width;
200020be:	687a      	ldr	r2, [r7, #4]
200020c0:	68fb      	ldr	r3, [r7, #12]
200020c2:	601a      	str	r2, [r3, #0]
	s->height = height;
200020c4:	683a      	ldr	r2, [r7, #0]
200020c6:	68fb      	ldr	r3, [r7, #12]
200020c8:	605a      	str	r2, [r3, #4]
	s->data = data;
200020ca:	68fb      	ldr	r3, [r7, #12]
200020cc:	68ba      	ldr	r2, [r7, #8]
200020ce:	609a      	str	r2, [r3, #8]
}
200020d0:	46c0      	nop			; (mov r8, r8)
200020d2:	46bd      	mov	sp, r7
200020d4:	b004      	add	sp, #16
200020d6:	bd80      	pop	{r7, pc}

200020d8 <set_up_DIL>:
#include "gpio.h"

/** Sets up PE0-7 as inports and PE8-15 as outports. */
void set_up_DIL( void ) {
200020d8:	b580      	push	{r7, lr}
200020da:	af00      	add	r7, sp, #0
	GPIO_D.Moder = 0x55550000;
200020dc:	4b02      	ldr	r3, [pc, #8]	; (200020e8 <set_up_DIL+0x10>)
200020de:	4a03      	ldr	r2, [pc, #12]	; (200020ec <set_up_DIL+0x14>)
200020e0:	601a      	str	r2, [r3, #0]
}
200020e2:	46c0      	nop			; (mov r8, r8)
200020e4:	46bd      	mov	sp, r7
200020e6:	bd80      	pop	{r7, pc}
200020e8:	40020c00 	andmi	r0, r2, r0, lsl #24
200020ec:	55550000 	ldrbpl	r0, [r5, #-0]

200020f0 <read_DIL>:

char read_DIL( void ) {
200020f0:	b580      	push	{r7, lr}
200020f2:	af00      	add	r7, sp, #0
	return GPIO_D.idrLow;
200020f4:	4b02      	ldr	r3, [pc, #8]	; (20002100 <read_DIL+0x10>)
200020f6:	7c1b      	ldrb	r3, [r3, #16]
200020f8:	b2db      	uxtb	r3, r3
}
200020fa:	0018      	movs	r0, r3
200020fc:	46bd      	mov	sp, r7
200020fe:	bd80      	pop	{r7, pc}
20002100:	40020c00 	andmi	r0, r2, r0, lsl #24

20002104 <read_DIL_single>:


int read_DIL_single( int bit ) {
20002104:	b590      	push	{r4, r7, lr}
20002106:	b085      	sub	sp, #20
20002108:	af00      	add	r7, sp, #0
2000210a:	6078      	str	r0, [r7, #4]
	char DIL = read_DIL();
2000210c:	230f      	movs	r3, #15
2000210e:	18fc      	adds	r4, r7, r3
20002110:	f7ff ffee 	bl	200020f0 <read_DIL>
20002114:	0003      	movs	r3, r0
20002116:	7023      	strb	r3, [r4, #0]
	if (DIL & (1<<bit)) {
20002118:	230f      	movs	r3, #15
2000211a:	18fb      	adds	r3, r7, r3
2000211c:	781a      	ldrb	r2, [r3, #0]
2000211e:	687b      	ldr	r3, [r7, #4]
20002120:	411a      	asrs	r2, r3
20002122:	0013      	movs	r3, r2
20002124:	2201      	movs	r2, #1
20002126:	4013      	ands	r3, r2
20002128:	d001      	beq.n	2000212e <read_DIL_single+0x2a>
		return 0;
2000212a:	2300      	movs	r3, #0
2000212c:	e000      	b.n	20002130 <read_DIL_single+0x2c>
	} else {
		return 1;
2000212e:	2301      	movs	r3, #1
	}
20002130:	0018      	movs	r0, r3
20002132:	46bd      	mov	sp, r7
20002134:	b005      	add	sp, #20
20002136:	bd90      	pop	{r4, r7, pc}

20002138 <ascii_ctrl_bit_set>:
void ascii_write_data(unsigned char data);
unsigned char ascii_read_status(void);
unsigned char ascii_read_data(void);


void ascii_ctrl_bit_set(unsigned char x){
20002138:	b580      	push	{r7, lr}
2000213a:	b084      	sub	sp, #16
2000213c:	af00      	add	r7, sp, #0
2000213e:	0002      	movs	r2, r0
20002140:	1dfb      	adds	r3, r7, #7
20002142:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och ettstÃƒÂ¤ll de bitar som ÃƒÂ¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
20002144:	4a0c      	ldr	r2, [pc, #48]	; (20002178 <ascii_ctrl_bit_set+0x40>)
20002146:	230f      	movs	r3, #15
20002148:	18fb      	adds	r3, r7, r3
2000214a:	7812      	ldrb	r2, [r2, #0]
2000214c:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
2000214e:	1dfa      	adds	r2, r7, #7
20002150:	230f      	movs	r3, #15
20002152:	18fb      	adds	r3, r7, r3
20002154:	7812      	ldrb	r2, [r2, #0]
20002156:	781b      	ldrb	r3, [r3, #0]
20002158:	4313      	orrs	r3, r2
2000215a:	b2da      	uxtb	r2, r3
2000215c:	230f      	movs	r3, #15
2000215e:	18fb      	adds	r3, r7, r3
20002160:	2104      	movs	r1, #4
20002162:	430a      	orrs	r2, r1
20002164:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20002166:	4a04      	ldr	r2, [pc, #16]	; (20002178 <ascii_ctrl_bit_set+0x40>)
20002168:	230f      	movs	r3, #15
2000216a:	18fb      	adds	r3, r7, r3
2000216c:	781b      	ldrb	r3, [r3, #0]
2000216e:	7013      	strb	r3, [r2, #0]
}
20002170:	46c0      	nop			; (mov r8, r8)
20002172:	46bd      	mov	sp, r7
20002174:	b004      	add	sp, #16
20002176:	bd80      	pop	{r7, pc}
20002178:	40021014 	andmi	r1, r2, r4, lsl r0

2000217c <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
2000217c:	b580      	push	{r7, lr}
2000217e:	b084      	sub	sp, #16
20002180:	af00      	add	r7, sp, #0
20002182:	0002      	movs	r2, r0
20002184:	1dfb      	adds	r3, r7, #7
20002186:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och nollstÃ¤ll de bitar som Ã¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
20002188:	4a0f      	ldr	r2, [pc, #60]	; (200021c8 <ascii_ctrl_bit_clear+0x4c>)
2000218a:	230f      	movs	r3, #15
2000218c:	18fb      	adds	r3, r7, r3
2000218e:	7812      	ldrb	r2, [r2, #0]
20002190:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
20002192:	1dfb      	adds	r3, r7, #7
20002194:	781b      	ldrb	r3, [r3, #0]
20002196:	b25b      	sxtb	r3, r3
20002198:	43db      	mvns	r3, r3
2000219a:	b25b      	sxtb	r3, r3
2000219c:	220f      	movs	r2, #15
2000219e:	18ba      	adds	r2, r7, r2
200021a0:	7812      	ldrb	r2, [r2, #0]
200021a2:	b252      	sxtb	r2, r2
200021a4:	4013      	ands	r3, r2
200021a6:	b25b      	sxtb	r3, r3
200021a8:	2204      	movs	r2, #4
200021aa:	4313      	orrs	r3, r2
200021ac:	b25a      	sxtb	r2, r3
200021ae:	230f      	movs	r3, #15
200021b0:	18fb      	adds	r3, r7, r3
200021b2:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
200021b4:	4a04      	ldr	r2, [pc, #16]	; (200021c8 <ascii_ctrl_bit_clear+0x4c>)
200021b6:	230f      	movs	r3, #15
200021b8:	18fb      	adds	r3, r7, r3
200021ba:	781b      	ldrb	r3, [r3, #0]
200021bc:	7013      	strb	r3, [r2, #0]
}
200021be:	46c0      	nop			; (mov r8, r8)
200021c0:	46bd      	mov	sp, r7
200021c2:	b004      	add	sp, #16
200021c4:	bd80      	pop	{r7, pc}
200021c6:	46c0      	nop			; (mov r8, r8)
200021c8:	40021014 	andmi	r1, r2, r4, lsl r0

200021cc <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
200021cc:	b580      	push	{r7, lr}
200021ce:	b082      	sub	sp, #8
200021d0:	af00      	add	r7, sp, #0
200021d2:	0002      	movs	r2, r0
200021d4:	1dfb      	adds	r3, r7, #7
200021d6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
200021d8:	2001      	movs	r0, #1
200021da:	f7ff ffcf 	bl	2000217c <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
200021de:	2002      	movs	r0, #2
200021e0:	f7ff ffcc 	bl	2000217c <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
200021e4:	1dfb      	adds	r3, r7, #7
200021e6:	781b      	ldrb	r3, [r3, #0]
200021e8:	0018      	movs	r0, r3
200021ea:	f000 f86d 	bl	200022c8 <ascii_write_controller>
}
200021ee:	46c0      	nop			; (mov r8, r8)
200021f0:	46bd      	mov	sp, r7
200021f2:	b002      	add	sp, #8
200021f4:	bd80      	pop	{r7, pc}

200021f6 <ascii_write_data>:

void ascii_write_data(unsigned char data){
200021f6:	b580      	push	{r7, lr}
200021f8:	b082      	sub	sp, #8
200021fa:	af00      	add	r7, sp, #0
200021fc:	0002      	movs	r2, r0
200021fe:	1dfb      	adds	r3, r7, #7
20002200:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20002202:	2001      	movs	r0, #1
20002204:	f7ff ff98 	bl	20002138 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20002208:	2002      	movs	r0, #2
2000220a:	f7ff ffb7 	bl	2000217c <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
2000220e:	1dfb      	adds	r3, r7, #7
20002210:	781b      	ldrb	r3, [r3, #0]
20002212:	0018      	movs	r0, r3
20002214:	f000 f858 	bl	200022c8 <ascii_write_controller>
}
20002218:	46c0      	nop			; (mov r8, r8)
2000221a:	46bd      	mov	sp, r7
2000221c:	b002      	add	sp, #8
2000221e:	bd80      	pop	{r7, pc}

20002220 <ascii_read_status>:

unsigned char ascii_read_status(void){
20002220:	b590      	push	{r4, r7, lr}
20002222:	b083      	sub	sp, #12
20002224:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20002226:	4b11      	ldr	r3, [pc, #68]	; (2000226c <ascii_read_status+0x4c>)
20002228:	4a10      	ldr	r2, [pc, #64]	; (2000226c <ascii_read_status+0x4c>)
2000222a:	6812      	ldr	r2, [r2, #0]
2000222c:	0412      	lsls	r2, r2, #16
2000222e:	0c12      	lsrs	r2, r2, #16
20002230:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20002232:	2001      	movs	r0, #1
20002234:	f7ff ffa2 	bl	2000217c <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20002238:	2002      	movs	r0, #2
2000223a:	f7ff ff7d 	bl	20002138 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
2000223e:	1dfc      	adds	r4, r7, #7
20002240:	f000 f85a 	bl	200022f8 <ascii_read_controller>
20002244:	0003      	movs	r3, r0
20002246:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20002248:	4b08      	ldr	r3, [pc, #32]	; (2000226c <ascii_read_status+0x4c>)
2000224a:	4a08      	ldr	r2, [pc, #32]	; (2000226c <ascii_read_status+0x4c>)
2000224c:	6812      	ldr	r2, [r2, #0]
2000224e:	0412      	lsls	r2, r2, #16
20002250:	0c12      	lsrs	r2, r2, #16
20002252:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20002254:	4b05      	ldr	r3, [pc, #20]	; (2000226c <ascii_read_status+0x4c>)
20002256:	4a05      	ldr	r2, [pc, #20]	; (2000226c <ascii_read_status+0x4c>)
20002258:	6812      	ldr	r2, [r2, #0]
2000225a:	4905      	ldr	r1, [pc, #20]	; (20002270 <ascii_read_status+0x50>)
2000225c:	430a      	orrs	r2, r1
2000225e:	601a      	str	r2, [r3, #0]
	return rv;
20002260:	1dfb      	adds	r3, r7, #7
20002262:	781b      	ldrb	r3, [r3, #0]
}
20002264:	0018      	movs	r0, r3
20002266:	46bd      	mov	sp, r7
20002268:	b003      	add	sp, #12
2000226a:	bd90      	pop	{r4, r7, pc}
2000226c:	40021000 	andmi	r1, r2, r0
20002270:	55550000 	ldrbpl	r0, [r5, #-0]

20002274 <ascii_read_data>:

unsigned char ascii_read_data(void){
20002274:	b590      	push	{r4, r7, lr}
20002276:	b083      	sub	sp, #12
20002278:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
2000227a:	4b11      	ldr	r3, [pc, #68]	; (200022c0 <ascii_read_data+0x4c>)
2000227c:	4a10      	ldr	r2, [pc, #64]	; (200022c0 <ascii_read_data+0x4c>)
2000227e:	6812      	ldr	r2, [r2, #0]
20002280:	0412      	lsls	r2, r2, #16
20002282:	0c12      	lsrs	r2, r2, #16
20002284:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20002286:	2001      	movs	r0, #1
20002288:	f7ff ff56 	bl	20002138 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
2000228c:	2002      	movs	r0, #2
2000228e:	f7ff ff53 	bl	20002138 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20002292:	1dfc      	adds	r4, r7, #7
20002294:	f000 f830 	bl	200022f8 <ascii_read_controller>
20002298:	0003      	movs	r3, r0
2000229a:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
2000229c:	4b08      	ldr	r3, [pc, #32]	; (200022c0 <ascii_read_data+0x4c>)
2000229e:	4a08      	ldr	r2, [pc, #32]	; (200022c0 <ascii_read_data+0x4c>)
200022a0:	6812      	ldr	r2, [r2, #0]
200022a2:	0412      	lsls	r2, r2, #16
200022a4:	0c12      	lsrs	r2, r2, #16
200022a6:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
200022a8:	4b05      	ldr	r3, [pc, #20]	; (200022c0 <ascii_read_data+0x4c>)
200022aa:	4a05      	ldr	r2, [pc, #20]	; (200022c0 <ascii_read_data+0x4c>)
200022ac:	6812      	ldr	r2, [r2, #0]
200022ae:	4905      	ldr	r1, [pc, #20]	; (200022c4 <ascii_read_data+0x50>)
200022b0:	430a      	orrs	r2, r1
200022b2:	601a      	str	r2, [r3, #0]
	return rv;
200022b4:	1dfb      	adds	r3, r7, #7
200022b6:	781b      	ldrb	r3, [r3, #0]
}
200022b8:	0018      	movs	r0, r3
200022ba:	46bd      	mov	sp, r7
200022bc:	b003      	add	sp, #12
200022be:	bd90      	pop	{r4, r7, pc}
200022c0:	40021000 	andmi	r1, r2, r0
200022c4:	55550000 	ldrbpl	r0, [r5, #-0]

200022c8 <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
200022c8:	b580      	push	{r7, lr}
200022ca:	b082      	sub	sp, #8
200022cc:	af00      	add	r7, sp, #0
200022ce:	0002      	movs	r2, r0
200022d0:	1dfb      	adds	r3, r7, #7
200022d2:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
200022d4:	2040      	movs	r0, #64	; 0x40
200022d6:	f7ff ff2f 	bl	20002138 <ascii_ctrl_bit_set>
	*portOdrHigh = c;
200022da:	4a06      	ldr	r2, [pc, #24]	; (200022f4 <ascii_write_controller+0x2c>)
200022dc:	1dfb      	adds	r3, r7, #7
200022de:	781b      	ldrb	r3, [r3, #0]
200022e0:	7013      	strb	r3, [r2, #0]
	delay_250ns();
200022e2:	f7fe ffaf 	bl	20001244 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
200022e6:	2040      	movs	r0, #64	; 0x40
200022e8:	f7ff ff48 	bl	2000217c <ascii_ctrl_bit_clear>
}
200022ec:	46c0      	nop			; (mov r8, r8)
200022ee:	46bd      	mov	sp, r7
200022f0:	b002      	add	sp, #8
200022f2:	bd80      	pop	{r7, pc}
200022f4:	40021015 	andmi	r1, r2, r5, lsl r0

200022f8 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
200022f8:	b580      	push	{r7, lr}
200022fa:	b082      	sub	sp, #8
200022fc:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E);
200022fe:	2040      	movs	r0, #64	; 0x40
20002300:	f7ff ff1a 	bl	20002138 <ascii_ctrl_bit_set>
	delay_250ns();
20002304:	f7fe ff9e 	bl	20001244 <delay_250ns>
	delay_250ns();
20002308:	f7fe ff9c 	bl	20001244 <delay_250ns>
	c = *portIdrHigh;
2000230c:	4a06      	ldr	r2, [pc, #24]	; (20002328 <ascii_read_controller+0x30>)
2000230e:	1dfb      	adds	r3, r7, #7
20002310:	7812      	ldrb	r2, [r2, #0]
20002312:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20002314:	2040      	movs	r0, #64	; 0x40
20002316:	f7ff ff31 	bl	2000217c <ascii_ctrl_bit_clear>
	return c;
2000231a:	1dfb      	adds	r3, r7, #7
2000231c:	781b      	ldrb	r3, [r3, #0]
}
2000231e:	0018      	movs	r0, r3
20002320:	46bd      	mov	sp, r7
20002322:	b002      	add	sp, #8
20002324:	bd80      	pop	{r7, pc}
20002326:	46c0      	nop			; (mov r8, r8)
20002328:	40021011 	andmi	r1, r2, r1, lsl r0

2000232c <ascii_write_char>:

void ascii_write_char(unsigned char c){
2000232c:	b580      	push	{r7, lr}
2000232e:	b082      	sub	sp, #8
20002330:	af00      	add	r7, sp, #0
20002332:	0002      	movs	r2, r0
20002334:	1dfb      	adds	r3, r7, #7
20002336:	701a      	strb	r2, [r3, #0]
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20002338:	46c0      	nop			; (mov r8, r8)
2000233a:	f7ff ff71 	bl	20002220 <ascii_read_status>
2000233e:	0003      	movs	r3, r0
20002340:	001a      	movs	r2, r3
20002342:	2380      	movs	r3, #128	; 0x80
20002344:	4013      	ands	r3, r2
20002346:	2b80      	cmp	r3, #128	; 0x80
20002348:	d0f7      	beq.n	2000233a <ascii_write_char+0xe>
		delay_micro(8); //latenstid
2000234a:	2008      	movs	r0, #8
2000234c:	f7fe ffbe 	bl	200012cc <delay_micro>
		ascii_write_data(c);
20002350:	1dfb      	adds	r3, r7, #7
20002352:	781b      	ldrb	r3, [r3, #0]
20002354:	0018      	movs	r0, r3
20002356:	f7ff ff4e 	bl	200021f6 <ascii_write_data>
		delay_micro(50); //istÃƒÂ¤llet fÃƒÂ¶r 43us
2000235a:	2032      	movs	r0, #50	; 0x32
2000235c:	f7fe ffb6 	bl	200012cc <delay_micro>
}
20002360:	46c0      	nop			; (mov r8, r8)
20002362:	46bd      	mov	sp, r7
20002364:	b002      	add	sp, #8
20002366:	bd80      	pop	{r7, pc}

20002368 <ascii_goToXY>:

void ascii_goToXY(unsigned char row, unsigned char column){
20002368:	b580      	push	{r7, lr}
2000236a:	b084      	sub	sp, #16
2000236c:	af00      	add	r7, sp, #0
2000236e:	0002      	movs	r2, r0
20002370:	1dfb      	adds	r3, r7, #7
20002372:	701a      	strb	r2, [r3, #0]
20002374:	1dbb      	adds	r3, r7, #6
20002376:	1c0a      	adds	r2, r1, #0
20002378:	701a      	strb	r2, [r3, #0]
	unsigned char address = row-1;
2000237a:	230f      	movs	r3, #15
2000237c:	18fb      	adds	r3, r7, r3
2000237e:	1dfa      	adds	r2, r7, #7
20002380:	7812      	ldrb	r2, [r2, #0]
20002382:	3a01      	subs	r2, #1
20002384:	701a      	strb	r2, [r3, #0]
	if(column == 2){
20002386:	1dbb      	adds	r3, r7, #6
20002388:	781b      	ldrb	r3, [r3, #0]
2000238a:	2b02      	cmp	r3, #2
2000238c:	d106      	bne.n	2000239c <ascii_goToXY+0x34>
		address += 0x40;
2000238e:	230f      	movs	r3, #15
20002390:	18fb      	adds	r3, r7, r3
20002392:	220f      	movs	r2, #15
20002394:	18ba      	adds	r2, r7, r2
20002396:	7812      	ldrb	r2, [r2, #0]
20002398:	3240      	adds	r2, #64	; 0x40
2000239a:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
2000239c:	230f      	movs	r3, #15
2000239e:	18fb      	adds	r3, r7, r3
200023a0:	781b      	ldrb	r3, [r3, #0]
200023a2:	2280      	movs	r2, #128	; 0x80
200023a4:	4252      	negs	r2, r2
200023a6:	4313      	orrs	r3, r2
200023a8:	b2db      	uxtb	r3, r3
200023aa:	0018      	movs	r0, r3
200023ac:	f7ff ff0e 	bl	200021cc <ascii_write_cmd>
}
200023b0:	46c0      	nop			; (mov r8, r8)
200023b2:	46bd      	mov	sp, r7
200023b4:	b004      	add	sp, #16
200023b6:	bd80      	pop	{r7, pc}

200023b8 <ascii_init>:

void ascii_init(void){
200023b8:	b580      	push	{r7, lr}
200023ba:	af00      	add	r7, sp, #0
	//initiera displayen:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃ¤nta tills displayed Ã¤r redo
200023bc:	46c0      	nop			; (mov r8, r8)
200023be:	f7ff ff2f 	bl	20002220 <ascii_read_status>
200023c2:	0003      	movs	r3, r0
200023c4:	001a      	movs	r2, r3
200023c6:	2380      	movs	r3, #128	; 0x80
200023c8:	4013      	ands	r3, r2
200023ca:	2b80      	cmp	r3, #128	; 0x80
200023cc:	d0f7      	beq.n	200023be <ascii_init+0x6>
		delay_micro(20); //latenstid 
200023ce:	2014      	movs	r0, #20
200023d0:	f7fe ff7c 	bl	200012cc <delay_micro>
		ascii_write_cmd(0x38); //Function set (39us), 000011NFXX, N = antal rader = 2, F = -->0=5x8<--, 1=5x11
200023d4:	2038      	movs	r0, #56	; 0x38
200023d6:	f7ff fef9 	bl	200021cc <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
200023da:	2064      	movs	r0, #100	; 0x64
200023dc:	f7fe ff76 	bl	200012cc <delay_micro>
		
	// clear display
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
200023e0:	46c0      	nop			; (mov r8, r8)
200023e2:	f7ff ff1d 	bl	20002220 <ascii_read_status>
200023e6:	0003      	movs	r3, r0
200023e8:	001a      	movs	r2, r3
200023ea:	2380      	movs	r3, #128	; 0x80
200023ec:	4013      	ands	r3, r2
200023ee:	2b80      	cmp	r3, #128	; 0x80
200023f0:	d0f7      	beq.n	200023e2 <ascii_init+0x2a>
		delay_micro(20); //latenstid
200023f2:	2014      	movs	r0, #20
200023f4:	f7fe ff6a 	bl	200012cc <delay_micro>
		ascii_write_cmd(0x01); 
200023f8:	2001      	movs	r0, #1
200023fa:	f7ff fee7 	bl	200021cc <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
200023fe:	2064      	movs	r0, #100	; 0x64
20002400:	f7fe ff64 	bl	200012cc <delay_micro>

	//display control:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20002404:	46c0      	nop			; (mov r8, r8)
20002406:	f7ff ff0b 	bl	20002220 <ascii_read_status>
2000240a:	0003      	movs	r3, r0
2000240c:	001a      	movs	r2, r3
2000240e:	2380      	movs	r3, #128	; 0x80
20002410:	4013      	ands	r3, r2
20002412:	2b80      	cmp	r3, #128	; 0x80
20002414:	d0f7      	beq.n	20002406 <ascii_init+0x4e>
		delay_micro(20); //latenstid
20002416:	2014      	movs	r0, #20
20002418:	f7fe ff58 	bl	200012cc <delay_micro>
		ascii_write_cmd(0x0C); //000001 + XXX. X:ena = 0:av / 1:pÃƒÂ¥ -  SkÃƒÂ¤rm/MarkÃƒÂ¶r/BlinkaMarkÃƒÂ¶ren
2000241c:	200c      	movs	r0, #12
2000241e:	f7ff fed5 	bl	200021cc <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20002422:	2064      	movs	r0, #100	; 0x64
20002424:	f7fe ff52 	bl	200012cc <delay_micro>
		
	// entry mode set
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20002428:	46c0      	nop			; (mov r8, r8)
2000242a:	f7ff fef9 	bl	20002220 <ascii_read_status>
2000242e:	0003      	movs	r3, r0
20002430:	001a      	movs	r2, r3
20002432:	2380      	movs	r3, #128	; 0x80
20002434:	4013      	ands	r3, r2
20002436:	2b80      	cmp	r3, #128	; 0x80
20002438:	d0f7      	beq.n	2000242a <ascii_init+0x72>
		delay_micro(20); //latenstid
2000243a:	2014      	movs	r0, #20
2000243c:	f7fe ff46 	bl	200012cc <delay_micro>
		ascii_write_cmd(0x06); //00000001 + XY. X=0: markÃƒÂ¶ren vÃƒÂ¤nst. || X=1: marÃƒÂ¶kren hÃƒÂ¶g. - Y=0: skift av || Y=1: skift pÃƒÂ¥
20002440:	2006      	movs	r0, #6
20002442:	f7ff fec3 	bl	200021cc <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20002446:	2064      	movs	r0, #100	; 0x64
20002448:	f7fe ff40 	bl	200012cc <delay_micro>
		
		
}
2000244c:	46c0      	nop			; (mov r8, r8)
2000244e:	46bd      	mov	sp, r7
20002450:	bd80      	pop	{r7, pc}

20002452 <init_application>:

void init_application(void){
20002452:	b580      	push	{r7, lr}
20002454:	af00      	add	r7, sp, #0
	#ifdef USBDM
		*((unsigned long *) 0x40023830) = 0x18; //startar klockor pÃ¥ port D och E
		//__asm volatile ("LDR R0, =0x08000209\n BLX R0 \n"); //initiera PLL
	#endif
	//"initierar Port E med anvÃƒÂ¤ndning med LCD-modulen, dvs. sÃƒÂ¥vÃƒÂ¤l port E0-7 som E8-15 sÃƒÂ¤tts till utgÃƒÂ¥ngar
	* portModer = 0x55555555;
20002456:	4b03      	ldr	r3, [pc, #12]	; (20002464 <init_application+0x12>)
20002458:	4a03      	ldr	r2, [pc, #12]	; (20002468 <init_application+0x16>)
2000245a:	601a      	str	r2, [r3, #0]
}
2000245c:	46c0      	nop			; (mov r8, r8)
2000245e:	46bd      	mov	sp, r7
20002460:	bd80      	pop	{r7, pc}
20002462:	46c0      	nop			; (mov r8, r8)
20002464:	40021000 	andmi	r1, r2, r0
20002468:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000246c <set_up_ascii>:

void set_up_ascii( void ) {
2000246c:	b580      	push	{r7, lr}
2000246e:	af00      	add	r7, sp, #0
	init_application();
20002470:	f7ff ffef 	bl	20002452 <init_application>
	ascii_init();
20002474:	f7ff ffa0 	bl	200023b8 <ascii_init>
}
20002478:	46c0      	nop			; (mov r8, r8)
2000247a:	46bd      	mov	sp, r7
2000247c:	bd80      	pop	{r7, pc}

2000247e <clear_ascii>:

void clear_ascii( void ) {
2000247e:	b590      	push	{r4, r7, lr}
20002480:	b089      	sub	sp, #36	; 0x24
20002482:	af00      	add	r7, sp, #0
	char *s;
	char clear[] = "                    ";
20002484:	1d3b      	adds	r3, r7, #4
20002486:	4a17      	ldr	r2, [pc, #92]	; (200024e4 <clear_ascii+0x66>)
20002488:	ca13      	ldmia	r2!, {r0, r1, r4}
2000248a:	c313      	stmia	r3!, {r0, r1, r4}
2000248c:	ca03      	ldmia	r2!, {r0, r1}
2000248e:	c303      	stmia	r3!, {r0, r1}
20002490:	7812      	ldrb	r2, [r2, #0]
20002492:	701a      	strb	r2, [r3, #0]
	
	s = clear;
20002494:	1d3b      	adds	r3, r7, #4
20002496:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,1);
20002498:	2101      	movs	r1, #1
2000249a:	2001      	movs	r0, #1
2000249c:	f7ff ff64 	bl	20002368 <ascii_goToXY>
	while(*s){
200024a0:	e006      	b.n	200024b0 <clear_ascii+0x32>
		ascii_write_char(*s++);
200024a2:	69fb      	ldr	r3, [r7, #28]
200024a4:	1c5a      	adds	r2, r3, #1
200024a6:	61fa      	str	r2, [r7, #28]
200024a8:	781b      	ldrb	r3, [r3, #0]
200024aa:	0018      	movs	r0, r3
200024ac:	f7ff ff3e 	bl	2000232c <ascii_write_char>
	while(*s){
200024b0:	69fb      	ldr	r3, [r7, #28]
200024b2:	781b      	ldrb	r3, [r3, #0]
200024b4:	2b00      	cmp	r3, #0
200024b6:	d1f4      	bne.n	200024a2 <clear_ascii+0x24>
	}
	s = clear;
200024b8:	1d3b      	adds	r3, r7, #4
200024ba:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,2);
200024bc:	2102      	movs	r1, #2
200024be:	2001      	movs	r0, #1
200024c0:	f7ff ff52 	bl	20002368 <ascii_goToXY>
	while(*s){
200024c4:	e006      	b.n	200024d4 <clear_ascii+0x56>
		ascii_write_char(*s++);
200024c6:	69fb      	ldr	r3, [r7, #28]
200024c8:	1c5a      	adds	r2, r3, #1
200024ca:	61fa      	str	r2, [r7, #28]
200024cc:	781b      	ldrb	r3, [r3, #0]
200024ce:	0018      	movs	r0, r3
200024d0:	f7ff ff2c 	bl	2000232c <ascii_write_char>
	while(*s){
200024d4:	69fb      	ldr	r3, [r7, #28]
200024d6:	781b      	ldrb	r3, [r3, #0]
200024d8:	2b00      	cmp	r3, #0
200024da:	d1f4      	bne.n	200024c6 <clear_ascii+0x48>
	}
}
200024dc:	46c0      	nop			; (mov r8, r8)
200024de:	46bd      	mov	sp, r7
200024e0:	b009      	add	sp, #36	; 0x24
200024e2:	bd90      	pop	{r4, r7, pc}
200024e4:	2000696c 	andcs	r6, r0, ip, ror #18

200024e8 <ascii_write>:

void ascii_write(char *row1, char *row2) {
200024e8:	b580      	push	{r7, lr}
200024ea:	b082      	sub	sp, #8
200024ec:	af00      	add	r7, sp, #0
200024ee:	6078      	str	r0, [r7, #4]
200024f0:	6039      	str	r1, [r7, #0]
	clear_ascii();
200024f2:	f7ff ffc4 	bl	2000247e <clear_ascii>
	
	ascii_goToXY(1,1);
200024f6:	2101      	movs	r1, #1
200024f8:	2001      	movs	r0, #1
200024fa:	f7ff ff35 	bl	20002368 <ascii_goToXY>
	while(*row1){
200024fe:	e006      	b.n	2000250e <ascii_write+0x26>
		ascii_write_char(*row1++);
20002500:	687b      	ldr	r3, [r7, #4]
20002502:	1c5a      	adds	r2, r3, #1
20002504:	607a      	str	r2, [r7, #4]
20002506:	781b      	ldrb	r3, [r3, #0]
20002508:	0018      	movs	r0, r3
2000250a:	f7ff ff0f 	bl	2000232c <ascii_write_char>
	while(*row1){
2000250e:	687b      	ldr	r3, [r7, #4]
20002510:	781b      	ldrb	r3, [r3, #0]
20002512:	2b00      	cmp	r3, #0
20002514:	d1f4      	bne.n	20002500 <ascii_write+0x18>
	}	
	ascii_goToXY(1,2);
20002516:	2102      	movs	r1, #2
20002518:	2001      	movs	r0, #1
2000251a:	f7ff ff25 	bl	20002368 <ascii_goToXY>
	while(*row2){
2000251e:	e006      	b.n	2000252e <ascii_write+0x46>
		ascii_write_char(*row2++);
20002520:	683b      	ldr	r3, [r7, #0]
20002522:	1c5a      	adds	r2, r3, #1
20002524:	603a      	str	r2, [r7, #0]
20002526:	781b      	ldrb	r3, [r3, #0]
20002528:	0018      	movs	r0, r3
2000252a:	f7ff feff 	bl	2000232c <ascii_write_char>
	while(*row2){
2000252e:	683b      	ldr	r3, [r7, #0]
20002530:	781b      	ldrb	r3, [r3, #0]
20002532:	2b00      	cmp	r3, #0
20002534:	d1f4      	bne.n	20002520 <ascii_write+0x38>
	}
	
	ascii_goToXY(21,1);
20002536:	2101      	movs	r1, #1
20002538:	2015      	movs	r0, #21
2000253a:	f7ff ff15 	bl	20002368 <ascii_goToXY>
}
2000253e:	46c0      	nop			; (mov r8, r8)
20002540:	46bd      	mov	sp, r7
20002542:	b002      	add	sp, #8
20002544:	bd80      	pop	{r7, pc}

20002546 <ascii_write_part>:

void ascii_write_part(char *row1, char *row2, int limit1, int limit2) {
20002546:	b580      	push	{r7, lr}
20002548:	b086      	sub	sp, #24
2000254a:	af00      	add	r7, sp, #0
2000254c:	60f8      	str	r0, [r7, #12]
2000254e:	60b9      	str	r1, [r7, #8]
20002550:	607a      	str	r2, [r7, #4]
20002552:	603b      	str	r3, [r7, #0]
	clear_ascii();
20002554:	f7ff ff93 	bl	2000247e <clear_ascii>
	
	ascii_goToXY(1,1);
20002558:	2101      	movs	r1, #1
2000255a:	2001      	movs	r0, #1
2000255c:	f7ff ff04 	bl	20002368 <ascii_goToXY>
	int i = 0;
20002560:	2300      	movs	r3, #0
20002562:	617b      	str	r3, [r7, #20]
	if(limit1 > 0) {
20002564:	687b      	ldr	r3, [r7, #4]
20002566:	2b00      	cmp	r3, #0
20002568:	dd11      	ble.n	2000258e <ascii_write_part+0x48>
		while(*row1 && (i++ < limit1)){
2000256a:	e006      	b.n	2000257a <ascii_write_part+0x34>
			ascii_write_char(*row1++);
2000256c:	68fb      	ldr	r3, [r7, #12]
2000256e:	1c5a      	adds	r2, r3, #1
20002570:	60fa      	str	r2, [r7, #12]
20002572:	781b      	ldrb	r3, [r3, #0]
20002574:	0018      	movs	r0, r3
20002576:	f7ff fed9 	bl	2000232c <ascii_write_char>
		while(*row1 && (i++ < limit1)){
2000257a:	68fb      	ldr	r3, [r7, #12]
2000257c:	781b      	ldrb	r3, [r3, #0]
2000257e:	2b00      	cmp	r3, #0
20002580:	d005      	beq.n	2000258e <ascii_write_part+0x48>
20002582:	697b      	ldr	r3, [r7, #20]
20002584:	1c5a      	adds	r2, r3, #1
20002586:	617a      	str	r2, [r7, #20]
20002588:	687a      	ldr	r2, [r7, #4]
2000258a:	4293      	cmp	r3, r2
2000258c:	dbee      	blt.n	2000256c <ascii_write_part+0x26>
		}			
	}

	ascii_goToXY(1,2);
2000258e:	2102      	movs	r1, #2
20002590:	2001      	movs	r0, #1
20002592:	f7ff fee9 	bl	20002368 <ascii_goToXY>
	i = 0;
20002596:	2300      	movs	r3, #0
20002598:	617b      	str	r3, [r7, #20]
	if(limit2 > 0) {
2000259a:	683b      	ldr	r3, [r7, #0]
2000259c:	2b00      	cmp	r3, #0
2000259e:	dd11      	ble.n	200025c4 <ascii_write_part+0x7e>
		while(*row2 && (i++ < limit2)){
200025a0:	e006      	b.n	200025b0 <ascii_write_part+0x6a>
			ascii_write_char(*row2++);
200025a2:	68bb      	ldr	r3, [r7, #8]
200025a4:	1c5a      	adds	r2, r3, #1
200025a6:	60ba      	str	r2, [r7, #8]
200025a8:	781b      	ldrb	r3, [r3, #0]
200025aa:	0018      	movs	r0, r3
200025ac:	f7ff febe 	bl	2000232c <ascii_write_char>
		while(*row2 && (i++ < limit2)){
200025b0:	68bb      	ldr	r3, [r7, #8]
200025b2:	781b      	ldrb	r3, [r3, #0]
200025b4:	2b00      	cmp	r3, #0
200025b6:	d005      	beq.n	200025c4 <ascii_write_part+0x7e>
200025b8:	697b      	ldr	r3, [r7, #20]
200025ba:	1c5a      	adds	r2, r3, #1
200025bc:	617a      	str	r2, [r7, #20]
200025be:	683a      	ldr	r2, [r7, #0]
200025c0:	4293      	cmp	r3, r2
200025c2:	dbee      	blt.n	200025a2 <ascii_write_part+0x5c>
		}
	}
	
	ascii_goToXY(21,1);
200025c4:	2101      	movs	r1, #1
200025c6:	2015      	movs	r0, #21
200025c8:	f7ff fece 	bl	20002368 <ascii_goToXY>
}
200025cc:	46c0      	nop			; (mov r8, r8)
200025ce:	46bd      	mov	sp, r7
200025d0:	b006      	add	sp, #24
200025d2:	bd80      	pop	{r7, pc}

200025d4 <ascii_test>:



void ascii_test(void) {
200025d4:	b590      	push	{r4, r7, lr}
200025d6:	b08b      	sub	sp, #44	; 0x2c
200025d8:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Alfanumerisk";
200025da:	2314      	movs	r3, #20
200025dc:	18fb      	adds	r3, r7, r3
200025de:	4a1c      	ldr	r2, [pc, #112]	; (20002650 <ascii_test+0x7c>)
200025e0:	ca13      	ldmia	r2!, {r0, r1, r4}
200025e2:	c313      	stmia	r3!, {r0, r1, r4}
200025e4:	7812      	ldrb	r2, [r2, #0]
200025e6:	701a      	strb	r2, [r3, #0]
	char test2[] = "hardåäöare suger";
200025e8:	003b      	movs	r3, r7
200025ea:	4a1a      	ldr	r2, [pc, #104]	; (20002654 <ascii_test+0x80>)
200025ec:	ca13      	ldmia	r2!, {r0, r1, r4}
200025ee:	c313      	stmia	r3!, {r0, r1, r4}
200025f0:	ca03      	ldmia	r2!, {r0, r1}
200025f2:	c303      	stmia	r3!, {r0, r1}
	
	init_application();
200025f4:	f7ff ff2d 	bl	20002452 <init_application>
	ascii_init();
200025f8:	f7ff fede 	bl	200023b8 <ascii_init>
	ascii_goToXY(1,1);
200025fc:	2101      	movs	r1, #1
200025fe:	2001      	movs	r0, #1
20002600:	f7ff feb2 	bl	20002368 <ascii_goToXY>
	s = test1;
20002604:	2314      	movs	r3, #20
20002606:	18fb      	adds	r3, r7, r3
20002608:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
2000260a:	e006      	b.n	2000261a <ascii_test+0x46>
		ascii_write_char(*s++);
2000260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000260e:	1c5a      	adds	r2, r3, #1
20002610:	627a      	str	r2, [r7, #36]	; 0x24
20002612:	781b      	ldrb	r3, [r3, #0]
20002614:	0018      	movs	r0, r3
20002616:	f7ff fe89 	bl	2000232c <ascii_write_char>
	while(*s){
2000261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000261c:	781b      	ldrb	r3, [r3, #0]
2000261e:	2b00      	cmp	r3, #0
20002620:	d1f4      	bne.n	2000260c <ascii_test+0x38>
	}
	ascii_goToXY(1,2);
20002622:	2102      	movs	r1, #2
20002624:	2001      	movs	r0, #1
20002626:	f7ff fe9f 	bl	20002368 <ascii_goToXY>
	s = test2;
2000262a:	003b      	movs	r3, r7
2000262c:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
2000262e:	e006      	b.n	2000263e <ascii_test+0x6a>
		ascii_write_char(*s++);
20002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002632:	1c5a      	adds	r2, r3, #1
20002634:	627a      	str	r2, [r7, #36]	; 0x24
20002636:	781b      	ldrb	r3, [r3, #0]
20002638:	0018      	movs	r0, r3
2000263a:	f7ff fe77 	bl	2000232c <ascii_write_char>
	while(*s){
2000263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002640:	781b      	ldrb	r3, [r3, #0]
20002642:	2b00      	cmp	r3, #0
20002644:	d1f4      	bne.n	20002630 <ascii_test+0x5c>
	}
	return 0;
20002646:	46c0      	nop			; (mov r8, r8)
20002648:	46bd      	mov	sp, r7
2000264a:	b00b      	add	sp, #44	; 0x2c
2000264c:	bd90      	pop	{r4, r7, pc}
2000264e:	46c0      	nop			; (mov r8, r8)
20002650:	20006984 	andcs	r6, r0, r4, lsl #19
20002654:	20006994 	mulcs	r0, r4, r9

20002658 <display>:
#include "slow_text.h"
#include "ascii_display.h"

void display(SlowText *this, int length_of_row1) {
20002658:	b580      	push	{r7, lr}
2000265a:	b084      	sub	sp, #16
2000265c:	af00      	add	r7, sp, #0
2000265e:	6078      	str	r0, [r7, #4]
20002660:	6039      	str	r1, [r7, #0]
	int limit1 = this->counter / this->speed;
20002662:	687b      	ldr	r3, [r7, #4]
20002664:	689a      	ldr	r2, [r3, #8]
20002666:	687b      	ldr	r3, [r7, #4]
20002668:	68db      	ldr	r3, [r3, #12]
2000266a:	0019      	movs	r1, r3
2000266c:	0010      	movs	r0, r2
2000266e:	f000 f83d 	bl	200026ec <__divsi3>
20002672:	0003      	movs	r3, r0
20002674:	60fb      	str	r3, [r7, #12]
	int limit2 = this->counter / this->speed - length_of_row1;
20002676:	687b      	ldr	r3, [r7, #4]
20002678:	689a      	ldr	r2, [r3, #8]
2000267a:	687b      	ldr	r3, [r7, #4]
2000267c:	68db      	ldr	r3, [r3, #12]
2000267e:	0019      	movs	r1, r3
20002680:	0010      	movs	r0, r2
20002682:	f000 f833 	bl	200026ec <__divsi3>
20002686:	0003      	movs	r3, r0
20002688:	001a      	movs	r2, r3
2000268a:	683b      	ldr	r3, [r7, #0]
2000268c:	1ad3      	subs	r3, r2, r3
2000268e:	60bb      	str	r3, [r7, #8]
	ascii_write_part(this->row1, this->row2, limit1, limit2);
20002690:	687b      	ldr	r3, [r7, #4]
20002692:	6818      	ldr	r0, [r3, #0]
20002694:	687b      	ldr	r3, [r7, #4]
20002696:	6859      	ldr	r1, [r3, #4]
20002698:	68bb      	ldr	r3, [r7, #8]
2000269a:	68fa      	ldr	r2, [r7, #12]
2000269c:	f7ff ff53 	bl	20002546 <ascii_write_part>
	
	this->counter++;
200026a0:	687b      	ldr	r3, [r7, #4]
200026a2:	689b      	ldr	r3, [r3, #8]
200026a4:	1c5a      	adds	r2, r3, #1
200026a6:	687b      	ldr	r3, [r7, #4]
200026a8:	609a      	str	r2, [r3, #8]
}
200026aa:	46c0      	nop			; (mov r8, r8)
200026ac:	46bd      	mov	sp, r7
200026ae:	b004      	add	sp, #16
200026b0:	bd80      	pop	{r7, pc}

200026b2 <init_slow_text>:

void init_slow_text(SlowText *obj, char *row1, char *row2, int speed) {
200026b2:	b580      	push	{r7, lr}
200026b4:	b084      	sub	sp, #16
200026b6:	af00      	add	r7, sp, #0
200026b8:	60f8      	str	r0, [r7, #12]
200026ba:	60b9      	str	r1, [r7, #8]
200026bc:	607a      	str	r2, [r7, #4]
200026be:	603b      	str	r3, [r7, #0]
	obj->row1 = row1;
200026c0:	68fb      	ldr	r3, [r7, #12]
200026c2:	68ba      	ldr	r2, [r7, #8]
200026c4:	601a      	str	r2, [r3, #0]
	obj->row2 = row2;
200026c6:	68fb      	ldr	r3, [r7, #12]
200026c8:	687a      	ldr	r2, [r7, #4]
200026ca:	605a      	str	r2, [r3, #4]
	obj->speed = speed;
200026cc:	68fb      	ldr	r3, [r7, #12]
200026ce:	683a      	ldr	r2, [r7, #0]
200026d0:	60da      	str	r2, [r3, #12]
	obj->counter = 0;
200026d2:	68fb      	ldr	r3, [r7, #12]
200026d4:	2200      	movs	r2, #0
200026d6:	609a      	str	r2, [r3, #8]
	obj->display = display;
200026d8:	68fb      	ldr	r3, [r7, #12]
200026da:	4a03      	ldr	r2, [pc, #12]	; (200026e8 <init_slow_text+0x36>)
200026dc:	611a      	str	r2, [r3, #16]
200026de:	46c0      	nop			; (mov r8, r8)
200026e0:	46bd      	mov	sp, r7
200026e2:	b004      	add	sp, #16
200026e4:	bd80      	pop	{r7, pc}
200026e6:	46c0      	nop			; (mov r8, r8)
200026e8:	20002659 	andcs	r2, r0, r9, asr r6

200026ec <__divsi3>:
200026ec:	4603      	mov	r3, r0
200026ee:	430b      	orrs	r3, r1
200026f0:	d47f      	bmi.n	200027f2 <__divsi3+0x106>
200026f2:	2200      	movs	r2, #0
200026f4:	0843      	lsrs	r3, r0, #1
200026f6:	428b      	cmp	r3, r1
200026f8:	d374      	bcc.n	200027e4 <__divsi3+0xf8>
200026fa:	0903      	lsrs	r3, r0, #4
200026fc:	428b      	cmp	r3, r1
200026fe:	d35f      	bcc.n	200027c0 <__divsi3+0xd4>
20002700:	0a03      	lsrs	r3, r0, #8
20002702:	428b      	cmp	r3, r1
20002704:	d344      	bcc.n	20002790 <__divsi3+0xa4>
20002706:	0b03      	lsrs	r3, r0, #12
20002708:	428b      	cmp	r3, r1
2000270a:	d328      	bcc.n	2000275e <__divsi3+0x72>
2000270c:	0c03      	lsrs	r3, r0, #16
2000270e:	428b      	cmp	r3, r1
20002710:	d30d      	bcc.n	2000272e <__divsi3+0x42>
20002712:	22ff      	movs	r2, #255	; 0xff
20002714:	0209      	lsls	r1, r1, #8
20002716:	ba12      	rev	r2, r2
20002718:	0c03      	lsrs	r3, r0, #16
2000271a:	428b      	cmp	r3, r1
2000271c:	d302      	bcc.n	20002724 <__divsi3+0x38>
2000271e:	1212      	asrs	r2, r2, #8
20002720:	0209      	lsls	r1, r1, #8
20002722:	d065      	beq.n	200027f0 <__divsi3+0x104>
20002724:	0b03      	lsrs	r3, r0, #12
20002726:	428b      	cmp	r3, r1
20002728:	d319      	bcc.n	2000275e <__divsi3+0x72>
2000272a:	e000      	b.n	2000272e <__divsi3+0x42>
2000272c:	0a09      	lsrs	r1, r1, #8
2000272e:	0bc3      	lsrs	r3, r0, #15
20002730:	428b      	cmp	r3, r1
20002732:	d301      	bcc.n	20002738 <__divsi3+0x4c>
20002734:	03cb      	lsls	r3, r1, #15
20002736:	1ac0      	subs	r0, r0, r3
20002738:	4152      	adcs	r2, r2
2000273a:	0b83      	lsrs	r3, r0, #14
2000273c:	428b      	cmp	r3, r1
2000273e:	d301      	bcc.n	20002744 <__divsi3+0x58>
20002740:	038b      	lsls	r3, r1, #14
20002742:	1ac0      	subs	r0, r0, r3
20002744:	4152      	adcs	r2, r2
20002746:	0b43      	lsrs	r3, r0, #13
20002748:	428b      	cmp	r3, r1
2000274a:	d301      	bcc.n	20002750 <__divsi3+0x64>
2000274c:	034b      	lsls	r3, r1, #13
2000274e:	1ac0      	subs	r0, r0, r3
20002750:	4152      	adcs	r2, r2
20002752:	0b03      	lsrs	r3, r0, #12
20002754:	428b      	cmp	r3, r1
20002756:	d301      	bcc.n	2000275c <__divsi3+0x70>
20002758:	030b      	lsls	r3, r1, #12
2000275a:	1ac0      	subs	r0, r0, r3
2000275c:	4152      	adcs	r2, r2
2000275e:	0ac3      	lsrs	r3, r0, #11
20002760:	428b      	cmp	r3, r1
20002762:	d301      	bcc.n	20002768 <__divsi3+0x7c>
20002764:	02cb      	lsls	r3, r1, #11
20002766:	1ac0      	subs	r0, r0, r3
20002768:	4152      	adcs	r2, r2
2000276a:	0a83      	lsrs	r3, r0, #10
2000276c:	428b      	cmp	r3, r1
2000276e:	d301      	bcc.n	20002774 <__divsi3+0x88>
20002770:	028b      	lsls	r3, r1, #10
20002772:	1ac0      	subs	r0, r0, r3
20002774:	4152      	adcs	r2, r2
20002776:	0a43      	lsrs	r3, r0, #9
20002778:	428b      	cmp	r3, r1
2000277a:	d301      	bcc.n	20002780 <__divsi3+0x94>
2000277c:	024b      	lsls	r3, r1, #9
2000277e:	1ac0      	subs	r0, r0, r3
20002780:	4152      	adcs	r2, r2
20002782:	0a03      	lsrs	r3, r0, #8
20002784:	428b      	cmp	r3, r1
20002786:	d301      	bcc.n	2000278c <__divsi3+0xa0>
20002788:	020b      	lsls	r3, r1, #8
2000278a:	1ac0      	subs	r0, r0, r3
2000278c:	4152      	adcs	r2, r2
2000278e:	d2cd      	bcs.n	2000272c <__divsi3+0x40>
20002790:	09c3      	lsrs	r3, r0, #7
20002792:	428b      	cmp	r3, r1
20002794:	d301      	bcc.n	2000279a <__divsi3+0xae>
20002796:	01cb      	lsls	r3, r1, #7
20002798:	1ac0      	subs	r0, r0, r3
2000279a:	4152      	adcs	r2, r2
2000279c:	0983      	lsrs	r3, r0, #6
2000279e:	428b      	cmp	r3, r1
200027a0:	d301      	bcc.n	200027a6 <__divsi3+0xba>
200027a2:	018b      	lsls	r3, r1, #6
200027a4:	1ac0      	subs	r0, r0, r3
200027a6:	4152      	adcs	r2, r2
200027a8:	0943      	lsrs	r3, r0, #5
200027aa:	428b      	cmp	r3, r1
200027ac:	d301      	bcc.n	200027b2 <__divsi3+0xc6>
200027ae:	014b      	lsls	r3, r1, #5
200027b0:	1ac0      	subs	r0, r0, r3
200027b2:	4152      	adcs	r2, r2
200027b4:	0903      	lsrs	r3, r0, #4
200027b6:	428b      	cmp	r3, r1
200027b8:	d301      	bcc.n	200027be <__divsi3+0xd2>
200027ba:	010b      	lsls	r3, r1, #4
200027bc:	1ac0      	subs	r0, r0, r3
200027be:	4152      	adcs	r2, r2
200027c0:	08c3      	lsrs	r3, r0, #3
200027c2:	428b      	cmp	r3, r1
200027c4:	d301      	bcc.n	200027ca <__divsi3+0xde>
200027c6:	00cb      	lsls	r3, r1, #3
200027c8:	1ac0      	subs	r0, r0, r3
200027ca:	4152      	adcs	r2, r2
200027cc:	0883      	lsrs	r3, r0, #2
200027ce:	428b      	cmp	r3, r1
200027d0:	d301      	bcc.n	200027d6 <__divsi3+0xea>
200027d2:	008b      	lsls	r3, r1, #2
200027d4:	1ac0      	subs	r0, r0, r3
200027d6:	4152      	adcs	r2, r2
200027d8:	0843      	lsrs	r3, r0, #1
200027da:	428b      	cmp	r3, r1
200027dc:	d301      	bcc.n	200027e2 <__divsi3+0xf6>
200027de:	004b      	lsls	r3, r1, #1
200027e0:	1ac0      	subs	r0, r0, r3
200027e2:	4152      	adcs	r2, r2
200027e4:	1a41      	subs	r1, r0, r1
200027e6:	d200      	bcs.n	200027ea <__divsi3+0xfe>
200027e8:	4601      	mov	r1, r0
200027ea:	4152      	adcs	r2, r2
200027ec:	4610      	mov	r0, r2
200027ee:	4770      	bx	lr
200027f0:	e05d      	b.n	200028ae <__divsi3+0x1c2>
200027f2:	0fca      	lsrs	r2, r1, #31
200027f4:	d000      	beq.n	200027f8 <__divsi3+0x10c>
200027f6:	4249      	negs	r1, r1
200027f8:	1003      	asrs	r3, r0, #32
200027fa:	d300      	bcc.n	200027fe <__divsi3+0x112>
200027fc:	4240      	negs	r0, r0
200027fe:	4053      	eors	r3, r2
20002800:	2200      	movs	r2, #0
20002802:	469c      	mov	ip, r3
20002804:	0903      	lsrs	r3, r0, #4
20002806:	428b      	cmp	r3, r1
20002808:	d32d      	bcc.n	20002866 <__divsi3+0x17a>
2000280a:	0a03      	lsrs	r3, r0, #8
2000280c:	428b      	cmp	r3, r1
2000280e:	d312      	bcc.n	20002836 <__divsi3+0x14a>
20002810:	22fc      	movs	r2, #252	; 0xfc
20002812:	0189      	lsls	r1, r1, #6
20002814:	ba12      	rev	r2, r2
20002816:	0a03      	lsrs	r3, r0, #8
20002818:	428b      	cmp	r3, r1
2000281a:	d30c      	bcc.n	20002836 <__divsi3+0x14a>
2000281c:	0189      	lsls	r1, r1, #6
2000281e:	1192      	asrs	r2, r2, #6
20002820:	428b      	cmp	r3, r1
20002822:	d308      	bcc.n	20002836 <__divsi3+0x14a>
20002824:	0189      	lsls	r1, r1, #6
20002826:	1192      	asrs	r2, r2, #6
20002828:	428b      	cmp	r3, r1
2000282a:	d304      	bcc.n	20002836 <__divsi3+0x14a>
2000282c:	0189      	lsls	r1, r1, #6
2000282e:	d03a      	beq.n	200028a6 <__divsi3+0x1ba>
20002830:	1192      	asrs	r2, r2, #6
20002832:	e000      	b.n	20002836 <__divsi3+0x14a>
20002834:	0989      	lsrs	r1, r1, #6
20002836:	09c3      	lsrs	r3, r0, #7
20002838:	428b      	cmp	r3, r1
2000283a:	d301      	bcc.n	20002840 <__divsi3+0x154>
2000283c:	01cb      	lsls	r3, r1, #7
2000283e:	1ac0      	subs	r0, r0, r3
20002840:	4152      	adcs	r2, r2
20002842:	0983      	lsrs	r3, r0, #6
20002844:	428b      	cmp	r3, r1
20002846:	d301      	bcc.n	2000284c <__divsi3+0x160>
20002848:	018b      	lsls	r3, r1, #6
2000284a:	1ac0      	subs	r0, r0, r3
2000284c:	4152      	adcs	r2, r2
2000284e:	0943      	lsrs	r3, r0, #5
20002850:	428b      	cmp	r3, r1
20002852:	d301      	bcc.n	20002858 <__divsi3+0x16c>
20002854:	014b      	lsls	r3, r1, #5
20002856:	1ac0      	subs	r0, r0, r3
20002858:	4152      	adcs	r2, r2
2000285a:	0903      	lsrs	r3, r0, #4
2000285c:	428b      	cmp	r3, r1
2000285e:	d301      	bcc.n	20002864 <__divsi3+0x178>
20002860:	010b      	lsls	r3, r1, #4
20002862:	1ac0      	subs	r0, r0, r3
20002864:	4152      	adcs	r2, r2
20002866:	08c3      	lsrs	r3, r0, #3
20002868:	428b      	cmp	r3, r1
2000286a:	d301      	bcc.n	20002870 <__divsi3+0x184>
2000286c:	00cb      	lsls	r3, r1, #3
2000286e:	1ac0      	subs	r0, r0, r3
20002870:	4152      	adcs	r2, r2
20002872:	0883      	lsrs	r3, r0, #2
20002874:	428b      	cmp	r3, r1
20002876:	d301      	bcc.n	2000287c <__divsi3+0x190>
20002878:	008b      	lsls	r3, r1, #2
2000287a:	1ac0      	subs	r0, r0, r3
2000287c:	4152      	adcs	r2, r2
2000287e:	d2d9      	bcs.n	20002834 <__divsi3+0x148>
20002880:	0843      	lsrs	r3, r0, #1
20002882:	428b      	cmp	r3, r1
20002884:	d301      	bcc.n	2000288a <__divsi3+0x19e>
20002886:	004b      	lsls	r3, r1, #1
20002888:	1ac0      	subs	r0, r0, r3
2000288a:	4152      	adcs	r2, r2
2000288c:	1a41      	subs	r1, r0, r1
2000288e:	d200      	bcs.n	20002892 <__divsi3+0x1a6>
20002890:	4601      	mov	r1, r0
20002892:	4663      	mov	r3, ip
20002894:	4152      	adcs	r2, r2
20002896:	105b      	asrs	r3, r3, #1
20002898:	4610      	mov	r0, r2
2000289a:	d301      	bcc.n	200028a0 <__divsi3+0x1b4>
2000289c:	4240      	negs	r0, r0
2000289e:	2b00      	cmp	r3, #0
200028a0:	d500      	bpl.n	200028a4 <__divsi3+0x1b8>
200028a2:	4249      	negs	r1, r1
200028a4:	4770      	bx	lr
200028a6:	4663      	mov	r3, ip
200028a8:	105b      	asrs	r3, r3, #1
200028aa:	d300      	bcc.n	200028ae <__divsi3+0x1c2>
200028ac:	4240      	negs	r0, r0
200028ae:	b501      	push	{r0, lr}
200028b0:	2000      	movs	r0, #0
200028b2:	f000 f805 	bl	200028c0 <__aeabi_idiv0>
200028b6:	bd02      	pop	{r1, pc}

200028b8 <__aeabi_idivmod>:
200028b8:	2900      	cmp	r1, #0
200028ba:	d0f8      	beq.n	200028ae <__divsi3+0x1c2>
200028bc:	e716      	b.n	200026ec <__divsi3>
200028be:	4770      	bx	lr

200028c0 <__aeabi_idiv0>:
200028c0:	4770      	bx	lr
200028c2:	46c0      	nop			; (mov r8, r8)

200028c4 <counter>:
200028c4:	00000000 	andeq	r0, r0, r0

200028c8 <nGameObjects>:
200028c8:	00000000 	andeq	r0, r0, r0

200028cc <lastRightValue.4092>:
200028cc:	00000000 	andeq	r0, r0, r0

200028d0 <speed.4094>:
200028d0:	00000000 	andeq	r0, r0, r0

200028d4 <lastLeftValue.4093>:
200028d4:	00000000 	andeq	r0, r0, r0

200028d8 <monster>:
200028d8:	00000000 	andeq	r0, r0, r0

200028dc <tempCastleBlack>:
	...

200028e8 <tempPressGray>:
	...

200028f4 <tempTitleGray>:
	...

20002900 <castleBlack>:
20002900:	00000000 	andeq	r0, r0, r0

20002904 <tempMonster>:
	...

20002910 <pressLight>:
20002910:	00000000 	andeq	r0, r0, r0

20002914 <tempTitleBlack>:
	...

20002920 <bg>:
20002920:	00000000 	andeq	r0, r0, r0

20002924 <tempMonsterGray>:
	...

20002930 <tempTitleLight>:
	...

2000293c <castleLight>:
2000293c:	00000000 	andeq	r0, r0, r0

20002940 <tempPressLight>:
	...

2000294c <tempCastleLight>:
	...

20002958 <pressGray>:
20002958:	00000000 	andeq	r0, r0, r0

2000295c <tempMonsterLight>:
	...

20002968 <tempPressBlack>:
	...

20002974 <titleGray>:
20002974:	00000000 	andeq	r0, r0, r0

20002978 <tempCastleGray>:
	...

20002984 <monsterLight>:
20002984:	00000000 	andeq	r0, r0, r0

20002988 <titleLight>:
20002988:	00000000 	andeq	r0, r0, r0

2000298c <castleGray>:
2000298c:	00000000 	andeq	r0, r0, r0

20002990 <pressBlack>:
20002990:	00000000 	andeq	r0, r0, r0

20002994 <monsterGray>:
20002994:	00000000 	andeq	r0, r0, r0

20002998 <tempBg>:
	...

200029a4 <titleBlack>:
200029a4:	00000000 	andeq	r0, r0, r0

200029a8 <gameObjects>:
	...

20002b38 <fire1Light>:
20002b38:	00000000 	andeq	r0, r0, r0

20002b3c <tempFire3Light>:
	...

20002b48 <fire3Gray>:
20002b48:	00000000 	andeq	r0, r0, r0

20002b4c <tempFire4Gray>:
	...

20002b58 <fire2Image>:
	...

20002b64 <tempFire2Gray>:
	...

20002b70 <tempFireBlack>:
	...

20002b7c <fire3Image>:
	...

20002b88 <tempFire4Light>:
	...

20002b94 <fire1Image>:
	...

20002ba0 <fire4Light>:
20002ba0:	00000000 	andeq	r0, r0, r0

20002ba4 <fireObj>:
	...

20002bc8 <fire5Image>:
	...

20002bd4 <fireImages>:
	...

20002c10 <tempFire5Gray>:
	...

20002c1c <tempFire3Gray>:
	...

20002c28 <fire4Image>:
	...

20002c34 <fire4Gray>:
20002c34:	00000000 	andeq	r0, r0, r0

20002c38 <tempFire1Light>:
	...

20002c44 <tempFire5Light>:
	...

20002c50 <fire5Gray>:
20002c50:	00000000 	andeq	r0, r0, r0

20002c54 <fire2Light>:
20002c54:	00000000 	andeq	r0, r0, r0

20002c58 <fire5Light>:
20002c58:	00000000 	andeq	r0, r0, r0

20002c5c <tempFire1Gray>:
	...

20002c68 <fireBlack>:
20002c68:	00000000 	andeq	r0, r0, r0

20002c6c <tempFire2Light>:
	...

20002c78 <fire3Light>:
20002c78:	00000000 	andeq	r0, r0, r0

20002c7c <fire2Gray>:
20002c7c:	00000000 	andeq	r0, r0, r0

20002c80 <fire1Gray>:
20002c80:	00000000 	andeq	r0, r0, r0

20002c84 <bird4Light>:
20002c84:	00000000 	andeq	r0, r0, r0

20002c88 <bird1Gray>:
20002c88:	00000000 	andeq	r0, r0, r0

20002c8c <bird6Image>:
	...

20002c98 <bird5Black>:
20002c98:	00000000 	andeq	r0, r0, r0

20002c9c <tempBird4Black>:
	...

20002ca8 <bird2Image>:
	...

20002cb4 <birdObj>:
	...

20002cd8 <bird1Image>:
	...

20002ce4 <bird3Black>:
20002ce4:	00000000 	andeq	r0, r0, r0

20002ce8 <bird4Gray>:
20002ce8:	00000000 	andeq	r0, r0, r0

20002cec <bird2Black>:
20002cec:	00000000 	andeq	r0, r0, r0

20002cf0 <bird1Black>:
20002cf0:	00000000 	andeq	r0, r0, r0

20002cf4 <bird4Image>:
	...

20002d00 <tempBirdBlack>:
	...

20002d0c <bird3Gray>:
20002d0c:	00000000 	andeq	r0, r0, r0

20002d10 <tempBirdGray>:
	...

20002d1c <bird5Gray>:
20002d1c:	00000000 	andeq	r0, r0, r0

20002d20 <tempBird5Light>:
	...

20002d2c <tempBird2Gray>:
	...

20002d38 <bird3Light>:
20002d38:	00000000 	andeq	r0, r0, r0

20002d3c <tempBird5Gray>:
	...

20002d48 <tempBird5Black>:
	...

20002d54 <bird5Image>:
	...

20002d60 <bird5Light>:
20002d60:	00000000 	andeq	r0, r0, r0

20002d64 <tempBird3Black>:
	...

20002d70 <bird2Gray>:
20002d70:	00000000 	andeq	r0, r0, r0

20002d74 <tempBirdLight>:
	...

20002d80 <bird1Light>:
20002d80:	00000000 	andeq	r0, r0, r0

20002d84 <tempBird2Light>:
	...

20002d90 <bird3Image>:
	...

20002d9c <tempBird4Light>:
	...

20002da8 <tempBird3Light>:
	...

20002db4 <tempBird3Gray>:
	...

20002dc0 <birdImages>:
	...

20002e08 <bird4Black>:
20002e08:	00000000 	andeq	r0, r0, r0

20002e0c <tempBird2Black>:
	...

20002e18 <tempBird4Gray>:
	...

20002e24 <bird2Light>:
20002e24:	00000000 	andeq	r0, r0, r0

20002e28 <backBufferGray>:
	...

20003228 <draw_buffer_black_gray>:
	...

20003628 <backBuffer>:
	...

20003a28 <draw_buffer_black_light>:
	...

20003e28 <draw_buffer_black>:
	...

20004228 <draw_buffer_black_gray_light>:
	...

20004628 <backBufferLight>:
	...

20004a28 <monster_black_bits>:
	...
20004a38:	0001c000 	andeq	ip, r1, r0
20004a3c:	00023000 	andeq	r3, r2, r0
20004a40:	00021000 	andeq	r1, r2, r0
20004a44:	00060800 	andeq	r0, r6, r0, lsl #16
20004a48:	00040800 	andeq	r0, r4, r0, lsl #16
20004a4c:	00040800 	andeq	r0, r4, r0, lsl #16
20004a50:	00092800 	andeq	r2, r9, r0, lsl #16
20004a54:	00092800 	andeq	r2, r9, r0, lsl #16
20004a58:	00100400 	andseq	r0, r0, r0, lsl #8
20004a5c:	00100400 	andseq	r0, r0, r0, lsl #8
20004a60:	00200200 	eoreq	r0, r0, r0, lsl #4
20004a64:	00661b00 	rsbeq	r1, r6, r0, lsl #22
20004a68:	0043b100 	subeq	fp, r3, r0, lsl #2
20004a6c:	0080e080 	addeq	lr, r0, r0, lsl #1
20004a70:	01800080 	orreq	r0, r0, r0, lsl #1
20004a74:	01000040 	tsteq	r0, r0, asr #32
20004a78:	02000040 	andeq	r0, r0, #64	; 0x40
20004a7c:	02000060 	andeq	r0, r0, #96	; 0x60
20004a80:	02000020 	andeq	r0, r0, #32
20004a84:	03ff03e0 	mvnseq	r0, #224, 6	; 0x80000003
20004a88:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...

20004aa0 <monster_light_bits>:
	...
20004ab4:	00010000 	andeq	r0, r1, r0
20004ab8:	00018000 	andeq	r8, r1, r0
20004abc:	0001f000 	andeq	pc, r1, r0
20004ac0:	0001f000 	andeq	pc, r1, r0
20004ac4:	00009000 	andeq	r9, r0, r0
20004ac8:	00009000 	andeq	r9, r0, r0
20004acc:	0000d000 	andeq	sp, r0, r0
20004ad0:	0001f800 	andeq	pc, r1, r0, lsl #16
20004ad4:	0003f800 	andeq	pc, r3, r0, lsl #16
20004ad8:	0003fc00 	andeq	pc, r3, r0, lsl #24
20004adc:	0001e400 	andeq	lr, r1, r0, lsl #8
20004ae0:	00044c00 	andeq	r4, r4, r0, lsl #24
20004ae4:	00060c00 	andeq	r0, r6, r0, lsl #24
20004ae8:	0006ee00 	andeq	lr, r6, r0, lsl #28
20004aec:	000ffe00 	andeq	pc, pc, r0, lsl #28
20004af0:	000f3f00 	andeq	r3, pc, r0, lsl #30
20004af4:	00000780 	andeq	r0, r0, r0, lsl #15
20004af8:	000003c0 	andeq	r0, r0, r0, asr #7
	...

20004b18 <monster_gray_bits>:
	...
20004b38:	00020000 	andeq	r0, r2, r0
20004b3c:	00000000 	andeq	r0, r0, r0
20004b40:	00040000 	andeq	r0, r4, r0
20004b44:	00060000 	andeq	r0, r6, r0
20004b48:	000e0000 	andeq	r0, lr, r0
20004b4c:	000c0000 	andeq	r0, ip, r0
20004b50:	001c0000 	andseq	r0, ip, r0
20004b54:	00180000 	andseq	r0, r8, r0
20004b58:	00380000 	eorseq	r0, r8, r0
20004b5c:	00780000 	rsbseq	r0, r8, r0
20004b60:	00780000 	rsbseq	r0, r8, r0
20004b64:	00f00000 	rscseq	r0, r0, r0
20004b68:	01f0c000 	mvnseq	ip, r0
20004b6c:	01fff800 	mvnseq	pc, r0, lsl #16
20004b70:	01fffc00 	mvnseq	pc, r0, lsl #24
20004b74:	0000fc00 	andeq	pc, r0, r0, lsl #24
	...

20004b90 <press_black_bits>:
	...
20004bc8:	001c0000 	andseq	r0, ip, r0
20004bcc:	00000000 	andeq	r0, r0, r0
20004bd0:	00240000 	eoreq	r0, r4, r0
20004bd4:	00000000 	andeq	r0, r0, r0
20004bd8:	00440000 	subeq	r0, r4, r0
20004bdc:	00000000 	andeq	r0, r0, r0
20004be0:	c5240000 	strgt	r0, [r4, #-0]!
20004be4:	00000198 	muleq	r0, r8, r1
20004be8:	2b1c0000 	blcs	20704bf0 <firstTime.4093+0x6fe428>
20004bec:	00000045 	andeq	r0, r0, r5, asr #32
20004bf0:	e1040000 	mrs	r0, (UNDEF: 4)
20004bf4:	000000cd 	andeq	r0, r0, sp, asr #1
20004bf8:	21040000 	mrscs	r0, (UNDEF: 4)
20004bfc:	00000110 	andeq	r0, r0, r0, lsl r1
20004c00:	c1040000 	mrsgt	r0, (UNDEF: 4)
20004c04:	000000cc 	andeq	r0, r0, ip, asr #1
	...
20004c34:	00000004 	andeq	r0, r0, r4
20004c38:	00000000 	andeq	r0, r0, r0
20004c3c:	00000004 	andeq	r0, r0, r4
20004c40:	00000000 	andeq	r0, r0, r0
20004c44:	00000004 	andeq	r0, r0, r4
20004c48:	0494e000 	ldreq	lr, [r4], #0
20004c4c:	00009334 	andeq	r9, r0, r4, lsr r3
20004c50:	04ac9000 	strteq	r9, [ip], #0
20004c54:	00009494 	muleq	r0, r4, r4
20004c58:	04a49000 	strteq	r9, [r4], #0
20004c5c:	0000978c 	andeq	r9, r0, ip, lsl #15
20004c60:	04a49000 	strteq	r9, [r4], #0
20004c64:	00009094 	muleq	r0, r4, r0
20004c68:	07256000 	streq	r6, [r5, -r0]!
20004c6c:	0000e324 	andeq	lr, r0, r4, lsr #6
20004c70:	04000000 	streq	r0, [r0], #-0
20004c74:	00008000 	andeq	r8, r0, r0
20004c78:	04000000 	streq	r0, [r0], #-0
20004c7c:	00008000 	andeq	r8, r0, r0
20004c80:	03000000 	movweq	r0, #0
20004c84:	00006000 	andeq	r6, r0, r0
	...

20004ca8 <press_light_bits>:
	...
20004ce8:	00000200 	andeq	r0, r0, r0, lsl #4
20004cec:	00000000 	andeq	r0, r0, r0
20004cf0:	00000700 	andeq	r0, r0, r0, lsl #14
20004cf4:	00000000 	andeq	r0, r0, r0
20004cf8:	00000200 	andeq	r0, r0, r0, lsl #4
	...
20004d3c:	00800000 	addeq	r0, r0, r0
20004d40:	00000000 	andeq	r0, r0, r0
20004d44:	01c00000 	biceq	r0, r0, r0
20004d48:	00000000 	andeq	r0, r0, r0
20004d4c:	00800000 	addeq	r0, r0, r0
20004d50:	00000010 	andeq	r0, r0, r0, lsl r0
20004d54:	00000000 	andeq	r0, r0, r0
20004d58:	00000038 	andeq	r0, r0, r8, lsr r0
20004d5c:	00000000 	andeq	r0, r0, r0
20004d60:	00000010 	andeq	r0, r0, r0, lsl r0
	...

20004dc0 <press_gray_bits>:
	...
20004e00:	00180000 	andseq	r0, r8, r0
20004e04:	00000000 	andeq	r0, r0, r0
20004e08:	00380000 	eorseq	r0, r8, r0
20004e0c:	00000000 	andeq	r0, r0, r0
20004e10:	00580000 	subseq	r0, r8, r0
20004e14:	00000020 	andeq	r0, r0, r0, lsr #32
20004e18:	d4200000 	strtle	r0, [r0], #-0
20004e1c:	0000039a 	muleq	r0, sl, r3
20004e20:	0a380000 	beq	20e04e28 <firstTime.4093+0xdfe660>
20004e24:	00000102 	andeq	r0, r0, r2, lsl #2
20004e28:	c2080000 	andgt	r0, r8, #0
20004e2c:	00000223 	andeq	r0, r0, r3, lsr #4
20004e30:	02080000 	andeq	r0, r8, #0
20004e34:	00000311 	andeq	r0, r0, r1, lsl r3
20004e38:	c1080000 	mrsgt	r0, (UNDEF: 8)
20004e3c:	000001dd 	ldrdeq	r0, [r0], -sp
	...
20004e6c:	00000008 	andeq	r0, r0, r8
20004e70:	00000000 	andeq	r0, r0, r0
20004e74:	00000008 	andeq	r0, r0, r8
20004e78:	00000000 	andeq	r0, r0, r0
20004e7c:	00000008 	andeq	r0, r0, r8
20004e80:	09116000 	ldmdbeq	r1, {sp, lr}
20004e84:	00012328 	andeq	r2, r1, r8, lsr #6
20004e88:	09596000 	ldmdbeq	r9, {sp, lr}^
20004e8c:	00012810 	andeq	r2, r1, r0, lsl r8
20004e90:	0b492000 	bleq	2124ce98 <firstTime.4093+0x12466d0>
20004e94:	00012f08 	andeq	r2, r1, r8, lsl #30
20004e98:	08488000 	stmdaeq	r8, {pc}^
20004e9c:	00010458 	andeq	r0, r1, r8, asr r4
20004ea0:	0b6be000 	bleq	21afcea8 <firstTime.4093+0x1af66e0>
20004ea4:	00016768 	andeq	r6, r1, r8, ror #14
20004ea8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20004eac:	00010000 	andeq	r0, r1, r0
20004eb0:	0c000000 	stceq	0, cr0, [r0], {-0}
20004eb4:	00018000 	andeq	r8, r1, r0
20004eb8:	06000000 	streq	r0, [r0], -r0
20004ebc:	0000c000 	andeq	ip, r0, r0
	...

20004ed8 <castle_black_bits>:
20004ed8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004edc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004ee0:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004ee4:	00000000 	andeq	r0, r0, r0
20004ee8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004eec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004ef0:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004ef4:	00000000 	andeq	r0, r0, r0
20004ef8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004efc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004f00:	00000001 	andeq	r0, r0, r1
20004f04:	00000000 	andeq	r0, r0, r0
20004f08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004f0c:	7fffffff 	svcvc	0x00ffffff
	...
20004f18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004f1c:	3fffffff 	svccc	0x00ffffff
	...
20004f28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004f2c:	1fffffff 	svcne	0x00ffffff
	...
20004f38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004f3c:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
	...
20004f48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004f4c:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
	...
20004f58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004f5c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005063 <castle_black_bits+0x18b>	; <UNPREDICTABLE>
	...
20004f68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004f6c:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
	...
20004f78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004f7c:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
	...
20004f88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004f8c:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20004f98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004f9c:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20004fa8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004fac:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20004fb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004fbc:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20004fc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004fcc:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20004fd8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004fdc:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20004fe8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004fec:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20004ff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004ffc:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20005008:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000500c:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20005018:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000501c:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20005028:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000502c:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20005038:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000503c:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20005040:	04900000 	ldreq	r0, [r0], #0
20005044:	00000000 	andeq	r0, r0, r0
20005048:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000504c:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20005050:	0b680000 	bleq	21a05058 <firstTime.4093+0x19fe890>
20005054:	00000000 	andeq	r0, r0, r0
20005058:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000505c:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20005060:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20005064:	00000000 	andeq	r0, r0, r0
20005068:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000506c:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20005070:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20005074:	00000092 	muleq	r0, r2, r0
20005078:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000507c:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20005080:	04100000 	ldreq	r0, [r0], #-0
20005084:	0000016d 	andeq	r0, r0, sp, ror #2
20005088:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000508c:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20005090:	04101240 	ldreq	r1, [r0], #-576	; 0xfffffdc0
20005094:	00000101 	andeq	r0, r0, r1, lsl #2
20005098:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000509c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200050a0:	04102da0 	ldreq	r2, [r0], #-3488	; 0xfffff260
200050a4:	00000101 	andeq	r0, r0, r1, lsl #2
200050a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200050ac:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200050b0:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
200050b4:	00000101 	andeq	r0, r0, r1, lsl #2
200050b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200050bc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200050c0:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
200050c4:	00000101 	andeq	r0, r0, r1, lsl #2
200050c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200050cc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200050d0:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200050d4:	00000082 	andeq	r0, r0, r2, lsl #1
200050d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200050dc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200050e0:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200050e4:	00000092 	muleq	r0, r2, r0
200050e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200050ec:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200050f0:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200050f4:	012400a2 	smulwbeq	r4, r2, r0
200050f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200050fc:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20005100:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005104:	02da00a2 	sbcseq	r0, sl, #162	; 0xa2
20005108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000510c:	00004fff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
20005110:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005114:	020200a2 	andeq	r0, r2, #162	; 0xa2
20005118:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000511c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005120:	08081040 	stmdaeq	r8, {r6, ip}
20005124:	0202009a 	andeq	r0, r2, #154	; 0x9a
20005128:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000512c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005130:	08082020 	stmdaeq	r8, {r5, sp}
20005134:	01040082 	smlabbeq	r4, r2, r0, r0
20005138:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000513c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005140:	48082020 	stmdami	r8, {r5, sp}
20005144:	01040102 	tsteq	r4, r2, lsl #2
20005148:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000514c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005150:	b0082020 	andlt	r2, r8, r0, lsr #32
20005154:	01040101 	tsteq	r4, r1, lsl #2
20005158:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000515c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005160:	00082220 	andeq	r2, r8, r0, lsr #4
20005164:	01040100 	mrseq	r0, (UNDEF: 20)
20005168:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000516c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005170:	00882420 	addeq	r2, r8, r0, lsr #8
20005174:	01040100 	mrseq	r0, (UNDEF: 20)
20005178:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000517c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005180:	01082420 	tsteq	r8, r0, lsr #8
20005184:	01045a00 	tsteq	r4, r0, lsl #20
20005188:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000518c:	0000007f 	andeq	r0, r0, pc, ror r0
20005190:	01082420 	tsteq	r8, r0, lsr #8
20005194:	0104a400 	tsteq	r4, r0, lsl #8
20005198:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000519c:	00000001 	andeq	r0, r0, r1
200051a0:	010b2320 	tsteq	fp, r0, lsr #6
200051a4:	01030001 	tsteq	r3, r1
200051a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200051ac:	00000000 	andeq	r0, r0, r0
200051b0:	00c4c020 	sbceq	ip, r4, r0, lsr #32
200051b4:	02000002 	andeq	r0, r0, #2
200051b8:	3fffffff 	svccc	0x00ffffff
200051bc:	00000000 	andeq	r0, r0, r0
200051c0:	00000020 	andeq	r0, r0, r0, lsr #32
200051c4:	02200002 	eoreq	r0, r0, #2
200051c8:	3fffffff 	svccc	0x00ffffff
200051cc:	00000000 	andeq	r0, r0, r0
200051d0:	00000020 	andeq	r0, r0, r0, lsr #32
200051d4:	02400002 	subeq	r0, r0, #2
200051d8:	1fffffff 	svcne	0x00ffffff
200051dc:	00000000 	andeq	r0, r0, r0
200051e0:	80000020 	andhi	r0, r0, r0, lsr #32
200051e4:	02400001 	subeq	r0, r0, #1
200051e8:	1fffffff 	svcne	0x00ffffff
200051ec:	00000000 	andeq	r0, r0, r0
200051f0:	00000010 	andeq	r0, r0, r0, lsl r0
200051f4:	02400000 	subeq	r0, r0, #0
200051f8:	0fffffff 	svceq	0x00ffffff
200051fc:	00000000 	andeq	r0, r0, r0
20005200:	00000010 	andeq	r0, r0, r0, lsl r0
20005204:	02300000 	eorseq	r0, r0, #0
20005208:	0fffffff 	svceq	0x00ffffff
2000520c:	00000000 	andeq	r0, r0, r0
20005210:	00000010 	andeq	r0, r0, r0, lsl r0
20005214:	02000000 	andeq	r0, r0, #0
20005218:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
2000521c:	00000000 	andeq	r0, r0, r0
20005220:	00000010 	andeq	r0, r0, r0, lsl r0
20005224:	04000000 	streq	r0, [r0], #-0
20005228:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
2000522c:	00000000 	andeq	r0, r0, r0
20005230:	00000010 	andeq	r0, r0, r0, lsl r0
20005234:	04000000 	streq	r0, [r0], #-0
20005238:	01ffffff 	ldrsheq	pc, [pc, #255]	; 2000533f <castle_gray_bits+0x67>	; <UNPREDICTABLE>
2000523c:	00000000 	andeq	r0, r0, r0
20005240:	00000008 	andeq	r0, r0, r8
20005244:	04000000 	streq	r0, [r0], #-0
20005248:	01ffffff 	ldrsheq	pc, [pc, #255]	; 2000534f <castle_gray_bits+0x77>	; <UNPREDICTABLE>
2000524c:	00000000 	andeq	r0, r0, r0
20005250:	00000008 	andeq	r0, r0, r8
20005254:	04000000 	streq	r0, [r0], #-0
20005258:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
2000525c:	00000000 	andeq	r0, r0, r0
20005260:	00000008 	andeq	r0, r0, r8
20005264:	060001c0 	streq	r0, [r0], -r0, asr #3
20005268:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
2000526c:	00000000 	andeq	r0, r0, r0
20005270:	00000008 	andeq	r0, r0, r8
20005274:	04000220 	streq	r0, [r0], #-544	; 0xfffffde0
20005278:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
2000527c:	00000000 	andeq	r0, r0, r0
20005280:	00000008 	andeq	r0, r0, r8
20005284:	04100400 	ldreq	r0, [r0], #-1024	; 0xfffffc00
20005288:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
2000528c:	00000000 	andeq	r0, r0, r0
20005290:	00000008 	andeq	r0, r0, r8
20005294:	04a00400 	strteq	r0, [r0], #1024	; 0x400
20005298:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
2000529c:	00000000 	andeq	r0, r0, r0
200052a0:	00000008 	andeq	r0, r0, r8
200052a4:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
200052a8:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
200052ac:	00000000 	andeq	r0, r0, r0
200052b0:	00000008 	andeq	r0, r0, r8
200052b4:	07400400 	strbeq	r0, [r0, -r0, lsl #8]
200052b8:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
200052bc:	00000000 	andeq	r0, r0, r0
200052c0:	00000008 	andeq	r0, r0, r8
200052c4:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
200052c8:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200052cc:	00000000 	andeq	r0, r0, r0
200052d0:	00000008 	andeq	r0, r0, r8
200052d4:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00

200052d8 <castle_gray_bits>:
	...
200052e0:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200052e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
200052f0:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200052f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20005300:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20005304:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005308:	00000000 	andeq	r0, r0, r0
2000530c:	80000000 	andhi	r0, r0, r0
20005310:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005314:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005318:	00000000 	andeq	r0, r0, r0
2000531c:	c0000000 	andgt	r0, r0, r0
20005320:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005324:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005328:	00000000 	andeq	r0, r0, r0
2000532c:	e0000000 	and	r0, r0, r0
20005330:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005334:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20005338:	00000000 	andeq	r0, r0, r0
2000533c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005340:	f3ffcfff 			; <UNDEFINED> instruction: 0xf3ffcfff
20005344:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20005348:	00000000 	andeq	r0, r0, r0
2000534c:	fc000000 	stc2	0, cr0, [r0], {-0}
20005350:	f1ff8fff 			; <UNDEFINED> instruction: 0xf1ff8fff
20005354:	fff9ff3f 			; <UNDEFINED> instruction: 0xfff9ff3f
20005358:	00000000 	andeq	r0, r0, r0
2000535c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20005360:	f0ff8fef 			; <UNDEFINED> instruction: 0xf0ff8fef
20005364:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20005368:	00000000 	andeq	r0, r0, r0
2000536c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20005370:	e0ff87ef 	rscs	r8, pc, pc, ror #15
20005374:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20005378:	00000000 	andeq	r0, r0, r0
2000537c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20005380:	c07e07e7 	rsbsgt	r0, lr, r7, ror #15
20005384:	ffe0fc1f 			; <UNDEFINED> instruction: 0xffe0fc1f
20005388:	00000000 	andeq	r0, r0, r0
2000538c:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20005390:	001c07e7 	andseq	r0, ip, r7, ror #15
20005394:	ffe0380e 	vcmla.f32	d19, d0, d14[0], #170
20005398:	00000000 	andeq	r0, r0, r0
2000539c:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200053a0:	000003e3 	andeq	r0, r0, r3, ror #7
200053a4:	f7c00000 			; <UNDEFINED> instruction: 0xf7c00000
200053a8:	00000000 	andeq	r0, r0, r0
200053ac:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200053b0:	000001c3 	andeq	r0, r0, r3, asr #3
200053b4:	e7800000 	str	r0, [r0, r0]
200053b8:	00000000 	andeq	r0, r0, r0
200053bc:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200053c0:	00000003 	andeq	r0, r0, r3
200053c4:	c3800000 	orrgt	r0, r0, #0
200053c8:	00000000 	andeq	r0, r0, r0
200053cc:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200053d0:	00000001 	andeq	r0, r0, r1
200053d4:	c0000000 	andgt	r0, r0, r0
200053d8:	00000000 	andeq	r0, r0, r0
200053dc:	9ff00000 	svcls	0x00f00000	; IMB
200053e0:	00000001 	andeq	r0, r0, r1
200053e4:	80000000 	andhi	r0, r0, r0
200053e8:	00000000 	andeq	r0, r0, r0
200053ec:	8ff00000 	svchi	0x00f00000	; IMB
200053f0:	00000000 	andeq	r0, r0, r0
200053f4:	80000000 	andhi	r0, r0, r0
200053f8:	00000000 	andeq	r0, r0, r0
200053fc:	8ff80000 	svchi	0x00f80000
	...
2000540c:	0ffc0000 	svceq	0x00fc0000
	...
2000541c:	0ffc0000 	svceq	0x00fc0000
	...
2000542c:	0ffc0000 	svceq	0x00fc0000
	...
2000543c:	0ffc0000 	svceq	0x00fc0000
	...
2000544c:	0ffc0000 	svceq	0x00fc0000
	...
2000545c:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
2000546c:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
2000547c:	07fe0000 	ldrbeq	r0, [lr, r0]!
20005480:	03800000 	orreq	r0, r0, #0
	...
2000548c:	03fe0000 	mvnseq	r0, #0
20005490:	02000000 	andeq	r0, r0, #0
	...
2000549c:	03ff0000 	mvnseq	r0, #0
200054a0:	02000000 	andeq	r0, r0, #0
	...
200054ac:	03ff0000 	mvnseq	r0, #0
200054b0:	02000000 	andeq	r0, r0, #0
	...
200054bc:	03ff0000 	mvnseq	r0, #0
200054c0:	02000000 	andeq	r0, r0, #0
	...
200054cc:	03ff0000 	mvnseq	r0, #0
200054d0:	02800c00 	addeq	r0, r0, #0, 24
200054d4:	00000060 	andeq	r0, r0, r0, rrx
200054d8:	00000000 	andeq	r0, r0, r0
200054dc:	03ff0000 	mvnseq	r0, #0
200054e0:	03000800 	movweq	r0, #2048	; 0x800
200054e4:	00000040 	andeq	r0, r0, r0, asr #32
200054e8:	00000000 	andeq	r0, r0, r0
200054ec:	03ff0000 	mvnseq	r0, #0
200054f0:	03000800 	movweq	r0, #2048	; 0x800
200054f4:	00000040 	andeq	r0, r0, r0, asr #32
200054f8:	00000000 	andeq	r0, r0, r0
200054fc:	03ff8000 	mvnseq	r8, #0
20005500:	03000a00 	movweq	r0, #2560	; 0xa00
20005504:	00000040 	andeq	r0, r0, r0, asr #32
20005508:	00000000 	andeq	r0, r0, r0
2000550c:	01ffb000 	mvnseq	fp, r0
20005510:	03000c00 	movweq	r0, #3072	; 0xc00
20005514:	00000040 	andeq	r0, r0, r0, asr #32
20005518:	00000000 	andeq	r0, r0, r0
2000551c:	01fff800 	mvnseq	pc, r0, lsl #16
20005520:	07800c00 	streq	r0, [r0, r0, lsl #24]
20005524:	00000060 	andeq	r0, r0, r0, rrx
20005528:	00000000 	andeq	r0, r0, r0
2000552c:	01fffc00 	mvnseq	pc, r0, lsl #24
20005530:	04001800 	streq	r1, [r0], #-2048	; 0xfffff800
20005534:	00c00058 	sbceq	r0, r0, r8, asr r0
20005538:	00000000 	andeq	r0, r0, r0
2000553c:	00fffc00 	rscseq	pc, pc, r0, lsl #24
20005540:	06001400 	streq	r1, [r0], -r0, lsl #8
20005544:	00c000c0 	sbceq	r0, r0, r0, asr #1
20005548:	00000000 	andeq	r0, r0, r0
2000554c:	007ffc00 	rsbseq	pc, pc, r0, lsl #24
20005550:	45001000 	strmi	r1, [r0, #-0]
20005554:	008000a0 	addeq	r0, r0, r0, lsr #1
20005558:	00000000 	andeq	r0, r0, r0
2000555c:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
20005560:	80001000 	andhi	r1, r0, r0
20005564:	008000c1 	addeq	r0, r0, r1, asr #1
20005568:	00000000 	andeq	r0, r0, r0
2000556c:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20005570:	00001000 	andeq	r1, r0, r0
20005574:	00a000f0 	strdeq	r0, [r0], r0	; <UNPREDICTABLE>
20005578:	00000000 	andeq	r0, r0, r0
2000557c:	003fff00 	eorseq	pc, pc, r0, lsl #30
20005580:	00001000 	andeq	r1, r0, r0
20005584:	00c000e0 	sbceq	r0, r0, r0, ror #1
20005588:	00000000 	andeq	r0, r0, r0
2000558c:	001fff80 	andseq	pc, pc, r0, lsl #31
20005590:	02001800 	andeq	r1, r0, #0, 16
20005594:	00c000c0 	sbceq	r0, r0, r0, asr #1
20005598:	00000000 	andeq	r0, r0, r0
2000559c:	0019fffe 			; <UNDEFINED> instruction: 0x0019fffe
200055a0:	02001400 	andeq	r1, r0, #0, 8
200055a4:	00803000 	addeq	r3, r0, r0
200055a8:	00000000 	andeq	r0, r0, r0
200055ac:	0018ffff 			; <UNDEFINED> instruction: 0x0018ffff
200055b0:	05033f00 	streq	r3, [r3, #-3840]	; 0xfffff100
200055b4:	01000000 	mrseq	r0, (UNDEF: 0)
200055b8:	c0000000 	andgt	r0, r0, r0
200055bc:	0008ffff 	strdeq	pc, [r8], -pc	; <UNPREDICTABLE>
200055c0:	00c0e400 	sbceq	lr, r0, r0, lsl #8
200055c4:	01000004 	tsteq	r0, r4
200055c8:	c0000000 	andgt	r0, r0, r0
200055cc:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
200055d0:	00002000 	andeq	r2, r0, r0
200055d4:	01000008 	tsteq	r0, r8
200055d8:	e0000000 	and	r0, r0, r0
200055dc:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
200055e0:	00001000 	andeq	r1, r0, r0
200055e4:	01000006 	tsteq	r0, r6
200055e8:	e0000000 	and	r0, r0, r0
200055ec:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
200055f0:	80000000 	andhi	r0, r0, r0
200055f4:	01800001 	orreq	r0, r0, r1
200055f8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200055fc:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20005600:	00400000 	subeq	r0, r0, r0
20005604:	01400000 	mrseq	r0, (UNDEF: 64)
20005608:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000560c:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20005610:	03800000 	orreq	r0, r0, #0
20005614:	01300000 	teqeq	r0, r0
20005618:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000561c:	00001bff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20005620:	10e00000 	rscne	r0, r0, r0
20005624:	03000000 	movweq	r0, #0
20005628:	fc000000 	stc2	0, cr0, [r0], {-0}
2000562c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005630:	0f800000 	svceq	0x00800000
20005634:	03900000 	orrseq	r0, r0, #0
20005638:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
2000563c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005640:	00000000 	andeq	r0, r0, r0
20005644:	03e00000 	mvneq	r0, #0
20005648:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
2000564c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005650:	00000000 	andeq	r0, r0, r0
20005654:	03f40000 	mvnseq	r0, #0
20005658:	ff000000 			; <UNDEFINED> instruction: 0xff000000
2000565c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005660:	00002000 	andeq	r2, r0, r0
20005664:	01f80000 	mvnseq	r0, r0
20005668:	ff000000 			; <UNDEFINED> instruction: 0xff000000
2000566c:	0000007f 	andeq	r0, r0, pc, ror r0
20005670:	0010c000 	andseq	ip, r0, r0
20005674:	03f80000 	mvnseq	r0, #0
20005678:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000567c:	0000003f 	andeq	r0, r0, pc, lsr r0
20005680:	000f0000 	andeq	r0, pc, r0
20005684:	03e000e0 	mvneq	r0, #224	; 0xe0
20005688:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
2000568c:	0000001f 	andeq	r0, r0, pc, lsl r0
20005690:	00026000 	andeq	r6, r2, r0
20005694:	035001f0 	cmpeq	r0, #240, 2	; 0x3c
20005698:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
2000569c:	0000001f 	andeq	r0, r0, pc, lsl r0
200056a0:	00118000 	andseq	r8, r1, r0
200056a4:	03ec01f0 	mvneq	r0, #240, 2	; 0x3c
200056a8:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
200056ac:	0000000f 	andeq	r0, r0, pc
200056b0:	200e0000 	andcs	r0, lr, r0
200056b4:	00a022f0 	strdeq	r2, [r0], r0	; <UNPREDICTABLE>
200056b8:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
200056bc:	00000007 	andeq	r0, r0, r7
200056c0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
200056c4:	03c0c170 	biceq	ip, r0, #112, 2
200056c8:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
200056cc:	00000003 	andeq	r0, r0, r3
200056d0:	e4000000 	str	r0, [r0], #-0
200056d4:	03c270f3 	biceq	r7, r2, #243	; 0xf3

200056d8 <castle_light_bits>:
	...
20005734:	00000040 	andeq	r0, r0, r0, asr #32
	...
20005740:	0c003000 	stceq	0, cr3, [r0], {-0}
20005744:	00000040 	andeq	r0, r0, r0, asr #32
	...
20005750:	0e007000 	cdpeq	0, 0, cr7, cr0, cr0, {0}
20005754:	000600c0 	andeq	r0, r6, r0, asr #1
	...
20005760:	0f007010 	svceq	0x00007010
20005764:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20005770:	1f007810 	svcne	0x00007810
20005774:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20005780:	3f81f818 	svccc	0x0081f818
20005784:	001f03e0 	andseq	r0, pc, r0, ror #7
	...
20005790:	ffe3f818 			; <UNDEFINED> instruction: 0xffe3f818
20005794:	001fc7f1 			; <UNDEFINED> instruction: 0x001fc7f1
	...
200057a0:	fffffc1c 			; <UNDEFINED> instruction: 0xfffffc1c
200057a4:	083fffff 	ldmdaeq	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
	...
200057b0:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
200057b4:	187fffff 	ldmdane	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
	...
200057c0:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200057c4:	3c7fffff 	ldclcc	15, cr15, [pc], #-1020	; 200053d0 <castle_gray_bits+0xf8>
	...
200057d0:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
200057d4:	3fffffff 	svccc	0x00ffffff
200057d8:	00000000 	andeq	r0, r0, r0
200057dc:	60000000 	andvs	r0, r0, r0
200057e0:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
200057e4:	7fffffff 	svcvc	0x00ffffff
200057e8:	00000000 	andeq	r0, r0, r0
200057ec:	70000000 	andvc	r0, r0, r0
200057f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200057f4:	7fffffff 	svcvc	0x00ffffff
200057f8:	00000000 	andeq	r0, r0, r0
200057fc:	70000000 	andvc	r0, r0, r0
20005800:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005804:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005808:	00000000 	andeq	r0, r0, r0
2000580c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005810:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005814:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005818:	00000000 	andeq	r0, r0, r0
2000581c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005820:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005824:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005828:	00000000 	andeq	r0, r0, r0
2000582c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005830:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005834:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005838:	00000000 	andeq	r0, r0, r0
2000583c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005840:	fb6fffff 	blx	21c05846 <firstTime.4093+0x1bff07e>
20005844:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005848:	00000000 	andeq	r0, r0, r0
2000584c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005850:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
20005854:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005858:	00000000 	andeq	r0, r0, r0
2000585c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005860:	f407ffff 			; <UNDEFINED> instruction: 0xf407ffff
20005864:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005868:	00000000 	andeq	r0, r0, r0
2000586c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005870:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
20005874:	ffffff6d 			; <UNDEFINED> instruction: 0xffffff6d
20005878:	00000000 	andeq	r0, r0, r0
2000587c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005880:	f80fffff 			; <UNDEFINED> instruction: 0xf80fffff
20005884:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20005888:	00000000 	andeq	r0, r0, r0
2000588c:	fc000000 	stc2	0, cr0, [r0], {-0}
20005890:	f80fedbf 			; <UNDEFINED> instruction: 0xf80fedbf
20005894:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20005898:	00000000 	andeq	r0, r0, r0
2000589c:	fc000000 	stc2	0, cr0, [r0], {-0}
200058a0:	f80fc01f 			; <UNDEFINED> instruction: 0xf80fc01f
200058a4:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
200058a8:	00000000 	andeq	r0, r0, r0
200058ac:	fc000000 	stc2	0, cr0, [r0], {-0}
200058b0:	f90fc81f 			; <UNDEFINED> instruction: 0xf90fc81f
200058b4:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
200058b8:	00000000 	andeq	r0, r0, r0
200058bc:	fc000000 	stc2	0, cr0, [r0], {-0}
200058c0:	f90fd41f 			; <UNDEFINED> instruction: 0xf90fd41f
200058c4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200058c8:	00000000 	andeq	r0, r0, r0
200058cc:	fc000000 	stc2	0, cr0, [r0], {-0}
200058d0:	f90fe03f 			; <UNDEFINED> instruction: 0xf90fe03f
200058d4:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
200058d8:	00000000 	andeq	r0, r0, r0
200058dc:	fc000000 	stc2	0, cr0, [r0], {-0}
200058e0:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
200058e4:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
200058e8:	00000000 	andeq	r0, r0, r0
200058ec:	fc000000 	stc2	0, cr0, [r0], {-0}
200058f0:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
200058f4:	fedbff19 	mrc2	15, 6, pc, cr11, cr9, {0}
200058f8:	00000000 	andeq	r0, r0, r0
200058fc:	fc000000 	stc2	0, cr0, [r0], {-0}
20005900:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20005904:	fd01ff11 	stc2	15, cr15, [r1, #-68]	; 0xffffffbc
20005908:	00000000 	andeq	r0, r0, r0
2000590c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20005910:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20005914:	fd01ff19 	stc2	15, cr15, [r1, #-100]	; 0xffffff9c
20005918:	00000000 	andeq	r0, r0, r0
2000591c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20005920:	f007e03f 			; <UNDEFINED> instruction: 0xf007e03f
20005924:	fc01ff01 	stc2	15, cr15, [r1], {1}
20005928:	00000000 	andeq	r0, r0, r0
2000592c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20005930:	f007c01f 			; <UNDEFINED> instruction: 0xf007c01f
20005934:	fe03ff01 	cdp2	15, 0, cr15, cr3, cr1, {0}
20005938:	00000000 	andeq	r0, r0, r0
2000593c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20005940:	b007c01f 	andlt	ip, r7, pc, lsl r0
20005944:	fe03fe01 	cdp2	14, 0, cr15, cr3, cr1, {0}
20005948:	00000000 	andeq	r0, r0, r0
2000594c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20005950:	0007c01f 	andeq	ip, r7, pc, lsl r0
20005954:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20005958:	00000000 	andeq	r0, r0, r0
2000595c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20005960:	0007c01f 	andeq	ip, r7, pc, lsl r0
20005964:	fe03fe10 	mcr2	14, 0, pc, cr3, cr0, {0}	; <UNPREDICTABLE>
20005968:	00000000 	andeq	r0, r0, r0
2000596c:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20005970:	0007c21f 	andeq	ip, r7, pc, lsl r2
20005974:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20005978:	00000000 	andeq	r0, r0, r0
2000597c:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20005980:	0087c31f 	addeq	ip, r7, pc, lsl r3
20005984:	fe03a400 	cdp2	4, 0, cr10, cr3, cr0, {0}
20005988:	00000000 	andeq	r0, r0, r0
2000598c:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20005990:	00c7c31f 	sbceq	ip, r7, pc, lsl r3
20005994:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
20005998:	00000000 	andeq	r0, r0, r0
2000599c:	ffe60000 			; <UNDEFINED> instruction: 0xffe60000
200059a0:	00c4c01f 	sbceq	ip, r4, pc, lsl r0
200059a4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
200059a8:	00000000 	andeq	r0, r0, r0
200059ac:	ffe70000 			; <UNDEFINED> instruction: 0xffe70000
200059b0:	8000001f 	andhi	r0, r0, pc, lsl r0
200059b4:	fc000001 	stc2	0, cr0, [r0], {1}
200059b8:	00000000 	andeq	r0, r0, r0
200059bc:	fff70000 			; <UNDEFINED> instruction: 0xfff70000
200059c0:	8000001f 	andhi	r0, r0, pc, lsl r0
200059c4:	fc000009 	stc2	0, cr0, [r0], {9}
200059c8:	00000000 	andeq	r0, r0, r0
200059cc:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200059d0:	8000001f 	andhi	r0, r0, pc, lsl r0
200059d4:	fc200001 	stc2	0, cr0, [r0], #-4
200059d8:	00000000 	andeq	r0, r0, r0
200059dc:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200059e0:	0000001f 	andeq	r0, r0, pc, lsl r0
200059e4:	fc300000 	ldc2	0, cr0, [r0], #-0
200059e8:	00000000 	andeq	r0, r0, r0
200059ec:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200059f0:	0000000f 	andeq	r0, r0, pc
200059f4:	fc300000 	ldc2	0, cr0, [r0], #-0
200059f8:	00000000 	andeq	r0, r0, r0
200059fc:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20005a00:	0000000f 	andeq	r0, r0, pc
20005a04:	fc000000 	stc2	0, cr0, [r0], {-0}
20005a08:	00000000 	andeq	r0, r0, r0
20005a0c:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20005a10:	1000000f 	andne	r0, r0, pc
20005a14:	fc000000 	stc2	0, cr0, [r0], {-0}
20005a18:	00000000 	andeq	r0, r0, r0
20005a1c:	ffffe400 			; <UNDEFINED> instruction: 0xffffe400
20005a20:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
20005a24:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
20005a28:	00000000 	andeq	r0, r0, r0
20005a2c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20005a30:	0000000f 	andeq	r0, r0, pc
20005a34:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005a38:	00000000 	andeq	r0, r0, r0
20005a3c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20005a40:	00000007 	andeq	r0, r0, r7
20005a44:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20005a48:	00000000 	andeq	r0, r0, r0
20005a4c:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20005a50:	00000007 	andeq	r0, r0, r7
20005a54:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20005a58:	00000000 	andeq	r0, r0, r0
20005a5c:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20005a60:	00100007 	andseq	r0, r0, r7
20005a64:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
20005a68:	00000000 	andeq	r0, r0, r0
20005a6c:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
20005a70:	00080007 	andeq	r0, r8, r7
20005a74:	f80001c0 			; <UNDEFINED> instruction: 0xf80001c0
20005a78:	00000000 	andeq	r0, r0, r0
20005a7c:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
20005a80:	00000007 	andeq	r0, r0, r7
20005a84:	f8080300 			; <UNDEFINED> instruction: 0xf8080300
20005a88:	00000000 	andeq	r0, r0, r0
20005a8c:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20005a90:	00200007 	eoreq	r0, r0, r7
20005a94:	f8080200 			; <UNDEFINED> instruction: 0xf8080200
20005a98:	00000000 	andeq	r0, r0, r0
20005a9c:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20005aa0:	00000007 	andeq	r0, r0, r7
20005aa4:	f8000200 			; <UNDEFINED> instruction: 0xf8000200
20005aa8:	00000000 	andeq	r0, r0, r0
20005aac:	fffffff0 			; <UNDEFINED> instruction: 0xfffffff0
20005ab0:	00000007 	andeq	r0, r0, r7
20005ab4:	f8000100 			; <UNDEFINED> instruction: 0xf8000100
20005ab8:	00000000 	andeq	r0, r0, r0
20005abc:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
20005ac0:	01000007 	tsteq	r0, r7
20005ac4:	f8100280 			; <UNDEFINED> instruction: 0xf8100280
20005ac8:	00000000 	andeq	r0, r0, r0
20005acc:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20005ad0:	02000007 	andeq	r0, r0, #7
20005ad4:	f8000300 			; <UNDEFINED> instruction: 0xf8000300

20005ad8 <title_light_bits>:
	...
20005af4:	00000400 	andeq	r0, r0, r0, lsl #8
20005af8:	30000000 	andcc	r0, r0, r0
20005afc:	f80f9e06 			; <UNDEFINED> instruction: 0xf80f9e06
20005b00:	06300000 	ldrteq	r0, [r0], -r0
20005b04:	00cb8cba 	strheq	r8, [fp], #202	; 0xca
20005b08:	ba033000 	blt	200d1b10 <firstTime.4093+0xcb348>
20005b0c:	0000eb4f 	andeq	lr, r0, pc, asr #22
20005b10:	439ef3f0 	orrsmi	pc, lr, #240, 6	; 0xc0000003
20005b14:	f000003a 			; <UNDEFINED> instruction: 0xf000003a
20005b18:	5a478e9b 	bpl	211e958c <firstTime.4093+0x11e2dc4>
20005b1c:	9b300000 	blls	20c05b24 <firstTime.4093+0xbff35c>
20005b20:	019bcd36 	orrseq	ip, fp, r6, lsr sp
20005b24:	66db3000 	ldrbvs	r3, [fp], r0
20005b28:	000319d9 	ldrdeq	r1, [r3], -r9
20005b2c:	19667330 	stmdbne	r6!, {r4, r5, r8, r9, ip, sp, lr}^
20005b30:	30000310 	andcc	r0, r0, r0, lsl r3
20005b34:	00000001 	andeq	r0, r0, r1
20005b38:	80000000 	andhi	r0, r0, r0
20005b3c:	001d3e7b 	andseq	r3, sp, fp, ror lr
20005b40:	0ac00000 	beq	1f005b48 <startup-0xffa4b8>
20005b44:	00000528 	andeq	r0, r0, r8, lsr #10
20005b48:	ec3a4000 	ldc	0, cr4, [sl], #-0
20005b4c:	0000000d 	andeq	r0, r0, sp
20005b50:	05240bc0 	streq	r0, [r4, #-3008]!	; 0xfffff440
20005b54:	00f00000 	rscseq	r0, r0, r0
20005b58:	001c0000 	andseq	r0, ip, r0
20005b5c:	03ebb000 	mvneq	fp, #0
20005b60:	00000000 	andeq	r0, r0, r0
20005b64:	0c032330 	stceq	3, cr2, [r3], {48}	; 0x30
20005b68:	300123e4 	andcc	r2, r1, r4, ror #7
20005b6c:	940c1b2a 	strls	r1, [ip], #-2858	; 0xfffff4d6
20005b70:	ea300120 	b	20c05ff8 <firstTime.4093+0xbff830>
20005b74:	ec860c3d 	stc	12, cr0, [r6], {61}	; 0x3d
20005b78:	06ea3001 	strbteq	r3, [sl], r1
20005b7c:	01e69648 	mvneq	r9, r8, asr #12
20005b80:	4b9e6b30 	blmi	1e7a0848 <startup-0x185f7b8>
20005b84:	30012696 	mulcc	r1, r6, r6
20005b88:	92bbb06b 	adcsls	fp, fp, #107	; 0x6b
20005b8c:	69f00126 	ldmibvs	r0!, {r1, r2, r5, r8}^
20005b90:	2691b832 			; <UNDEFINED> instruction: 0x2691b832
20005b94:	1e687001 	cdpne	0, 6, cr7, cr8, cr1, {0}
20005b98:	010e9110 	tsteq	lr, r0, lsl r1
	...

20005bac <title_gray_bits>:
	...
20005bb4:	40000000 	andmi	r0, r0, r0
20005bb8:	0f840000 	svceq	0x00840000
20005bbc:	00b0c3fe 	ldrshteq	ip, [r0], lr
20005bc0:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005bc4:	001f8f1f 	andseq	r8, pc, pc, lsl pc	; <UNPREDICTABLE>
20005bc8:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
20005bcc:	c8001fff 	stmdagt	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
20005bd0:	07f061f9 			; <UNDEFINED> instruction: 0x07f061f9
20005bd4:	f1cc001f 			; <UNDEFINED> instruction: 0xf1cc001f
20005bd8:	be347305 	cdplt	3, 3, cr7, cr4, cr5, {0}
20005bdc:	05f0ce00 	ldrbeq	ip, [r0, #3584]!	; 0xe00
20005be0:	007e1430 	rsbseq	r1, lr, r0, lsr r4
20005be4:	2041080f 	subcs	r0, r1, pc, lsl #16
20005be8:	0e003e01 	cdpeq	14, 0, cr3, cr0, cr1, {0}
20005bec:	01384060 	teqeq	r8, r0, rrx
20005bf0:	600c001e 	andvs	r0, ip, lr, lsl r0
20005bf4:	1c4030c0 	mcrrne	0, 12, r3, r0, cr0
20005bf8:	10208c00 	eorne	r8, r0, r0, lsl #24
20005bfc:	0038c024 	eorseq	ip, r8, r4, lsr #32
20005c00:	0411088c 	ldreq	r0, [r1], #-2188	; 0xfffff774
20005c04:	c800f8ce 	stmdagt	r0, {r1, r2, r3, r6, r7, fp, ip, sp, lr, pc}
20005c08:	ffe6990c 			; <UNDEFINED> instruction: 0xffe6990c
20005c0c:	7cfa0178 	ldfvce	f0, [sl], #480	; 0x1e0
20005c10:	3fe0c184 	svccc	0x00e0c184
20005c14:	013ff400 	teqeq	pc, r0, lsl #8	; <UNPREDICTABLE>
20005c18:	001fc0c7 	andseq	ip, pc, r7, asr #1
20005c1c:	03c03ff0 	biceq	r3, r0, #240, 30	; 0x3c0
20005c20:	fc0007e0 	stc2	7, cr0, [r0], {224}	; 0xe0
20005c24:	e003803f 	and	r8, r3, pc, lsr r0
20005c28:	7f0c009f 	svcvc	0x000c009f
20005c2c:	ffc1fbe4 			; <UNDEFINED> instruction: 0xffc1fbe4
20005c30:	fc140c03 	ldc2	12, cr0, [r4], {3}
20005c34:	03ffc7ff 	mvnseq	ip, #66846720	; 0x3fc0000
20005c38:	f3fc1c0c 	vdup.32	d17, d12[1]
20005c3c:	0e02dc1b 	mcreq	12, 0, sp, cr2, cr11, {0}
20005c40:	63f3e490 	mvnsvs	lr, #144, 8	; 0x90000000
20005c44:	018e0218 	orreq	r0, lr, r8, lsl r2
20005c48:	1251e382 	subsne	lr, r1, #134217730	; 0x8000002
20005c4c:	88018e02 	stmdahi	r1, {r1, r9, sl, fp, pc}
20005c50:	020061a7 	andeq	r6, r0, #-1073741783	; 0xc0000029
20005c54:	2460008e 	strbtcs	r0, [r0], #-142	; 0xffffff72
20005c58:	8e021041 	cdphi	0, 0, cr1, cr2, cr1, {2}
20005c5c:	41000300 	mrsmi	r0, LR_irq
20005c60:	000e0290 	muleq	lr, r0, r2
20005c64:	9048008d 	subls	r0, r8, sp, lsl #1
20005c68:	81040c02 	tsthi	r4, r2, lsl #24
20005c6c:	02a04c87 	adceq	r4, r0, #34560	; 0x8700
20005c70:	cffffffc 	svcgt	0x00fffffc
20005c74:	8203e2fc 	andhi	lr, r3, #252, 4	; 0xc000000f
20005c78:	e3f81c07 	mvns	r1, #1792	; 0x700
20005c7c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20005c80 <title_black_bits>:
	...
20005ca8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20005cac:	01000040 	tsteq	r0, r0, asr #32
20005cb0:	400c0000 	andmi	r0, ip, r0
20005cb4:	00010080 	andeq	r0, r1, r0, lsl #1
20005cb8:	9c200400 	cfstrsls	mvf0, [r0], #-0
20005cbc:	000001c4 	andeq	r0, r0, r4, asr #3
20005cc0:	a4803104 	strge	r3, [r0], #260	; 0x104
20005cc4:	04c00001 	strbeq	r0, [r0], #1
20005cc8:	02240209 	eoreq	r0, r4, #-1879048192	; 0x90000000
20005ccc:	89044000 	stmdbhi	r4, {lr}
20005cd0:	00042602 	andeq	r2, r4, r2, lsl #12
20005cd4:	e2888440 	add	r8, r8, #64, 8	; 0x40000000
20005cd8:	00000421 	andeq	r0, r0, r1, lsr #8
20005cdc:	001966f2 			; <UNDEFINED> instruction: 0x001966f2
20005ce0:	03000007 	movweq	r0, #7
20005ce4:	00020000 	andeq	r0, r2, r0
20005ce8:	f4000000 	vst4.8	{d0-d3}, [r0], r0
20005cec:	00003a10 	andeq	r3, r0, r0, lsl sl
20005cf0:	10058000 	andne	r8, r5, r0
20005cf4:	00000012 	andeq	r0, r0, r2, lsl r0
20005cf8:	1ad87400 	bne	1f622d00 <startup-0x9dd300>
20005cfc:	80000000 	andhi	r0, r0, r0
20005d00:	0022041b 	eoreq	r0, r2, fp, lsl r4
20005d04:	00004000 	andeq	r4, r0, r0
20005d08:	00003800 	andeq	r3, r0, r0, lsl #16
20005d0c:	0000c0c0 	andeq	ip, r0, r0, asr #1
20005d10:	c0000000 	andgt	r0, r0, r0
20005d14:	08000045 	stmdaeq	r0, {r0, r2, r6}
20005d18:	144000c7 	strbne	r0, [r0], #-199	; 0xffffff39
20005d1c:	01281040 			; <UNDEFINED> instruction: 0x01281040
20005d20:	71144000 	tstvc	r4, r0
20005d24:	00190810 	andseq	r0, r9, r0, lsl r8
20005d28:	90019440 	andls	r9, r1, r0, asr #8
20005d2c:	4000c928 	andmi	ip, r0, r8, lsr #18
20005d30:	2c444c94 	mcrrcs	12, 9, r4, r4, cr4
20005d34:	96000049 	strls	r0, [r0], -r9, asr #32
20005d38:	49264740 	stmdbmi	r6!, {r6, r8, r9, sl, lr}
20005d3c:	60938000 	addsvs	r8, r3, r0
20005d40:	00512268 	subseq	r2, r1, r8, ror #4
20005d44:	30000000 	andcc	r0, r0, r0
20005d48:	00001d03 	andeq	r1, r0, r3, lsl #26
	...

20005d54 <bg_bits>:
	...
20005d64:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
20005d68:	0000001f 	andeq	r0, r0, pc, lsl r0
	...
20005d74:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20005d78:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
20005d84:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20005d88:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
20005d94:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20005d98:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
20005da4:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20005da8:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20005db4:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20005db8:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005dc4:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20005dc8:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005ecf <bg_bits+0x17b>	; <UNPREDICTABLE>
20005dcc:	0001f000 	andeq	pc, r1, r0
20005dd0:	00000000 	andeq	r0, r0, r0
20005dd4:	007fe000 	rsbseq	lr, pc, r0
20005dd8:	0ffffffe 	svceq	0x00fffffe
20005ddc:	0003f800 	andeq	pc, r3, r0, lsl #16
20005de0:	00000000 	andeq	r0, r0, r0
20005de4:	003fe000 	eorseq	lr, pc, r0
20005de8:	7fffffc0 	svcvc	0x00ffffc0
20005dec:	0003f800 	andeq	pc, r3, r0, lsl #16
20005df0:	001f8000 	andseq	r8, pc, r0
20005df4:	001fe000 	andseq	lr, pc, r0
20005df8:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20005dfc:	0003f801 	andeq	pc, r3, r1, lsl #16
20005e00:	003fc000 	eorseq	ip, pc, r0
20005e04:	003fe000 	eorseq	lr, pc, r0
20005e08:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20005e0c:	3f83f807 	svccc	0x0083f807
20005e10:	003fe000 	eorseq	lr, pc, r0
20005e14:	01ffe000 	mvnseq	lr, r0
20005e18:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20005e1c:	7fc3f80f 	svcvc	0x00c3f80f
20005e20:	003fe7f8 	ldrshteq	lr, [pc], -r8
20005e24:	07ffe000 	ldrbeq	lr, [pc, r0]!
20005e28:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
20005e2c:	7fe1f01f 	svcvc	0x00e1f01f
20005e30:	003ffffc 	ldrshteq	pc, [pc], -ip	; <UNPREDICTABLE>
20005e34:	3fffc000 	svccc	0x00ffc000
20005e38:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20005e3c:	7ff0003f 	svcvc	0x00f0003f
20005e40:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
20005e44:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20005e48:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20005e4c:	7ff8007f 	svcvc	0x00f8007f
20005e50:	3ffffffc 	svccc	0x00fffffc
20005e54:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20005e58:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
20005e5c:	7ffc00ff 	svcvc	0x00fc00ff
20005e60:	7ffffffc 	svcvc	0x00fffffc
20005e64:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20005e68:	e000000f 	and	r0, r0, pc
20005e6c:	7ffe01ff 	svcvc	0x00fe01ff
20005e70:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20005e74:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
20005e78:	8000001f 	andhi	r0, r0, pc, lsl r0
20005e7c:	7fff01ff 	svcvc	0x00ff01ff
20005e80:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20005e84:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20005e88:	0000007f 	andeq	r0, r0, pc, ror r0
20005e8c:	7fff83ff 	svcvc	0x00ff83ff
20005e90:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
20005e94:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20005e98:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005e9c:	7fffc3fe 	svcvc	0x00ffc3fe
20005ea0:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20005ea4:	fc7ffff0 	ldc2l	15, cr15, [pc], #-960	; 20005aec <title_light_bits+0x14>
20005ea8:	07c001ff 			; <UNDEFINED> instruction: 0x07c001ff
20005eac:	7fffe7fc 	svcvc	0x00ffe7fc
20005eb0:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
20005eb4:	f0fffffe 			; <UNDEFINED> instruction: 0xf0fffffe
20005eb8:	0fe007ff 	svceq	0x00e007ff
20005ebc:	7ffff7fc 	svcvc	0x00fff7fc
20005ec0:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
20005ec4:	c0ffffff 	ldrshtgt	pc, [pc], #255	; <UNPREDICTABLE>
20005ec8:	0fe00fff 	svceq	0x00e00fff
20005ecc:	7ffffff8 	svcvc	0x00fffff8
20005ed0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20005ed4:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005fdb <bg_bits+0x287>	; <UNPREDICTABLE>
20005ed8:	0fe01fff 	svceq	0x00e01fff
20005edc:	7ffffff8 	svcvc	0x00fffff8
20005ee0:	7ffffc00 	svcvc	0x00fffc00
20005ee4:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005feb <bg_bits+0x297>	; <UNPREDICTABLE>
20005ee8:	0fe03ffe 	svceq	0x00e03ffe
20005eec:	3fdffff0 	svccc	0x00dffff0
20005ef0:	3ffffe00 	svccc	0x00fffe00
20005ef4:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005ffb <bg_bits+0x2a7>	; <UNPREDICTABLE>
20005ef8:	0fe03ff8 	svceq	0x00e03ff8
20005efc:	3fe7fff0 	svccc	0x00e7fff0
20005f00:	07fffe00 	ldrbeq	pc, [pc, r0, lsl #28]!	; <UNPREDICTABLE>
20005f04:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20005f08:	07c07ff0 			; <UNDEFINED> instruction: 0x07c07ff0
20005f0c:	1fe7fff0 	svcne	0x00e7fff0
20005f10:	0ffffe00 	svceq	0x00fffe00
20005f14:	03fc00ff 	mvnseq	r0, #255	; 0xff
20005f18:	0000ffe0 	andeq	pc, r0, r0, ror #31
20005f1c:	1ff3ffe0 	svcne	0x00f3ffe0
20005f20:	1ffffe00 	svcne	0x00fffe00
20005f24:	03fc001f 	mvnseq	r0, #31
20005f28:	0001ff80 	andeq	pc, r1, r0, lsl #31
20005f2c:	1ff9ffe0 	svcne	0x00f9ffe0
20005f30:	3ffffe00 	svccc	0x00fffe00
20005f34:	03fc0007 	mvnseq	r0, #7
20005f38:	0001ff80 	andeq	pc, r1, r0, lsl #31
20005f3c:	0ffcffe0 	svceq	0x00fcffe0
20005f40:	3ffdfe00 	svccc	0x00fdfe00
20005f44:	07f80007 	ldrbeq	r0, [r8, r7]!
20005f48:	0003ff00 	andeq	pc, r3, r0, lsl #30
20005f4c:	0ffe7ff0 	svceq	0x00fe7ff0
20005f50:	3ffcfe00 	svccc	0x00fcfe00
20005f54:	07f80003 	ldrbeq	r0, [r8, r3]!
20005f58:	0007fe00 	andeq	pc, r7, r0, lsl #28
20005f5c:	07fe7ff8 			; <UNDEFINED> instruction: 0x07fe7ff8
20005f60:	3ff8fe00 	svccc	0x00f8fe00
20005f64:	0ff80003 	svceq	0x00f80003
20005f68:	0007fc00 	andeq	pc, r7, r0, lsl #24
20005f6c:	03fffffc 	mvnseq	pc, #252, 30	; 0x3f0
20005f70:	3ff87c00 	svccc	0x00f87c00
20005f74:	0ff80003 	svceq	0x00f80003
20005f78:	0007fc00 	andeq	pc, r7, r0, lsl #24
20005f7c:	01fffffe 	ldrsheq	pc, [pc, #254]	; 20006082 <bg_bits+0x32e>	; <UNPREDICTABLE>
20005f80:	1ff00000 	svcne	0x00f00000	; IMB
20005f84:	0ff00007 	svceq	0x00f00007
20005f88:	000ff800 	andeq	pc, pc, r0, lsl #16
20005f8c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006093 <bg_bits+0x33f>	; <UNPREDICTABLE>
20005f90:	07f0003e 			; <UNDEFINED> instruction: 0x07f0003e
20005f94:	0ff00007 	svceq	0x00f00007
20005f98:	800ff000 	andhi	pc, pc, r0
20005f9c:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20005fa0:	03e0007f 	mvneq	r0, #127	; 0x7f
20005fa4:	0fe00007 	svceq	0x00e00007
20005fa8:	c00ff000 	andgt	pc, pc, r0
20005fac:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20005fb0:	0000007f 	andeq	r0, r0, pc, ror r0
20005fb4:	0fe00007 	svceq	0x00e00007
20005fb8:	e00ff000 	and	pc, pc, r0
20005fbc:	007ffeff 	ldrshteq	pc, [pc], #-239	; <UNPREDICTABLE>
20005fc0:	0000007f 	andeq	r0, r0, pc, ror r0
20005fc4:	0fe00007 	svceq	0x00e00007
20005fc8:	f00ff000 			; <UNDEFINED> instruction: 0xf00ff000
20005fcc:	003ffe7f 	eorseq	pc, pc, pc, ror lr	; <UNPREDICTABLE>
20005fd0:	0000007f 	andeq	r0, r0, pc, ror r0
20005fd4:	0fe00007 	svceq	0x00e00007
20005fd8:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
20005fdc:	001ffc3f 	andseq	pc, pc, pc, lsr ip	; <UNPREDICTABLE>
20005fe0:	0000007f 	andeq	r0, r0, pc, ror r0
20005fe4:	1fe0000f 	svcne	0x00e0000f
20005fe8:	fc0ff000 	stc2	0, cr15, [pc], {-0}
20005fec:	000ff81f 	andeq	pc, pc, pc, lsl r8	; <UNPREDICTABLE>
20005ff0:	0000003e 	andeq	r0, r0, lr, lsr r0
20005ff4:	1fe0000f 	svcne	0x00e0000f
20005ff8:	fc07f000 	stc2	0, cr15, [r7], {-0}
20005ffc:	0007f00f 	andeq	pc, r7, pc
20006000:	00000000 	andeq	r0, r0, r0
20006004:	1fe0000f 	svcne	0x00e0000f
20006008:	fc07f000 	stc2	0, cr15, [r7], {-0}
2000600c:	00000007 	andeq	r0, r0, r7
20006010:	00000000 	andeq	r0, r0, r0
20006014:	1fe0000f 	svcne	0x00e0000f
20006018:	fc07f800 	stc2	8, cr15, [r7], {-0}
2000601c:	00000003 	andeq	r0, r0, r3
20006020:	000ff800 	andeq	pc, pc, r0, lsl #16
20006024:	1fc0001f 	svcne	0x00c0001f
20006028:	fc07fc00 	stc2	12, cr15, [r7], {-0}
2000602c:	00000001 	andeq	r0, r0, r1
20006030:	001ffc00 	andseq	pc, pc, r0, lsl #24
20006034:	1fc0003f 	svcne	0x00c0003f
20006038:	fc07ff80 	stc2	15, cr15, [r7], {128}	; 0x80
2000603c:	00000001 	andeq	r0, r0, r1
20006040:	003fff00 	eorseq	pc, pc, r0, lsl #30
20006044:	3fc0003f 	svccc	0x00c0003f
20006048:	fc07fffc 	stc2	15, cr15, [r7], {252}	; 0xfc
2000604c:	00000001 	andeq	r0, r0, r1
20006050:	007fff80 	rsbseq	pc, pc, r0, lsl #31
20006054:	ffc0003f 			; <UNDEFINED> instruction: 0xffc0003f
20006058:	fc03ffff 	stc2	15, cr15, [r3], {255}	; 0xff
2000605c:	00000001 	andeq	r0, r0, r1
20006060:	00ffffe0 	rscseq	pc, pc, r0, ror #31
20006064:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20006068:	fc01ffff 	stc2	15, cr15, [r1], {255}	; 0xff
2000606c:	00000007 	andeq	r0, r0, r7
20006070:	03fffff0 	mvnseq	pc, #240, 30	; 0x3c0
20006074:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20006078:	fc00ffff 	stc2	15, cr15, [r0], {255}	; 0xff
2000607c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006080:	07fffff8 			; <UNDEFINED> instruction: 0x07fffff8
20006084:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20006088:	fc007fff 	stc2	15, cr7, [r0], {255}	; 0xff
2000608c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006090:	07ff7ffd 			; <UNDEFINED> instruction: 0x07ff7ffd
20006094:	ff80007f 			; <UNDEFINED> instruction: 0xff80007f
20006098:	fc003fff 	stc2	15, cr3, [r0], {255}	; 0xff
2000609c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200060a0:	0ffe3fff 	svceq	0x00fe3fff
200060a4:	ff1f007f 			; <UNDEFINED> instruction: 0xff1f007f
200060a8:	f80007ff 			; <UNDEFINED> instruction: 0xf80007ff
200060ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200060b0:	1ffc3fff 	svcne	0x00fc3fff
200060b4:	fc3f807f 	ldc2	0, cr8, [pc], #-508	; 20005ec0 <bg_bits+0x16c>
200060b8:	f800003f 			; <UNDEFINED> instruction: 0xf800003f
200060bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200060c0:	1ff83fff 	svcne	0x00f83fff
200060c4:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
200060c8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200060cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200060d0:	3ff03fff 	svccc	0x00f03fff
200060d4:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
200060d8:	c0000000 	andgt	r0, r0, r0
200060dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200060e0:	7fe03fff 	svcvc	0x00e03fff
200060e4:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
200060e8:	00000000 	andeq	r0, r0, r0
200060ec:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200060f0:	7fc03fff 	svcvc	0x00c03fff
200060f4:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
200060f8:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
200060fc:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
20006100:	ffc01fff 			; <UNDEFINED> instruction: 0xffc01fff
20006104:	001f003f 	andseq	r0, pc, pc, lsr r0	; <UNPREDICTABLE>
20006108:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
2000610c:	f8007fff 			; <UNDEFINED> instruction: 0xf8007fff
20006110:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20006114:	0000003f 	andeq	r0, r0, pc, lsr r0
20006118:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
2000611c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006120:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20006124:	0000003f 	andeq	r0, r0, pc, lsr r0
20006128:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
2000612c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006130:	ff001fff 			; <UNDEFINED> instruction: 0xff001fff
20006134:	0000003f 	andeq	r0, r0, pc, lsr r0
20006138:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
2000613c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006140:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}
20006144:	0000003f 	andeq	r0, r0, pc, lsr r0
20006148:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
2000614c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006150:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}

20006154 <current_screen>:
20006154:	00000001 	andeq	r0, r0, r1

20006158 <delay_until_text.4269>:
20006158:	0000006e 	andeq	r0, r0, lr, rrx

2000615c <long_text.4267>:
2000615c:	00000028 	andeq	r0, r0, r8, lsr #32

20006160 <short_text.4268>:
20006160:	00000014 	andeq	r0, r0, r4, lsl r0

20006164 <fire_black_2_bits>:
	...
2000616c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>

20006170 <fire1_gray_bits>:
20006170:	00000000 	andeq	r0, r0, r0
20006174:	06000804 	streq	r0, [r0], -r4, lsl #16
20006178:	02494204 	subeq	r4, r9, #4, 4	; 0x40000000

2000617c <fire1_light_bits>:
2000617c:	00002000 	andeq	r2, r0, r0
20006180:	48000010 	stmdami	r0, {r4}
20006184:	2c243020 	stccs	0, cr3, [r4], #-128	; 0xffffff80

20006188 <fire2_gray_bits>:
20006188:	00000000 	andeq	r0, r0, r0
2000618c:	10220000 	eorne	r0, r2, r0
20006190:	00420444 	subeq	r0, r2, r4, asr #8

20006194 <fire2_light_bits>:
20006194:	04200000 	strteq	r0, [r0], #-0
20006198:	240c0010 	strcs	r0, [ip], #-16
2000619c:	123c6008 	eorsne	r6, ip, #8

200061a0 <fire3_gray_bits>:
200061a0:	00000000 	andeq	r0, r0, r0
200061a4:	24100802 	ldrcs	r0, [r0], #-2050	; 0xfffff7fe
200061a8:	00020260 	andeq	r0, r2, r0, ror #4

200061ac <fire3_light_bits>:
200061ac:	10200000 	eorne	r0, r0, r0
200061b0:	18040400 	stmdane	r4, {sl}
200061b4:	143c5812 	ldrtne	r5, [ip], #-2066	; 0xfffff7ee

200061b8 <fire4_gray_bits>:
200061b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
200061bc:	10320000 	eorsne	r0, r2, r0
200061c0:	02400012 	subeq	r0, r0, #18

200061c4 <fire4_light_bits>:
200061c4:	00001000 	andeq	r1, r0, r0
200061c8:	04082000 	streq	r2, [r8], #-0
200061cc:	24283a0c 	strtcs	r3, [r8], #-2572	; 0xfffff5f4

200061d0 <fire5_gray_bits>:
200061d0:	00000000 	andeq	r0, r0, r0
200061d4:	22001020 	andcs	r1, r0, #32
200061d8:	04044206 	streq	r4, [r4], #-518	; 0xfffffdfa

200061dc <fire5_light_bits>:
200061dc:	00040000 	andeq	r0, r4, r0
200061e0:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
200061e4:	502a1810 	eorpl	r1, sl, r0, lsl r8

200061e8 <firstTime.4076>:
200061e8:	00000001 	andeq	r0, r0, r1

200061ec <bird1_black_bits>:
	...
200061fc:	00010040 	andeq	r0, r1, r0, asr #32
20006200:	00118060 	andseq	r8, r1, r0, rrx
20006204:	00118060 	andseq	r8, r1, r0, rrx
20006208:	001b80ec 	andseq	r8, fp, ip, ror #1
2000620c:	003f81fc 	ldrshteq	r8, [pc], -ip
20006210:	007fe1f8 	ldrshteq	lr, [pc], #-24
20006214:	007ff3f8 	ldrshteq	pc, [pc], #-56	; <UNPREDICTABLE>
20006218:	003ffff8 	ldrshteq	pc, [pc], -r8	; <UNPREDICTABLE>
2000621c:	003fedf8 	ldrshteq	lr, [pc], -r8
20006220:	001ff1f0 			; <UNDEFINED> instruction: 0x001ff1f0
20006224:	000ff0e0 	andeq	pc, pc, r0, ror #1
20006228:	0007ff80 	andeq	pc, r7, r0, lsl #31
2000622c:	00007c00 	andeq	r7, r0, r0, lsl #24
20006230:	00008800 	andeq	r8, r0, r0, lsl #16
20006234:	00033000 	andeq	r3, r3, r0
20006238:	00011000 	andeq	r1, r1, r0
	...

20006250 <bird1_gray_bits>:
	...
20006284:	00000e00 	andeq	r0, r0, r0, lsl #28
20006288:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

200062b4 <bird1_light_bits>:
	...
200062e4:	00001200 	andeq	r1, r0, r0, lsl #4
	...

20006318 <bird2_black_bits>:
	...
20006330:	000b0000 	andeq	r0, fp, r0
20006334:	001e0028 	andseq	r0, lr, r8, lsr #32
20006338:	003e0068 	eorseq	r0, lr, r8, rrx
2000633c:	003e007c 	eorseq	r0, lr, ip, ror r0
20006340:	003e007c 	eorseq	r0, lr, ip, ror r0
20006344:	007e007c 	rsbseq	r0, lr, ip, ror r0
20006348:	007e7cfc 	ldrshteq	r7, [lr], #-204	; 0xffffff34
2000634c:	007ffff8 	ldrshteq	pc, [pc], #-248	; <UNPREDICTABLE>
20006350:	003fd7f0 	ldrshteq	sp, [pc], -r0
20006354:	003fc3c0 	eorseq	ip, pc, r0, asr #7
20006358:	000fc100 	andeq	ip, pc, r0, lsl #2
2000635c:	00007000 	andeq	r7, r0, r0
20006360:	0000a000 	andeq	sl, r0, r0
20006364:	0001e000 	andeq	lr, r1, r0
20006368:	0000a000 	andeq	sl, r0, r0
2000636c:	00008000 	andeq	r8, r0, r0
	...

2000637c <bird2_gray_bits>:
	...
200063b8:	00003c00 	andeq	r3, r0, r0, lsl #24
200063bc:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

200063e0 <bird2_light_bits>:
	...
20006418:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20006444 <bird3_black_bits>:
	...
20006464:	00280000 	eoreq	r0, r8, r0
20006468:	00680020 	rsbeq	r0, r8, r0, lsr #32
2000646c:	00f80038 	rscseq	r0, r8, r8, lsr r0
20006470:	00fc0038 	rscseq	r0, ip, r8, lsr r0
20006474:	00fc007c 	rscseq	r0, ip, ip, ror r0
20006478:	00fe3dfe 	ldrshteq	r3, [lr], #222	; 0xde
2000647c:	00fffffe 	ldrshteq	pc, [pc], #254	; <UNPREDICTABLE>
20006480:	007febfc 	ldrshteq	lr, [pc], #-188
20006484:	003ff1f0 	ldrshteq	pc, [pc], -r0	; <UNPREDICTABLE>
20006488:	001ff0c0 	andseq	pc, pc, r0, asr #1
2000648c:	0001e800 	andeq	lr, r1, r0, lsl #16
20006490:	00005000 	andeq	r5, r0, r0
20006494:	0000f000 	andeq	pc, r0, r0
20006498:	00009000 	andeq	r9, r0, r0
	...

200064a8 <bird3_gray_bits>:
	...
200064e8:	00000e00 	andeq	r0, r0, r0, lsl #28
200064ec:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

2000650c <bird3_light_bits>:
	...
20006548:	00001400 	andeq	r1, r0, r0, lsl #8
	...

20006570 <bird4_black_bits>:
	...
200065a4:	00007800 	andeq	r7, r0, r0, lsl #16
200065a8:	0000ff80 	andeq	pc, r0, r0, lsl #31
200065ac:	0003d7f4 	strdeq	sp, [r3], -r4
200065b0:	008fe3fc 	strdeq	lr, [pc], ip
200065b4:	01ffc1fc 	ldrsheq	ip, [pc, #28]	; 200065d8 <bird4_gray_bits+0x4>
200065b8:	00ffd9f8 	ldrshteq	sp, [pc], #152
200065bc:	007fb0f0 	ldrshteq	fp, [pc], #-0
200065c0:	007ea000 	rsbseq	sl, lr, r0
200065c4:	00792000 	rsbseq	r2, r9, r0
200065c8:	00300000 	eorseq	r0, r0, r0
	...

200065d4 <bird4_gray_bits>:
	...
20006614:	00001c00 	andeq	r1, r0, r0, lsl #24
20006618:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20006638 <bird4_light_bits>:
	...
20006674:	00002800 	andeq	r2, r0, r0, lsl #16
	...

2000669c <bird5_black_bits>:
	...
200066c8:	00001c00 	andeq	r1, r0, r0, lsl #24
200066cc:	0000ff00 	andeq	pc, r0, r0, lsl #30
200066d0:	0003eb00 	andeq	lr, r3, r0, lsl #22
200066d4:	0007f180 	andeq	pc, r7, r0, lsl #3
200066d8:	000ff080 	andeq	pc, pc, r0, lsl #1
200066dc:	000fff80 	andeq	pc, pc, r0, lsl #31
200066e0:	001fd3c0 	andseq	sp, pc, r0, asr #7
200066e4:	003fa3c0 	eorseq	sl, pc, r0, asr #7
200066e8:	003fa3c0 	eorseq	sl, pc, r0, asr #7
200066ec:	003fd3c0 	eorseq	sp, pc, r0, asr #7
200066f0:	003e8380 	eorseq	r8, lr, r0, lsl #7
200066f4:	00778580 	rsbseq	r8, r7, r0, lsl #11
200066f8:	00610000 	rsbeq	r0, r1, r0
200066fc:	00000000 	andeq	r0, r0, r0

20006700 <bird5_gray_bits>:
	...
20006738:	00000e00 	andeq	r0, r0, r0, lsl #28
2000673c:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20006764 <bird5_light_bits>:
	...
20006798:	00001400 	andeq	r1, r0, r0, lsl #8
	...

200067c8 <firstTime.4093>:
200067c8:	00000001 	andeq	r0, r0, r1
200067cc:	00202020 	eoreq	r2, r0, r0, lsr #32
200067d0:	41524b2a 	cmpmi	r2, sl, lsr #22
200067d4:	2a202a21 	bcs	20811060 <firstTime.4093+0x80a898>
200067d8:	2141524b 	cmpcs	r1, fp, asr #4
200067dc:	0000002a 	andeq	r0, r0, sl, lsr #32
200067e0:	734c4944 	movtvc	r4, #51524	; 0xc944
200067e4:	7469772d 	strbtvc	r7, [r9], #-1837	; 0xfffff8d3
200067e8:	73656863 	cmnvc	r5, #6488064	; 0x630000
200067ec:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
200067f0:	00000065 	andeq	r0, r0, r5, rrx
200067f4:	20726f46 	rsbscs	r6, r2, r6, asr #30
200067f8:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
200067fc:	65697275 	strbvs	r7, [r9, #-629]!	; 0xfffffd8b
20006800:	68742073 	ldmdavs	r4!, {r0, r1, r4, r5, r6, sp}^
20006804:	00000065 	andeq	r0, r0, r5, rrx
20006808:	20202020 	eorcs	r2, r0, r0, lsr #32
2000680c:	00000000 	andeq	r0, r0, r0
20006810:	6c696f63 	stclvs	15, cr6, [r9], #-396	; 0xfffffe74
20006814:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
20006818:	6566206e 	strbvs	r2, [r6, #-110]!	; 0xffffff92
2000681c:	002c7261 	eoreq	r7, ip, r1, ror #4
20006820:	74616874 	strbtvc	r6, [r1], #-2164	; 0xfffff78c
20006824:	44206120 	strtmi	r6, [r0], #-288	; 0xfffffee0
20006828:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
2000682c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
20006830:	00000068 	andeq	r0, r0, r8, rrx
20006834:	6e656877 	mcrvs	8, 3, r6, cr5, cr7, {3}
20006838:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
2000683c:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
20006840:	65682079 	strbvs	r2, [r8, #-121]!	; 0xffffff87
20006844:	00007261 	andeq	r7, r0, r1, ror #4
20006848:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
2000684c:	2e726165 	rpwcssz	f6, f2, f5
20006850:	00000000 	andeq	r0, r0, r0
20006854:	70727573 	rsbsvc	r7, r2, r3, ror r5
20006858:	69736972 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, fp, sp, lr}^
2000685c:	202c676e 	eorcs	r6, ip, lr, ror #14
20006860:	646e6966 	strbtvs	r6, [lr], #-2406	; 0xfffff69a
20006864:	00676e69 	rsbeq	r6, r7, r9, ror #28
20006868:	69206f53 	stmdbvs	r0!, {r0, r1, r4, r6, r8, r9, sl, fp, sp, lr}
2000686c:	73692074 	cmnvc	r9, #116	; 0x74
20006870:	69757120 	ldmdbvs	r5!, {r5, r8, ip, sp, lr}^
20006874:	00006574 	andeq	r6, r0, r4, ror r5
20006878:	20756f79 	rsbscs	r6, r5, r9, ror pc
2000687c:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
20006880:	0000002c 	andeq	r0, r0, ip, lsr #32
20006884:	72696568 	rsbvc	r6, r9, #104, 10	; 0x1a000000
20006888:	206f7420 	rsbcs	r7, pc, r0, lsr #8
2000688c:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
20006890:	61654c20 	cmnvs	r5, r0, lsr #24
20006894:	00002e72 	andeq	r2, r0, r2, ror lr
20006898:	65657571 	strbvs	r7, [r5, #-1393]!	; 0xfffffa8f
2000689c:	6144206e 	cmpvs	r4, lr, rrx
200068a0:	206f6666 	rsbcs	r6, pc, r6, ror #12
200068a4:	4420666f 	strtmi	r6, [r0], #-1647	; 0xfffff991
200068a8:	2c734c49 	ldclcs	12, cr4, [r3], #-292	; 0xfffffedc
200068ac:	00000000 	andeq	r0, r0, r0
200068b0:	706d6574 	rsbvc	r6, sp, r4, ror r5
200068b4:	2c646574 	cfstr64cs	mvdx6, [r4], #-464	; 0xfffffe30
200068b8:	206f7420 	rsbcs	r7, pc, r0, lsr #8
200068bc:	746f6f6c 	strbtvc	r6, [pc], #-3948	; 200068c4 <firstTime.4093+0xfc>
200068c0:	00000000 	andeq	r0, r0, r0
200068c4:	20747542 	rsbscs	r7, r4, r2, asr #10
200068c8:	6279616d 	rsbsvs	r6, r9, #1073741851	; 0x4000001b
200068cc:	6f792065 	svcvs	0x00792065
200068d0:	65722775 	ldrbvs	r2, [r2, #-1909]!	; 0xfffff88b
200068d4:	00000000 	andeq	r0, r0, r0
200068d8:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 20006748 <bird5_gray_bits+0x48>
200068dc:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
200068e0:	63697220 	cmnvs	r9, #32, 4
200068e4:	2c736568 	cfldr64cs	mvdx6, [r3], #-416	; 0xfffffe60
200068e8:	00000000 	andeq	r0, r0, r0
200068ec:	6b636977 	blvs	218e0ed0 <firstTime.4093+0x18da708>
200068f0:	44206465 	strtmi	r6, [r0], #-1125	; 0xfffffb9b
200068f4:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
200068f8:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
200068fc:	2e736568 	cdpcs	5, 7, cr6, cr3, cr8, {3}
20006900:	00000000 	andeq	r0, r0, r0
20006904:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
20006908:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
2000690c:	00000000 	andeq	r0, r0, r0
20006910:	67206f73 			; <UNDEFINED> instruction: 0x67206f73
20006914:	70706972 	rsbsvc	r6, r0, r2, ror r9
20006918:	20796c69 	rsbscs	r6, r9, r9, ror #24
2000691c:	61657274 	smcvs	22308	; 0x5724
20006920:	0000002d 	andeq	r0, r0, sp, lsr #32
20006924:	6572202d 	ldrbvs	r2, [r2, #-45]!	; 0xffffffd3
20006928:	20746573 	rsbscs	r6, r4, r3, ror r5
2000692c:	20656874 	rsbcs	r6, r5, r4, ror r8
20006930:	74697773 	strbtvc	r7, [r9], #-1907	; 0xfffff88d
20006934:	00216863 	eoreq	r6, r1, r3, ror #16
20006938:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
2000693c:	62202c72 	eorvs	r2, r0, #29184	; 0x7200
20006940:	65766172 	ldrbvs	r6, [r6, #-370]!	; 0xfffffe8e
20006944:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
20006948:	002c6863 	eoreq	r6, ip, r3, ror #16
2000694c:	2000198c 	andcs	r1, r0, ip, lsl #19
20006950:	20001996 	mulcs	r0, r6, r9
20006954:	200019a0 	andcs	r1, r0, r0, lsr #19
20006958:	200019aa 	andcs	r1, r0, sl, lsr #19
2000695c:	200019b4 			; <UNDEFINED> instruction: 0x200019b4
20006960:	200019be 			; <UNDEFINED> instruction: 0x200019be
20006964:	200019c8 	andcs	r1, r0, r8, asr #19
20006968:	200019d2 	ldrdcs	r1, [r0], -r2
2000696c:	20202020 	eorcs	r2, r0, r0, lsr #32
20006970:	20202020 	eorcs	r2, r0, r0, lsr #32
20006974:	20202020 	eorcs	r2, r0, r0, lsr #32
20006978:	20202020 	eorcs	r2, r0, r0, lsr #32
2000697c:	20202020 	eorcs	r2, r0, r0, lsr #32
20006980:	00000000 	andeq	r0, r0, r0
20006984:	61666c41 	cmnvs	r6, r1, asr #24
20006988:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
2000698c:	6b736972 	blvs	21ce0f5c <firstTime.4093+0x1cda794>
20006990:	00000000 	andeq	r0, r0, r0
20006994:	64726168 	ldrbtvs	r6, [r2], #-360	; 0xfffffe98
20006998:	a4c3a5c3 	strbge	sl, [r3], #1475	; 0x5c3
2000699c:	7261b6c3 	rsbvc	fp, r1, #204472320	; 0xc300000
200069a0:	75732065 	ldrbvc	r2, [r3, #-101]!	; 0xffffff9b
200069a4:	00726567 	rsbseq	r6, r2, r7, ror #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000853 	andeq	r0, r0, r3, asr r8
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000070 	andeq	r0, r0, r0, ror r0
      10:	0004570c 	andeq	r5, r4, ip, lsl #14
	...
      20:	020c0200 	andeq	r0, ip, #0, 4
      24:	00004e05 	andeq	r4, r0, r5, lsl #28
      28:	02c90300 	sbceq	r0, r9, #0, 6
      2c:	07020000 	streq	r0, [r2, -r0]
      30:	0000004e 	andeq	r0, r0, lr, asr #32
      34:	05e60300 	strbeq	r0, [r6, #768]!	; 0x300
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	0de60304 	stcleq	3, cr0, [r6, #16]!
      44:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
      48:	00000055 	andeq	r0, r0, r5, asr r0
      4c:	04040008 	streq	r0, [r4], #-8
      50:	0002ed07 	andeq	lr, r2, r7, lsl #26
      54:	5b040500 	blpl	10145c <startup-0x1fefeba4>
      58:	04000000 	streq	r0, [r0], #-0
      5c:	04040801 	streq	r0, [r4], #-2049	; 0xfffff7ff
      60:	38060000 	stmdacc	r6, {}	; <UNPREDICTABLE>
      64:	0200000f 	andeq	r0, r0, #15
      68:	0000210a 	andeq	r2, r0, sl, lsl #2
      6c:	00160700 	andseq	r0, r6, r0, lsl #14
      70:	030c0000 	movweq	r0, #49152	; 0xc000
      74:	00009e06 	andeq	r9, r0, r6, lsl #28
      78:	04da0300 	ldrbeq	r0, [sl], #768	; 0x300
      7c:	07030000 	streq	r0, [r3, -r0]
      80:	0000009e 	muleq	r0, lr, r0
      84:	001d0300 	andseq	r0, sp, r0, lsl #6
      88:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      8c:	0000009e 	muleq	r0, lr, r0
      90:	00120304 	andseq	r0, r2, r4, lsl #6
      94:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
      98:	0000009e 	muleq	r0, lr, r0
      9c:	04050008 	streq	r0, [r5], #-8
      a0:	00000062 	andeq	r0, r0, r2, rrx
      a4:	000c1506 	andeq	r1, ip, r6, lsl #10
      a8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
      ac:	07000000 	streq	r0, [r0, -r0]
      b0:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
      b4:	28060424 	stmdacs	r6, {r2, r5, sl}
      b8:	03000001 	movweq	r0, #1
      bc:	000003a1 	andeq	r0, r0, r1, lsr #7
      c0:	01280704 			; <UNDEFINED> instruction: 0x01280704
      c4:	03000000 	movweq	r0, #0
      c8:	000005c7 	andeq	r0, r0, r7, asr #11
      cc:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
      d0:	03040000 	movweq	r0, #16384	; 0x4000
      d4:	0000053f 	andeq	r0, r0, pc, lsr r5
      d8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
      dc:	03080000 	movweq	r0, #32768	; 0x8000
      e0:	0000055a 	andeq	r0, r0, sl, asr r5
      e4:	01460c04 	cmpeq	r6, r4, lsl #24
      e8:	030c0000 	movweq	r0, #49152	; 0xc000
      ec:	000002c2 	andeq	r0, r0, r2, asr #5
      f0:	01460d04 	cmpeq	r6, r4, lsl #26
      f4:	03100000 	tsteq	r0, #0
      f8:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
      fc:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     100:	03140000 	tsteq	r4, #0
     104:	00000041 	andeq	r0, r0, r1, asr #32
     108:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     10c:	03180000 	tsteq	r8, #0
     110:	00000332 	andeq	r0, r0, r2, lsr r3
     114:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     118:	031c0000 	tsteq	ip, #0
     11c:	00000342 	andeq	r0, r0, r2, asr #6
     120:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     124:	00200000 	eoreq	r0, r0, r0
     128:	00a40405 	adceq	r0, r4, r5, lsl #8
     12c:	04080000 	streq	r0, [r8], #-0
     130:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     134:	01400900 	cmpeq	r0, r0, lsl #18
     138:	400a0000 	andmi	r0, sl, r0
     13c:	00000001 	andeq	r0, r0, r1
     140:	00af0405 	adceq	r0, pc, r5, lsl #8
     144:	04050000 	streq	r0, [r5], #-0
     148:	00000135 	andeq	r0, r0, r5, lsr r1
     14c:	0005bc06 	andeq	fp, r5, r6, lsl #24
     150:	af150400 	svcge	0x00150400
     154:	0b000000 	bleq	15c <startup-0x1ffffea4>
     158:	00000162 	andeq	r0, r0, r2, ror #2
     15c:	00000162 	andeq	r0, r0, r2, ror #2
     160:	0405000c 	streq	r0, [r5], #-12
     164:	0000014c 	andeq	r0, r0, ip, asr #2
     168:	0004870d 	andeq	r8, r4, sp, lsl #14
     16c:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
     170:	0d000001 	stceq	0, cr0, [r0, #-4]
     174:	00000378 	andeq	r0, r0, r8, ror r3
     178:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
     17c:	85060000 	strhi	r0, [r6, #-0]
     180:	05000005 	streq	r0, [r0, #-5]
     184:	00005b24 	andeq	r5, r0, r4, lsr #22
     188:	017e0b00 	cmneq	lr, r0, lsl #22
     18c:	019a0000 	orrseq	r0, sl, r0
     190:	9a0e0000 	bls	380198 <startup-0x1fc7fe68>
     194:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     198:	04040003 	streq	r0, [r4], #-3
     19c:	00035f07 	andeq	r5, r3, r7, lsl #30
     1a0:	0d1c0d00 	ldceq	13, cr0, [ip, #-0]
     1a4:	2b050000 	blcs	1401ac <startup-0x1febfe54>
     1a8:	00000189 	andeq	r0, r0, r9, lsl #3
     1ac:	0001eb0d 	andeq	lr, r1, sp, lsl #22
     1b0:	892c0500 	stmdbhi	ip!, {r8, sl}
     1b4:	0d000001 	stceq	0, cr0, [r0, #-4]
     1b8:	00000412 	andeq	r0, r0, r2, lsl r4
     1bc:	01892d05 	orreq	r2, r9, r5, lsl #26
     1c0:	cf0d0000 	svcgt	0x000d0000
     1c4:	05000002 	streq	r0, [r0, #-2]
     1c8:	0001892e 	andeq	r8, r1, lr, lsr #18
     1cc:	025f0d00 	subseq	r0, pc, #0, 26
     1d0:	2f050000 	svccs	0x00050000
     1d4:	00000189 	andeq	r0, r0, r9, lsl #3
     1d8:	00059d0d 	andeq	r9, r5, sp, lsl #26
     1dc:	89300500 	ldmdbhi	r0!, {r8, sl}
     1e0:	0d000001 	stceq	0, cr0, [r0, #-4]
     1e4:	0000058d 	andeq	r0, r0, sp, lsl #11
     1e8:	01893105 	orreq	r3, r9, r5, lsl #2
     1ec:	5b0b0000 	blpl	2c01f4 <startup-0x1fd3fe0c>
     1f0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     1f4:	0f000001 	svceq	0x00000001
     1f8:	0000019a 	muleq	r0, sl, r1
     1fc:	30100077 	andscc	r0, r0, r7, ror r0
     200:	06000002 	streq	r0, [r0], -r2
     204:	0001ee03 	andeq	lr, r1, r3, lsl #28
     208:	28030500 	stmdacs	r3, {r8, sl}
     20c:	1120004a 			; <UNDEFINED> instruction: 0x1120004a
     210:	00000429 	andeq	r0, r0, r9, lsr #8
     214:	01ee0307 	mvneq	r0, r7, lsl #6
     218:	03050000 	movweq	r0, #20480	; 0x5000
     21c:	20004aa0 	andcs	r4, r0, r0, lsr #21
     220:	0004e511 	andeq	lr, r4, r1, lsl r5
     224:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     228:	05000001 	streq	r0, [r0, #-1]
     22c:	004b1803 	subeq	r1, fp, r3, lsl #16
     230:	005b0b20 	subseq	r0, fp, r0, lsr #22
     234:	02420000 	subeq	r0, r2, #0
     238:	9a0e0000 	bls	380240 <startup-0x1fc7fdc0>
     23c:	17000001 	strne	r0, [r0, -r1]
     240:	29110001 	ldmdbcs	r1, {r0}
     244:	09000001 	stmdbeq	r0, {r0}
     248:	00023103 	andeq	r3, r2, r3, lsl #2
     24c:	90030500 	andls	r0, r3, r0, lsl #10
     250:	1120004b 			; <UNDEFINED> instruction: 0x1120004b
     254:	00000385 	andeq	r0, r0, r5, lsl #7
     258:	0231030a 	eorseq	r0, r1, #671088640	; 0x28000000
     25c:	03050000 	movweq	r0, #20480	; 0x5000
     260:	20004ca8 	andcs	r4, r0, r8, lsr #25
     264:	00032211 	andeq	r2, r3, r1, lsl r2
     268:	31030b00 	tstcc	r3, r0, lsl #22
     26c:	05000002 	streq	r0, [r0, #-2]
     270:	004dc003 	subeq	ip, sp, r3
     274:	005b0b20 	subseq	r0, fp, r0, lsr #22
     278:	02860000 	addeq	r0, r6, #0
     27c:	9a0e0000 	bls	380284 <startup-0x1fc7fd7c>
     280:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     284:	3c110003 	ldccc	0, cr0, [r1], {3}
     288:	0c000004 	stceq	0, cr0, [r0], {4}
     28c:	00027503 	andeq	r7, r2, r3, lsl #10
     290:	d8030500 	stmdale	r3, {r8, sl}
     294:	1120004e 			; <UNDEFINED> instruction: 0x1120004e
     298:	00000027 	andeq	r0, r0, r7, lsr #32
     29c:	0275030d 	rsbseq	r0, r5, #872415232	; 0x34000000
     2a0:	03050000 	movweq	r0, #20480	; 0x5000
     2a4:	200052d8 	ldrdcs	r5, [r0], -r8
     2a8:	00000011 	andeq	r0, r0, r1, lsl r0
     2ac:	75030e00 	strvc	r0, [r3, #-3584]	; 0xfffff200
     2b0:	05000002 	streq	r0, [r0, #-2]
     2b4:	0056d803 	subseq	sp, r6, r3, lsl #16
     2b8:	005b0b20 	subseq	r0, fp, r0, lsr #22
     2bc:	02c90000 	sbceq	r0, r9, #0
     2c0:	9a0f0000 	bls	3c02c8 <startup-0x1fc3fd38>
     2c4:	d1000001 	tstle	r0, r1
     2c8:	016d1100 	cmneq	sp, r0, lsl #2
     2cc:	030f0000 	movweq	r0, #61440	; 0xf000
     2d0:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     2d4:	5ad80305 	bpl	ff600ef0 <firstTime.4093+0xdf5fa728>
     2d8:	68112000 	ldmdavs	r1, {sp}
     2dc:	10000003 	andne	r0, r0, r3
     2e0:	0002b903 	andeq	fp, r2, r3, lsl #18
     2e4:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
     2e8:	1120005b 	qsubne	r0, fp, r0
     2ec:	000001c3 	andeq	r0, r0, r3, asr #3
     2f0:	02b90311 	adcseq	r0, r9, #1140850688	; 0x44000000
     2f4:	03050000 	movweq	r0, #20480	; 0x5000
     2f8:	20005c80 	andcs	r5, r0, r0, lsl #25
     2fc:	00057b07 	andeq	r7, r5, r7, lsl #22
     300:	04121400 	ldreq	r1, [r2], #-1024	; 0xfffffc00
     304:	00000345 	andeq	r0, r0, r5, asr #6
     308:	0011ab03 	andseq	sl, r1, r3, lsl #22
     30c:	45051200 	strmi	r1, [r5, #-512]	; 0xfffffe00
     310:	00000003 	andeq	r0, r0, r3
     314:	00022303 	andeq	r2, r2, r3, lsl #6
     318:	45061200 	strmi	r1, [r6, #-512]	; 0xfffffe00
     31c:	04000003 	streq	r0, [r0], #-3
     320:	00034c03 	andeq	r4, r3, r3, lsl #24
     324:	2e081200 	cdpcs	2, 0, cr1, cr8, cr0, {0}
     328:	08000001 	stmdaeq	r0, {r0}
     32c:	00033c03 	andeq	r3, r3, r3, lsl #24
     330:	2e091200 	cdpcs	2, 0, cr1, cr9, cr0, {0}
     334:	0c000001 	stceq	0, cr0, [r0], {1}
     338:	00022803 	andeq	r2, r2, r3, lsl #16
     33c:	680c1200 	stmdavs	ip, {r9, ip}
     340:	10000003 	andne	r0, r0, r3
     344:	4b040500 	blmi	10174c <startup-0x1fefe8b4>
     348:	04000003 	streq	r0, [r0], #-3
     34c:	040d0801 	streq	r0, [sp], #-2049	; 0xfffff7ff
     350:	62090000 	andvs	r0, r9, #0
     354:	0a000003 	beq	368 <startup-0x1ffffc98>
     358:	00000362 	andeq	r0, r0, r2, ror #6
     35c:	00012e0a 	andeq	r2, r1, sl, lsl #28
     360:	04050000 	streq	r0, [r5], #-0
     364:	000002fc 	strdeq	r0, [r0], -ip
     368:	03520405 	cmpeq	r2, #83886080	; 0x5000000
     36c:	7c060000 	stcvc	0, cr0, [r6], {-0}
     370:	12000005 	andne	r0, r0, #5
     374:	0002fc0d 	andeq	pc, r2, sp, lsl #24
     378:	04d21100 	ldrbeq	r1, [r2], #256	; 0x100
     37c:	03130000 	tsteq	r3, #0
     380:	00000275 	andeq	r0, r0, r5, ror r2
     384:	5d540305 	ldclpl	3, cr0, [r4, #-20]	; 0xffffffec
     388:	02042000 	andeq	r2, r4, #0
     38c:	0002e707 	andeq	lr, r2, r7, lsl #14
     390:	01081000 	mrseq	r1, (UNDEF: 8)
     394:	37010000 	strcc	r0, [r1, -r0]
     398:	0000009e 	muleq	r0, lr, r0
     39c:	28d80305 	ldmcs	r8, {r0, r2, r8, r9}^
     3a0:	60102000 	andsvs	r2, r0, r0
     3a4:	01000001 	tsteq	r0, r1
     3a8:	00009e38 	andeq	r9, r0, r8, lsr lr
     3ac:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
     3b0:	10200029 	eorne	r0, r0, r9, lsr #32
     3b4:	0000049e 	muleq	r0, lr, r4
     3b8:	009e3901 	addseq	r3, lr, r1, lsl #18
     3bc:	03050000 	movweq	r0, #20480	; 0x5000
     3c0:	20002994 	mulcs	r0, r4, r9
     3c4:	00676212 	rsbeq	r6, r7, r2, lsl r2
     3c8:	009e3a01 	addseq	r3, lr, r1, lsl #20
     3cc:	03050000 	movweq	r0, #20480	; 0x5000
     3d0:	20002920 	andcs	r2, r0, r0, lsr #18
     3d4:	0005cc10 	andeq	ip, r5, r0, lsl ip
     3d8:	9e3d0100 	rsflse	f0, f5, f0
     3dc:	05000000 	streq	r0, [r0, #-0]
     3e0:	00290003 	eoreq	r0, r9, r3
     3e4:	04931020 	ldreq	r1, [r3], #32
     3e8:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
     3ec:	0000009e 	muleq	r0, lr, r0
     3f0:	298c0305 	stmibcs	ip, {r0, r2, r8, r9}
     3f4:	4a102000 	bmi	4083fc <startup-0x1fbf7c04>
     3f8:	01000000 	mrseq	r0, (UNDEF: 0)
     3fc:	00009e3f 	andeq	r9, r0, pc, lsr lr
     400:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
     404:	10200029 	eorne	r0, r0, r9, lsr #32
     408:	00000317 	andeq	r0, r0, r7, lsl r3
     40c:	009e4001 	addseq	r4, lr, r1
     410:	03050000 	movweq	r0, #20480	; 0x5000
     414:	200029a4 	andcs	r2, r0, r4, lsr #19
     418:	0004aa10 	andeq	sl, r4, r0, lsl sl
     41c:	9e410100 	dvflss	f0, f1, f0
     420:	05000000 	streq	r0, [r0, #-0]
     424:	00297403 	eoreq	r7, r9, r3, lsl #8
     428:	03c11020 	biceq	r1, r1, #32
     42c:	42010000 	andmi	r0, r1, #0
     430:	0000009e 	muleq	r0, lr, r0
     434:	29880305 	stmibcs	r8, {r0, r2, r8, r9}
     438:	27102000 	ldrcs	r2, [r0, -r0]
     43c:	01000005 	tsteq	r0, r5
     440:	00009e43 	andeq	r9, r0, r3, asr #28
     444:	90030500 	andls	r0, r3, r0, lsl #10
     448:	10200029 	eorne	r0, r0, r9, lsr #32
     44c:	00000194 	muleq	r0, r4, r1
     450:	009e4401 	addseq	r4, lr, r1, lsl #8
     454:	03050000 	movweq	r0, #20480	; 0x5000
     458:	20002958 	andcs	r2, r0, r8, asr r9
     45c:	0005f210 	andeq	pc, r5, r0, lsl r2	; <UNPREDICTABLE>
     460:	9e450100 	dvflss	f0, f5, f0
     464:	05000000 	streq	r0, [r0, #-0]
     468:	00291003 	eoreq	r1, r9, r3
     46c:	030b1020 	movweq	r1, #45088	; 0xb020
     470:	47010000 	strmi	r0, [r1, -r0]
     474:	00000062 	andeq	r0, r0, r2, rrx
     478:	29040305 	stmdbcs	r4, {r0, r2, r8, r9}
     47c:	d4102000 	ldrle	r2, [r0], #-0
     480:	01000001 	tsteq	r0, r1
     484:	00006248 	andeq	r6, r0, r8, asr #4
     488:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
     48c:	10200029 	eorne	r0, r0, r9, lsr #32
     490:	0000017e 	andeq	r0, r0, lr, ror r1
     494:	00624901 	rsbeq	r4, r2, r1, lsl #18
     498:	03050000 	movweq	r0, #20480	; 0x5000
     49c:	20002924 	andcs	r2, r0, r4, lsr #18
     4a0:	0001b610 	andeq	fp, r1, r0, lsl r6
     4a4:	624b0100 	subvs	r0, fp, #0, 2
     4a8:	05000000 	streq	r0, [r0, #-0]
     4ac:	00299803 	eoreq	r9, r9, r3, lsl #16
     4b0:	00601020 	rsbeq	r1, r0, r0, lsr #32
     4b4:	4d010000 	stcmi	0, cr0, [r1, #-0]
     4b8:	00000062 	andeq	r0, r0, r2, rrx
     4bc:	28dc0305 	ldmcs	ip, {r0, r2, r8, r9}^
     4c0:	e6102000 	ldr	r2, [r0], -r0
     4c4:	01000003 	tsteq	r0, r3
     4c8:	0000624e 	andeq	r6, r0, lr, asr #4
     4cc:	78030500 	stmdavc	r3, {r8, sl}
     4d0:	10200029 	eorne	r0, r0, r9, lsr #32
     4d4:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
     4d8:	00624f01 	rsbeq	r4, r2, r1, lsl #30
     4dc:	03050000 	movweq	r0, #20480	; 0x5000
     4e0:	2000294c 	andcs	r2, r0, ip, asr #18
     4e4:	0003f510 	andeq	pc, r3, r0, lsl r5	; <UNPREDICTABLE>
     4e8:	62500100 	subsvs	r0, r0, #0, 2
     4ec:	05000000 	streq	r0, [r0, #-0]
     4f0:	00291403 	eoreq	r1, r9, r3, lsl #8
     4f4:	056d1020 	strbeq	r1, [sp, #-32]!	; 0xffffffe0
     4f8:	51010000 	mrspl	r0, (UNDEF: 1)
     4fc:	00000062 	andeq	r0, r0, r2, rrx
     500:	28f40305 	ldmcs	r4!, {r0, r2, r8, r9}^
     504:	4b102000 	blmi	40850c <startup-0x1fbf7af4>
     508:	01000005 	tsteq	r0, r5
     50c:	00006252 	andeq	r6, r0, r2, asr r2
     510:	30030500 	andcc	r0, r3, r0, lsl #10
     514:	10200029 	eorne	r0, r0, r9, lsr #32
     518:	000004c3 	andeq	r0, r0, r3, asr #9
     51c:	00625301 	rsbeq	r5, r2, r1, lsl #6
     520:	03050000 	movweq	r0, #20480	; 0x5000
     524:	20002968 	andcs	r2, r0, r8, ror #18
     528:	0003cc10 	andeq	ip, r3, r0, lsl ip
     52c:	62540100 	subsvs	r0, r4, #0, 2
     530:	05000000 	streq	r0, [r0, #-0]
     534:	0028e803 	eoreq	lr, r8, r3, lsl #16
     538:	05ac1020 	streq	r1, [ip, #32]!
     53c:	55010000 	strpl	r0, [r1, #-0]
     540:	00000062 	andeq	r0, r0, r2, rrx
     544:	29400305 	stmdbcs	r0, {r0, r2, r8, r9}^
     548:	4c102000 	ldcmi	0, cr2, [r0], {-0}
     54c:	01000003 	tsteq	r0, r3
     550:	00012e8b 	andeq	r2, r1, fp, lsl #29
     554:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
     558:	10200028 	eorne	r0, r0, r8, lsr #32
     55c:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
     560:	012e8c01 			; <UNDEFINED> instruction: 0x012e8c01
     564:	03050000 	movweq	r0, #20480	; 0x5000
     568:	20006154 	andcs	r6, r0, r4, asr r1
     56c:	0005ed13 	andeq	lr, r5, r3, lsl sp
     570:	fc8d0100 	stc2	1, cr0, [sp], {0}
     574:	0c200001 	stceq	0, cr0, [r0], #-4
     578:	01000009 	tsteq	r0, r9
     57c:	0007829c 	muleq	r7, ip, r2
     580:	03541100 	cmpeq	r4, #0, 2
     584:	9b010000 	blls	4058c <startup-0x1ffbfa74>
     588:	0000014c 	andeq	r0, r0, ip, asr #2
     58c:	114c9102 	cmpne	ip, r2, lsl #2
     590:	00000532 	andeq	r0, r0, r2, lsr r5
     594:	00a49c01 	adceq	r9, r4, r1, lsl #24
     598:	91020000 	mrsls	r0, (UNDEF: 2)
     59c:	05fd1140 	ldrbeq	r1, [sp, #320]!	; 0x140
     5a0:	9d010000 	stcls	0, cr0, [r1, #-0]
     5a4:	00000782 	andeq	r0, r0, r2, lsl #15
     5a8:	7fb49103 	svcvc	0x00b49103
     5ac:	00044e11 	andeq	r4, r4, r1, lsl lr
     5b0:	4ca50100 	stfmis	f0, [r5]
     5b4:	03000001 	movweq	r0, #1
     5b8:	117f9091 			; <UNDEFINED> instruction: 0x117f9091
     5bc:	00000147 	andeq	r0, r0, r7, asr #2
     5c0:	00a4a601 	adceq	sl, r4, r1, lsl #12
     5c4:	91030000 	mrsls	r0, (UNDEF: 3)
     5c8:	03117f84 	tsteq	r1, #132, 30	; 0x210
     5cc:	01000005 	tsteq	r0, r5
     5d0:	000782a7 	andeq	r8, r7, r7, lsr #5
     5d4:	f8910300 			; <UNDEFINED> instruction: 0xf8910300
     5d8:	0256117e 	subseq	r1, r6, #-2147483617	; 0x8000001f
     5dc:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     5e0:	0000014c 	andeq	r0, r0, ip, asr #2
     5e4:	7ed49103 	atnvcs	f1, f3
     5e8:	00039611 	andeq	r9, r3, r1, lsl r6
     5ec:	a4af0100 	strtge	r0, [pc], #256	; 5f4 <startup-0x1ffffa0c>
     5f0:	03000000 	movweq	r0, #0
     5f4:	117ec891 			; <UNDEFINED> instruction: 0x117ec891
     5f8:	00000561 	andeq	r0, r0, r1, ror #10
     5fc:	0782b001 	streq	fp, [r2, r1]
     600:	91030000 	mrsls	r0, (UNDEF: 3)
     604:	10117ebc 			; <UNDEFINED> instruction: 0x10117ebc
     608:	01000001 	tsteq	r0, r1
     60c:	00014cbd 			; <UNDEFINED> instruction: 0x00014cbd
     610:	98910300 	ldmls	r1, {r8, r9}
     614:	04f7117e 	ldrbteq	r1, [r7], #382	; 0x17e
     618:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
     61c:	000000a4 	andeq	r0, r0, r4, lsr #1
     620:	7e8c9103 	sinvce	f1, f3
     624:	00013a11 	andeq	r3, r1, r1, lsl sl
     628:	82bf0100 	adcshi	r0, pc, #0, 2
     62c:	03000007 	movweq	r0, #7
     630:	117e8091 			; <UNDEFINED> instruction: 0x117e8091
     634:	00000bcb 	andeq	r0, r0, fp, asr #23
     638:	014cc601 	cmpeq	ip, r1, lsl #12
     63c:	91030000 	mrsls	r0, (UNDEF: 3)
     640:	15117ddc 	ldrne	r7, [r1, #-3548]	; 0xfffff224
     644:	01000005 	tsteq	r0, r5
     648:	00014ccc 	andeq	r4, r1, ip, asr #25
     64c:	b8910300 	ldmlt	r1, {r8, r9}
     650:	051b117d 	ldreq	r1, [fp, #-381]	; 0xfffffe83
     654:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
     658:	0000014c 	andeq	r0, r0, ip, asr #2
     65c:	7d949103 	ldfvcd	f1, [r4, #12]
     660:	00052111 	andeq	r2, r5, r1, lsl r1
     664:	4cd00100 	ldfmie	f0, [r0], {0}
     668:	03000001 	movweq	r0, #1
     66c:	117cf091 			; <UNDEFINED> instruction: 0x117cf091
     670:	0000050f 	andeq	r0, r0, pc, lsl #10
     674:	014cd201 	cmpeq	ip, r1, lsl #4
     678:	91030000 	mrsls	r0, (UNDEF: 3)
     67c:	38117ccc 	ldmdacc	r1, {r2, r3, r6, r7, sl, fp, ip, sp, lr}
     680:	01000000 	mrseq	r0, (UNDEF: 0)
     684:	00036ee9 	andeq	r6, r3, r9, ror #29
     688:	b8910300 	ldmlt	r1, {r8, r9}
     68c:	015a117c 	cmpeq	sl, ip, ror r1
     690:	ea010000 	b	40698 <startup-0x1ffbf968>
     694:	0000036e 	andeq	r0, r0, lr, ror #6
     698:	7ca49103 	stfvcd	f1, [r4], #12
     69c:	00018e11 	andeq	r8, r1, r1, lsl lr
     6a0:	6eeb0100 	cdpvs	1, 14, cr0, cr11, cr0, {0}
     6a4:	03000003 	movweq	r0, #3
     6a8:	117c9091 			; <UNDEFINED> instruction: 0x117c9091
     6ac:	000001a4 	andeq	r0, r0, r4, lsr #3
     6b0:	036eec01 	cmneq	lr, #256	; 0x100
     6b4:	91030000 	mrsls	r0, (UNDEF: 3)
     6b8:	9e117bfc 	vmovls.s16	r7, d17[1]
     6bc:	01000001 	tsteq	r0, r1
     6c0:	00036eed 	andeq	r6, r3, sp, ror #29
     6c4:	e8910300 	ldm	r1, {r8, r9}
     6c8:	01aa117b 			; <UNDEFINED> instruction: 0x01aa117b
     6cc:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
     6d0:	0000036e 	andeq	r0, r0, lr, ror #6
     6d4:	7bd49103 	blvc	ff524ae8 <firstTime.4093+0xdf51e320>
     6d8:	0001b011 	andeq	fp, r1, r1, lsl r0
     6dc:	6eef0100 	cdpvs	1, 14, cr0, cr15, cr0, {0}
     6e0:	03000003 	movweq	r0, #3
     6e4:	117bc091 			; <UNDEFINED> instruction: 0x117bc091
     6e8:	000001e5 	andeq	r0, r0, r5, ror #3
     6ec:	036ef001 	msreq	SPSR_fsx, #1
     6f0:	91030000 	mrsls	r0, (UNDEF: 3)
     6f4:	bd117bac 	vldrlt	d7, [r1, #-688]	; 0xfffffd50
     6f8:	01000001 	tsteq	r0, r1
     6fc:	00036ef1 	strdeq	r6, [r3], -r1
     700:	98910300 	ldmls	r1, {r8, r9}
     704:	01fd117b 	mvnseq	r1, fp, ror r1
     708:	f2010000 	vhadd.s8	d0, d1, d0
     70c:	0000036e 	andeq	r0, r0, lr, ror #6
     710:	7b849103 	blvc	fe124b24 <firstTime.4093+0xde11e35c>
     714:	0005d811 	andeq	sp, r5, r1, lsl r8
     718:	6ef30100 	cdpvs	1, 15, cr0, cr3, cr0, {0}
     71c:	03000003 	movweq	r0, #3
     720:	117af091 			; <UNDEFINED> instruction: 0x117af091
     724:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     728:	036ef401 	msreq	SPSR_fsx, #16777216	; 0x1000000
     72c:	91030000 	mrsls	r0, (UNDEF: 3)
     730:	44117adc 	ldrmi	r7, [r1], #-2780	; 0xfffff524
     734:	01000005 	tsteq	r0, r5
     738:	00036ef5 	strdeq	r6, [r3], -r5
     73c:	c8910300 	ldmgt	r1, {r8, r9}
     740:	0658147a 			; <UNDEFINED> instruction: 0x0658147a
     744:	04902000 	ldreq	r2, [r0], #0
     748:	4c150000 	ldcmi	0, cr0, [r5], {-0}
     74c:	01000002 	tsteq	r0, r2
     750:	012e012c 			; <UNDEFINED> instruction: 0x012e012c
     754:	03050000 	movweq	r0, #20480	; 0x5000
     758:	2000615c 	andcs	r6, r0, ip, asr r1
     75c:	0003a815 	andeq	sl, r3, r5, lsl r8
     760:	012d0100 			; <UNDEFINED> instruction: 0x012d0100
     764:	0000012e 	andeq	r0, r0, lr, lsr #2
     768:	61600305 	cmnvs	r0, r5, lsl #6
     76c:	fa152000 	blx	548774 <startup-0x1fab788c>
     770:	01000002 	tsteq	r0, r2
     774:	012e012e 			; <UNDEFINED> instruction: 0x012e012e
     778:	03050000 	movweq	r0, #20480	; 0x5000
     77c:	20006158 	andcs	r6, r0, r8, asr r1
     780:	a40b0000 	strge	r0, [fp], #-0
     784:	92000000 	andls	r0, r0, #0
     788:	0f000007 	svceq	0x00000007
     78c:	0000019a 	muleq	r0, sl, r1
     790:	da130000 	ble	4c0798 <startup-0x1fb3f868>
     794:	01000003 	tsteq	r0, r3
     798:	00003457 	andeq	r3, r0, r7, asr r4
     79c:	0001c820 	andeq	ip, r1, r0, lsr #16
     7a0:	349c0100 	ldrcc	r0, [ip], #256	; 0x100
     7a4:	11000008 	tstne	r0, r8
     7a8:	0000011a 	andeq	r0, r0, sl, lsl r1
     7ac:	009e5801 	addseq	r5, lr, r1, lsl #16
     7b0:	91020000 	mrsls	r0, (UNDEF: 2)
     7b4:	02031174 	andeq	r1, r3, #116, 2
     7b8:	5c010000 	stcpl	0, cr0, [r1], {-0}
     7bc:	0000009e 	muleq	r0, lr, r0
     7c0:	11709102 	cmnne	r0, r2, lsl #2
     7c4:	00000213 	andeq	r0, r0, r3, lsl r2
     7c8:	009e6001 	addseq	r6, lr, r1
     7cc:	91020000 	mrsls	r0, (UNDEF: 2)
     7d0:	027c116c 	rsbseq	r1, ip, #108, 2
     7d4:	64010000 	strvs	r0, [r1], #-0
     7d8:	0000009e 	muleq	r0, lr, r0
     7dc:	11689102 	cmnne	r8, r2, lsl #2
     7e0:	00000285 	andeq	r0, r0, r5, lsl #5
     7e4:	009e6801 	addseq	r6, lr, r1, lsl #16
     7e8:	91020000 	mrsls	r0, (UNDEF: 2)
     7ec:	028e1164 	addeq	r1, lr, #100, 2
     7f0:	6c010000 	stcvs	0, cr0, [r1], {-0}
     7f4:	0000009e 	muleq	r0, lr, r0
     7f8:	11609102 	cmnne	r0, r2, lsl #2
     7fc:	00000297 	muleq	r0, r7, r2
     800:	009e7001 	addseq	r7, lr, r1
     804:	91020000 	mrsls	r0, (UNDEF: 2)
     808:	02a0115c 	adceq	r1, r0, #92, 2
     80c:	74010000 	strvc	r0, [r1], #-0
     810:	0000009e 	muleq	r0, lr, r0
     814:	11589102 	cmpne	r8, r2, lsl #2
     818:	000002a9 	andeq	r0, r0, r9, lsr #5
     81c:	009e7701 	addseq	r7, lr, r1, lsl #14
     820:	91020000 	mrsls	r0, (UNDEF: 2)
     824:	00561154 	subseq	r1, r6, r4, asr r1
     828:	7a010000 	bvc	40830 <startup-0x1ffbf7d0>
     82c:	0000009e 	muleq	r0, lr, r0
     830:	00509102 	subseq	r9, r0, r2, lsl #2
     834:	00024316 	andeq	r4, r2, r6, lsl r3
     838:	10230100 	eorne	r0, r3, r0, lsl #2
     83c:	24200000 	strtcs	r0, [r0], #-0
     840:	01000000 	mrseq	r0, (UNDEF: 0)
     844:	0152179c 			; <UNDEFINED> instruction: 0x0152179c
     848:	2d010000 	stccs	0, cr0, [r1, #-0]
     84c:	20000000 	andcs	r0, r0, r0
     850:	0000000c 	andeq	r0, r0, ip
     854:	e0009c01 	and	r9, r0, r1, lsl #24
     858:	04000001 	streq	r0, [r0], #-1
     85c:	00013d00 	andeq	r3, r1, r0, lsl #26
     860:	70010400 	andvc	r0, r1, r0, lsl #8
     864:	0c000000 	stceq	0, cr0, [r0], {-0}
     868:	0000061c 	andeq	r0, r0, ip, lsl r6
     86c:	20000b08 	andcs	r0, r0, r8, lsl #22
     870:	00000056 	andeq	r0, r0, r6, asr r0
     874:	0000026d 	andeq	r0, r0, sp, ror #4
     878:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
     87c:	0000004e 	andeq	r0, r0, lr, asr #32
     880:	0002c903 	andeq	ip, r2, r3, lsl #18
     884:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
     888:	00000000 	andeq	r0, r0, r0
     88c:	0005e603 	andeq	lr, r5, r3, lsl #12
     890:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
     894:	04000000 	streq	r0, [r0], #-0
     898:	000de603 	andeq	lr, sp, r3, lsl #12
     89c:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
     8a0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     8a4:	07040400 	streq	r0, [r4, -r0, lsl #8]
     8a8:	000002ed 	andeq	r0, r0, sp, ror #5
     8ac:	005b0405 	subseq	r0, fp, r5, lsl #8
     8b0:	01040000 	mrseq	r0, (UNDEF: 4)
     8b4:	00040408 	andeq	r0, r4, r8, lsl #8
     8b8:	0f380600 	svceq	0x00380600
     8bc:	0a020000 	beq	808c4 <startup-0x1ff7f73c>
     8c0:	00000021 	andeq	r0, r0, r1, lsr #32
     8c4:	00001607 	andeq	r1, r0, r7, lsl #12
     8c8:	06030c00 	streq	r0, [r3], -r0, lsl #24
     8cc:	0000009e 	muleq	r0, lr, r0
     8d0:	0004da03 	andeq	sp, r4, r3, lsl #20
     8d4:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
     8d8:	00000000 	andeq	r0, r0, r0
     8dc:	00001d03 	andeq	r1, r0, r3, lsl #26
     8e0:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
     8e4:	04000000 	streq	r0, [r0], #-0
     8e8:	00001203 	andeq	r1, r0, r3, lsl #4
     8ec:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
     8f0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     8f4:	62040500 	andvs	r0, r4, #0, 10
     8f8:	06000000 	streq	r0, [r0], -r0
     8fc:	00000c15 	andeq	r0, r0, r5, lsl ip
     900:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
     904:	bb070000 	bllt	1c090c <startup-0x1fe3f6f4>
     908:	24000005 	strcs	r0, [r0], #-5
     90c:	01280604 			; <UNDEFINED> instruction: 0x01280604
     910:	a1030000 	mrsge	r0, (UNDEF: 3)
     914:	04000003 	streq	r0, [r0], #-3
     918:	00012807 	andeq	r2, r1, r7, lsl #16
     91c:	c7030000 	strgt	r0, [r3, -r0]
     920:	04000005 	streq	r0, [r0], #-5
     924:	00012e08 	andeq	r2, r1, r8, lsl #28
     928:	3f030400 	svccc	0x00030400
     92c:	04000005 	streq	r0, [r0], #-5
     930:	00012e09 	andeq	r2, r1, r9, lsl #28
     934:	5a030800 	bpl	c293c <startup-0x1ff3d6c4>
     938:	04000005 	streq	r0, [r0], #-5
     93c:	0001460c 	andeq	r4, r1, ip, lsl #12
     940:	c2030c00 	andgt	r0, r3, #0, 24
     944:	04000002 	streq	r0, [r0], #-2
     948:	0001460d 	andeq	r4, r1, sp, lsl #12
     94c:	b3031000 	movwlt	r1, #12288	; 0x3000
     950:	04000003 	streq	r0, [r0], #-3
     954:	00012e10 	andeq	r2, r1, r0, lsl lr
     958:	41031400 	tstmi	r3, r0, lsl #8
     95c:	04000000 	streq	r0, [r0], #-0
     960:	00012e11 	andeq	r2, r1, r1, lsl lr
     964:	32031800 	andcc	r1, r3, #0, 16
     968:	04000003 	streq	r0, [r0], #-3
     96c:	00012e12 	andeq	r2, r1, r2, lsl lr
     970:	42031c00 	andmi	r1, r3, #0, 24
     974:	04000003 	streq	r0, [r0], #-3
     978:	00012e13 	andeq	r2, r1, r3, lsl lr
     97c:	05002000 	streq	r2, [r0, #-0]
     980:	0000a404 	andeq	sl, r0, r4, lsl #8
     984:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
     988:	00746e69 	rsbseq	r6, r4, r9, ror #28
     98c:	00014009 	andeq	r4, r1, r9
     990:	01400a00 	cmpeq	r0, r0, lsl #20
     994:	05000000 	streq	r0, [r0, #-0]
     998:	0000af04 	andeq	sl, r0, r4, lsl #30
     99c:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
     9a0:	06000001 	streq	r0, [r0], -r1
     9a4:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
     9a8:	00af1504 	adceq	r1, pc, r4, lsl #10
     9ac:	620b0000 	andvs	r0, fp, #0
     9b0:	62000001 	andvs	r0, r0, #1
     9b4:	0c000001 	stceq	0, cr0, [r0], {1}
     9b8:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
     9bc:	0d000001 	stceq	0, cr0, [r0, #-4]
     9c0:	00000487 	andeq	r0, r0, r7, lsl #9
     9c4:	01571c04 	cmpeq	r7, r4, lsl #24
     9c8:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
     9cc:	04000003 	streq	r0, [r0], #-3
     9d0:	00012e1d 	andeq	r2, r1, sp, lsl lr
     9d4:	07040400 	streq	r0, [r4, -r0, lsl #8]
     9d8:	0000035f 	andeq	r0, r0, pc, asr r3
     9dc:	0001680e 	andeq	r6, r1, lr, lsl #16
     9e0:	05030100 	streq	r0, [r3, #-256]	; 0xffffff00
     9e4:	0029a803 	eoreq	sl, r9, r3, lsl #16
     9e8:	01730e20 	cmneq	r3, r0, lsr #28
     9ec:	04010000 	streq	r0, [r1], #-0
     9f0:	28c80305 	stmiacs	r8, {r0, r2, r8, r9}^
     9f4:	0b0f2000 	bleq	3c89fc <startup-0x1fc37604>
     9f8:	01000006 	tsteq	r0, r6
     9fc:	000b180c 	andeq	r1, fp, ip, lsl #16
     a00:	00004620 	andeq	r4, r0, r0, lsr #12
     a04:	c39c0100 	orrsgt	r0, ip, #0, 2
     a08:	10000001 	andne	r0, r0, r1
     a0c:	0000064f 	andeq	r0, r0, pc, asr #12
     a10:	01620c01 	cmneq	r2, r1, lsl #24
     a14:	91020000 	mrsls	r0, (UNDEF: 2)
     a18:	c2110074 	andsgt	r0, r1, #116	; 0x74
     a1c:	01000002 	tsteq	r0, r2
     a20:	000b0807 	andeq	r0, fp, r7, lsl #16
     a24:	00001020 	andeq	r1, r0, r0, lsr #32
     a28:	109c0100 	addsne	r0, ip, r0, lsl #2
     a2c:	0000064f 	andeq	r0, r0, pc, asr #12
     a30:	01620701 	cmneq	r2, r1, lsl #14
     a34:	91020000 	mrsls	r0, (UNDEF: 2)
     a38:	2b000074 	blcs	c10 <startup-0x1ffff3f0>
     a3c:	04000005 	streq	r0, [r0], #-5
     a40:	00022300 	andeq	r2, r2, r0, lsl #6
     a44:	70010400 	andvc	r0, r1, r0, lsl #8
     a48:	0c000000 	stceq	0, cr0, [r0], {-0}
     a4c:	0000088f 	andeq	r0, r0, pc, lsl #17
     a50:	20000b60 	andcs	r0, r0, r0, ror #22
     a54:	000002a8 	andeq	r0, r0, r8, lsr #5
     a58:	000002fb 	strdeq	r0, [r0], -fp
     a5c:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
     a60:	0000004e 	andeq	r0, r0, lr, asr #32
     a64:	0002c903 	andeq	ip, r2, r3, lsl #18
     a68:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
     a6c:	00000000 	andeq	r0, r0, r0
     a70:	0005e603 	andeq	lr, r5, r3, lsl #12
     a74:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
     a78:	04000000 	streq	r0, [r0], #-0
     a7c:	000de603 	andeq	lr, sp, r3, lsl #12
     a80:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
     a84:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     a88:	07040400 	streq	r0, [r4, -r0, lsl #8]
     a8c:	000002ed 	andeq	r0, r0, sp, ror #5
     a90:	005b0405 	subseq	r0, fp, r5, lsl #8
     a94:	01040000 	mrseq	r0, (UNDEF: 4)
     a98:	00040408 	andeq	r0, r4, r8, lsl #8
     a9c:	0f380600 	svceq	0x00380600
     aa0:	0a020000 	beq	80aa8 <startup-0x1ff7f558>
     aa4:	00000021 	andeq	r0, r0, r1, lsr #32
     aa8:	00001607 	andeq	r1, r0, r7, lsl #12
     aac:	06030c00 	streq	r0, [r3], -r0, lsl #24
     ab0:	0000009e 	muleq	r0, lr, r0
     ab4:	0004da03 	andeq	sp, r4, r3, lsl #20
     ab8:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
     abc:	00000000 	andeq	r0, r0, r0
     ac0:	00001d03 	andeq	r1, r0, r3, lsl #26
     ac4:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
     ac8:	04000000 	streq	r0, [r0], #-0
     acc:	00001203 	andeq	r1, r0, r3, lsl #4
     ad0:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
     ad4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     ad8:	62040500 	andvs	r0, r4, #0, 10
     adc:	06000000 	streq	r0, [r0], -r0
     ae0:	00000c15 	andeq	r0, r0, r5, lsl ip
     ae4:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
     ae8:	bb070000 	bllt	1c0af0 <startup-0x1fe3f510>
     aec:	24000005 	strcs	r0, [r0], #-5
     af0:	01280604 			; <UNDEFINED> instruction: 0x01280604
     af4:	a1030000 	mrsge	r0, (UNDEF: 3)
     af8:	04000003 	streq	r0, [r0], #-3
     afc:	00012807 	andeq	r2, r1, r7, lsl #16
     b00:	c7030000 	strgt	r0, [r3, -r0]
     b04:	04000005 	streq	r0, [r0], #-5
     b08:	00012e08 	andeq	r2, r1, r8, lsl #28
     b0c:	3f030400 	svccc	0x00030400
     b10:	04000005 	streq	r0, [r0], #-5
     b14:	00012e09 	andeq	r2, r1, r9, lsl #28
     b18:	5a030800 	bpl	c2b20 <startup-0x1ff3d4e0>
     b1c:	04000005 	streq	r0, [r0], #-5
     b20:	0001460c 	andeq	r4, r1, ip, lsl #12
     b24:	c2030c00 	andgt	r0, r3, #0, 24
     b28:	04000002 	streq	r0, [r0], #-2
     b2c:	0001460d 	andeq	r4, r1, sp, lsl #12
     b30:	b3031000 	movwlt	r1, #12288	; 0x3000
     b34:	04000003 	streq	r0, [r0], #-3
     b38:	00012e10 	andeq	r2, r1, r0, lsl lr
     b3c:	41031400 	tstmi	r3, r0, lsl #8
     b40:	04000000 	streq	r0, [r0], #-0
     b44:	00012e11 	andeq	r2, r1, r1, lsl lr
     b48:	32031800 	andcc	r1, r3, #0, 16
     b4c:	04000003 	streq	r0, [r0], #-3
     b50:	00012e12 	andeq	r2, r1, r2, lsl lr
     b54:	42031c00 	andmi	r1, r3, #0, 24
     b58:	04000003 	streq	r0, [r0], #-3
     b5c:	00012e13 	andeq	r2, r1, r3, lsl lr
     b60:	05002000 	streq	r2, [r0, #-0]
     b64:	0000a404 	andeq	sl, r0, r4, lsl #8
     b68:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
     b6c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     b70:	00014009 	andeq	r4, r1, r9
     b74:	01400a00 	cmpeq	r0, r0, lsl #20
     b78:	05000000 	streq	r0, [r0, #-0]
     b7c:	0000af04 	andeq	sl, r0, r4, lsl #30
     b80:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
     b84:	06000001 	streq	r0, [r0], -r1
     b88:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
     b8c:	00af1504 	adceq	r1, pc, r4, lsl #10
     b90:	620b0000 	andvs	r0, fp, #0
     b94:	62000001 	andvs	r0, r0, #1
     b98:	0c000001 	stceq	0, cr0, [r0], {1}
     b9c:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
     ba0:	0d000001 	stceq	0, cr0, [r0, #-4]
     ba4:	00000487 	andeq	r0, r0, r7, lsl #9
     ba8:	01571c04 	cmpeq	r7, r4, lsl #24
     bac:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
     bb0:	04000003 	streq	r0, [r0], #-3
     bb4:	00012e1d 	andeq	r2, r1, sp, lsl lr
     bb8:	005b0b00 	subseq	r0, fp, r0, lsl #22
     bbc:	018e0000 	orreq	r0, lr, r0
     bc0:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
     bc4:	0b000001 	bleq	bd0 <startup-0x1ffff430>
     bc8:	07040400 	streq	r0, [r4, -r0, lsl #8]
     bcc:	0000035f 	andeq	r0, r0, pc, asr r3
     bd0:	0008540f 	andeq	r5, r8, pc, lsl #8
     bd4:	7e030500 	cfsh32vc	mvfx0, mvfx3, #0
     bd8:	05000001 	streq	r0, [r0, #-1]
     bdc:	00616403 	rsbeq	r6, r1, r3, lsl #8
     be0:	074e0f20 	strbeq	r0, [lr, -r0, lsr #30]
     be4:	03060000 	movweq	r0, #24576	; 0x6000
     be8:	0000017e 	andeq	r0, r0, lr, ror r1
     bec:	61700305 	cmnvs	r0, r5, lsl #6
     bf0:	690f2000 	stmdbvs	pc, {sp}	; <UNPREDICTABLE>
     bf4:	07000007 	streq	r0, [r0, -r7]
     bf8:	00017e03 	andeq	r7, r1, r3, lsl #28
     bfc:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
     c00:	0f200061 	svceq	0x00200061
     c04:	000006ca 	andeq	r0, r0, sl, asr #13
     c08:	017e0308 	cmneq	lr, r8, lsl #6
     c0c:	03050000 	movweq	r0, #20480	; 0x5000
     c10:	20006188 	andcs	r6, r0, r8, lsl #3
     c14:	00077a0f 	andeq	r7, r7, pc, lsl #20
     c18:	7e030900 	vmlavc.f16	s0, s6, s0	; <UNPREDICTABLE>
     c1c:	05000001 	streq	r0, [r0, #-1]
     c20:	00619403 	rsbeq	r9, r1, r3, lsl #8
     c24:	08bc0f20 	ldmeq	ip!, {r5, r8, r9, sl, fp}
     c28:	030a0000 	movweq	r0, #40960	; 0xa000
     c2c:	0000017e 	andeq	r0, r0, lr, ror r1
     c30:	61a00305 	lslvs	r0, r5, #6
     c34:	380f2000 	stmdacc	pc, {sp}	; <UNPREDICTABLE>
     c38:	0b000008 	bleq	c60 <startup-0x1ffff3a0>
     c3c:	00017e03 	andeq	r7, r1, r3, lsl #28
     c40:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
     c44:	0f200061 	svceq	0x00200061
     c48:	0000079d 	muleq	r0, sp, r7
     c4c:	017e030c 	cmneq	lr, ip, lsl #6
     c50:	03050000 	movweq	r0, #20480	; 0x5000
     c54:	200061b8 			; <UNDEFINED> instruction: 0x200061b8
     c58:	0006da0f 	andeq	sp, r6, pc, lsl #20
     c5c:	7e030d00 	cdpvc	13, 0, cr0, cr3, cr0, {0}
     c60:	05000001 	streq	r0, [r0, #-1]
     c64:	0061c403 	rsbeq	ip, r1, r3, lsl #8
     c68:	07080f20 	streq	r0, [r8, -r0, lsr #30]
     c6c:	030e0000 	movweq	r0, #57344	; 0xe000
     c70:	0000017e 	andeq	r0, r0, lr, ror r1
     c74:	61d00305 	bicsvs	r0, r0, r5, lsl #6
     c78:	ea0f2000 	b	3c8c80 <startup-0x1fc37380>
     c7c:	0f000007 	svceq	0x00000007
     c80:	00017e03 	andeq	r7, r1, r3, lsl #28
     c84:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
     c88:	10200061 	eorne	r0, r0, r1, rrx
     c8c:	0000068e 	andeq	r0, r0, lr, lsl #13
     c90:	009e1101 	addseq	r1, lr, r1, lsl #2
     c94:	03050000 	movweq	r0, #20480	; 0x5000
     c98:	20002c68 	andcs	r2, r0, r8, ror #24
     c9c:	00065e10 	andeq	r5, r6, r0, lsl lr
     ca0:	9e120100 	muflss	f0, f2, f0
     ca4:	05000000 	streq	r0, [r0, #-0]
     ca8:	002c8003 	eoreq	r8, ip, r3
     cac:	06b41020 	ldrteq	r1, [r4], r0, lsr #32
     cb0:	13010000 	movwne	r0, #4096	; 0x1000
     cb4:	0000009e 	muleq	r0, lr, r0
     cb8:	2b380305 	blcs	e018d4 <startup-0x1f1fe72c>
     cbc:	93102000 	tstls	r0, #0
     cc0:	01000007 	tsteq	r0, r7
     cc4:	00009e14 	andeq	r9, r0, r4, lsl lr
     cc8:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
     ccc:	1020002c 	eorne	r0, r0, ip, lsr #32
     cd0:	0000075e 	andeq	r0, r0, lr, asr r7
     cd4:	009e1501 	addseq	r1, lr, r1, lsl #10
     cd8:	03050000 	movweq	r0, #20480	; 0x5000
     cdc:	20002c54 	andcs	r2, r0, r4, asr ip
     ce0:	00067610 	andeq	r7, r6, r0, lsl r6
     ce4:	9e160100 	muflss	f0, f6, f0
     ce8:	05000000 	streq	r0, [r0, #-0]
     cec:	002b4803 	eoreq	r4, fp, r3, lsl #16
     cf0:	06eb1020 	strbteq	r1, [fp], r0, lsr #32
     cf4:	17010000 	strne	r0, [r1, -r0]
     cf8:	0000009e 	muleq	r0, lr, r0
     cfc:	2c780305 	ldclcs	3, cr0, [r8], #-20	; 0xffffffec
     d00:	11102000 	tstne	r0, r0
     d04:	01000008 	tsteq	r0, r8
     d08:	00009e18 	andeq	r9, r0, r8, lsl lr
     d0c:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
     d10:	1020002c 	eorne	r0, r0, ip, lsr #32
     d14:	000006bf 			; <UNDEFINED> instruction: 0x000006bf
     d18:	009e1901 	addseq	r1, lr, r1, lsl #18
     d1c:	03050000 	movweq	r0, #20480	; 0x5000
     d20:	20002ba0 	andcs	r2, r0, r0, lsr #23
     d24:	00065410 	andeq	r5, r6, r0, lsl r4
     d28:	9e1a0100 	muflse	f0, f2, f0
     d2c:	05000000 	streq	r0, [r0, #-0]
     d30:	002c5003 	eoreq	r5, ip, r3
     d34:	072c1020 	streq	r1, [ip, -r0, lsr #32]!
     d38:	1b010000 	blne	40d40 <startup-0x1ffbf2c0>
     d3c:	0000009e 	muleq	r0, lr, r0
     d40:	2c580305 	mrrccs	3, 0, r0, r8, cr5
     d44:	a6102000 	ldrge	r2, [r0], -r0
     d48:	01000006 	tsteq	r0, r6
     d4c:	0000621d 	andeq	r6, r0, sp, lsl r2
     d50:	70030500 	andvc	r0, r3, r0, lsl #10
     d54:	1020002b 	eorne	r0, r0, fp, lsr #32
     d58:	0000081b 	andeq	r0, r0, fp, lsl r8
     d5c:	00621e01 	rsbeq	r1, r2, r1, lsl #28
     d60:	03050000 	movweq	r0, #20480	; 0x5000
     d64:	20002c5c 	andcs	r2, r0, ip, asr ip
     d68:	0007c710 	andeq	ip, r7, r0, lsl r7
     d6c:	621f0100 	andsvs	r0, pc, #0, 2
     d70:	05000000 	streq	r0, [r0, #-0]
     d74:	002c3803 	eoreq	r3, ip, r3, lsl #16
     d78:	06681020 	strbteq	r1, [r8], -r0, lsr #32
     d7c:	20010000 	andcs	r0, r1, r0
     d80:	00000062 	andeq	r0, r0, r2, rrx
     d84:	2b640305 	blcs	19019a0 <startup-0x1e6fe660>
     d88:	66102000 	ldrvs	r2, [r0], -r0
     d8c:	01000008 	tsteq	r0, r8
     d90:	00006221 	andeq	r6, r0, r1, lsr #4
     d94:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
     d98:	1020002c 	eorne	r0, r0, ip, lsr #32
     d9c:	00000698 	muleq	r0, r8, r6
     da0:	00622201 	rsbeq	r2, r2, r1, lsl #4
     da4:	03050000 	movweq	r0, #20480	; 0x5000
     da8:	20002c1c 	andcs	r2, r0, ip, lsl ip
     dac:	0007ad10 	andeq	sl, r7, r0, lsl sp
     db0:	62230100 	eorvs	r0, r3, #0, 2
     db4:	05000000 	streq	r0, [r0, #-0]
     db8:	002b3c03 	eoreq	r3, fp, r3, lsl #24
     dbc:	06801020 	streq	r1, [r0], r0, lsr #32
     dc0:	24010000 	strcs	r0, [r1], #-0
     dc4:	00000062 	andeq	r0, r0, r2, rrx
     dc8:	2b4c0305 	blcs	13019e4 <startup-0x1ecfe61c>
     dcc:	29102000 	ldmdbcs	r0, {sp}
     dd0:	01000008 	tsteq	r0, r8
     dd4:	00006225 	andeq	r6, r0, r5, lsr #4
     dd8:	88030500 	stmdahi	r3, {r8, sl}
     ddc:	1020002b 	eorne	r0, r0, fp, lsr #32
     de0:	00000740 	andeq	r0, r0, r0, asr #14
     de4:	00622601 	rsbeq	r2, r2, r1, lsl #12
     de8:	03050000 	movweq	r0, #20480	; 0x5000
     dec:	20002c10 	andcs	r2, r0, r0, lsl ip
     df0:	00088010 	andeq	r8, r8, r0, lsl r0
     df4:	62270100 	eorvs	r0, r7, #0, 2
     df8:	05000000 	streq	r0, [r0, #-0]
     dfc:	002c4403 	eoreq	r4, ip, r3, lsl #8
     e00:	078b1020 	streq	r1, [fp, r0, lsr #32]
     e04:	2a010000 	bcs	40e0c <startup-0x1ffbf1f4>
     e08:	0000014c 	andeq	r0, r0, ip, asr #2
     e0c:	2ba40305 	blcs	fe901a28 <firstTime.4093+0xde8fb260>
     e10:	06102000 	ldreq	r2, [r0], -r0
     e14:	01000008 	tsteq	r0, r8
     e18:	0000a42b 	andeq	sl, r0, fp, lsr #8
     e1c:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
     e20:	1020002b 	eorne	r0, r0, fp, lsr #32
     e24:	00000875 	andeq	r0, r0, r5, ror r8
     e28:	00a42c01 	adceq	r2, r4, r1, lsl #24
     e2c:	03050000 	movweq	r0, #20480	; 0x5000
     e30:	20002b58 	andcs	r2, r0, r8, asr fp
     e34:	00071810 	andeq	r1, r7, r0, lsl r8
     e38:	a42d0100 	strtge	r0, [sp], #-256	; 0xffffff00
     e3c:	05000000 	streq	r0, [r0, #-0]
     e40:	002b7c03 	eoreq	r7, fp, r3, lsl #24
     e44:	07bc1020 	ldreq	r1, [ip, r0, lsr #32]!
     e48:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     e4c:	000000a4 	andeq	r0, r0, r4, lsr #1
     e50:	2c280305 	stccs	3, cr0, [r8], #-20	; 0xffffffec
     e54:	49102000 	ldmdbmi	r0, {sp}
     e58:	01000008 	tsteq	r0, r8
     e5c:	0000a42f 	andeq	sl, r0, pc, lsr #8
     e60:	c8030500 	stmdagt	r3, {r8, sl}
     e64:	0b20002b 	bleq	800f18 <startup-0x1f7ff0e8>
     e68:	000000a4 	andeq	r0, r0, r4, lsr #1
     e6c:	0000043c 	andeq	r0, r0, ip, lsr r4
     e70:	00018e0e 	andeq	r8, r1, lr, lsl #28
     e74:	10000400 	andne	r0, r0, r0, lsl #8
     e78:	000007fb 	strdeq	r0, [r0], -fp
     e7c:	042c3001 	strteq	r3, [ip], #-1
     e80:	03050000 	movweq	r0, #20480	; 0x5000
     e84:	20002bd4 	ldrdcs	r2, [r0], -r4
     e88:	0007e011 	andeq	lr, r7, r1, lsl r0
     e8c:	e45f0100 	ldrb	r0, [pc], #-256	; e94 <startup-0x1ffff16c>
     e90:	2420000c 	strtcs	r0, [r0], #-12
     e94:	01000001 	tsteq	r0, r1
     e98:	0004829c 	muleq	r4, ip, r2
     e9c:	078b1200 	streq	r1, [fp, r0, lsl #4]
     ea0:	5f010000 	svcpl	0x00010000
     ea4:	00000162 	andeq	r0, r0, r2, ror #2
     ea8:	0f6c9102 	svceq	0x006c9102
     eac:	000007d6 	ldrdeq	r0, [r0], -r6
     eb0:	012e6001 			; <UNDEFINED> instruction: 0x012e6001
     eb4:	03050000 	movweq	r0, #20480	; 0x5000
     eb8:	200061e8 	andcs	r6, r0, r8, ror #3
     ebc:	03da1300 	bicseq	r1, sl, #0, 6
     ec0:	31010000 	mrscc	r0, (UNDEF: 1)
     ec4:	20000b60 	andcs	r0, r0, r0, ror #22
     ec8:	00000184 	andeq	r0, r0, r4, lsl #3
     ecc:	230f9c01 	movwcs	r9, #64513	; 0xfc01
     ed0:	01000007 	tsteq	r0, r7
     ed4:	00009e32 	andeq	r9, r0, r2, lsr lr
     ed8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     edc:	0006f60f 	andeq	pc, r6, pc, lsl #12
     ee0:	9e360100 	rsflss	f0, f6, f0
     ee4:	02000000 	andeq	r0, r0, #0
     ee8:	370f7091 			; <UNDEFINED> instruction: 0x370f7091
     eec:	01000007 	tsteq	r0, r7
     ef0:	00009e3a 	andeq	r9, r0, sl, lsr lr
     ef4:	6c910200 	lfmvs	f0, 4, [r1], {0}
     ef8:	0006ff0f 	andeq	pc, r6, pc, lsl #30
     efc:	9e3e0100 	rsflse	f0, f6, f0
     f00:	02000000 	andeq	r0, r0, #0
     f04:	7c0f6891 	stcvc	8, cr6, [pc], {145}	; 0x91
     f08:	01000002 	tsteq	r0, r2
     f0c:	00009e42 	andeq	r9, r0, r2, asr #28
     f10:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     f14:	0002850f 	andeq	r8, r2, pc, lsl #10
     f18:	9e460100 	dvflss	f0, f6, f0
     f1c:	02000000 	andeq	r0, r0, #0
     f20:	8e0f6091 	mcrhi	0, 0, r6, cr15, cr1, {4}
     f24:	01000002 	tsteq	r0, r2
     f28:	00009e4a 	andeq	r9, r0, sl, asr #28
     f2c:	5c910200 	lfmpl	f0, 4, [r1], {0}
     f30:	0002970f 	andeq	r9, r2, pc, lsl #14
     f34:	9e4e0100 	dvflse	f0, f6, f0
     f38:	02000000 	andeq	r0, r0, #0
     f3c:	a00f5891 	mulge	pc, r1, r8	; <UNPREDICTABLE>
     f40:	01000002 	tsteq	r0, r2
     f44:	00009e52 	andeq	r9, r0, r2, asr lr
     f48:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     f4c:	0002a90f 	andeq	sl, r2, pc, lsl #18
     f50:	9e560100 	rdflss	f0, f6, f0
     f54:	02000000 	andeq	r0, r0, #0
     f58:	560f5091 			; <UNDEFINED> instruction: 0x560f5091
     f5c:	01000000 	mrseq	r0, (UNDEF: 0)
     f60:	00009e5a 	andeq	r9, r0, sl, asr lr
     f64:	4c910200 	lfmmi	f0, 4, [r1], {0}
     f68:	01d50000 	bicseq	r0, r5, r0
     f6c:	00040000 	andeq	r0, r4, r0
     f70:	00000323 	andeq	r0, r0, r3, lsr #6
     f74:	00700104 	rsbseq	r0, r0, r4, lsl #2
     f78:	e90c0000 	stmdb	ip, {}	; <UNPREDICTABLE>
     f7c:	08000008 	stmdaeq	r0, {r3}
     f80:	d820000e 	stmdale	r0!, {r1, r2, r3}
     f84:	83000000 	movwhi	r0, #0
     f88:	02000004 	andeq	r0, r0, #4
     f8c:	02ed0704 	rsceq	r0, sp, #4, 14	; 0x100000
     f90:	02020000 	andeq	r0, r2, #0
     f94:	0002e707 	andeq	lr, r2, r7, lsl #14
     f98:	08010200 	stmdaeq	r1, {r9}
     f9c:	00000404 	andeq	r0, r0, r4, lsl #8
     fa0:	05020c03 	streq	r0, [r2, #-3075]	; 0xfffff3fd
     fa4:	00000063 	andeq	r0, r0, r3, rrx
     fa8:	0002c904 	andeq	ip, r2, r4, lsl #18
     fac:	21070200 	mrscs	r0, (UNDEF: 39)
     fb0:	00000000 	andeq	r0, r0, r0
     fb4:	0005e604 	andeq	lr, r5, r4, lsl #12
     fb8:	21080200 	mrscs	r0, R8_fiq
     fbc:	04000000 	streq	r0, [r0], #-0
     fc0:	000de604 	andeq	lr, sp, r4, lsl #12
     fc4:	63090200 	movwvs	r0, #37376	; 0x9200
     fc8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     fcc:	2f040500 	svccs	0x00040500
     fd0:	06000000 	streq	r0, [r0], -r0
     fd4:	00000f38 	andeq	r0, r0, r8, lsr pc
     fd8:	00360a02 	eorseq	r0, r6, r2, lsl #20
     fdc:	16070000 	strne	r0, [r7], -r0
     fe0:	0c000000 	stceq	0, cr0, [r0], {-0}
     fe4:	00a50603 	adceq	r0, r5, r3, lsl #12
     fe8:	da040000 	ble	100ff0 <startup-0x1feff010>
     fec:	03000004 	movweq	r0, #4
     ff0:	0000a507 	andeq	sl, r0, r7, lsl #10
     ff4:	1d040000 	stcne	0, cr0, [r4, #-0]
     ff8:	03000000 	movweq	r0, #0
     ffc:	0000a508 	andeq	sl, r0, r8, lsl #10
    1000:	12040400 	andne	r0, r4, #0, 8
    1004:	03000000 	movweq	r0, #0
    1008:	0000a509 	andeq	sl, r0, r9, lsl #10
    100c:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    1010:	00006904 	andeq	r6, r0, r4, lsl #18
    1014:	0c150600 	ldceq	6, cr0, [r5], {-0}
    1018:	0a030000 	beq	c1020 <startup-0x1ff3efe0>
    101c:	00000074 	andeq	r0, r0, r4, ror r0
    1020:	0005bb07 	andeq	fp, r5, r7, lsl #22
    1024:	06042400 	streq	r2, [r4], -r0, lsl #8
    1028:	0000012f 	andeq	r0, r0, pc, lsr #2
    102c:	0003a104 	andeq	sl, r3, r4, lsl #2
    1030:	2f070400 	svccs	0x00070400
    1034:	00000001 	andeq	r0, r0, r1
    1038:	0005c704 	andeq	ip, r5, r4, lsl #14
    103c:	35080400 	strcc	r0, [r8, #-1024]	; 0xfffffc00
    1040:	04000001 	streq	r0, [r0], #-1
    1044:	00053f04 	andeq	r3, r5, r4, lsl #30
    1048:	35090400 	strcc	r0, [r9, #-1024]	; 0xfffffc00
    104c:	08000001 	stmdaeq	r0, {r0}
    1050:	00055a04 	andeq	r5, r5, r4, lsl #20
    1054:	4d0c0400 	cfstrsmi	mvf0, [ip, #-0]
    1058:	0c000001 	stceq	0, cr0, [r0], {1}
    105c:	0002c204 	andeq	ip, r2, r4, lsl #4
    1060:	4d0d0400 	cfstrsmi	mvf0, [sp, #-0]
    1064:	10000001 	andne	r0, r0, r1
    1068:	0003b304 	andeq	fp, r3, r4, lsl #6
    106c:	35100400 	ldrcc	r0, [r0, #-1024]	; 0xfffffc00
    1070:	14000001 	strne	r0, [r0], #-1
    1074:	00004104 	andeq	r4, r0, r4, lsl #2
    1078:	35110400 	ldrcc	r0, [r1, #-1024]	; 0xfffffc00
    107c:	18000001 	stmdane	r0, {r0}
    1080:	00033204 	andeq	r3, r3, r4, lsl #4
    1084:	35120400 	ldrcc	r0, [r2, #-1024]	; 0xfffffc00
    1088:	1c000001 	stcne	0, cr0, [r0], {1}
    108c:	00034204 	andeq	r4, r3, r4, lsl #4
    1090:	35130400 	ldrcc	r0, [r3, #-1024]	; 0xfffffc00
    1094:	20000001 	andcs	r0, r0, r1
    1098:	ab040500 	blge	1024a0 <startup-0x1fefdb60>
    109c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    10a0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    10a4:	47090074 	smlsdxmi	r9, r4, r0, r0
    10a8:	0a000001 	beq	10b4 <startup-0x1fffef4c>
    10ac:	00000147 	andeq	r0, r0, r7, asr #2
    10b0:	b6040500 	strlt	r0, [r4], -r0, lsl #10
    10b4:	05000000 	streq	r0, [r0, #-0]
    10b8:	00013c04 	andeq	r3, r1, r4, lsl #24
    10bc:	05bc0600 	ldreq	r0, [ip, #1536]!	; 0x600
    10c0:	15040000 	strne	r0, [r4, #-0]
    10c4:	000000b6 	strheq	r0, [r0], -r6
    10c8:	0001690b 	andeq	r6, r1, fp, lsl #18
    10cc:	00016900 	andeq	r6, r1, r0, lsl #18
    10d0:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    10d4:	00015304 	andeq	r5, r1, r4, lsl #6
    10d8:	04870d00 	streq	r0, [r7], #3328	; 0xd00
    10dc:	1c040000 	stcne	0, cr0, [r4], {-0}
    10e0:	0000015e 	andeq	r0, r0, lr, asr r1
    10e4:	0003780d 	andeq	r7, r3, sp, lsl #16
    10e8:	351d0400 	ldrcc	r0, [sp, #-1024]	; 0xfffffc00
    10ec:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    10f0:	00000918 	andeq	r0, r0, r8, lsl r9
    10f4:	0e080601 	cfmadd32eq	mvax0, mvfx0, mvfx8, mvfx1
    10f8:	00d82000 	sbcseq	r2, r8, r0
    10fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1100:	00064f0f 	andeq	r4, r6, pc, lsl #30
    1104:	69060100 	stmdbvs	r6, {r8}
    1108:	02000001 	andeq	r0, r0, #1
    110c:	cc107491 	cfldrsgt	mvf7, [r0], {145}	; 0x91
    1110:	01000008 	tsteq	r0, r8
    1114:	0001350d 	andeq	r3, r1, sp, lsl #10
    1118:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
    111c:	10200028 	eorne	r0, r0, r8, lsr #32
    1120:	000008db 	ldrdeq	r0, [r0], -fp
    1124:	01350e01 	teqeq	r5, r1, lsl #28
    1128:	03050000 	movweq	r0, #20480	; 0x5000
    112c:	200028d4 	ldrdcs	r2, [r0], -r4
    1130:	00033c10 	andeq	r3, r3, r0, lsl ip
    1134:	350f0100 	strcc	r0, [pc, #-256]	; 103c <startup-0x1fffefc4>
    1138:	05000001 	streq	r0, [r0, #-1]
    113c:	0028d003 	eoreq	sp, r8, r3
    1140:	41000020 	tstmi	r0, r0, lsr #32
    1144:	04000006 	streq	r0, [r0], #-6
    1148:	0003f100 	andeq	pc, r3, r0, lsl #2
    114c:	70010400 	andvc	r0, r1, r0, lsl #8
    1150:	0c000000 	stceq	0, cr0, [r0], {-0}
    1154:	00000b99 	muleq	r0, r9, fp
    1158:	20000ee0 	andcs	r0, r0, r0, ror #29
    115c:	00000364 	andeq	r0, r0, r4, ror #6
    1160:	00000524 	andeq	r0, r0, r4, lsr #10
    1164:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    1168:	0000004e 	andeq	r0, r0, lr, asr #32
    116c:	0002c903 	andeq	ip, r2, r3, lsl #18
    1170:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    1174:	00000000 	andeq	r0, r0, r0
    1178:	0005e603 	andeq	lr, r5, r3, lsl #12
    117c:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    1180:	04000000 	streq	r0, [r0], #-0
    1184:	000de603 	andeq	lr, sp, r3, lsl #12
    1188:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    118c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1190:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1194:	000002ed 	andeq	r0, r0, sp, ror #5
    1198:	005b0405 	subseq	r0, fp, r5, lsl #8
    119c:	01040000 	mrseq	r0, (UNDEF: 4)
    11a0:	00040408 	andeq	r0, r4, r8, lsl #8
    11a4:	0f380600 	svceq	0x00380600
    11a8:	0a020000 	beq	811b0 <startup-0x1ff7ee50>
    11ac:	00000021 	andeq	r0, r0, r1, lsr #32
    11b0:	00001607 	andeq	r1, r0, r7, lsl #12
    11b4:	06030c00 	streq	r0, [r3], -r0, lsl #24
    11b8:	0000009e 	muleq	r0, lr, r0
    11bc:	0004da03 	andeq	sp, r4, r3, lsl #20
    11c0:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    11c4:	00000000 	andeq	r0, r0, r0
    11c8:	00001d03 	andeq	r1, r0, r3, lsl #26
    11cc:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    11d0:	04000000 	streq	r0, [r0], #-0
    11d4:	00001203 	andeq	r1, r0, r3, lsl #4
    11d8:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    11dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    11e0:	62040500 	andvs	r0, r4, #0, 10
    11e4:	06000000 	streq	r0, [r0], -r0
    11e8:	00000c15 	andeq	r0, r0, r5, lsl ip
    11ec:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    11f0:	bb070000 	bllt	1c11f8 <startup-0x1fe3ee08>
    11f4:	24000005 	strcs	r0, [r0], #-5
    11f8:	01280604 			; <UNDEFINED> instruction: 0x01280604
    11fc:	a1030000 	mrsge	r0, (UNDEF: 3)
    1200:	04000003 	streq	r0, [r0], #-3
    1204:	00012807 	andeq	r2, r1, r7, lsl #16
    1208:	c7030000 	strgt	r0, [r3, -r0]
    120c:	04000005 	streq	r0, [r0], #-5
    1210:	00012e08 	andeq	r2, r1, r8, lsl #28
    1214:	3f030400 	svccc	0x00030400
    1218:	04000005 	streq	r0, [r0], #-5
    121c:	00012e09 	andeq	r2, r1, r9, lsl #28
    1220:	5a030800 	bpl	c3228 <startup-0x1ff3cdd8>
    1224:	04000005 	streq	r0, [r0], #-5
    1228:	0001460c 	andeq	r4, r1, ip, lsl #12
    122c:	c2030c00 	andgt	r0, r3, #0, 24
    1230:	04000002 	streq	r0, [r0], #-2
    1234:	0001460d 	andeq	r4, r1, sp, lsl #12
    1238:	b3031000 	movwlt	r1, #12288	; 0x3000
    123c:	04000003 	streq	r0, [r0], #-3
    1240:	00012e10 	andeq	r2, r1, r0, lsl lr
    1244:	41031400 	tstmi	r3, r0, lsl #8
    1248:	04000000 	streq	r0, [r0], #-0
    124c:	00012e11 	andeq	r2, r1, r1, lsl lr
    1250:	32031800 	andcc	r1, r3, #0, 16
    1254:	04000003 	streq	r0, [r0], #-3
    1258:	00012e12 	andeq	r2, r1, r2, lsl lr
    125c:	42031c00 	andmi	r1, r3, #0, 24
    1260:	04000003 	streq	r0, [r0], #-3
    1264:	00012e13 	andeq	r2, r1, r3, lsl lr
    1268:	05002000 	streq	r2, [r0, #-0]
    126c:	0000a404 	andeq	sl, r0, r4, lsl #8
    1270:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    1274:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1278:	00014009 	andeq	r4, r1, r9
    127c:	01400a00 	cmpeq	r0, r0, lsl #20
    1280:	05000000 	streq	r0, [r0, #-0]
    1284:	0000af04 	andeq	sl, r0, r4, lsl #30
    1288:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    128c:	06000001 	streq	r0, [r0], -r1
    1290:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    1294:	00af1504 	adceq	r1, pc, r4, lsl #10
    1298:	620b0000 	andvs	r0, fp, #0
    129c:	62000001 	andvs	r0, r0, #1
    12a0:	0c000001 	stceq	0, cr0, [r0], {1}
    12a4:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    12a8:	0d000001 	stceq	0, cr0, [r0, #-4]
    12ac:	00000487 	andeq	r0, r0, r7, lsl #9
    12b0:	01571c04 	cmpeq	r7, r4, lsl #24
    12b4:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
    12b8:	04000003 	streq	r0, [r0], #-3
    12bc:	00012e1d 	andeq	r2, r1, sp, lsl lr
    12c0:	005b0b00 	subseq	r0, fp, r0, lsl #22
    12c4:	018e0000 	orreq	r0, lr, r0
    12c8:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    12cc:	63000001 	movwvs	r0, #1
    12d0:	07040400 	streq	r0, [r4, -r0, lsl #8]
    12d4:	0000035f 	andeq	r0, r0, pc, asr r3
    12d8:	000bff0f 	andeq	pc, fp, pc, lsl #30
    12dc:	7e030500 	cfsh32vc	mvfx0, mvfx3, #0
    12e0:	05000001 	streq	r0, [r0, #-1]
    12e4:	0061ec03 	rsbeq	lr, r1, r3, lsl #24
    12e8:	0a6a0f20 	beq	1a84f70 <startup-0x1e57b090>
    12ec:	03060000 	movweq	r0, #24576	; 0x6000
    12f0:	0000017e 	andeq	r0, r0, lr, ror r1
    12f4:	62500305 	subsvs	r0, r0, #335544320	; 0x14000000
    12f8:	b20f2000 	andlt	r2, pc, #0
    12fc:	0700000a 	streq	r0, [r0, -sl]
    1300:	00017e03 	andeq	r7, r1, r3, lsl #28
    1304:	b4030500 	strlt	r0, [r3], #-1280	; 0xfffffb00
    1308:	0f200062 	svceq	0x00200062
    130c:	00000a59 	andeq	r0, r0, r9, asr sl
    1310:	017e0308 	cmneq	lr, r8, lsl #6
    1314:	03050000 	movweq	r0, #20480	; 0x5000
    1318:	20006318 	andcs	r6, r0, r8, lsl r3
    131c:	000bd80f 	andeq	sp, fp, pc, lsl #16
    1320:	7e030900 	vmlavc.f16	s0, s6, s0	; <UNPREDICTABLE>
    1324:	05000001 	streq	r0, [r0, #-1]
    1328:	00637c03 	rsbeq	r7, r3, r3, lsl #24
    132c:	0cac0f20 	stceq	15, cr0, [ip], #128	; 0x80
    1330:	030a0000 	movweq	r0, #40960	; 0xa000
    1334:	0000017e 	andeq	r0, r0, lr, ror r1
    1338:	63e00305 	mvnvs	r0, #335544320	; 0x14000000
    133c:	850f2000 	strhi	r2, [pc, #-0]	; 1344 <startup-0x1fffecbc>
    1340:	0b00000a 	bleq	1370 <startup-0x1fffec90>
    1344:	00017e03 	andeq	r7, r1, r3, lsl #28
    1348:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
    134c:	0f200064 	svceq	0x00200064
    1350:	00000b73 	andeq	r0, r0, r3, ror fp
    1354:	017e030c 	cmneq	lr, ip, lsl #6
    1358:	03050000 	movweq	r0, #20480	; 0x5000
    135c:	200064a8 	andcs	r6, r0, r8, lsr #9
    1360:	0009340f 	andeq	r3, r9, pc, lsl #8
    1364:	7e030d00 	cdpvc	13, 0, cr0, cr3, cr0, {0}
    1368:	05000001 	streq	r0, [r0, #-1]
    136c:	00650c03 	rsbeq	r0, r5, r3, lsl #24
    1370:	0a960f20 	beq	fe584ff8 <firstTime.4093+0xde57e830>
    1374:	030e0000 	movweq	r0, #57344	; 0xe000
    1378:	0000017e 	andeq	r0, r0, lr, ror r1
    137c:	65700305 	ldrbvs	r0, [r0, #-773]!	; 0xfffffcfb
    1380:	1a0f2000 	bne	3c9388 <startup-0x1fc36c78>
    1384:	0f00000b 	svceq	0x0000000b
    1388:	00017e03 	andeq	r7, r1, r3, lsl #28
    138c:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
    1390:	0f200065 	svceq	0x00200065
    1394:	00000950 	andeq	r0, r0, r0, asr r9
    1398:	017e0310 	cmneq	lr, r0, lsl r3
    139c:	03050000 	movweq	r0, #20480	; 0x5000
    13a0:	20006638 	andcs	r6, r0, r8, lsr r6
    13a4:	000ac30f 	andeq	ip, sl, pc, lsl #6
    13a8:	7e031100 	adfvcs	f1, f3, f0
    13ac:	05000001 	streq	r0, [r0, #-1]
    13b0:	00669c03 	rsbeq	r9, r6, r3, lsl #24
    13b4:	0ae30f20 	beq	ff8c503c <firstTime.4093+0xdf8be874>
    13b8:	03120000 	tsteq	r2, #0
    13bc:	0000017e 	andeq	r0, r0, lr, ror r1
    13c0:	67000305 	strvs	r0, [r0, -r5, lsl #6]
    13c4:	7a0f2000 	bvc	3c93cc <startup-0x1fc36c34>
    13c8:	13000009 	movwne	r0, #9
    13cc:	00017e03 	andeq	r7, r1, r3, lsl #28
    13d0:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
    13d4:	10200067 	eorne	r0, r0, r7, rrx
    13d8:	00000b83 	andeq	r0, r0, r3, lsl #23
    13dc:	009e1501 	addseq	r1, lr, r1, lsl #10
    13e0:	03050000 	movweq	r0, #20480	; 0x5000
    13e4:	20002cf0 	strdcs	r2, [r0], -r0
    13e8:	0009b610 	andeq	fp, r9, r0, lsl r6
    13ec:	9e160100 	muflss	f0, f6, f0
    13f0:	05000000 	streq	r0, [r0, #-0]
    13f4:	002c8803 	eoreq	r8, ip, r3, lsl #16
    13f8:	09a01020 	stmibeq	r0!, {r5, ip}
    13fc:	17010000 	strne	r0, [r1, -r0]
    1400:	0000009e 	muleq	r0, lr, r0
    1404:	2d800305 	stccs	3, cr0, [r0, #20]
    1408:	f8102000 			; <UNDEFINED> instruction: 0xf8102000
    140c:	01000009 	tsteq	r0, r9
    1410:	00009e18 	andeq	r9, r0, r8, lsl lr
    1414:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    1418:	1020002c 	eorne	r0, r0, ip, lsr #32
    141c:	00000af3 	strdeq	r0, [r0], -r3
    1420:	009e1901 	addseq	r1, lr, r1, lsl #18
    1424:	03050000 	movweq	r0, #20480	; 0x5000
    1428:	20002d70 	andcs	r2, r0, r0, ror sp
    142c:	000b8e10 	andeq	r8, fp, r0, lsl lr
    1430:	9e1a0100 	muflse	f0, f2, f0
    1434:	05000000 	streq	r0, [r0, #-0]
    1438:	002e2403 	eoreq	r2, lr, r3, lsl #8
    143c:	09ab1020 	stmibeq	fp!, {r5, ip}
    1440:	1b010000 	blne	41448 <startup-0x1ffbebb8>
    1444:	0000009e 	muleq	r0, lr, r0
    1448:	2ce40305 	stclcs	3, cr0, [r4], #20
    144c:	1b102000 	blne	409454 <startup-0x1fbf6bac>
    1450:	0100000c 	tsteq	r0, ip
    1454:	00009e1c 	andeq	r9, r0, ip, lsl lr
    1458:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    145c:	1020002d 	eorne	r0, r0, sp, lsr #32
    1460:	0000098b 	andeq	r0, r0, fp, lsl #19
    1464:	009e1d01 	addseq	r1, lr, r1, lsl #26
    1468:	03050000 	movweq	r0, #20480	; 0x5000
    146c:	20002d38 	andcs	r2, r0, r8, lsr sp
    1470:	000b5910 	andeq	r5, fp, r0, lsl r9
    1474:	9e1e0100 	muflse	f0, f6, f0
    1478:	05000000 	streq	r0, [r0, #-0]
    147c:	002e0803 	eoreq	r0, lr, r3, lsl #16
    1480:	09ee1020 	stmibeq	lr!, {r5, ip}^
    1484:	1f010000 	svcne	0x00010000
    1488:	0000009e 	muleq	r0, lr, r0
    148c:	2ce80305 	stclcs	3, cr0, [r8], #20
    1490:	63102000 	tstvs	r0, #0
    1494:	0100000c 	tsteq	r0, ip
    1498:	00009e20 	andeq	r9, r0, r0, lsr #28
    149c:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
    14a0:	1020002c 	eorne	r0, r0, ip, lsr #32
    14a4:	000009cf 	andeq	r0, r0, pc, asr #19
    14a8:	009e2101 	addseq	r2, lr, r1, lsl #2
    14ac:	03050000 	movweq	r0, #20480	; 0x5000
    14b0:	20002c98 	mulcs	r0, r8, ip
    14b4:	000bf510 	andeq	pc, fp, r0, lsl r5	; <UNPREDICTABLE>
    14b8:	9e220100 	suflss	f0, f2, f0
    14bc:	05000000 	streq	r0, [r0, #-0]
    14c0:	002d1c03 	eoreq	r1, sp, r3, lsl #24
    14c4:	0b341020 	bleq	d0554c <startup-0x1f2faab4>
    14c8:	23010000 	movwcs	r0, #4096	; 0x1000
    14cc:	0000009e 	muleq	r0, lr, r0
    14d0:	2d600305 	stclcs	3, cr0, [r0, #-20]!	; 0xffffffec
    14d4:	32102000 	andscc	r2, r0, #0
    14d8:	0100000c 	tsteq	r0, ip
    14dc:	00006225 	andeq	r6, r0, r5, lsr #4
    14e0:	00030500 	andeq	r0, r3, r0, lsl #10
    14e4:	1020002d 	eorne	r0, r0, sp, lsr #32
    14e8:	00000a33 	andeq	r0, r0, r3, lsr sl
    14ec:	00622601 	rsbeq	r2, r2, r1, lsl #12
    14f0:	03050000 	movweq	r0, #20480	; 0x5000
    14f4:	20002d74 	andcs	r2, r0, r4, ror sp
    14f8:	000be810 	andeq	lr, fp, r0, lsl r8
    14fc:	62270100 	eorvs	r0, r7, #0, 2
    1500:	05000000 	streq	r0, [r0, #-0]
    1504:	002d1003 	eoreq	r1, sp, r3
    1508:	0b641020 	bleq	1905590 <startup-0x1e6faa70>
    150c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    1510:	00000062 	andeq	r0, r0, r2, rrx
    1514:	2e0c0305 	cdpcs	3, 0, cr0, cr12, cr5, {0}
    1518:	25102000 	ldrcs	r2, [r0, #-0]
    151c:	01000009 	tsteq	r0, r9
    1520:	00006229 	andeq	r6, r0, r9, lsr #4
    1524:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
    1528:	1020002d 	eorne	r0, r0, sp, lsr #32
    152c:	00000a17 	andeq	r0, r0, r7, lsl sl
    1530:	00622a01 	rsbeq	r2, r2, r1, lsl #20
    1534:	03050000 	movweq	r0, #20480	; 0x5000
    1538:	20002d2c 	andcs	r2, r0, ip, lsr #26
    153c:	000c4010 	andeq	r4, ip, r0, lsl r0
    1540:	622b0100 	eorvs	r0, fp, #0, 2
    1544:	05000000 	streq	r0, [r0, #-0]
    1548:	002d6403 	eoreq	r6, sp, r3, lsl #8
    154c:	0ad41020 	beq	ff5055d4 <firstTime.4093+0xdf4fee0c>
    1550:	2c010000 	stccs	0, cr0, [r1], {-0}
    1554:	00000062 	andeq	r0, r0, r2, rrx
    1558:	2da80305 	stccs	3, cr0, [r8, #20]!
    155c:	0c102000 	ldceq	0, cr2, [r0], {-0}
    1560:	0100000b 	tsteq	r0, fp
    1564:	0000622d 	andeq	r6, r0, sp, lsr #4
    1568:	b4030500 	strlt	r0, [r3], #-1280	; 0xfffffb00
    156c:	1020002d 	eorne	r0, r0, sp, lsr #32
    1570:	000009c0 	andeq	r0, r0, r0, asr #19
    1574:	00622e01 	rsbeq	r2, r2, r1, lsl #28
    1578:	03050000 	movweq	r0, #20480	; 0x5000
    157c:	20002c9c 	mulcs	r0, ip, ip
    1580:	000afd10 	andeq	pc, sl, r0, lsl sp	; <UNPREDICTABLE>
    1584:	622f0100 	eorvs	r0, pc, #0, 2
    1588:	05000000 	streq	r0, [r0, #-0]
    158c:	002d9c03 	eoreq	r9, sp, r3, lsl #24
    1590:	0a251020 	beq	945618 <startup-0x1f6ba9e8>
    1594:	30010000 	andcc	r0, r1, r0
    1598:	00000062 	andeq	r0, r0, r2, rrx
    159c:	2e180305 	cdpcs	3, 1, cr0, cr8, cr5, {0}
    15a0:	4a102000 	bmi	4095a8 <startup-0x1fbf6a58>
    15a4:	0100000b 	tsteq	r0, fp
    15a8:	00006231 	andeq	r6, r0, r1, lsr r2
    15ac:	48030500 	stmdami	r3, {r8, sl}
    15b0:	1020002d 	eorne	r0, r0, sp, lsr #32
    15b4:	00000961 	andeq	r0, r0, r1, ror #18
    15b8:	00623201 	rsbeq	r3, r2, r1, lsl #4
    15bc:	03050000 	movweq	r0, #20480	; 0x5000
    15c0:	20002d20 	andcs	r2, r0, r0, lsr #26
    15c4:	000a4110 	andeq	r4, sl, r0, lsl r1
    15c8:	62330100 	eorsvs	r0, r3, #0, 2
    15cc:	05000000 	streq	r0, [r0, #-0]
    15d0:	002d3c03 	eoreq	r3, sp, r3, lsl #24
    15d4:	0bd01020 	bleq	ff40565c <firstTime.4093+0xdf3fee94>
    15d8:	36010000 	strcc	r0, [r1], -r0
    15dc:	0000014c 	andeq	r0, r0, ip, asr #2
    15e0:	2cb40305 	ldccs	3, cr0, [r4], #20
    15e4:	10102000 	andsne	r2, r0, r0
    15e8:	0100000c 	tsteq	r0, ip
    15ec:	0000a437 	andeq	sl, r0, r7, lsr r4
    15f0:	d8030500 	stmdale	r3, {r8, sl}
    15f4:	1020002c 	eorne	r0, r0, ip, lsr #32
    15f8:	00000c97 	muleq	r0, r7, ip
    15fc:	00a43801 	adceq	r3, r4, r1, lsl #16
    1600:	03050000 	movweq	r0, #20480	; 0x5000
    1604:	20002ca8 	andcs	r2, r0, r8, lsr #25
    1608:	000aa710 	andeq	sl, sl, r0, lsl r7
    160c:	a4390100 	ldrtge	r0, [r9], #-256	; 0xffffff00
    1610:	05000000 	streq	r0, [r0, #-0]
    1614:	002d9003 	eoreq	r9, sp, r3
    1618:	09451020 	stmdbeq	r5, {r5, ip}^
    161c:	3a010000 	bcc	41624 <startup-0x1ffbe9dc>
    1620:	000000a4 	andeq	r0, r0, r4, lsr #1
    1624:	2cf40305 	ldclcs	3, cr0, [r4], #20
    1628:	6e102000 	cdpvs	0, 1, cr2, cr0, cr0, {0}
    162c:	0100000c 	tsteq	r0, ip
    1630:	0000a43b 	andeq	sl, r0, fp, lsr r4
    1634:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    1638:	1020002d 	eorne	r0, r0, sp, lsr #32
    163c:	00000a7a 	andeq	r0, r0, sl, ror sl
    1640:	00a43c01 	adceq	r3, r4, r1, lsl #24
    1644:	03050000 	movweq	r0, #20480	; 0x5000
    1648:	20002c8c 	andcs	r2, r0, ip, lsl #25
    164c:	0000a40b 	andeq	sl, r0, fp, lsl #8
    1650:	00051900 	andeq	r1, r5, r0, lsl #18
    1654:	018e0e00 	orreq	r0, lr, r0, lsl #28
    1658:	00050000 	andeq	r0, r5, r0
    165c:	000b3f10 	andeq	r3, fp, r0, lsl pc
    1660:	093f0100 	ldmdbeq	pc!, {r8}	; <UNPREDICTABLE>
    1664:	05000005 	streq	r0, [r0, #-5]
    1668:	002dc003 	eoreq	ip, sp, r3
    166c:	0bc61120 	bleq	ff185af4 <firstTime.4093+0xdf17f32c>
    1670:	76010000 	strvc	r0, [r1], -r0
    1674:	200010ec 	andcs	r1, r0, ip, ror #1
    1678:	00000158 	andeq	r0, r0, r8, asr r1
    167c:	055f9c01 	ldrbeq	r9, [pc, #-3073]	; a83 <startup-0x1ffff57d>
    1680:	d0120000 	andsle	r0, r2, r0
    1684:	0100000b 	tsteq	r0, fp
    1688:	00016276 	andeq	r6, r1, r6, ror r2
    168c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1690:	0007d60f 	andeq	sp, r7, pc, lsl #12
    1694:	2e770100 	rpwcss	f0, f7, f0
    1698:	05000001 	streq	r0, [r0, #-1]
    169c:	0067c803 	rsbeq	ip, r7, r3, lsl #16
    16a0:	da130020 	ble	4c1728 <startup-0x1fb3e8d8>
    16a4:	01000003 	tsteq	r0, r3
    16a8:	000ee040 	andeq	lr, lr, r0, asr #32
    16ac:	00020c20 	andeq	r0, r2, r0, lsr #24
    16b0:	0f9c0100 	svceq	0x009c0100
    16b4:	00000c4f 	andeq	r0, r0, pc, asr #24
    16b8:	009e4201 	addseq	r4, lr, r1, lsl #4
    16bc:	91020000 	mrsls	r0, (UNDEF: 2)
    16c0:	0c590f74 	mrrceq	15, 7, r0, r9, cr4
    16c4:	45010000 	strmi	r0, [r1, #-0]
    16c8:	0000009e 	muleq	r0, lr, r0
    16cc:	0f709102 	svceq	0x00709102
    16d0:	00000a4f 	andeq	r0, r0, pc, asr #20
    16d4:	009e4801 	addseq	r4, lr, r1, lsl #16
    16d8:	91020000 	mrsls	r0, (UNDEF: 2)
    16dc:	09700f6c 	ldmdbeq	r0!, {r2, r3, r5, r6, r8, r9, sl, fp}^
    16e0:	4c010000 	stcmi	0, cr0, [r1], {-0}
    16e4:	0000009e 	muleq	r0, lr, r0
    16e8:	0f689102 	svceq	0x00689102
    16ec:	00000c79 	andeq	r0, r0, r9, ror ip
    16f0:	009e4f01 	addseq	r4, lr, r1, lsl #30
    16f4:	91020000 	mrsls	r0, (UNDEF: 2)
    16f8:	0a0d0f64 	beq	345490 <startup-0x1fcbab70>
    16fc:	52010000 	andpl	r0, r1, #0
    1700:	0000009e 	muleq	r0, lr, r0
    1704:	0f609102 	svceq	0x00609102
    1708:	00000c25 	andeq	r0, r0, r5, lsr #24
    170c:	009e5701 	addseq	r5, lr, r1, lsl #14
    1710:	91020000 	mrsls	r0, (UNDEF: 2)
    1714:	0c830f5c 	stceq	15, cr0, [r3], {92}	; 0x5c
    1718:	5a010000 	bpl	41720 <startup-0x1ffbe8e0>
    171c:	0000009e 	muleq	r0, lr, r0
    1720:	0f589102 	svceq	0x00589102
    1724:	00000c8d 	andeq	r0, r0, sp, lsl #25
    1728:	009e5d01 	addseq	r5, lr, r1, lsl #26
    172c:	91020000 	mrsls	r0, (UNDEF: 2)
    1730:	09960f54 	ldmibeq	r6, {r2, r4, r6, r8, r9, sl, fp}
    1734:	61010000 	mrsvs	r0, (UNDEF: 1)
    1738:	0000009e 	muleq	r0, lr, r0
    173c:	0f509102 	svceq	0x00509102
    1740:	000009da 	ldrdeq	r0, [r0], -sl
    1744:	009e6401 	addseq	r6, lr, r1, lsl #8
    1748:	91020000 	mrsls	r0, (UNDEF: 2)
    174c:	09e40f4c 	stmibeq	r4!, {r2, r3, r6, r8, r9, sl, fp}^
    1750:	67010000 	strvs	r0, [r1, -r0]
    1754:	0000009e 	muleq	r0, lr, r0
    1758:	0f489102 	svceq	0x00489102
    175c:	00000ca2 	andeq	r0, r0, r2, lsr #25
    1760:	009e6b01 	addseq	r6, lr, r1, lsl #22
    1764:	91020000 	mrsls	r0, (UNDEF: 2)
    1768:	0b2a0f44 	bleq	a85480 <startup-0x1f57ab80>
    176c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1770:	0000009e 	muleq	r0, lr, r0
    1774:	0f409102 	svceq	0x00409102
    1778:	00000a03 	andeq	r0, r0, r3, lsl #20
    177c:	009e7101 	addseq	r7, lr, r1, lsl #2
    1780:	91030000 	mrsls	r0, (UNDEF: 3)
    1784:	00007fbc 			; <UNDEFINED> instruction: 0x00007fbc
    1788:	0000089f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    178c:	04f10004 	ldrbteq	r0, [r1], #4
    1790:	01040000 	mrseq	r0, (UNDEF: 4)
    1794:	00000070 	andeq	r0, r0, r0, ror r0
    1798:	000da80c 	andeq	sl, sp, ip, lsl #16
    179c:	00124400 	andseq	r4, r2, r0, lsl #8
    17a0:	000e4420 	andeq	r4, lr, r0, lsr #8
    17a4:	00070500 	andeq	r0, r7, r0, lsl #10
    17a8:	020c0200 	andeq	r0, ip, #0, 4
    17ac:	00004e05 	andeq	r4, r0, r5, lsl #28
    17b0:	02c90300 	sbceq	r0, r9, #0, 6
    17b4:	07020000 	streq	r0, [r2, -r0]
    17b8:	0000004e 	andeq	r0, r0, lr, asr #32
    17bc:	05e60300 	strbeq	r0, [r6, #768]!	; 0x300
    17c0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    17c4:	0000004e 	andeq	r0, r0, lr, asr #32
    17c8:	0de60304 	stcleq	3, cr0, [r6, #16]!
    17cc:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    17d0:	00000055 	andeq	r0, r0, r5, asr r0
    17d4:	04040008 	streq	r0, [r4], #-8
    17d8:	0002ed07 	andeq	lr, r2, r7, lsl #26
    17dc:	5b040500 	blpl	102be4 <startup-0x1fefd41c>
    17e0:	04000000 	streq	r0, [r0], #-0
    17e4:	04040801 	streq	r0, [r4], #-2049	; 0xfffff7ff
    17e8:	38060000 	stmdacc	r6, {}	; <UNPREDICTABLE>
    17ec:	0200000f 	andeq	r0, r0, #15
    17f0:	0000210a 	andeq	r2, r0, sl, lsl #2
    17f4:	00160700 	andseq	r0, r6, r0, lsl #14
    17f8:	030c0000 	movweq	r0, #49152	; 0xc000
    17fc:	00009e06 	andeq	r9, r0, r6, lsl #28
    1800:	04da0300 	ldrbeq	r0, [sl], #768	; 0x300
    1804:	07030000 	streq	r0, [r3, -r0]
    1808:	0000009e 	muleq	r0, lr, r0
    180c:	001d0300 	andseq	r0, sp, r0, lsl #6
    1810:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1814:	0000009e 	muleq	r0, lr, r0
    1818:	00120304 	andseq	r0, r2, r4, lsl #6
    181c:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    1820:	0000009e 	muleq	r0, lr, r0
    1824:	04050008 	streq	r0, [r5], #-8
    1828:	00000062 	andeq	r0, r0, r2, rrx
    182c:	000c1506 	andeq	r1, ip, r6, lsl #10
    1830:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    1834:	07000000 	streq	r0, [r0, -r0]
    1838:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    183c:	28060424 	stmdacs	r6, {r2, r5, sl}
    1840:	03000001 	movweq	r0, #1
    1844:	000003a1 	andeq	r0, r0, r1, lsr #7
    1848:	01280704 			; <UNDEFINED> instruction: 0x01280704
    184c:	03000000 	movweq	r0, #0
    1850:	000005c7 	andeq	r0, r0, r7, asr #11
    1854:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    1858:	03040000 	movweq	r0, #16384	; 0x4000
    185c:	0000053f 	andeq	r0, r0, pc, lsr r5
    1860:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    1864:	03080000 	movweq	r0, #32768	; 0x8000
    1868:	0000055a 	andeq	r0, r0, sl, asr r5
    186c:	01460c04 	cmpeq	r6, r4, lsl #24
    1870:	030c0000 	movweq	r0, #49152	; 0xc000
    1874:	000002c2 	andeq	r0, r0, r2, asr #5
    1878:	01460d04 	cmpeq	r6, r4, lsl #26
    187c:	03100000 	tsteq	r0, #0
    1880:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
    1884:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    1888:	03140000 	tsteq	r4, #0
    188c:	00000041 	andeq	r0, r0, r1, asr #32
    1890:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    1894:	03180000 	tsteq	r8, #0
    1898:	00000332 	andeq	r0, r0, r2, lsr r3
    189c:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    18a0:	031c0000 	tsteq	ip, #0
    18a4:	00000342 	andeq	r0, r0, r2, asr #6
    18a8:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    18ac:	00200000 	eoreq	r0, r0, r0
    18b0:	00a40405 	adceq	r0, r4, r5, lsl #8
    18b4:	04080000 	streq	r0, [r8], #-0
    18b8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    18bc:	01400900 	cmpeq	r0, r0, lsl #18
    18c0:	400a0000 	andmi	r0, sl, r0
    18c4:	00000001 	andeq	r0, r0, r1
    18c8:	00af0405 	adceq	r0, pc, r5, lsl #8
    18cc:	04050000 	streq	r0, [r5], #-0
    18d0:	00000135 	andeq	r0, r0, r5, lsr r1
    18d4:	0005bc06 	andeq	fp, r5, r6, lsl #24
    18d8:	af150400 	svcge	0x00150400
    18dc:	0b000000 	bleq	18e4 <startup-0x1fffe71c>
    18e0:	00000162 	andeq	r0, r0, r2, ror #2
    18e4:	00000162 	andeq	r0, r0, r2, ror #2
    18e8:	0405000c 	streq	r0, [r5], #-12
    18ec:	0000014c 	andeq	r0, r0, ip, asr #2
    18f0:	0004870d 	andeq	r8, r4, sp, lsl #14
    18f4:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    18f8:	0d000001 	stceq	0, cr0, [r0, #-4]
    18fc:	00000378 	andeq	r0, r0, r8, ror r3
    1900:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    1904:	85060000 	strhi	r0, [r6, #-0]
    1908:	05000005 	streq	r0, [r0, #-5]
    190c:	00005b24 	andeq	r5, r0, r4, lsr #22
    1910:	017e0b00 	cmneq	lr, r0, lsl #22
    1914:	019a0000 	orrseq	r0, sl, r0
    1918:	9a0e0000 	bls	381920 <startup-0x1fc7e6e0>
    191c:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    1920:	04040003 	streq	r0, [r4], #-3
    1924:	00035f07 	andeq	r5, r3, r7, lsl #30
    1928:	0d1c0d00 	ldceq	13, cr0, [ip, #-0]
    192c:	2b050000 	blcs	141934 <startup-0x1febe6cc>
    1930:	00000189 	andeq	r0, r0, r9, lsl #3
    1934:	0001eb0d 	andeq	lr, r1, sp, lsl #22
    1938:	892c0500 	stmdbhi	ip!, {r8, sl}
    193c:	0d000001 	stceq	0, cr0, [r0, #-4]
    1940:	00000412 	andeq	r0, r0, r2, lsl r4
    1944:	01892d05 	orreq	r2, r9, r5, lsl #26
    1948:	cf0d0000 	svcgt	0x000d0000
    194c:	05000002 	streq	r0, [r0, #-2]
    1950:	0001892e 	andeq	r8, r1, lr, lsr #18
    1954:	025f0d00 	subseq	r0, pc, #0, 26
    1958:	2f050000 	svccs	0x00050000
    195c:	00000189 	andeq	r0, r0, r9, lsl #3
    1960:	00059d0d 	andeq	r9, r5, sp, lsl #26
    1964:	89300500 	ldmdbhi	r0!, {r8, sl}
    1968:	0d000001 	stceq	0, cr0, [r0, #-4]
    196c:	0000058d 	andeq	r0, r0, sp, lsl #11
    1970:	01893105 	orreq	r3, r9, r5, lsl #2
    1974:	ac0f0000 	stcge	0, cr0, [pc], {-0}
    1978:	01000001 	tsteq	r0, r1
    197c:	2803052b 	stmdacs	r3, {r0, r1, r3, r5, r8, sl}
    1980:	0f20003e 	svceq	0x0020003e
    1984:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
    1988:	03052c01 	movweq	r2, #23553	; 0x5c01
    198c:	20003228 	andcs	r3, r0, r8, lsr #4
    1990:	0001c20f 	andeq	ip, r1, pc, lsl #4
    1994:	052d0100 	streq	r0, [sp, #-256]!	; 0xffffff00
    1998:	003a2803 	eorseq	r2, sl, r3, lsl #16
    199c:	01cd0f20 	biceq	r0, sp, r0, lsr #30
    19a0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    19a4:	42280305 	eormi	r0, r8, #335544320	; 0x14000000
    19a8:	a10f2000 	mrsge	r2, CPSR
    19ac:	01000001 	tsteq	r0, r1
    19b0:	2803052f 	stmdacs	r3, {r0, r1, r2, r3, r5, r8, sl}
    19b4:	10200036 	eorne	r0, r0, r6, lsr r0
    19b8:	000001d8 	ldrdeq	r0, [r0], -r8
    19bc:	28030501 	stmdacs	r3, {r0, r8, sl}
    19c0:	1020002e 	eorne	r0, r0, lr, lsr #32
    19c4:	000001e3 	andeq	r0, r0, r3, ror #3
    19c8:	28030501 	stmdacs	r3, {r0, r8, sl}
    19cc:	11200046 			; <UNDEFINED> instruction: 0x11200046
    19d0:	00000d52 	andeq	r0, r0, r2, asr sp
    19d4:	1e01a801 	cdpne	8, 0, cr10, cr1, cr1, {0}
    19d8:	6a200020 	bvs	801a60 <startup-0x1f7fe5a0>
    19dc:	01000000 	mrseq	r0, (UNDEF: 0)
    19e0:	00026d9c 	muleq	r2, ip, sp
    19e4:	0e391200 	cdpeq	2, 3, cr1, cr9, cr0, {0}
    19e8:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    19ec:	00012e01 	andeq	r2, r1, r1, lsl #28
    19f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    19f4:	0ce31100 	stfeqe	f1, [r3]
    19f8:	a0010000 	andge	r0, r1, r0
    19fc:	001f9c01 	andseq	r9, pc, r1, lsl #24
    1a00:	00008220 	andeq	r8, r0, r0, lsr #4
    1a04:	a29c0100 	addsge	r0, ip, #0, 2
    1a08:	12000002 	andne	r0, r0, #2
    1a0c:	00000d2d 	andeq	r0, r0, sp, lsr #26
    1a10:	6201a001 	andvs	sl, r1, #1
    1a14:	02000001 	andeq	r0, r0, #1
    1a18:	bb136c91 	bllt	4dcc64 <startup-0x1fb2339c>
    1a1c:	01000003 	tsteq	r0, r3
    1a20:	012e01a1 	smulwbeq	lr, r1, r1
    1a24:	91020000 	mrsls	r0, (UNDEF: 2)
    1a28:	f1140074 			; <UNDEFINED> instruction: 0xf1140074
    1a2c:	0100000d 	tsteq	r0, sp
    1a30:	1e940196 	mrcne	1, 4, r0, cr4, cr6, {4}
    1a34:	01082000 	mrseq	r2, (UNDEF: 8)
    1a38:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a3c:	000002c6 	andeq	r0, r0, r6, asr #5
    1a40:	01006915 	tsteq	r0, r5, lsl r9
    1a44:	012e0197 			; <UNDEFINED> instruction: 0x012e0197
    1a48:	91020000 	mrsls	r0, (UNDEF: 2)
    1a4c:	83110074 	tsthi	r1, #116	; 0x74
    1a50:	0100000d 	tsteq	r0, sp
    1a54:	1d640170 	stfnee	f0, [r4, #-448]!	; 0xfffffe40
    1a58:	01302000 	teqeq	r0, r0
    1a5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a60:	0000033a 	andeq	r0, r0, sl, lsr r3
    1a64:	01007815 	tsteq	r0, r5, lsl r8
    1a68:	012e0171 			; <UNDEFINED> instruction: 0x012e0171
    1a6c:	91020000 	mrsls	r0, (UNDEF: 2)
    1a70:	0079156c 	rsbseq	r1, r9, ip, ror #10
    1a74:	2e017201 	cdpcs	2, 0, cr7, cr1, cr1, {0}
    1a78:	02000001 	andeq	r0, r0, #1
    1a7c:	c9136891 	ldmdbgt	r3, {r0, r4, r7, fp, sp, lr}
    1a80:	01000002 	tsteq	r0, r2
    1a84:	012e0173 			; <UNDEFINED> instruction: 0x012e0173
    1a88:	91020000 	mrsls	r0, (UNDEF: 2)
    1a8c:	05e61364 	strbeq	r1, [r6, #868]!	; 0x364
    1a90:	74010000 	strvc	r0, [r1], #-0
    1a94:	00012e01 	andeq	r2, r1, r1, lsl #28
    1a98:	60910200 	addsvs	r0, r1, r0, lsl #4
    1a9c:	00327815 	eorseq	r7, r2, r5, lsl r8
    1aa0:	2e017601 	cfmadd32cs	mvax0, mvfx7, mvfx1, mvfx1
    1aa4:	02000001 	andeq	r0, r0, #1
    1aa8:	69165c91 	ldmdbvs	r6, {r0, r4, r7, sl, fp, ip, lr}
    1aac:	017a0100 	cmneq	sl, r0, lsl #2
    1ab0:	0000012e 	andeq	r0, r0, lr, lsr #2
    1ab4:	01006b15 	tsteq	r0, r5, lsl fp
    1ab8:	012e017b 			; <UNDEFINED> instruction: 0x012e017b
    1abc:	91020000 	mrsls	r0, (UNDEF: 2)
    1ac0:	83110058 	tsthi	r1, #88	; 0x58
    1ac4:	0100000e 	tsteq	r0, lr
    1ac8:	1d120165 	ldfnes	f0, [r2, #-404]	; 0xfffffe6c
    1acc:	00522000 	subseq	r2, r2, r0
    1ad0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ad4:	000003a3 	andeq	r0, r0, r3, lsr #7
    1ad8:	01007817 	tsteq	r0, r7, lsl r8
    1adc:	012e0165 			; <UNDEFINED> instruction: 0x012e0165
    1ae0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ae4:	0079176c 	rsbseq	r1, r9, ip, ror #14
    1ae8:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
    1aec:	02000001 	andeq	r0, r0, #1
    1af0:	c9126891 	ldmdbgt	r2, {r0, r4, r7, fp, sp, lr}
    1af4:	01000002 	tsteq	r0, r2
    1af8:	012e0165 			; <UNDEFINED> instruction: 0x012e0165
    1afc:	91020000 	mrsls	r0, (UNDEF: 2)
    1b00:	05e61264 	strbeq	r1, [r6, #612]!	; 0x264
    1b04:	65010000 	strvs	r0, [r1, #-0]
    1b08:	00012e01 	andeq	r2, r1, r1, lsl #28
    1b0c:	60910200 	addsvs	r0, r1, r0, lsl #4
    1b10:	01006915 	tsteq	r0, r5, lsl r9
    1b14:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
    1b18:	91020000 	mrsls	r0, (UNDEF: 2)
    1b1c:	006a1574 	rsbeq	r1, sl, r4, ror r5
    1b20:	2e016701 	cdpcs	7, 0, cr6, cr1, cr1, {0}
    1b24:	02000001 	andeq	r0, r0, #1
    1b28:	11007091 	swpne	r7, r1, [r0]
    1b2c:	00000e26 	andeq	r0, r0, r6, lsr #28
    1b30:	c0015b01 	andgt	r5, r1, r1, lsl #22
    1b34:	5220001c 	eorpl	r0, r0, #28
    1b38:	01000000 	mrseq	r0, (UNDEF: 0)
    1b3c:	00040c9c 	muleq	r4, ip, ip
    1b40:	00781700 	rsbseq	r1, r8, r0, lsl #14
    1b44:	2e015b01 	vmlacs.f64	d5, d1, d1
    1b48:	02000001 	andeq	r0, r0, #1
    1b4c:	79176c91 	ldmdbvc	r7, {r0, r4, r7, sl, fp, sp, lr}
    1b50:	015b0100 	cmpeq	fp, r0, lsl #2
    1b54:	0000012e 	andeq	r0, r0, lr, lsr #2
    1b58:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    1b5c:	000002c9 	andeq	r0, r0, r9, asr #5
    1b60:	2e015b01 	vmlacs.f64	d5, d1, d1
    1b64:	02000001 	andeq	r0, r0, #1
    1b68:	e6126491 			; <UNDEFINED> instruction: 0xe6126491
    1b6c:	01000005 	tsteq	r0, r5
    1b70:	012e015b 			; <UNDEFINED> instruction: 0x012e015b
    1b74:	91020000 	mrsls	r0, (UNDEF: 2)
    1b78:	00691560 	rsbeq	r1, r9, r0, ror #10
    1b7c:	2e015c01 	cdpcs	12, 0, cr5, cr1, cr1, {0}
    1b80:	02000001 	andeq	r0, r0, #1
    1b84:	6a157491 	bvs	55edd0 <startup-0x1faa1230>
    1b88:	015d0100 	cmpeq	sp, r0, lsl #2
    1b8c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1b90:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1b94:	000d5d11 	andeq	r5, sp, r1, lsl sp
    1b98:	01450100 	mrseq	r0, (UNDEF: 85)
    1b9c:	20001ba6 	andcs	r1, r0, r6, lsr #23
    1ba0:	0000011a 	andeq	r0, r0, sl, lsl r1
    1ba4:	04b79c01 	ldrteq	r9, [r7], #3073	; 0xc01
    1ba8:	73170000 	tstvc	r7, #0
    1bac:	01450100 	mrseq	r0, (UNDEF: 85)
    1bb0:	0000009e 	muleq	r0, lr, r0
    1bb4:	17549102 	ldrbne	r9, [r4, -r2, lsl #2]
    1bb8:	45010078 	strmi	r0, [r1, #-120]	; 0xffffff88
    1bbc:	00012e01 	andeq	r2, r1, r1, lsl #28
    1bc0:	50910200 	addspl	r0, r1, r0, lsl #4
    1bc4:	01007917 	tsteq	r0, r7, lsl r9
    1bc8:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
    1bcc:	91020000 	mrsls	r0, (UNDEF: 2)
    1bd0:	6573174c 	ldrbvs	r1, [r3, #-1868]!	; 0xfffff8b4
    1bd4:	45010074 	strmi	r0, [r1, #-116]	; 0xffffff8c
    1bd8:	00012e01 	andeq	r2, r1, r1, lsl #28
    1bdc:	48910200 	ldmmi	r1, {r9}
    1be0:	000deb12 	andeq	lr, sp, r2, lsl fp
    1be4:	01450100 	mrseq	r0, (UNDEF: 85)
    1be8:	0000012e 	andeq	r0, r0, lr, lsr #2
    1bec:	15009102 	strne	r9, [r0, #-258]	; 0xfffffefe
    1bf0:	46010069 	strmi	r0, [r1], -r9, rrx
    1bf4:	00012e01 	andeq	r2, r1, r1, lsl #28
    1bf8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1bfc:	01006a15 	tsteq	r0, r5, lsl sl
    1c00:	012e0146 			; <UNDEFINED> instruction: 0x012e0146
    1c04:	91020000 	mrsls	r0, (UNDEF: 2)
    1c08:	006b1568 	rsbeq	r1, fp, r8, ror #10
    1c0c:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
    1c10:	02000001 	andeq	r0, r0, #1
    1c14:	5e136491 	cfcmpspl	r6, mvf3, mvf1
    1c18:	0100000e 	tsteq	r0, lr
    1c1c:	012e0146 			; <UNDEFINED> instruction: 0x012e0146
    1c20:	91020000 	mrsls	r0, (UNDEF: 2)
    1c24:	1bde1860 	blne	ff787dac <firstTime.4093+0xdf7815e4>
    1c28:	00bc2000 	adcseq	r2, ip, r0
    1c2c:	59130000 	ldmdbpl	r3, {}	; <UNPREDICTABLE>
    1c30:	0100000e 	tsteq	r0, lr
    1c34:	005b014d 	subseq	r0, fp, sp, asr #2
    1c38:	91020000 	mrsls	r0, (UNDEF: 2)
    1c3c:	1100005f 	qaddne	r0, pc, r0	; <UNPREDICTABLE>
    1c40:	00000d32 	andeq	r0, r0, r2, lsr sp
    1c44:	d0013001 	andle	r3, r1, r1
    1c48:	d620001a 			; <UNDEFINED> instruction: 0xd620001a
    1c4c:	01000000 	mrseq	r0, (UNDEF: 0)
    1c50:	0005209c 	muleq	r5, ip, r0
    1c54:	0ccf1200 	sfmeq	f1, 2, [pc], {0}
    1c58:	30010000 	andcc	r0, r1, r0
    1c5c:	00052001 	andeq	r2, r5, r1
    1c60:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1c64:	01006915 	tsteq	r0, r5, lsl r9
    1c68:	017e0131 	cmneq	lr, r1, lsr r1
    1c6c:	91020000 	mrsls	r0, (UNDEF: 2)
    1c70:	006a1577 	rsbeq	r1, sl, r7, ror r5
    1c74:	7e013101 	adfvcs	f3, f1, f1
    1c78:	02000001 	andeq	r0, r0, #1
    1c7c:	8f137691 	svchi	0x00137691
    1c80:	01000010 	tsteq	r0, r0, lsl r0
    1c84:	017e0131 	cmneq	lr, r1, lsr r1
    1c88:	91020000 	mrsls	r0, (UNDEF: 2)
    1c8c:	0063156f 	rsbeq	r1, r3, pc, ror #10
    1c90:	7e013101 	adfvcs	f3, f1, f1
    1c94:	02000001 	andeq	r0, r0, #1
    1c98:	6b157591 	blvs	55f2e4 <startup-0x1faa0d1c>
    1c9c:	01320100 	teqeq	r2, r0, lsl #2
    1ca0:	0000004e 	andeq	r0, r0, lr, asr #32
    1ca4:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1ca8:	017e0405 	cmneq	lr, r5, lsl #8
    1cac:	dc110000 	ldcle	0, cr0, [r1], {-0}
    1cb0:	0100000c 	tsteq	r0, ip
    1cb4:	19300108 	ldmdbne	r0!, {r3, r8}
    1cb8:	01a02000 	moveq	r2, r0
    1cbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1cc0:	000005a0 	andeq	r0, r0, r0, lsr #11
    1cc4:	01007817 	tsteq	r0, r7, lsl r8
    1cc8:	012e0108 			; <UNDEFINED> instruction: 0x012e0108
    1ccc:	91020000 	mrsls	r0, (UNDEF: 2)
    1cd0:	00791764 	rsbseq	r1, r9, r4, ror #14
    1cd4:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
    1cd8:	02000001 	andeq	r0, r0, #1
    1cdc:	73176091 	tstvc	r7, #145	; 0x91
    1ce0:	01007465 	tsteq	r0, r5, ror #8
    1ce4:	012e0108 			; <UNDEFINED> instruction: 0x012e0108
    1ce8:	91020000 	mrsls	r0, (UNDEF: 2)
    1cec:	0e34135c 	mrceq	3, 1, r1, cr4, cr12, {2}
    1cf0:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1cf4:	00017e01 	andeq	r7, r1, r1, lsl #28
    1cf8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1cfc:	01006315 	tsteq	r0, r5, lsl r3
    1d00:	017e0109 	cmneq	lr, r9, lsl #2
    1d04:	91020000 	mrsls	r0, (UNDEF: 2)
    1d08:	108f136f 	addne	r1, pc, pc, ror #6
    1d0c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1d10:	00017e01 	andeq	r7, r1, r1, lsl #28
    1d14:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    1d18:	000e9213 	andeq	r9, lr, r3, lsl r2
    1d1c:	010a0100 	mrseq	r0, (UNDEF: 26)
    1d20:	0000012e 	andeq	r0, r0, lr, lsr #2
    1d24:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1d28:	000d2719 	andeq	r2, sp, r9, lsl r7
    1d2c:	b0de0100 	sbcslt	r0, lr, r0, lsl #2
    1d30:	80200017 	eorhi	r0, r0, r7, lsl r0
    1d34:	01000001 	tsteq	r0, r1
    1d38:	0006069c 	muleq	r6, ip, r6
    1d3c:	00781a00 	rsbseq	r1, r8, r0, lsl #20
    1d40:	012ede01 			; <UNDEFINED> instruction: 0x012ede01
    1d44:	91020000 	mrsls	r0, (UNDEF: 2)
    1d48:	00791a6c 	rsbseq	r1, r9, ip, ror #20
    1d4c:	012ede01 			; <UNDEFINED> instruction: 0x012ede01
    1d50:	91020000 	mrsls	r0, (UNDEF: 2)
    1d54:	65731a68 	ldrbvs	r1, [r3, #-2664]!	; 0xfffff598
    1d58:	de010074 	mcrle	0, 0, r0, cr1, cr4, {3}
    1d5c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1d60:	1b649102 	blne	1926170 <startup-0x1e6d9e90>
    1d64:	00000deb 	andeq	r0, r0, fp, ror #27
    1d68:	012ede01 			; <UNDEFINED> instruction: 0x012ede01
    1d6c:	91020000 	mrsls	r0, (UNDEF: 2)
    1d70:	0e341c60 	cdpeq	12, 3, cr1, cr4, cr0, {3}
    1d74:	df010000 	svcle	0x00010000
    1d78:	0000017e 	andeq	r0, r0, lr, ror r1
    1d7c:	1c779102 	ldfnep	f1, [r7], #-8
    1d80:	00000e92 	muleq	r0, r2, lr
    1d84:	012ee001 			; <UNDEFINED> instruction: 0x012ee001
    1d88:	91020000 	mrsls	r0, (UNDEF: 2)
    1d8c:	e51d0070 	ldr	r0, [sp, #-112]	; 0xffffff90
    1d90:	0100000e 	tsteq	r0, lr
    1d94:	00174ad1 			; <UNDEFINED> instruction: 0x00174ad1
    1d98:	00006620 	andeq	r6, r0, r0, lsr #12
    1d9c:	429c0100 	addsmi	r0, ip, #0, 2
    1da0:	1c000006 	stcne	0, cr0, [r0], {6}
    1da4:	00000cbd 			; <UNDEFINED> instruction: 0x00000cbd
    1da8:	017ed201 	cmneq	lr, r1, lsl #4
    1dac:	91020000 	mrsls	r0, (UNDEF: 2)
    1db0:	17581877 			; <UNDEFINED> instruction: 0x17581877
    1db4:	003e2000 	eorseq	r2, lr, r0
    1db8:	611e0000 	tstvs	lr, r0
    1dbc:	01006464 	tsteq	r0, r4, ror #8
    1dc0:	00017ed6 	ldrdeq	r7, [r1], -r6
    1dc4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    1dc8:	d21f0000 	andsle	r0, pc, #0
    1dcc:	0100000e 	tsteq	r0, lr
    1dd0:	0016dcbd 			; <UNDEFINED> instruction: 0x0016dcbd
    1dd4:	00006e20 	andeq	r6, r0, r0, lsr #28
    1dd8:	1d9c0100 	ldfnes	f0, [ip]
    1ddc:	00000e46 	andeq	r0, r0, r6, asr #28
    1de0:	1696b501 	ldrne	fp, [r6], r1, lsl #10
    1de4:	00462000 	subeq	r2, r6, r0
    1de8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1dec:	00000685 	andeq	r0, r0, r5, lsl #13
    1df0:	000d0e1b 	andeq	r0, sp, fp, lsl lr
    1df4:	7eb50100 	frdvcs	f0, f5, f0
    1df8:	02000001 	andeq	r0, r0, #1
    1dfc:	8f1b7791 	svchi	0x001b7791
    1e00:	01000010 	tsteq	r0, r0, lsl r0
    1e04:	00017eb5 			; <UNDEFINED> instruction: 0x00017eb5
    1e08:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    1e0c:	0d001d00 	stceq	13, cr1, [r0, #-0]
    1e10:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    1e14:	20001650 	andcs	r1, r0, r0, asr r6
    1e18:	00000046 	andeq	r0, r0, r6, asr #32
    1e1c:	06b79c01 	ldrteq	r9, [r7], r1, lsl #24
    1e20:	0e1b0000 	cdpeq	0, 1, cr0, cr11, cr0, {0}
    1e24:	0100000d 	tsteq	r0, sp
    1e28:	00017eae 	andeq	r7, r1, lr, lsr #29
    1e2c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1e30:	00108f1b 	andseq	r8, r0, fp, lsl pc
    1e34:	7eae0100 	fdvvce	f0, f6, f0
    1e38:	02000001 	andeq	r0, r0, #1
    1e3c:	1d007691 	stcne	6, cr7, [r0, #-580]	; 0xfffffdbc
    1e40:	00000d75 	andeq	r0, r0, r5, ror sp
    1e44:	15d29901 	ldrbne	r9, [r2, #2305]	; 0x901
    1e48:	007e2000 	rsbseq	r2, lr, r0
    1e4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e50:	000006e9 	andeq	r0, r0, r9, ror #13
    1e54:	000cd61b 	andeq	sp, ip, fp, lsl r6
    1e58:	7e990100 	fmlvce	f0, f1, f0
    1e5c:	02000001 	andeq	r0, r0, #1
    1e60:	8f1b7791 	svchi	0x001b7791
    1e64:	01000010 	tsteq	r0, r0, lsl r0
    1e68:	00017e99 	muleq	r1, r9, lr
    1e6c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    1e70:	0dd92000 	ldcleq	0, cr2, [r9]
    1e74:	94010000 	strls	r0, [r1], #-0
    1e78:	0000012e 	andeq	r0, r0, lr, lsr #2
    1e7c:	200015a8 	andcs	r1, r0, r8, lsr #11
    1e80:	0000002a 	andeq	r0, r0, sl, lsr #32
    1e84:	07119c01 	ldreq	r9, [r1, -r1, lsl #24]
    1e88:	8f1b0000 	svchi	0x001b0000
    1e8c:	01000010 	tsteq	r0, r0, lsl r0
    1e90:	00017e94 	muleq	r1, r4, lr
    1e94:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1e98:	0cc22100 	stfeqe	f2, [r2], {0}
    1e9c:	7b010000 	blvc	41ea4 <startup-0x1ffbe15c>
    1ea0:	0000017e 	andeq	r0, r0, lr, ror r1
    1ea4:	20001514 	andcs	r1, r0, r4, lsl r5
    1ea8:	00000094 	muleq	r0, r4, r0
    1eac:	07469c01 	strbeq	r9, [r6, -r1, lsl #24]
    1eb0:	8f1b0000 	svchi	0x001b0000
    1eb4:	01000010 	tsteq	r0, r0, lsl r0
    1eb8:	00017e7b 	andeq	r7, r1, fp, ror lr
    1ebc:	6f910200 	svcvs	0x00910200
    1ec0:	0076721e 	rsbseq	r7, r6, lr, lsl r2
    1ec4:	005b8401 	subseq	r8, fp, r1, lsl #8
    1ec8:	91020000 	mrsls	r0, (UNDEF: 2)
    1ecc:	aa1d0077 	bge	7420b0 <startup-0x1f8bdf50>
    1ed0:	0100000e 	tsteq	r0, lr
    1ed4:	0014a665 	andseq	sl, r4, r5, ror #12
    1ed8:	00006e20 	andeq	r6, r0, r0, lsr #28
    1edc:	689c0100 	ldmvs	ip, {r8}
    1ee0:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    1ee4:	66010063 	strvs	r0, [r1], -r3, rrx
    1ee8:	0000017e 	andeq	r0, r0, lr, ror r1
    1eec:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1ef0:	000e981d 	andeq	r9, lr, sp, lsl r8
    1ef4:	40500100 	subsmi	r0, r0, r0, lsl #2
    1ef8:	66200014 			; <UNDEFINED> instruction: 0x66200014
    1efc:	01000000 	mrseq	r0, (UNDEF: 0)
    1f00:	00078c9c 	muleq	r7, ip, ip
    1f04:	108f1b00 	addne	r1, pc, r0, lsl #22
    1f08:	50010000 	andpl	r0, r1, r0
    1f0c:	0000017e 	andeq	r0, r0, lr, ror r1
    1f10:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1f14:	000d9122 	andeq	r9, sp, r2, lsr #2
    1f18:	e8490100 	stmda	r9, {r8}^
    1f1c:	58200013 	stmdapl	r0!, {r0, r1, r4}
    1f20:	01000000 	mrseq	r0, (UNDEF: 0)
    1f24:	0007ba9c 	muleq	r7, ip, sl
    1f28:	00781a00 	rsbseq	r1, r8, r0, lsl #20
    1f2c:	017e4901 	cmneq	lr, r1, lsl #18
    1f30:	91020000 	mrsls	r0, (UNDEF: 2)
    1f34:	00631e6f 	rsbeq	r1, r3, pc, ror #28
    1f38:	017e4a01 	cmneq	lr, r1, lsl #20
    1f3c:	91020000 	mrsls	r0, (UNDEF: 2)
    1f40:	05220077 	streq	r0, [r2, #-119]!	; 0xffffff89
    1f44:	0100000e 	tsteq	r0, lr
    1f48:	00139841 	andseq	r9, r3, r1, asr #16
    1f4c:	00005020 	andeq	r5, r0, r0, lsr #32
    1f50:	e89c0100 	ldm	ip, {r8}
    1f54:	1a000007 	bne	1f78 <startup-0x1fffe088>
    1f58:	41010078 	tstmi	r1, r8, ror r0
    1f5c:	0000017e 	andeq	r0, r0, lr, ror r1
    1f60:	1e6f9102 	lgnnee	f1, f2
    1f64:	42010063 	andmi	r0, r1, #99	; 0x63
    1f68:	0000017e 	andeq	r0, r0, lr, ror r1
    1f6c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1f70:	000e6d1f 	andeq	r6, lr, pc, lsl sp
    1f74:	683a0100 	ldmdavs	sl!, {r8}
    1f78:	30200013 	eorcc	r0, r0, r3, lsl r0
    1f7c:	01000000 	mrseq	r0, (UNDEF: 0)
    1f80:	0d161f9c 	ldceq	15, cr1, [r6, #-624]	; 0xfffffd90
    1f84:	37010000 	strcc	r0, [r1, -r0]
    1f88:	20001350 	andcs	r1, r0, r0, asr r3
    1f8c:	00000018 	andeq	r0, r0, r8, lsl r0
    1f90:	bd199c01 	ldclt	12, cr9, [r9, #-4]
    1f94:	0100000e 	tsteq	r0, lr
    1f98:	00131e32 	andseq	r1, r3, r2, lsr lr
    1f9c:	00003220 	andeq	r3, r0, r0, lsr #4
    1fa0:	3a9c0100 	bcc	fe7023a8 <firstTime.4093+0xde6fbbe0>
    1fa4:	1b000008 	blne	1fcc <startup-0x1fffe034>
    1fa8:	00000ccf 	andeq	r0, r0, pc, asr #25
    1fac:	05203201 	streq	r3, [r0, #-513]!	; 0xfffffdff
    1fb0:	91020000 	mrsls	r0, (UNDEF: 2)
    1fb4:	00691e6c 	rsbeq	r1, r9, ip, ror #28
    1fb8:	012e3301 			; <UNDEFINED> instruction: 0x012e3301
    1fbc:	91020000 	mrsls	r0, (UNDEF: 2)
    1fc0:	461d0074 			; <UNDEFINED> instruction: 0x461d0074
    1fc4:	0100000d 	tsteq	r0, sp
    1fc8:	0012f821 	andseq	pc, r2, r1, lsr #16
    1fcc:	00002620 	andeq	r2, r0, r0, lsr #12
    1fd0:	5d9c0100 	ldfpls	f0, [ip]
    1fd4:	1a000008 	bne	1ffc <startup-0x1fffe004>
    1fd8:	0100736d 	tsteq	r0, sp, ror #6
    1fdc:	00004e21 	andeq	r4, r0, r1, lsr #28
    1fe0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1fe4:	0cf41d00 	ldcleq	13, cr1, [r4]
    1fe8:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    1fec:	200012cc 	andcs	r1, r0, ip, asr #5
    1ff0:	0000002c 	andeq	r0, r0, ip, lsr #32
    1ff4:	08809c01 	stmeq	r0, {r0, sl, fp, ip, pc}
    1ff8:	751a0000 	ldrvc	r0, [sl, #-0]
    1ffc:	18010073 	stmdane	r1, {r0, r1, r4, r5, r6}
    2000:	0000004e 	andeq	r0, r0, lr, asr #32
    2004:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2008:	000d6923 	andeq	r6, sp, r3, lsr #18
    200c:	880e0100 	stmdahi	lr, {r8}
    2010:	44200012 	strtmi	r0, [r0], #-18	; 0xffffffee
    2014:	01000000 	mrseq	r0, (UNDEF: 0)
    2018:	0e1a239c 	mrceq	3, 0, r2, cr10, cr12, {4}
    201c:	04010000 	streq	r0, [r1], #-0
    2020:	20001244 	andcs	r1, r0, r4, asr #4
    2024:	00000044 	andeq	r0, r0, r4, asr #32
    2028:	00009c01 	andeq	r9, r0, r1, lsl #24
    202c:	04000001 	streq	r0, [r0], #-1
    2030:	00071e00 	andeq	r1, r7, r0, lsl #28
    2034:	70010400 	andvc	r0, r1, r0, lsl #8
    2038:	0c000000 	stceq	0, cr0, [r0], {-0}
    203c:	00000f05 	andeq	r0, r0, r5, lsl #30
    2040:	20002088 	andcs	r2, r0, r8, lsl #1
    2044:	00000028 	andeq	r0, r0, r8, lsr #32
    2048:	00000a57 	andeq	r0, r0, r7, asr sl
    204c:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    2050:	0000004e 	andeq	r0, r0, lr, asr #32
    2054:	0002c903 	andeq	ip, r2, r3, lsl #18
    2058:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    205c:	00000000 	andeq	r0, r0, r0
    2060:	0005e603 	andeq	lr, r5, r3, lsl #12
    2064:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    2068:	04000000 	streq	r0, [r0], #-0
    206c:	000de603 	andeq	lr, sp, r3, lsl #12
    2070:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    2074:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2078:	07040400 	streq	r0, [r4, -r0, lsl #8]
    207c:	000002ed 	andeq	r0, r0, sp, ror #5
    2080:	005b0405 	subseq	r0, fp, r5, lsl #8
    2084:	01040000 	mrseq	r0, (UNDEF: 4)
    2088:	00040408 	andeq	r0, r4, r8, lsl #8
    208c:	0f380600 	svceq	0x00380600
    2090:	0a020000 	beq	82098 <startup-0x1ff7df68>
    2094:	00000021 	andeq	r0, r0, r1, lsr #32
    2098:	00001607 	andeq	r1, r0, r7, lsl #12
    209c:	06030c00 	streq	r0, [r3], -r0, lsl #24
    20a0:	0000009e 	muleq	r0, lr, r0
    20a4:	0004da03 	andeq	sp, r4, r3, lsl #20
    20a8:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    20ac:	00000000 	andeq	r0, r0, r0
    20b0:	00001d03 	andeq	r1, r0, r3, lsl #26
    20b4:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    20b8:	04000000 	streq	r0, [r0], #-0
    20bc:	00001203 	andeq	r1, r0, r3, lsl #4
    20c0:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    20c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    20c8:	62040500 	andvs	r0, r4, #0, 10
    20cc:	06000000 	streq	r0, [r0], -r0
    20d0:	00000c15 	andeq	r0, r0, r5, lsl ip
    20d4:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    20d8:	fa080000 	blx	2020e0 <startup-0x1fdfdf20>
    20dc:	0100000e 	tsteq	r0, lr
    20e0:	00208803 	eoreq	r8, r0, r3, lsl #16
    20e4:	00002820 	andeq	r2, r0, r0, lsr #16
    20e8:	fd9c0100 	ldc2	1, cr0, [ip]
    20ec:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    20f0:	00000eff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    20f4:	00fd0301 	rscseq	r0, sp, r1, lsl #6
    20f8:	91020000 	mrsls	r0, (UNDEF: 2)
    20fc:	04da0974 	ldrbeq	r0, [sl], #2420	; 0x974
    2100:	03010000 	movweq	r0, #4096	; 0x1000
    2104:	0000009e 	muleq	r0, lr, r0
    2108:	09709102 	ldmdbeq	r0!, {r1, r8, ip, pc}^
    210c:	0000001d 	andeq	r0, r0, sp, lsl r0
    2110:	009e0301 	addseq	r0, lr, r1, lsl #6
    2114:	91020000 	mrsls	r0, (UNDEF: 2)
    2118:	0012096c 	andseq	r0, r2, ip, ror #18
    211c:	03010000 	movweq	r0, #4096	; 0x1000
    2120:	0000009e 	muleq	r0, lr, r0
    2124:	00689102 	rsbeq	r9, r8, r2, lsl #2
    2128:	00a40405 	adceq	r0, r4, r5, lsl #8
    212c:	c3000000 	movwgt	r0, #0
    2130:	04000000 	streq	r0, [r0], #-0
    2134:	0007a500 	andeq	sl, r7, r0, lsl #10
    2138:	70010400 	andvc	r0, r1, r0, lsl #8
    213c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2140:	00000f3f 	andeq	r0, r0, pc, lsr pc
    2144:	200020b0 	strhcs	r2, [r0], -r0
    2148:	00000028 	andeq	r0, r0, r8, lsr #32
    214c:	00000acd 	andeq	r0, r0, sp, asr #21
    2150:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    2154:	0000004e 	andeq	r0, r0, lr, asr #32
    2158:	0002c903 	andeq	ip, r2, r3, lsl #18
    215c:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    2160:	00000000 	andeq	r0, r0, r0
    2164:	0005e603 	andeq	lr, r5, r3, lsl #12
    2168:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    216c:	04000000 	streq	r0, [r0], #-0
    2170:	000de603 	andeq	lr, sp, r3, lsl #12
    2174:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    2178:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    217c:	07040400 	streq	r0, [r4, -r0, lsl #8]
    2180:	000002ed 	andeq	r0, r0, sp, ror #5
    2184:	005b0405 	subseq	r0, fp, r5, lsl #8
    2188:	01040000 	mrseq	r0, (UNDEF: 4)
    218c:	00040408 	andeq	r0, r4, r8, lsl #8
    2190:	0f380600 	svceq	0x00380600
    2194:	0a020000 	beq	8219c <startup-0x1ff7de64>
    2198:	00000021 	andeq	r0, r0, r1, lsr #32
    219c:	000f3307 	andeq	r3, pc, r7, lsl #6
    21a0:	b0030100 	andlt	r0, r3, r0, lsl #2
    21a4:	28200020 	stmdacs	r0!, {r5}
    21a8:	01000000 	mrseq	r0, (UNDEF: 0)
    21ac:	0000b99c 	muleq	r0, ip, r9
    21b0:	00730800 	rsbseq	r0, r3, r0, lsl #16
    21b4:	00b90301 	adcseq	r0, r9, r1, lsl #6
    21b8:	91020000 	mrsls	r0, (UNDEF: 2)
    21bc:	0de60974 			; <UNDEFINED> instruction: 0x0de60974
    21c0:	03010000 	movweq	r0, #4096	; 0x1000
    21c4:	00000055 	andeq	r0, r0, r5, asr r0
    21c8:	09709102 	ldmdbeq	r0!, {r1, r8, ip, pc}^
    21cc:	000002c9 	andeq	r0, r0, r9, asr #5
    21d0:	00bf0301 	adcseq	r0, pc, r1, lsl #6
    21d4:	91020000 	mrsls	r0, (UNDEF: 2)
    21d8:	05e6096c 	strbeq	r0, [r6, #2412]!	; 0x96c
    21dc:	03010000 	movweq	r0, #4096	; 0x1000
    21e0:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    21e4:	00689102 	rsbeq	r9, r8, r2, lsl #2
    21e8:	00620405 	rsbeq	r0, r2, r5, lsl #8
    21ec:	040a0000 	streq	r0, [sl], #-0
    21f0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    21f4:	01350000 	teqeq	r5, r0
    21f8:	00040000 	andeq	r0, r4, r0
    21fc:	00000837 	andeq	r0, r0, r7, lsr r8
    2200:	00700104 	rsbseq	r0, r0, r4, lsl #2
    2204:	a50c0000 	strge	r0, [ip, #-0]
    2208:	d800000f 	stmdale	r0, {r0, r1, r2, r3}
    220c:	60200020 	eorvs	r0, r0, r0, lsr #32
    2210:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    2214:	0200000b 	andeq	r0, r0, #11
    2218:	ae130218 	mrcge	2, 0, r0, cr3, cr8, {0}
    221c:	03000000 	movweq	r0, #0
    2220:	00000f6e 	andeq	r0, r0, lr, ror #30
    2224:	00ae1402 	adceq	r1, lr, r2, lsl #8
    2228:	03000000 	movweq	r0, #0
    222c:	00000f87 	andeq	r0, r0, r7, lsl #31
    2230:	00b51502 	adcseq	r1, r5, r2, lsl #10
    2234:	03040000 	movweq	r0, #16384	; 0x4000
    2238:	00000fd2 	ldrdeq	r0, [r0], -r2
    223c:	00b51602 	adcseq	r1, r5, r2, lsl #12
    2240:	03060000 	movweq	r0, #24576	; 0x6000
    2244:	00000ff4 	strdeq	r0, [r0], -r4
    2248:	00ae1702 	adceq	r1, lr, r2, lsl #14
    224c:	03080000 	movweq	r0, #32768	; 0x8000
    2250:	00000f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    2254:	00ae1802 	adceq	r1, lr, r2, lsl #16
    2258:	030c0000 	movweq	r0, #49152	; 0xc000
    225c:	00001004 	andeq	r1, r0, r4
    2260:	00bc1902 	adcseq	r1, ip, r2, lsl #18
    2264:	03100000 	tsteq	r0, #0
    2268:	00000ffc 	strdeq	r0, [r0], -ip
    226c:	00bc1a02 	adcseq	r1, ip, r2, lsl #20
    2270:	03110000 	tsteq	r1, #0
    2274:	00000f99 	muleq	r0, r9, pc	; <UNPREDICTABLE>
    2278:	00b51b02 	adcseq	r1, r5, r2, lsl #22
    227c:	03120000 	tsteq	r2, #0
    2280:	00000fed 	andeq	r0, r0, sp, ror #31
    2284:	00bc1c02 	adcseq	r1, ip, r2, lsl #24
    2288:	03140000 	tsteq	r4, #0
    228c:	00000f7f 	andeq	r0, r0, pc, ror pc
    2290:	00bc1d02 	adcseq	r1, ip, r2, lsl #26
    2294:	03150000 	tsteq	r5, #0
    2298:	0000100b 	andeq	r1, r0, fp
    229c:	00b51e02 	adcseq	r1, r5, r2, lsl #28
    22a0:	00160000 	andseq	r0, r6, r0
    22a4:	ed070404 	cfstrs	mvf0, [r7, #-16]
    22a8:	04000002 	streq	r0, [r0], #-2
    22ac:	02e70702 	rsceq	r0, r7, #524288	; 0x80000
    22b0:	01040000 	mrseq	r0, (UNDEF: 4)
    22b4:	00040408 	andeq	r0, r4, r8, lsl #8
    22b8:	0f8e0500 	svceq	0x008e0500
    22bc:	1f020000 	svcne	0x00020000
    22c0:	00000021 	andeq	r0, r0, r1, lsr #32
    22c4:	000fdd06 	andeq	sp, pc, r6, lsl #26
    22c8:	040d0100 	streq	r0, [sp], #-256	; 0xffffff00
    22cc:	04000001 	streq	r0, [r0], #-1
    22d0:	34200021 	strtcc	r0, [r0], #-33	; 0xffffffdf
    22d4:	01000000 	mrseq	r0, (UNDEF: 0)
    22d8:	0001049c 	muleq	r1, ip, r4
    22dc:	69620700 	stmdbvs	r2!, {r8, r9, sl}^
    22e0:	0d010074 	stceq	0, cr0, [r1, #-464]	; 0xfffffe30
    22e4:	00000104 	andeq	r0, r0, r4, lsl #2
    22e8:	08649102 	stmdaeq	r4!, {r1, r8, ip, pc}^
    22ec:	004c4944 	subeq	r4, ip, r4, asr #18
    22f0:	010b0e01 	tsteq	fp, r1, lsl #28
    22f4:	91020000 	mrsls	r0, (UNDEF: 2)
    22f8:	0409006f 	streq	r0, [r9], #-111	; 0xffffff91
    22fc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2300:	08010400 	stmdaeq	r1, {sl}
    2304:	0000040d 	andeq	r0, r0, sp, lsl #8
    2308:	0010170a 	andseq	r1, r0, sl, lsl #14
    230c:	0b080100 	bleq	202714 <startup-0x1fdfd8ec>
    2310:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
    2314:	14200020 	strtne	r0, [r0], #-32	; 0xffffffe0
    2318:	01000000 	mrseq	r0, (UNDEF: 0)
    231c:	0f740b9c 	svceq	0x00740b9c
    2320:	04010000 	streq	r0, [r1], #-0
    2324:	200020d8 	ldrdcs	r2, [r0], -r8
    2328:	00000018 	andeq	r0, r0, r8, lsl r0
    232c:	ed009c01 	stc	12, cr9, [r0, #-4]
    2330:	04000004 	streq	r0, [r0], #-4
    2334:	0008f400 	andeq	pc, r8, r0, lsl #8
    2338:	70010400 	andvc	r0, r1, r0, lsl #8
    233c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2340:	0000115c 	andeq	r1, r0, ip, asr r1
    2344:	20002138 	andcs	r2, r0, r8, lsr r1
    2348:	00000520 	andeq	r0, r0, r0, lsr #10
    234c:	00000ba8 	andeq	r0, r0, r8, lsr #23
    2350:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    2354:	0000004e 	andeq	r0, r0, lr, asr #32
    2358:	0002c903 	andeq	ip, r2, r3, lsl #18
    235c:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    2360:	00000000 	andeq	r0, r0, r0
    2364:	0005e603 	andeq	lr, r5, r3, lsl #12
    2368:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    236c:	04000000 	streq	r0, [r0], #-0
    2370:	000de603 	andeq	lr, sp, r3, lsl #12
    2374:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    2378:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    237c:	07040400 	streq	r0, [r4, -r0, lsl #8]
    2380:	000002ed 	andeq	r0, r0, sp, ror #5
    2384:	005b0405 	subseq	r0, fp, r5, lsl #8
    2388:	01040000 	mrseq	r0, (UNDEF: 4)
    238c:	00040408 	andeq	r0, r4, r8, lsl #8
    2390:	0f380600 	svceq	0x00380600
    2394:	0a020000 	beq	8239c <startup-0x1ff7dc64>
    2398:	00000021 	andeq	r0, r0, r1, lsr #32
    239c:	00001607 	andeq	r1, r0, r7, lsl #12
    23a0:	06030c00 	streq	r0, [r3], -r0, lsl #24
    23a4:	0000009e 	muleq	r0, lr, r0
    23a8:	0004da03 	andeq	sp, r4, r3, lsl #20
    23ac:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    23b0:	00000000 	andeq	r0, r0, r0
    23b4:	00001d03 	andeq	r1, r0, r3, lsl #26
    23b8:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    23bc:	04000000 	streq	r0, [r0], #-0
    23c0:	00001203 	andeq	r1, r0, r3, lsl #4
    23c4:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    23c8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    23cc:	62040500 	andvs	r0, r4, #0, 10
    23d0:	06000000 	streq	r0, [r0], -r0
    23d4:	00000c15 	andeq	r0, r0, r5, lsl ip
    23d8:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    23dc:	bb070000 	bllt	1c23e4 <startup-0x1fe3dc1c>
    23e0:	24000005 	strcs	r0, [r0], #-5
    23e4:	01280604 			; <UNDEFINED> instruction: 0x01280604
    23e8:	a1030000 	mrsge	r0, (UNDEF: 3)
    23ec:	04000003 	streq	r0, [r0], #-3
    23f0:	00012807 	andeq	r2, r1, r7, lsl #16
    23f4:	c7030000 	strgt	r0, [r3, -r0]
    23f8:	04000005 	streq	r0, [r0], #-5
    23fc:	00012e08 	andeq	r2, r1, r8, lsl #28
    2400:	3f030400 	svccc	0x00030400
    2404:	04000005 	streq	r0, [r0], #-5
    2408:	00012e09 	andeq	r2, r1, r9, lsl #28
    240c:	5a030800 	bpl	c4414 <startup-0x1ff3bbec>
    2410:	04000005 	streq	r0, [r0], #-5
    2414:	0001460c 	andeq	r4, r1, ip, lsl #12
    2418:	c2030c00 	andgt	r0, r3, #0, 24
    241c:	04000002 	streq	r0, [r0], #-2
    2420:	0001460d 	andeq	r4, r1, sp, lsl #12
    2424:	b3031000 	movwlt	r1, #12288	; 0x3000
    2428:	04000003 	streq	r0, [r0], #-3
    242c:	00012e10 	andeq	r2, r1, r0, lsl lr
    2430:	41031400 	tstmi	r3, r0, lsl #8
    2434:	04000000 	streq	r0, [r0], #-0
    2438:	00012e11 	andeq	r2, r1, r1, lsl lr
    243c:	32031800 	andcc	r1, r3, #0, 16
    2440:	04000003 	streq	r0, [r0], #-3
    2444:	00012e12 	andeq	r2, r1, r2, lsl lr
    2448:	42031c00 	andmi	r1, r3, #0, 24
    244c:	04000003 	streq	r0, [r0], #-3
    2450:	00012e13 	andeq	r2, r1, r3, lsl lr
    2454:	05002000 	streq	r2, [r0, #-0]
    2458:	0000a404 	andeq	sl, r0, r4, lsl #8
    245c:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    2460:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2464:	00014009 	andeq	r4, r1, r9
    2468:	01400a00 	cmpeq	r0, r0, lsl #20
    246c:	05000000 	streq	r0, [r0, #-0]
    2470:	0000af04 	andeq	sl, r0, r4, lsl #30
    2474:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    2478:	06000001 	streq	r0, [r0], -r1
    247c:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    2480:	00af1504 	adceq	r1, pc, r4, lsl #10
    2484:	620b0000 	andvs	r0, fp, #0
    2488:	62000001 	andvs	r0, r0, #1
    248c:	0c000001 	stceq	0, cr0, [r0], {1}
    2490:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    2494:	0d000001 	stceq	0, cr0, [r0, #-4]
    2498:	00000487 	andeq	r0, r0, r7, lsl #9
    249c:	01571c04 	cmpeq	r7, r4, lsl #24
    24a0:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
    24a4:	04000003 	streq	r0, [r0], #-3
    24a8:	00012e1d 	andeq	r2, r1, sp, lsl lr
    24ac:	05850600 	streq	r0, [r5, #1536]	; 0x600
    24b0:	24050000 	strcs	r0, [r5], #-0
    24b4:	0000005b 	andeq	r0, r0, fp, asr r0
    24b8:	00017e0b 	andeq	r7, r1, fp, lsl #28
    24bc:	00019a00 	andeq	r9, r1, r0, lsl #20
    24c0:	019a0e00 	orrseq	r0, sl, r0, lsl #28
    24c4:	03ff0000 	mvnseq	r0, #0
    24c8:	07040400 	streq	r0, [r4, -r0, lsl #8]
    24cc:	0000035f 	andeq	r0, r0, pc, asr r3
    24d0:	000d1c0d 	andeq	r1, sp, sp, lsl #24
    24d4:	892b0500 	stmdbhi	fp!, {r8, sl}
    24d8:	0d000001 	stceq	0, cr0, [r0, #-4]
    24dc:	000001eb 	andeq	r0, r0, fp, ror #3
    24e0:	01892c05 	orreq	r2, r9, r5, lsl #24
    24e4:	120d0000 	andne	r0, sp, #0
    24e8:	05000004 	streq	r0, [r0, #-4]
    24ec:	0001892d 	andeq	r8, r1, sp, lsr #18
    24f0:	02cf0d00 	sbceq	r0, pc, #0, 26
    24f4:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    24f8:	00000189 	andeq	r0, r0, r9, lsl #3
    24fc:	00025f0d 	andeq	r5, r2, sp, lsl #30
    2500:	892f0500 	stmdbhi	pc!, {r8, sl}	; <UNPREDICTABLE>
    2504:	0d000001 	stceq	0, cr0, [r0, #-4]
    2508:	0000059d 	muleq	r0, sp, r5
    250c:	01893005 	orreq	r3, r9, r5
    2510:	8d0d0000 	stchi	0, cr0, [sp, #-0]
    2514:	05000005 	streq	r0, [r0, #-5]
    2518:	00018931 	andeq	r8, r1, r1, lsr r9
    251c:	10e20f00 	rscne	r0, r2, r0, lsl #30
    2520:	e4010000 	str	r0, [r1], #-0
    2524:	200025d4 	ldrdcs	r2, [r0], -r4
    2528:	00000084 	andeq	r0, r0, r4, lsl #1
    252c:	022c9c01 	eoreq	r9, ip, #256	; 0x100
    2530:	73100000 	tstvc	r0, #0
    2534:	2ce50100 	stfcse	f0, [r5]
    2538:	02000002 	andeq	r0, r0, #2
    253c:	bd116c91 	ldclt	12, cr6, [r1, #-580]	; 0xfffffdbc
    2540:	01000010 	tsteq	r0, r0, lsl r0
    2544:	000239e6 	andeq	r3, r2, r6, ror #19
    2548:	5c910200 	lfmpl	f0, 4, [r1], {0}
    254c:	0010c311 	andseq	ip, r0, r1, lsl r3
    2550:	49e70100 	stmibmi	r7!, {r8}^
    2554:	02000002 	andeq	r0, r0, #2
    2558:	05004891 	streq	r4, [r0, #-2193]	; 0xfffff76f
    255c:	00023204 	andeq	r3, r2, r4, lsl #4
    2560:	08010400 	stmdaeq	r1, {sl}
    2564:	0000040d 	andeq	r0, r0, sp, lsl #8
    2568:	0002320b 	andeq	r3, r2, fp, lsl #4
    256c:	00024900 	andeq	r4, r2, r0, lsl #18
    2570:	019a1200 	orrseq	r1, sl, r0, lsl #4
    2574:	000c0000 	andeq	r0, ip, r0
    2578:	0002320b 	andeq	r3, r2, fp, lsl #4
    257c:	00025900 	andeq	r5, r2, r0, lsl #18
    2580:	019a1200 	orrseq	r1, sl, r0, lsl #4
    2584:	00130000 	andseq	r0, r3, r0
    2588:	0010730f 	andseq	r7, r0, pc, lsl #6
    258c:	46cc0100 	strbmi	r0, [ip], r0, lsl #2
    2590:	8e200025 	cdphi	0, 2, cr0, cr0, cr5, {1}
    2594:	01000000 	mrseq	r0, (UNDEF: 0)
    2598:	0002b39c 	muleq	r2, ip, r3
    259c:	11ab1300 			; <UNDEFINED> instruction: 0x11ab1300
    25a0:	cc010000 	stcgt	0, cr0, [r1], {-0}
    25a4:	0000022c 	andeq	r0, r0, ip, lsr #4
    25a8:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    25ac:	00000223 	andeq	r0, r0, r3, lsr #4
    25b0:	022ccc01 	eoreq	ip, ip, #256	; 0x100
    25b4:	91020000 	mrsls	r0, (UNDEF: 2)
    25b8:	11551368 	cmpne	r5, r8, ror #6
    25bc:	cc010000 	stcgt	0, cr0, [r1], {-0}
    25c0:	0000012e 	andeq	r0, r0, lr, lsr #2
    25c4:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
    25c8:	00001031 	andeq	r1, r0, r1, lsr r0
    25cc:	012ecc01 			; <UNDEFINED> instruction: 0x012ecc01
    25d0:	91020000 	mrsls	r0, (UNDEF: 2)
    25d4:	00691060 	rsbeq	r1, r9, r0, rrx
    25d8:	012ed001 			; <UNDEFINED> instruction: 0x012ed001
    25dc:	91020000 	mrsls	r0, (UNDEF: 2)
    25e0:	140f0074 	strne	r0, [pc], #-116	; 25e8 <startup-0x1fffda18>
    25e4:	01000011 	tsteq	r0, r1, lsl r0
    25e8:	0024e8bd 	strhteq	lr, [r4], -sp
    25ec:	00005e20 	andeq	r5, r0, r0, lsr #28
    25f0:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    25f4:	13000002 	movwne	r0, #2
    25f8:	000011ab 	andeq	r1, r0, fp, lsr #3
    25fc:	022cbd01 	eoreq	fp, ip, #1, 26	; 0x40
    2600:	91020000 	mrsls	r0, (UNDEF: 2)
    2604:	02231374 	eoreq	r1, r3, #116, 6	; 0xd0000001
    2608:	bd010000 	stclt	0, cr0, [r1, #-0]
    260c:	0000022c 	andeq	r0, r0, ip, lsr #4
    2610:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2614:	0010670f 	andseq	r6, r0, pc, lsl #14
    2618:	7ead0100 	fdvvce	f0, f5, f0
    261c:	6a200024 	bvs	8026b4 <startup-0x1f7fd94c>
    2620:	01000000 	mrseq	r0, (UNDEF: 0)
    2624:	0003159c 	muleq	r3, ip, r5
    2628:	00731000 	rsbseq	r1, r3, r0
    262c:	022cae01 	eoreq	sl, ip, #1, 28
    2630:	91020000 	mrsls	r0, (UNDEF: 2)
    2634:	0da2116c 	stfeqs	f1, [r2, #432]!	; 0x1b0
    2638:	af010000 	svcge	0x00010000
    263c:	00000315 	andeq	r0, r0, r5, lsl r3
    2640:	00549102 	subseq	r9, r4, r2, lsl #2
    2644:	0002320b 	andeq	r3, r2, fp, lsl #4
    2648:	00032500 	andeq	r2, r3, r0, lsl #10
    264c:	019a1200 	orrseq	r1, sl, r0, lsl #4
    2650:	00140000 	andseq	r0, r4, r0
    2654:	00104814 	andseq	r4, r0, r4, lsl r8
    2658:	6ca80100 	stfvss	f0, [r8]
    265c:	12200024 	eorne	r0, r0, #36	; 0x24
    2660:	01000000 	mrseq	r0, (UNDEF: 0)
    2664:	1020159c 	mlane	r0, ip, r5, r1
    2668:	9f010000 	svcls	0x00010000
    266c:	20002452 	andcs	r2, r0, r2, asr r4
    2670:	0000001a 	andeq	r0, r0, sl, lsl r0
    2674:	55149c01 	ldrpl	r9, [r4, #-3073]	; 0xfffff3ff
    2678:	01000010 	tsteq	r0, r0, lsl r0
    267c:	0023b883 	eoreq	fp, r3, r3, lsl #17
    2680:	00009a20 	andeq	r9, r0, r0, lsr #20
    2684:	0f9c0100 	svceq	0x009c0100
    2688:	00001120 	andeq	r1, r0, r0, lsr #2
    268c:	23687b01 	cmncs	r8, #1024	; 0x400
    2690:	00502000 	subseq	r2, r0, r0
    2694:	9c010000 	stcls	0, cr0, [r1], {-0}
    2698:	00000398 	muleq	r0, r8, r3
    269c:	776f7216 			; <UNDEFINED> instruction: 0x776f7216
    26a0:	5b7b0100 	blpl	1ec2aa8 <startup-0x1e13d558>
    26a4:	02000000 	andeq	r0, r0, #0
    26a8:	60136f91 	mulsvs	r3, r1, pc	; <UNPREDICTABLE>
    26ac:	01000010 	tsteq	r0, r0, lsl r0
    26b0:	00005b7b 	andeq	r5, r0, fp, ror fp
    26b4:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    26b8:	0010c911 	andseq	ip, r0, r1, lsl r9
    26bc:	5b7c0100 	blpl	1f02ac4 <startup-0x1e0fd53c>
    26c0:	02000000 	andeq	r0, r0, #0
    26c4:	0f007791 	svceq	0x00007791
    26c8:	00001144 	andeq	r1, r0, r4, asr #2
    26cc:	232c7401 			; <UNDEFINED> instruction: 0x232c7401
    26d0:	003c2000 	eorseq	r2, ip, r0
    26d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    26d8:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    26dc:	01006316 	tsteq	r0, r6, lsl r3
    26e0:	00005b74 	andeq	r5, r0, r4, ror fp
    26e4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    26e8:	10841700 	addne	r1, r4, r0, lsl #14
    26ec:	6a010000 	bvs	426f4 <startup-0x1ffbd90c>
    26f0:	0000005b 	andeq	r0, r0, fp, asr r0
    26f4:	200022f8 	strdcs	r2, [r0], -r8
    26f8:	00000034 	andeq	r0, r0, r4, lsr r0
    26fc:	03e09c01 	mvneq	r9, #256	; 0x100
    2700:	63100000 	tstvs	r0, #0
    2704:	5b6b0100 	blpl	1ac2b0c <startup-0x1e53d4f4>
    2708:	02000000 	andeq	r0, r0, #0
    270c:	0f007791 	svceq	0x00007791
    2710:	0000112d 	andeq	r1, r0, sp, lsr #2
    2714:	22c86301 	sbccs	r6, r8, #67108864	; 0x4000000
    2718:	00302000 	eorseq	r2, r0, r0
    271c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2720:	00000402 	andeq	r0, r0, r2, lsl #8
    2724:	01006316 	tsteq	r0, r6, lsl r3
    2728:	00005b63 	andeq	r5, r0, r3, ror #22
    272c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2730:	10381700 	eorsne	r1, r8, r0, lsl #14
    2734:	57010000 	strpl	r0, [r1, -r0]
    2738:	0000005b 	andeq	r0, r0, fp, asr r0
    273c:	20002274 	andcs	r2, r0, r4, ror r2
    2740:	00000054 	andeq	r0, r0, r4, asr r0
    2744:	04299c01 	strteq	r9, [r9], #-3073	; 0xfffff3ff
    2748:	72100000 	andsvc	r0, r0, #0
    274c:	5c010076 	stcpl	0, cr0, [r1], {118}	; 0x76
    2750:	0000005b 	andeq	r0, r0, fp, asr r0
    2754:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    2758:	0010ed17 	andseq	lr, r0, r7, lsl sp
    275c:	5b4b0100 	blpl	12c2b64 <startup-0x1ed3d49c>
    2760:	20000000 	andcs	r0, r0, r0
    2764:	54200022 	strtpl	r0, [r0], #-34	; 0xffffffde
    2768:	01000000 	mrseq	r0, (UNDEF: 0)
    276c:	0004509c 	muleq	r4, ip, r0
    2770:	76721000 	ldrbtvc	r1, [r2], -r0
    2774:	5b500100 	blpl	1402b7c <startup-0x1ebfd484>
    2778:	02000000 	andeq	r0, r0, #0
    277c:	0f006f91 	svceq	0x00006f91
    2780:	000010d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    2784:	21f64501 	mvnscs	r4, r1, lsl #10
    2788:	002a2000 	eoreq	r2, sl, r0
    278c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2790:	00000474 	andeq	r0, r0, r4, ror r4
    2794:	000de613 	andeq	lr, sp, r3, lsl r6
    2798:	5b450100 	blpl	1142ba0 <startup-0x1eebd460>
    279c:	02000000 	andeq	r0, r0, #0
    27a0:	0f007791 	svceq	0x00007791
    27a4:	000010ad 	andeq	r1, r0, sp, lsr #1
    27a8:	21cc3f01 	biccs	r3, ip, r1, lsl #30
    27ac:	002a2000 	eoreq	r2, sl, r0
    27b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    27b4:	00000498 	muleq	r0, r8, r4
    27b8:	000d0e13 	andeq	r0, sp, r3, lsl lr
    27bc:	5b3f0100 	blpl	fc2bc4 <startup-0x1f03d43c>
    27c0:	02000000 	andeq	r0, r0, #0
    27c4:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    27c8:	000010ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    27cc:	217c3701 	cmncs	ip, r1, lsl #14
    27d0:	00502000 	subseq	r2, r0, r0
    27d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    27d8:	000004c6 	andeq	r0, r0, r6, asr #9
    27dc:	01007816 	tsteq	r0, r6, lsl r8
    27e0:	00005b37 	andeq	r5, r0, r7, lsr fp
    27e4:	6f910200 	svcvs	0x00910200
    27e8:	01006310 	tsteq	r0, r0, lsl r3
    27ec:	00005b39 	andeq	r5, r0, r9, lsr fp
    27f0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    27f4:	109a1900 	addsne	r1, sl, r0, lsl #18
    27f8:	2f010000 	svccs	0x00010000
    27fc:	20002138 	andcs	r2, r0, r8, lsr r1
    2800:	00000044 	andeq	r0, r0, r4, asr #32
    2804:	78169c01 	ldmdavc	r6, {r0, sl, fp, ip, pc}
    2808:	5b2f0100 	blpl	bc2c10 <startup-0x1f43d3f0>
    280c:	02000000 	andeq	r0, r0, #0
    2810:	63106f91 	tstvs	r0, #580	; 0x244
    2814:	5b310100 	blpl	c42c1c <startup-0x1f3bd3e4>
    2818:	02000000 	andeq	r0, r0, #0
    281c:	00007791 	muleq	r0, r1, r7
    2820:	00000140 	andeq	r0, r0, r0, asr #2
    2824:	0a720004 	beq	1c8283c <startup-0x1e37d7c4>
    2828:	01040000 	mrseq	r0, (UNDEF: 4)
    282c:	00000070 	andeq	r0, r0, r0, ror r0
    2830:	0011b00c 	andseq	fp, r1, ip
    2834:	00265800 	eoreq	r5, r6, r0, lsl #16
    2838:	00009420 	andeq	r9, r0, r0, lsr #8
    283c:	000d0600 	andeq	r0, sp, r0, lsl #12
    2840:	057b0200 	ldrbeq	r0, [fp, #-512]!	; 0xfffffe00
    2844:	02140000 	andseq	r0, r4, #0
    2848:	00006a04 	andeq	r6, r0, r4, lsl #20
    284c:	11ab0300 			; <UNDEFINED> instruction: 0x11ab0300
    2850:	05020000 	streq	r0, [r2, #-0]
    2854:	0000006a 	andeq	r0, r0, sl, rrx
    2858:	02230300 	eoreq	r0, r3, #0, 6
    285c:	06020000 	streq	r0, [r2], -r0
    2860:	0000006a 	andeq	r0, r0, sl, rrx
    2864:	034c0304 	movteq	r0, #49924	; 0xc304
    2868:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    286c:	00000077 	andeq	r0, r0, r7, ror r0
    2870:	033c0308 	teqeq	ip, #8, 6	; 0x20000000
    2874:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    2878:	00000077 	andeq	r0, r0, r7, ror r0
    287c:	0228030c 	eoreq	r0, r8, #12, 6	; 0x30000000
    2880:	0c020000 	stceq	0, cr0, [r2], {-0}
    2884:	00000094 	muleq	r0, r4, r0
    2888:	04040010 	streq	r0, [r4], #-16
    288c:	00000070 	andeq	r0, r0, r0, ror r0
    2890:	0d080105 	stfeqs	f0, [r8, #-20]	; 0xffffffec
    2894:	06000004 	streq	r0, [r0], -r4
    2898:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    289c:	8e070074 	mcrhi	0, 0, r0, cr7, cr4, {3}
    28a0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    28a4:	0000008e 	andeq	r0, r0, lr, lsl #1
    28a8:	00007708 	andeq	r7, r0, r8, lsl #14
    28ac:	04040000 	streq	r0, [r4], #-0
    28b0:	00000021 	andeq	r0, r0, r1, lsr #32
    28b4:	007e0404 	rsbseq	r0, lr, r4, lsl #8
    28b8:	7c090000 	stcvc	0, cr0, [r9], {-0}
    28bc:	02000005 	andeq	r0, r0, #5
    28c0:	0000210d 	andeq	r2, r0, sp, lsl #2
    28c4:	11920a00 	orrsne	r0, r2, r0, lsl #20
    28c8:	0c010000 	stceq	0, cr0, [r1], {-0}
    28cc:	200026b2 			; <UNDEFINED> instruction: 0x200026b2
    28d0:	0000003a 	andeq	r0, r0, sl, lsr r0
    28d4:	00f39c01 	rscseq	r9, r3, r1, lsl #24
    28d8:	6f0b0000 	svcvs	0x000b0000
    28dc:	01006a62 	tsteq	r0, r2, ror #20
    28e0:	0000f30c 	andeq	pc, r0, ip, lsl #6
    28e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    28e8:	0011ab0c 	andseq	sl, r1, ip, lsl #22
    28ec:	6a0c0100 	bvs	302cf4 <startup-0x1fcfd30c>
    28f0:	02000000 	andeq	r0, r0, #0
    28f4:	230c7091 	movwcs	r7, #49297	; 0xc091
    28f8:	01000002 	tsteq	r0, r2
    28fc:	00006a0c 	andeq	r6, r0, ip, lsl #20
    2900:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2904:	00033c0c 	andeq	r3, r3, ip, lsl #24
    2908:	770c0100 	strvc	r0, [ip, -r0, lsl #2]
    290c:	02000000 	andeq	r0, r0, #0
    2910:	04006891 	streq	r6, [r0], #-2193	; 0xfffff76f
    2914:	00009a04 	andeq	r9, r0, r4, lsl #20
    2918:	02280d00 	eoreq	r0, r8, #0, 26
    291c:	04010000 	streq	r0, [r1], #-0
    2920:	20002658 	andcs	r2, r0, r8, asr r6
    2924:	0000005a 	andeq	r0, r0, sl, asr r0
    2928:	4f0c9c01 	svcmi	0x000c9c01
    292c:	01000006 	tsteq	r0, r6
    2930:	0000f304 	andeq	pc, r0, r4, lsl #6
    2934:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2938:	0011a10c 	andseq	sl, r1, ip, lsl #2
    293c:	77040100 	strvc	r0, [r4, -r0, lsl #2]
    2940:	02000000 	andeq	r0, r0, #0
    2944:	550e6891 	strpl	r6, [lr, #-2193]	; 0xfffff76f
    2948:	01000011 	tsteq	r0, r1, lsl r0
    294c:	00007705 	andeq	r7, r0, r5, lsl #14
    2950:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2954:	0010310e 	andseq	r3, r0, lr, lsl #2
    2958:	77060100 	strvc	r0, [r6, -r0, lsl #2]
    295c:	02000000 	andeq	r0, r0, #0
    2960:	00007091 	muleq	r0, r1, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	01130200 	tsteq	r3, r0, lsl #4
  14:	0b3a0b0b 	bleq	e82c48 <startup-0x1f17d3b8>
  18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  1c:	0d030000 	stceq	0, cr0, [r3, #-0]
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	000b3813 	andeq	r3, fp, r3, lsl r8
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000e03 	andeq	r0, r0, r3, lsl #28
  38:	0b000f05 	bleq	3c54 <startup-0x1fffc3ac>
  3c:	0013490b 	andseq	r4, r3, fp, lsl #18
  40:	00160600 	andseq	r0, r6, r0, lsl #12
  44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
  48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  4c:	13070000 	movwne	r0, #28672	; 0x7000
  50:	0b0e0301 	bleq	380c5c <startup-0x1fc7f3a4>
  54:	3b0b3a0b 	blcc	2ce888 <startup-0x1fd31778>
  58:	0013010b 	andseq	r0, r3, fp, lsl #2
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	27011509 	strcs	r1, [r1, -r9, lsl #10]
  6c:	00130119 	andseq	r0, r3, r9, lsl r1
  70:	00050a00 	andeq	r0, r5, r0, lsl #20
  74:	00001349 	andeq	r1, r0, r9, asr #6
  78:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
  7c:	00130113 	andseq	r0, r3, r3, lsl r1
  80:	00210c00 	eoreq	r0, r1, r0, lsl #24
  84:	340d0000 	strcc	r0, [sp], #-0
  88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
  8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  90:	3c193f13 	ldccc	15, cr3, [r9], {19}
  94:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
  98:	13490021 	movtne	r0, #36897	; 0x9021
  9c:	0000052f 	andeq	r0, r0, pc, lsr #10
  a0:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
  a4:	000b2f13 	andeq	r2, fp, r3, lsl pc
  a8:	00341000 	eorseq	r1, r4, r0
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  b8:	34110000 	ldrcc	r0, [r1], #-0
  bc:	3a0e0300 	bcc	380cc4 <startup-0x1fc7f33c>
  c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  c4:	00180213 	andseq	r0, r8, r3, lsl r2
  c8:	00341200 	eorseq	r1, r4, r0, lsl #4
  cc:	0b3a0803 	bleq	e820e0 <startup-0x1f17df20>
  d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  d4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
  dc:	03193f01 	tsteq	r9, #1, 30
  e0:	3b0b3a0e 	blcc	2ce920 <startup-0x1fd316e0>
  e4:	1119270b 	tstne	r9, fp, lsl #14
  e8:	40061201 	andmi	r1, r6, r1, lsl #4
  ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f0:	00001301 	andeq	r1, r0, r1, lsl #6
  f4:	11010b14 	tstne	r1, r4, lsl fp
  f8:	00061201 	andeq	r1, r6, r1, lsl #4
  fc:	00341500 	eorseq	r1, r4, r0, lsl #10
 100:	0b3a0e03 	bleq	e83914 <startup-0x1f17c6ec>
 104:	1349053b 	movtne	r0, #38203	; 0x953b
 108:	00001802 	andeq	r1, r0, r2, lsl #16
 10c:	3f002e16 	svccc	0x00002e16
 110:	3a0e0319 	bcc	380d7c <startup-0x1fc7f284>
 114:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 118:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 11c:	96184006 	ldrls	r4, [r8], -r6
 120:	00001942 	andeq	r1, r0, r2, asr #18
 124:	3f002e17 	svccc	0x00002e17
 128:	3a0e0319 	bcc	380d94 <startup-0x1fc7f26c>
 12c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 130:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 134:	97184006 	ldrls	r4, [r8, -r6]
 138:	00001942 	andeq	r1, r0, r2, asr #18
 13c:	01110100 	tsteq	r1, r0, lsl #2
 140:	0b130e25 	bleq	4c39dc <startup-0x1fb3c624>
 144:	01110e03 	tsteq	r1, r3, lsl #28
 148:	17100612 			; <UNDEFINED> instruction: 0x17100612
 14c:	13020000 	movwne	r0, #8192	; 0x2000
 150:	3a0b0b01 	bcc	2c2d5c <startup-0x1fd3d2a4>
 154:	010b3b0b 	tsteq	fp, fp, lsl #22
 158:	03000013 	movweq	r0, #19
 15c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 160:	0b3b0b3a 	bleq	ec2e50 <startup-0x1f13d1b0>
 164:	0b381349 	bleq	e04e90 <startup-0x1f1fb170>
 168:	24040000 	strcs	r0, [r4], #-0
 16c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 170:	000e030b 	andeq	r0, lr, fp, lsl #6
 174:	000f0500 	andeq	r0, pc, r0, lsl #10
 178:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 17c:	16060000 	strne	r0, [r6], -r0
 180:	3a0e0300 	bcc	380d88 <startup-0x1fc7f278>
 184:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 188:	07000013 	smladeq	r0, r3, r0, r0
 18c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 190:	0b3a0b0b 	bleq	e82dc4 <startup-0x1f17d23c>
 194:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 198:	24080000 	strcs	r0, [r8], #-0
 19c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1a0:	0008030b 	andeq	r0, r8, fp, lsl #6
 1a4:	01150900 	tsteq	r5, r0, lsl #18
 1a8:	13011927 	movwne	r1, #6439	; 0x1927
 1ac:	050a0000 	streq	r0, [sl, #-0]
 1b0:	00134900 	andseq	r4, r3, r0, lsl #18
 1b4:	01010b00 	tsteq	r1, r0, lsl #22
 1b8:	13011349 	movwne	r1, #4937	; 0x1349
 1bc:	210c0000 	mrscs	r0, (UNDEF: 12)
 1c0:	0d000000 	stceq	0, cr0, [r0, #-0]
 1c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 1c8:	0b3b0b3a 	bleq	ec2eb8 <startup-0x1f13d148>
 1cc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 1d0:	0000193c 	andeq	r1, r0, ip, lsr r9
 1d4:	4700340e 	strmi	r3, [r0, -lr, lsl #8]
 1d8:	3b0b3a13 	blcc	2cea2c <startup-0x1fd315d4>
 1dc:	0018020b 	andseq	r0, r8, fp, lsl #4
 1e0:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 1e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1e8:	0b3b0b3a 	bleq	ec2ed8 <startup-0x1f13d128>
 1ec:	01111927 	tsteq	r1, r7, lsr #18
 1f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1f4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1f8:	10000013 	andne	r0, r0, r3, lsl r0
 1fc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 200:	0b3b0b3a 	bleq	ec2ef0 <startup-0x1f13d110>
 204:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 208:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 20c:	03193f01 	tsteq	r9, #1, 30
 210:	3b0b3a0e 	blcc	2cea50 <startup-0x1fd315b0>
 214:	1119270b 	tstne	r9, fp, lsl #14
 218:	40061201 	andmi	r1, r6, r1, lsl #4
 21c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 220:	01000000 	mrseq	r0, (UNDEF: 0)
 224:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 228:	0e030b13 	vmoveq.32	d3[0], r0
 22c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 230:	00001710 	andeq	r1, r0, r0, lsl r7
 234:	0b011302 	bleq	44e44 <startup-0x1ffbb1bc>
 238:	3b0b3a0b 	blcc	2cea6c <startup-0x1fd31594>
 23c:	0013010b 	andseq	r0, r3, fp, lsl #2
 240:	000d0300 	andeq	r0, sp, r0, lsl #6
 244:	0b3a0e03 	bleq	e83a58 <startup-0x1f17c5a8>
 248:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 24c:	00000b38 	andeq	r0, r0, r8, lsr fp
 250:	0b002404 	bleq	9268 <startup-0x1fff6d98>
 254:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 258:	0500000e 	streq	r0, [r0, #-14]
 25c:	0b0b000f 	bleq	2c02a0 <startup-0x1fd3fd60>
 260:	00001349 	andeq	r1, r0, r9, asr #6
 264:	03001606 	movweq	r1, #1542	; 0x606
 268:	3b0b3a0e 	blcc	2ceaa8 <startup-0x1fd31558>
 26c:	0013490b 	andseq	r4, r3, fp, lsl #18
 270:	01130700 	tsteq	r3, r0, lsl #14
 274:	0b0b0e03 	bleq	2c3a88 <startup-0x1fd3c578>
 278:	0b3b0b3a 	bleq	ec2f68 <startup-0x1f13d098>
 27c:	00001301 	andeq	r1, r0, r1, lsl #6
 280:	0b002408 	bleq	92a8 <startup-0x1fff6d58>
 284:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 288:	09000008 	stmdbeq	r0, {r3}
 28c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 290:	00001301 	andeq	r1, r0, r1, lsl #6
 294:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
 298:	0b000013 	bleq	2ec <startup-0x1ffffd14>
 29c:	13490101 	movtne	r0, #37121	; 0x9101
 2a0:	00001301 	andeq	r1, r0, r1, lsl #6
 2a4:	0000210c 	andeq	r2, r0, ip, lsl #2
 2a8:	00340d00 	eorseq	r0, r4, r0, lsl #26
 2ac:	0b3a0e03 	bleq	e83ac0 <startup-0x1f17c540>
 2b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2b4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 2b8:	210e0000 	mrscs	r0, (UNDEF: 14)
 2bc:	2f134900 	svccs	0x00134900
 2c0:	0f00000b 	svceq	0x0000000b
 2c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 2c8:	0b3b0b3a 	bleq	ec2fb8 <startup-0x1f13d048>
 2cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2d0:	34100000 	ldrcc	r0, [r0], #-0
 2d4:	3a0e0300 	bcc	380edc <startup-0x1fc7f124>
 2d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2dc:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 2e0:	11000018 	tstne	r0, r8, lsl r0
 2e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2e8:	0b3a0e03 	bleq	e83afc <startup-0x1f17c504>
 2ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2f4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2f8:	00130119 	andseq	r0, r3, r9, lsl r1
 2fc:	00051200 	andeq	r1, r5, r0, lsl #4
 300:	0b3a0e03 	bleq	e83b14 <startup-0x1f17c4ec>
 304:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 308:	00001802 	andeq	r1, r0, r2, lsl #16
 30c:	03012e13 	movweq	r2, #7699	; 0x1e13
 310:	3b0b3a0e 	blcc	2ceb50 <startup-0x1fd314b0>
 314:	1119270b 	tstne	r9, fp, lsl #14
 318:	40061201 	andmi	r1, r6, r1, lsl #4
 31c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 320:	01000000 	mrseq	r0, (UNDEF: 0)
 324:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 328:	0e030b13 	vmoveq.32	d3[0], r0
 32c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 330:	00001710 	andeq	r1, r0, r0, lsl r7
 334:	0b002402 	bleq	9344 <startup-0x1fff6cbc>
 338:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 33c:	0300000e 	movweq	r0, #14
 340:	0b0b0113 	bleq	2c0794 <startup-0x1fd3f86c>
 344:	0b3b0b3a 	bleq	ec3034 <startup-0x1f13cfcc>
 348:	00001301 	andeq	r1, r0, r1, lsl #6
 34c:	03000d04 	movweq	r0, #3332	; 0xd04
 350:	3b0b3a0e 	blcc	2ceb90 <startup-0x1fd31470>
 354:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 358:	0500000b 	streq	r0, [r0, #-11]
 35c:	0b0b000f 	bleq	2c03a0 <startup-0x1fd3fc60>
 360:	00001349 	andeq	r1, r0, r9, asr #6
 364:	03001606 	movweq	r1, #1542	; 0x606
 368:	3b0b3a0e 	blcc	2ceba8 <startup-0x1fd31458>
 36c:	0013490b 	andseq	r4, r3, fp, lsl #18
 370:	01130700 	tsteq	r3, r0, lsl #14
 374:	0b0b0e03 	bleq	2c3b88 <startup-0x1fd3c478>
 378:	0b3b0b3a 	bleq	ec3068 <startup-0x1f13cf98>
 37c:	00001301 	andeq	r1, r0, r1, lsl #6
 380:	0b002408 	bleq	93a8 <startup-0x1fff6c58>
 384:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 388:	09000008 	stmdbeq	r0, {r3}
 38c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 390:	00001301 	andeq	r1, r0, r1, lsl #6
 394:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
 398:	0b000013 	bleq	3ec <startup-0x1ffffc14>
 39c:	13490101 	movtne	r0, #37121	; 0x9101
 3a0:	00001301 	andeq	r1, r0, r1, lsl #6
 3a4:	0000210c 	andeq	r2, r0, ip, lsl #2
 3a8:	00340d00 	eorseq	r0, r4, r0, lsl #26
 3ac:	0b3a0e03 	bleq	e83bc0 <startup-0x1f17c440>
 3b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3b4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 3b8:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 3bc:	03193f01 	tsteq	r9, #1, 30
 3c0:	3b0b3a0e 	blcc	2cec00 <startup-0x1fd31400>
 3c4:	1119270b 	tstne	r9, fp, lsl #14
 3c8:	40061201 	andmi	r1, r6, r1, lsl #4
 3cc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3d0:	050f0000 	streq	r0, [pc, #-0]	; 3d8 <startup-0x1ffffc28>
 3d4:	3a0e0300 	bcc	380fdc <startup-0x1fc7f024>
 3d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3dc:	00180213 	andseq	r0, r8, r3, lsl r2
 3e0:	00341000 	eorseq	r1, r4, r0
 3e4:	0b3a0e03 	bleq	e83bf8 <startup-0x1f17c408>
 3e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3ec:	00001802 	andeq	r1, r0, r2, lsl #16
 3f0:	01110100 	tsteq	r1, r0, lsl #2
 3f4:	0b130e25 	bleq	4c3c90 <startup-0x1fb3c370>
 3f8:	01110e03 	tsteq	r1, r3, lsl #28
 3fc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 400:	13020000 	movwne	r0, #8192	; 0x2000
 404:	3a0b0b01 	bcc	2c3010 <startup-0x1fd3cff0>
 408:	010b3b0b 	tsteq	fp, fp, lsl #22
 40c:	03000013 	movweq	r0, #19
 410:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 414:	0b3b0b3a 	bleq	ec3104 <startup-0x1f13cefc>
 418:	0b381349 	bleq	e05144 <startup-0x1f1faebc>
 41c:	24040000 	strcs	r0, [r4], #-0
 420:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 424:	000e030b 	andeq	r0, lr, fp, lsl #6
 428:	000f0500 	andeq	r0, pc, r0, lsl #10
 42c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 430:	16060000 	strne	r0, [r6], -r0
 434:	3a0e0300 	bcc	38103c <startup-0x1fc7efc4>
 438:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 43c:	07000013 	smladeq	r0, r3, r0, r0
 440:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 444:	0b3a0b0b 	bleq	e83078 <startup-0x1f17cf88>
 448:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 44c:	24080000 	strcs	r0, [r8], #-0
 450:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 454:	0008030b 	andeq	r0, r8, fp, lsl #6
 458:	01150900 	tsteq	r5, r0, lsl #18
 45c:	13011927 	movwne	r1, #6439	; 0x1927
 460:	050a0000 	streq	r0, [sl, #-0]
 464:	00134900 	andseq	r4, r3, r0, lsl #18
 468:	01010b00 	tsteq	r1, r0, lsl #22
 46c:	13011349 	movwne	r1, #4937	; 0x1349
 470:	210c0000 	mrscs	r0, (UNDEF: 12)
 474:	0d000000 	stceq	0, cr0, [r0, #-0]
 478:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 47c:	0b3b0b3a 	bleq	ec316c <startup-0x1f13ce94>
 480:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 484:	0000193c 	andeq	r1, r0, ip, lsr r9
 488:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 48c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 490:	00340f00 	eorseq	r0, r4, r0, lsl #30
 494:	0b3a0e03 	bleq	e83ca8 <startup-0x1f17c358>
 498:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 49c:	00001802 	andeq	r1, r0, r2, lsl #16
 4a0:	03003410 	movweq	r3, #1040	; 0x410
 4a4:	3b0b3a0e 	blcc	2cece4 <startup-0x1fd3131c>
 4a8:	3f13490b 	svccc	0x0013490b
 4ac:	00180219 	andseq	r0, r8, r9, lsl r2
 4b0:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 4b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4b8:	0b3b0b3a 	bleq	ec31a8 <startup-0x1f13ce58>
 4bc:	01111927 	tsteq	r1, r7, lsr #18
 4c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4c4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 4c8:	12000013 	andne	r0, r0, #19
 4cc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 4d0:	0b3b0b3a 	bleq	ec31c0 <startup-0x1f13ce40>
 4d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 4dc:	3a0e0301 	bcc	3810e8 <startup-0x1fc7ef18>
 4e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4e8:	96184006 	ldrls	r4, [r8], -r6
 4ec:	00001942 	andeq	r1, r0, r2, asr #18
 4f0:	01110100 	tsteq	r1, r0, lsl #2
 4f4:	0b130e25 	bleq	4c3d90 <startup-0x1fb3c270>
 4f8:	01110e03 	tsteq	r1, r3, lsl #28
 4fc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 500:	13020000 	movwne	r0, #8192	; 0x2000
 504:	3a0b0b01 	bcc	2c3110 <startup-0x1fd3cef0>
 508:	010b3b0b 	tsteq	fp, fp, lsl #22
 50c:	03000013 	movweq	r0, #19
 510:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 514:	0b3b0b3a 	bleq	ec3204 <startup-0x1f13cdfc>
 518:	0b381349 	bleq	e05244 <startup-0x1f1fadbc>
 51c:	24040000 	strcs	r0, [r4], #-0
 520:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 524:	000e030b 	andeq	r0, lr, fp, lsl #6
 528:	000f0500 	andeq	r0, pc, r0, lsl #10
 52c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 530:	16060000 	strne	r0, [r6], -r0
 534:	3a0e0300 	bcc	38113c <startup-0x1fc7eec4>
 538:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 53c:	07000013 	smladeq	r0, r3, r0, r0
 540:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 544:	0b3a0b0b 	bleq	e83178 <startup-0x1f17ce88>
 548:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 54c:	24080000 	strcs	r0, [r8], #-0
 550:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 554:	0008030b 	andeq	r0, r8, fp, lsl #6
 558:	01150900 	tsteq	r5, r0, lsl #18
 55c:	13011927 	movwne	r1, #6439	; 0x1927
 560:	050a0000 	streq	r0, [sl, #-0]
 564:	00134900 	andseq	r4, r3, r0, lsl #18
 568:	01010b00 	tsteq	r1, r0, lsl #22
 56c:	13011349 	movwne	r1, #4937	; 0x1349
 570:	210c0000 	mrscs	r0, (UNDEF: 12)
 574:	0d000000 	stceq	0, cr0, [r0, #-0]
 578:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 57c:	0b3b0b3a 	bleq	ec326c <startup-0x1f13cd94>
 580:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 584:	0000193c 	andeq	r1, r0, ip, lsr r9
 588:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 58c:	00052f13 	andeq	r2, r5, r3, lsl pc
 590:	00340f00 	eorseq	r0, r4, r0, lsl #30
 594:	0b3a1347 	bleq	e852b8 <startup-0x1f17ad48>
 598:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 59c:	34100000 	ldrcc	r0, [r0], #-0
 5a0:	3a134700 	bcc	4d21a8 <startup-0x1fb2de58>
 5a4:	0018020b 	andseq	r0, r8, fp, lsl #4
 5a8:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 5ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5b4:	01111927 	tsteq	r1, r7, lsr #18
 5b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 5c0:	12000013 	andne	r0, r0, #19
 5c4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 5c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 5d0:	34130000 	ldrcc	r0, [r3], #-0
 5d4:	3a0e0300 	bcc	3811dc <startup-0x1fc7ee24>
 5d8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 5dc:	00180213 	andseq	r0, r8, r3, lsl r2
 5e0:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 5e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5ec:	01111927 	tsteq	r1, r7, lsr #18
 5f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5f4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 5f8:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 5fc:	08030034 	stmdaeq	r3, {r2, r4, r5}
 600:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 604:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 608:	34160000 	ldrcc	r0, [r6], #-0
 60c:	3a080300 	bcc	201214 <startup-0x1fdfedec>
 610:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 614:	17000013 	smladne	r0, r3, r0, r0
 618:	08030005 	stmdaeq	r3, {r0, r2}
 61c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 620:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 624:	0b180000 	bleq	60062c <startup-0x1f9ff9d4>
 628:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 62c:	19000006 	stmdbne	r0, {r1, r2}
 630:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 634:	0b3a0e03 	bleq	e83e48 <startup-0x1f17c1b8>
 638:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 63c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 640:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 644:	00130119 	andseq	r0, r3, r9, lsl r1
 648:	00051a00 	andeq	r1, r5, r0, lsl #20
 64c:	0b3a0803 	bleq	e82660 <startup-0x1f17d9a0>
 650:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 654:	00001802 	andeq	r1, r0, r2, lsl #16
 658:	0300051b 	movweq	r0, #1307	; 0x51b
 65c:	3b0b3a0e 	blcc	2cee9c <startup-0x1fd31164>
 660:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 664:	1c000018 	stcne	0, cr0, [r0], {24}
 668:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 66c:	0b3b0b3a 	bleq	ec335c <startup-0x1f13cca4>
 670:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 674:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 678:	03193f01 	tsteq	r9, #1, 30
 67c:	3b0b3a0e 	blcc	2ceebc <startup-0x1fd31144>
 680:	1119270b 	tstne	r9, fp, lsl #14
 684:	40061201 	andmi	r1, r6, r1, lsl #4
 688:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 68c:	00001301 	andeq	r1, r0, r1, lsl #6
 690:	0300341e 	movweq	r3, #1054	; 0x41e
 694:	3b0b3a08 	blcc	2ceebc <startup-0x1fd31144>
 698:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 69c:	1f000018 	svcne	0x00000018
 6a0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 6a4:	0b3a0e03 	bleq	e83eb8 <startup-0x1f17c148>
 6a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 6ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6b0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 6b4:	20000019 	andcs	r0, r0, r9, lsl r0
 6b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 6bc:	0b3a0e03 	bleq	e83ed0 <startup-0x1f17c130>
 6c0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 6c4:	01111349 	tsteq	r1, r9, asr #6
 6c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6cc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 6d0:	21000013 	tstcs	r0, r3, lsl r0
 6d4:	0e03012e 	adfeqsp	f0, f3, #0.5
 6d8:	0b3b0b3a 	bleq	ec33c8 <startup-0x1f13cc38>
 6dc:	13491927 	movtne	r1, #39207	; 0x9927
 6e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6e4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 6e8:	00130119 	andseq	r0, r3, r9, lsl r1
 6ec:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
 6f0:	0b3a0e03 	bleq	e83f04 <startup-0x1f17c0fc>
 6f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 6f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6fc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 700:	00130119 	andseq	r0, r3, r9, lsl r1
 704:	002e2300 	eoreq	r2, lr, r0, lsl #6
 708:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 70c:	0b3b0b3a 	bleq	ec33fc <startup-0x1f13cc04>
 710:	01111927 	tsteq	r1, r7, lsr #18
 714:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 718:	00194297 	mulseq	r9, r7, r2
 71c:	11010000 	mrsne	r0, (UNDEF: 1)
 720:	130e2501 	movwne	r2, #58625	; 0xe501
 724:	110e030b 	tstne	lr, fp, lsl #6
 728:	10061201 	andne	r1, r6, r1, lsl #4
 72c:	02000017 	andeq	r0, r0, #23
 730:	0b0b0113 	bleq	2c0b84 <startup-0x1fd3f47c>
 734:	0b3b0b3a 	bleq	ec3424 <startup-0x1f13cbdc>
 738:	00001301 	andeq	r1, r0, r1, lsl #6
 73c:	03000d03 	movweq	r0, #3331	; 0xd03
 740:	3b0b3a0e 	blcc	2cef80 <startup-0x1fd31080>
 744:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 748:	0400000b 	streq	r0, [r0], #-11
 74c:	0b0b0024 	bleq	2c07e4 <startup-0x1fd3f81c>
 750:	0e030b3e 	vmoveq.16	d3[0], r0
 754:	0f050000 	svceq	0x00050000
 758:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 75c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 760:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 764:	0b3b0b3a 	bleq	ec3454 <startup-0x1f13cbac>
 768:	00001349 	andeq	r1, r0, r9, asr #6
 76c:	03011307 	movweq	r1, #4871	; 0x1307
 770:	3a0b0b0e 	bcc	2c33b0 <startup-0x1fd3cc50>
 774:	010b3b0b 	tsteq	fp, fp, lsl #22
 778:	08000013 	stmdaeq	r0, {r0, r1, r4}
 77c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 780:	0b3a0e03 	bleq	e83f94 <startup-0x1f17c06c>
 784:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 788:	06120111 			; <UNDEFINED> instruction: 0x06120111
 78c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 790:	00130119 	andseq	r0, r3, r9, lsl r1
 794:	00050900 	andeq	r0, r5, r0, lsl #18
 798:	0b3a0e03 	bleq	e83fac <startup-0x1f17c054>
 79c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7a0:	00001802 	andeq	r1, r0, r2, lsl #16
 7a4:	01110100 	tsteq	r1, r0, lsl #2
 7a8:	0b130e25 	bleq	4c4044 <startup-0x1fb3bfbc>
 7ac:	01110e03 	tsteq	r1, r3, lsl #28
 7b0:	17100612 			; <UNDEFINED> instruction: 0x17100612
 7b4:	13020000 	movwne	r0, #8192	; 0x2000
 7b8:	3a0b0b01 	bcc	2c33c4 <startup-0x1fd3cc3c>
 7bc:	010b3b0b 	tsteq	fp, fp, lsl #22
 7c0:	03000013 	movweq	r0, #19
 7c4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 7c8:	0b3b0b3a 	bleq	ec34b8 <startup-0x1f13cb48>
 7cc:	0b381349 	bleq	e054f8 <startup-0x1f1fab08>
 7d0:	24040000 	strcs	r0, [r4], #-0
 7d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 7d8:	000e030b 	andeq	r0, lr, fp, lsl #6
 7dc:	000f0500 	andeq	r0, pc, r0, lsl #10
 7e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 7e4:	16060000 	strne	r0, [r6], -r0
 7e8:	3a0e0300 	bcc	3813f0 <startup-0x1fc7ec10>
 7ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7f0:	07000013 	smladeq	r0, r3, r0, r0
 7f4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 7f8:	0b3a0e03 	bleq	e8400c <startup-0x1f17bff4>
 7fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 800:	06120111 			; <UNDEFINED> instruction: 0x06120111
 804:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 808:	00130119 	andseq	r0, r3, r9, lsl r1
 80c:	00050800 	andeq	r0, r5, r0, lsl #16
 810:	0b3a0803 	bleq	e82824 <startup-0x1f17d7dc>
 814:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 818:	00001802 	andeq	r1, r0, r2, lsl #16
 81c:	03000509 	movweq	r0, #1289	; 0x509
 820:	3b0b3a0e 	blcc	2cf060 <startup-0x1fd30fa0>
 824:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 828:	0a000018 	beq	890 <startup-0x1ffff770>
 82c:	0b0b0024 	bleq	2c08c4 <startup-0x1fd3f73c>
 830:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 834:	01000000 	mrseq	r0, (UNDEF: 0)
 838:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 83c:	0e030b13 	vmoveq.32	d3[0], r0
 840:	06120111 			; <UNDEFINED> instruction: 0x06120111
 844:	00001710 	andeq	r1, r0, r0, lsl r7
 848:	0b011302 	bleq	45458 <startup-0x1ffbaba8>
 84c:	3b0b3a0b 	blcc	2cf080 <startup-0x1fd30f80>
 850:	0013010b 	andseq	r0, r3, fp, lsl #2
 854:	000d0300 	andeq	r0, sp, r0, lsl #6
 858:	0b3a0e03 	bleq	e8406c <startup-0x1f17bf94>
 85c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 860:	00000b38 	andeq	r0, r0, r8, lsr fp
 864:	0b002404 	bleq	987c <startup-0x1fff6784>
 868:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 86c:	0500000e 	streq	r0, [r0, #-14]
 870:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 874:	0b3b0b3a 	bleq	ec3564 <startup-0x1f13ca9c>
 878:	00001349 	andeq	r1, r0, r9, asr #6
 87c:	3f012e06 	svccc	0x00012e06
 880:	3a0e0319 	bcc	3814ec <startup-0x1fc7eb14>
 884:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 888:	11134919 	tstne	r3, r9, lsl r9
 88c:	40061201 	andmi	r1, r6, r1, lsl #4
 890:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 894:	00001301 	andeq	r1, r0, r1, lsl #6
 898:	03000507 	movweq	r0, #1287	; 0x507
 89c:	3b0b3a08 	blcc	2cf0c4 <startup-0x1fd30f3c>
 8a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 8a4:	08000018 	stmdaeq	r0, {r3, r4}
 8a8:	08030034 	stmdaeq	r3, {r2, r4, r5}
 8ac:	0b3b0b3a 	bleq	ec359c <startup-0x1f13ca64>
 8b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 8b4:	24090000 	strcs	r0, [r9], #-0
 8b8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 8bc:	0008030b 	andeq	r0, r8, fp, lsl #6
 8c0:	002e0a00 	eoreq	r0, lr, r0, lsl #20
 8c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 8c8:	0b3b0b3a 	bleq	ec35b8 <startup-0x1f13ca48>
 8cc:	13491927 	movtne	r1, #39207	; 0x9927
 8d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 8d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 8d8:	0b000019 	bleq	944 <startup-0x1ffff6bc>
 8dc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 8e0:	0b3a0e03 	bleq	e840f4 <startup-0x1f17bf0c>
 8e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 8e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 8ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 8f0:	00000019 	andeq	r0, r0, r9, lsl r0
 8f4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 8f8:	030b130e 	movweq	r1, #45838	; 0xb30e
 8fc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 900:	00171006 	andseq	r1, r7, r6
 904:	01130200 	tsteq	r3, r0, lsl #4
 908:	0b3a0b0b 	bleq	e8353c <startup-0x1f17cac4>
 90c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 910:	0d030000 	stceq	0, cr0, [r3, #-0]
 914:	3a0e0300 	bcc	38151c <startup-0x1fc7eae4>
 918:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 91c:	000b3813 	andeq	r3, fp, r3, lsl r8
 920:	00240400 	eoreq	r0, r4, r0, lsl #8
 924:	0b3e0b0b 	bleq	f83558 <startup-0x1f07caa8>
 928:	00000e03 	andeq	r0, r0, r3, lsl #28
 92c:	0b000f05 	bleq	4548 <startup-0x1fffbab8>
 930:	0013490b 	andseq	r4, r3, fp, lsl #18
 934:	00160600 	andseq	r0, r6, r0, lsl #12
 938:	0b3a0e03 	bleq	e8414c <startup-0x1f17beb4>
 93c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 940:	13070000 	movwne	r0, #28672	; 0x7000
 944:	0b0e0301 	bleq	381550 <startup-0x1fc7eab0>
 948:	3b0b3a0b 	blcc	2cf17c <startup-0x1fd30e84>
 94c:	0013010b 	andseq	r0, r3, fp, lsl #2
 950:	00240800 	eoreq	r0, r4, r0, lsl #16
 954:	0b3e0b0b 	bleq	f83588 <startup-0x1f07ca78>
 958:	00000803 	andeq	r0, r0, r3, lsl #16
 95c:	27011509 	strcs	r1, [r1, -r9, lsl #10]
 960:	00130119 	andseq	r0, r3, r9, lsl r1
 964:	00050a00 	andeq	r0, r5, r0, lsl #20
 968:	00001349 	andeq	r1, r0, r9, asr #6
 96c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 970:	00130113 	andseq	r0, r3, r3, lsl r1
 974:	00210c00 	eoreq	r0, r1, r0, lsl #24
 978:	340d0000 	strcc	r0, [sp], #-0
 97c:	3a0e0300 	bcc	381584 <startup-0x1fc7ea7c>
 980:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 984:	3c193f13 	ldccc	15, cr3, [r9], {19}
 988:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 98c:	13490021 	movtne	r0, #36897	; 0x9021
 990:	0000052f 	andeq	r0, r0, pc, lsr #10
 994:	3f012e0f 	svccc	0x00012e0f
 998:	3a0e0319 	bcc	381604 <startup-0x1fc7e9fc>
 99c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 9a0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 9a4:	96184006 	ldrls	r4, [r8], -r6
 9a8:	13011942 	movwne	r1, #6466	; 0x1942
 9ac:	34100000 	ldrcc	r0, [r0], #-0
 9b0:	3a080300 	bcc	2015b8 <startup-0x1fdfea48>
 9b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 9b8:	00180213 	andseq	r0, r8, r3, lsl r2
 9bc:	00341100 	eorseq	r1, r4, r0, lsl #2
 9c0:	0b3a0e03 	bleq	e841d4 <startup-0x1f17be2c>
 9c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 9c8:	00001802 	andeq	r1, r0, r2, lsl #16
 9cc:	49002112 	stmdbmi	r0, {r1, r4, r8, sp}
 9d0:	000b2f13 	andeq	r2, fp, r3, lsl pc
 9d4:	00051300 	andeq	r1, r5, r0, lsl #6
 9d8:	0b3a0e03 	bleq	e841ec <startup-0x1f17be14>
 9dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 9e0:	00001802 	andeq	r1, r0, r2, lsl #16
 9e4:	3f002e14 	svccc	0x00002e14
 9e8:	3a0e0319 	bcc	381654 <startup-0x1fc7e9ac>
 9ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 9f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 9f4:	96184006 	ldrls	r4, [r8], -r6
 9f8:	00001942 	andeq	r1, r0, r2, asr #18
 9fc:	3f002e15 	svccc	0x00002e15
 a00:	3a0e0319 	bcc	38166c <startup-0x1fc7e994>
 a04:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 a08:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 a0c:	97184006 	ldrls	r4, [r8, -r6]
 a10:	00001942 	andeq	r1, r0, r2, asr #18
 a14:	03000516 	movweq	r0, #1302	; 0x516
 a18:	3b0b3a08 	blcc	2cf240 <startup-0x1fd30dc0>
 a1c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 a20:	17000018 	smladne	r0, r8, r0, r0
 a24:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 a28:	0b3a0e03 	bleq	e8423c <startup-0x1f17bdc4>
 a2c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 a30:	01111349 	tsteq	r1, r9, asr #6
 a34:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 a38:	01194296 			; <UNDEFINED> instruction: 0x01194296
 a3c:	18000013 	stmdane	r0, {r0, r1, r4}
 a40:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 a44:	0b3a0e03 	bleq	e84258 <startup-0x1f17bda8>
 a48:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 a4c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 a50:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 a54:	00130119 	andseq	r0, r3, r9, lsl r1
 a58:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 a5c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 a60:	0b3b0b3a 	bleq	ec3750 <startup-0x1f13c8b0>
 a64:	01111927 	tsteq	r1, r7, lsr #18
 a68:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 a6c:	00194297 	mulseq	r9, r7, r2
 a70:	11010000 	mrsne	r0, (UNDEF: 1)
 a74:	130e2501 	movwne	r2, #58625	; 0xe501
 a78:	110e030b 	tstne	lr, fp, lsl #6
 a7c:	10061201 	andne	r1, r6, r1, lsl #4
 a80:	02000017 	andeq	r0, r0, #23
 a84:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 a88:	0b3a0b0b 	bleq	e836bc <startup-0x1f17c944>
 a8c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 a90:	0d030000 	stceq	0, cr0, [r3, #-0]
 a94:	3a0e0300 	bcc	38169c <startup-0x1fc7e964>
 a98:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a9c:	000b3813 	andeq	r3, fp, r3, lsl r8
 aa0:	000f0400 	andeq	r0, pc, r0, lsl #8
 aa4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 aa8:	24050000 	strcs	r0, [r5], #-0
 aac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 ab0:	000e030b 	andeq	r0, lr, fp, lsl #6
 ab4:	00240600 	eoreq	r0, r4, r0, lsl #12
 ab8:	0b3e0b0b 	bleq	f836ec <startup-0x1f07c914>
 abc:	00000803 	andeq	r0, r0, r3, lsl #16
 ac0:	27011507 	strcs	r1, [r1, -r7, lsl #10]
 ac4:	00130119 	andseq	r0, r3, r9, lsl r1
 ac8:	00050800 	andeq	r0, r5, r0, lsl #16
 acc:	00001349 	andeq	r1, r0, r9, asr #6
 ad0:	03001609 	movweq	r1, #1545	; 0x609
 ad4:	3b0b3a0e 	blcc	2cf314 <startup-0x1fd30cec>
 ad8:	0013490b 	andseq	r4, r3, fp, lsl #18
 adc:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
 ae0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 ae4:	0b3b0b3a 	bleq	ec37d4 <startup-0x1f13c82c>
 ae8:	01111927 	tsteq	r1, r7, lsr #18
 aec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 af0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 af4:	0b000013 	bleq	b48 <startup-0x1ffff4b8>
 af8:	08030005 	stmdaeq	r3, {r0, r2}
 afc:	0b3b0b3a 	bleq	ec37ec <startup-0x1f13c814>
 b00:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 b04:	050c0000 	streq	r0, [ip, #-0]
 b08:	3a0e0300 	bcc	381710 <startup-0x1fc7e8f0>
 b0c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b10:	00180213 	andseq	r0, r8, r3, lsl r2
 b14:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 b18:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 b1c:	0b3b0b3a 	bleq	ec380c <startup-0x1f13c7f4>
 b20:	01111927 	tsteq	r1, r7, lsr #18
 b24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 b28:	00194296 	mulseq	r9, r6, r2
 b2c:	00340e00 	eorseq	r0, r4, r0, lsl #28
 b30:	0b3a0e03 	bleq	e84344 <startup-0x1f17bcbc>
 b34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 b38:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000af8 	strdeq	r0, [r0], -r8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	08570002 	ldmdaeq	r7, {r1}^
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000b08 	andcs	r0, r0, r8, lsl #22
  3c:	00000056 	andeq	r0, r0, r6, asr r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	0a3b0002 	beq	ec005c <startup-0x1f13ffa4>
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000b60 	andcs	r0, r0, r0, ror #22
  5c:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0f6a0002 	svceq	0x006a0002
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000e08 	andcs	r0, r0, r8, lsl #28
  7c:	000000d8 	ldrdeq	r0, [r0], -r8
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	11430002 	cmpne	r3, r2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000ee0 	andcs	r0, r0, r0, ror #29
  9c:	00000364 	andeq	r0, r0, r4, ror #6
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	17880002 	strne	r0, [r8, r2]
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20001244 	andcs	r1, r0, r4, asr #4
  bc:	00000e44 	andeq	r0, r0, r4, asr #28
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	202b0002 	eorcs	r0, fp, r2
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20002088 	andcs	r2, r0, r8, lsl #1
  dc:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	212f0002 			; <UNDEFINED> instruction: 0x212f0002
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	200020b0 	strhcs	r2, [r0], -r0
  fc:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	21f60002 	mvnscs	r0, r2
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	200020d8 	ldrdcs	r2, [r0], -r8
 11c:	00000060 	andeq	r0, r0, r0, rrx
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	232f0002 			; <UNDEFINED> instruction: 0x232f0002
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20002138 	andcs	r2, r0, r8, lsr r1
 13c:	00000520 	andeq	r0, r0, r0, lsr #10
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	28200002 	stmdacs	r0!, {r1}
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	20002658 	andcs	r2, r0, r8, asr r6
 15c:	00000094 	muleq	r0, r4, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000b08 	andcs	r0, r0, r8, lsl #22
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000269 	andeq	r0, r0, r9, ror #4
   4:	017d0002 	cmneq	sp, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	6f6d2f3a 	svcvs	0x006d2f3a
  20:	2f632f70 	svccs	0x00632f70
  24:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
  28:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  2c:	6f697461 	svcvs	0x00697461
  30:	2f72656e 	svccs	0x0072656e
  34:	73504944 	cmpvc	r0, #68, 18	; 0x110000
  38:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
  3c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
  40:	74730000 	ldrbtvc	r0, [r3], #-0
  44:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  48:	00632e70 	rsbeq	r2, r3, r0, ror lr
  4c:	73000001 	movwvc	r0, #1
  50:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
  54:	00682e65 	rsbeq	r2, r8, r5, ror #28
  58:	69000001 	stmdbvs	r0, {r0}
  5c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
  60:	0100682e 	tsteq	r0, lr, lsr #16
  64:	61670000 	cmnvs	r7, r0
  68:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
  6c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
  70:	0100682e 	tsteq	r0, lr, lsr #16
  74:	72670000 	rsbvc	r0, r7, #0
  78:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  7c:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
  80:	00000100 	andeq	r0, r0, r0, lsl #2
  84:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
  88:	5f726574 	svcpl	0x00726574
  8c:	63616c62 	cmnvs	r1, #25088	; 0x6200
  90:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
  94:	0001006d 	andeq	r0, r1, sp, rrx
  98:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
  9c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
  a0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
  a4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
  a8:	01006d62 	tsteq	r0, r2, ror #26
  ac:	6f6d0000 	svcvs	0x006d0000
  b0:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
  b4:	72675f72 	rsbvc	r5, r7, #456	; 0x1c8
  b8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
  bc:	01006d62 	tsteq	r0, r2, ror #26
  c0:	72700000 	rsbsvc	r0, r0, #0
  c4:	5f737365 	svcpl	0x00737365
  c8:	63616c62 	cmnvs	r1, #25088	; 0x6200
  cc:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
  d0:	0001006d 	andeq	r0, r1, sp, rrx
  d4:	65727000 	ldrbvs	r7, [r2, #-0]!
  d8:	6c5f7373 	mrrcvs	3, 7, r7, pc, cr3	; <UNPREDICTABLE>
  dc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
  e0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
  e4:	00000100 	andeq	r0, r0, r0, lsl #2
  e8:	73657270 	cmnvc	r5, #112, 4
  ec:	72675f73 	rsbvc	r5, r7, #460	; 0x1cc
  f0:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
  f4:	01006d62 	tsteq	r0, r2, ror #26
  f8:	61630000 	cmnvs	r3, r0
  fc:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
 100:	616c625f 	cmnvs	ip, pc, asr r2
 104:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
 108:	01006d62 	tsteq	r0, r2, ror #26
 10c:	61630000 	cmnvs	r3, r0
 110:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
 114:	6172675f 	cmnvs	r2, pc, asr r7
 118:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
 11c:	0001006d 	andeq	r0, r1, sp, rrx
 120:	73616300 	cmnvc	r1, #0, 6
 124:	5f656c74 	svcpl	0x00656c74
 128:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 12c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
 130:	0001006d 	andeq	r0, r1, sp, rrx
 134:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
 138:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
 13c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 140:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 144:	00000100 	andeq	r0, r0, r0, lsl #2
 148:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 14c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
 150:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 154:	01006d62 	tsteq	r0, r2, ror #26
 158:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
 15c:	5f656c74 	svcpl	0x00656c74
 160:	63616c62 	cmnvs	r1, #25088	; 0x6200
 164:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
 168:	0001006d 	andeq	r0, r1, sp, rrx
 16c:	6f6c7300 	svcvs	0x006c7300
 170:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
 174:	682e7478 	stmdavs	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
 178:	00000100 	andeq	r0, r0, r0, lsl #2
 17c:	782e6762 	stmdavc	lr!, {r1, r5, r6, r8, r9, sl, sp, lr}
 180:	01006d62 	tsteq	r0, r2, ror #26
 184:	00000000 	andeq	r0, r0, r0
 188:	00000205 	andeq	r0, r0, r5, lsl #4
 18c:	2d032000 	stccs	0, cr2, [r3, #-0]
 190:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
 194:	01010003 	tsteq	r1, r3
 198:	10020500 	andne	r0, r2, r0, lsl #10
 19c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 1a0:	3d2f0122 	stfccs	f0, [pc, #-136]!	; 120 <startup-0x1ffffee0>
 1a4:	03303030 	teqeq	r0, #48	; 0x30
 1a8:	2f3d742c 	svccs	0x003d742c
 1ac:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 1b0:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 1b4:	2f3e672f 	svccs	0x003e672f
 1b8:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 1bc:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 1c0:	2f3d672f 	svccs	0x003d672f
 1c4:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
 1c8:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
 1cc:	2f3d672f 	svccs	0x003d672f
 1d0:	52023f67 	andpl	r3, r2, #412	; 0x19c
 1d4:	4a0a0317 	bmi	280e38 <startup-0x1fd7f1c8>
 1d8:	7583322f 	strvc	r3, [r3, #559]	; 0x22f
 1dc:	595959bb 	ldmdbpl	r9, {r0, r1, r3, r4, r5, r7, r8, fp, ip, lr}^
 1e0:	bb75835c 	bllt	1d60f58 <startup-0x1e29f0a8>
 1e4:	835c6759 	cmphi	ip, #23330816	; 0x1640000
 1e8:	5959bb75 	ldmdbpl	r9, {r0, r2, r4, r5, r6, r8, r9, fp, ip, sp, pc}^
 1ec:	83580a03 	cmphi	r8, #12288	; 0x3000
 1f0:	5959bb75 	ldmdbpl	r9, {r0, r2, r4, r5, r6, r8, r9, fp, ip, sp, pc}^
 1f4:	8383675b 	orrhi	r6, r3, #23855104	; 0x16c0000
 1f8:	68686885 	stmdavs	r8!, {r0, r2, r7, fp, sp, lr}^
 1fc:	83838359 	orrhi	r8, r3, #1677721601	; 0x64000001
 200:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
 204:	83838385 	orrhi	r8, r3, #335544322	; 0x14000002
 208:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
 20c:	75820f03 	strvc	r0, [r2, #3843]	; 0xf03
 210:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
 214:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
 218:	77756775 			; <UNDEFINED> instruction: 0x77756775
 21c:	424b302f 	submi	r3, fp, #47	; 0x2f
 220:	67175e02 	ldrvs	r5, [r7, -r2, lsl #28]
 224:	5a414f3a 	bpl	1053f14 <startup-0x1efac0ec>
 228:	67679367 	strbvs	r9, [r7, -r7, ror #6]!
 22c:	67675967 	strbvs	r5, [r7, -r7, ror #18]!
 230:	02004267 	andeq	r4, r0, #1879048198	; 0x70000006
 234:	82060104 	andhi	r0, r6, #4, 2
 238:	83bb8306 			; <UNDEFINED> instruction: 0x83bb8306
 23c:	c9917530 	ldmibgt	r1, {r4, r5, r8, sl, ip, sp, lr}
 240:	c9c9c9bb 	stmibgt	r9, {r0, r1, r3, r4, r5, r7, r8, fp, lr, pc}^
 244:	c9f3c9d7 	ldmibgt	r3!, {r0, r1, r2, r4, r6, r7, r8, fp, lr, pc}^
 248:	08c92108 	stmiaeq	r9, {r3, r8, sp}^
 24c:	2f08c913 	svccs	0x0008c913
 250:	c91308c9 	ldmdbgt	r3, {r0, r3, r6, r7, fp}
 254:	08c92108 	stmiaeq	r9, {r3, r8, sp}^
 258:	142f024b 	strtne	r0, [pc], #-587	; 260 <startup-0x1ffffda0>
 25c:	adbbbbbe 			; <UNDEFINED> instruction: 0xadbbbbbe
 260:	75e5bbbb 	strbvc	fp, [r5, #3003]!	; 0xbbb
 264:	e47fb703 	ldrbt	fp, [pc], #-1795	; 26c <startup-0x1ffffd94>
 268:	01001002 	tsteq	r0, r2
 26c:	00008a01 	andeq	r8, r0, r1, lsl #20
 270:	70000200 	andvc	r0, r0, r0, lsl #4
 274:	02000000 	andeq	r0, r0, #0
 278:	0d0efb01 	vstreq	d15, [lr, #-4]
 27c:	01010100 	mrseq	r0, (UNDEF: 17)
 280:	00000001 	andeq	r0, r0, r1
 284:	01000001 	tsteq	r0, r1
 288:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 28c:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 290:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 294:	6f62616c 	svcvs	0x0062616c
 298:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 29c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 2a0:	5049442f 	subpl	r4, r9, pc, lsr #8
 2a4:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 2a8:	2f686374 	svccs	0x00686374
 2ac:	67000043 	strvs	r0, [r0, -r3, asr #32]
 2b0:	6f656d61 	svcvs	0x00656d61
 2b4:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2b8:	00632e74 	rsbeq	r2, r3, r4, ror lr
 2bc:	73000001 	movwvc	r0, #1
 2c0:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 2c4:	00682e65 	rsbeq	r2, r8, r5, ror #28
 2c8:	69000001 	stmdbvs	r0, {r0}
 2cc:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 2d0:	0100682e 	tsteq	r0, lr, lsr #16
 2d4:	61670000 	cmnvs	r7, r0
 2d8:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
 2dc:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2e0:	0100682e 	tsteq	r0, lr, lsr #16
 2e4:	00000000 	andeq	r0, r0, r0
 2e8:	0b080205 	bleq	200b04 <startup-0x1fdff4fc>
 2ec:	4c192000 	ldcmi	0, cr2, [r9], {-0}
 2f0:	67594b4c 	ldrbvs	r4, [r9, -ip, asr #22]
 2f4:	0402ca3d 	streq	ip, [r2], #-2621	; 0xfffff5c3
 2f8:	84010100 	strhi	r0, [r1], #-256	; 0xffffff00
 2fc:	02000001 	andeq	r0, r0, #1
 300:	00013700 	andeq	r3, r1, r0, lsl #14
 304:	fb010200 	blx	40b0e <startup-0x1ffbf4f2>
 308:	01000d0e 	tsteq	r0, lr, lsl #26
 30c:	00010101 	andeq	r0, r1, r1, lsl #2
 310:	00010000 	andeq	r0, r1, r0
 314:	3a430100 	bcc	10c071c <startup-0x1ef3f8e4>
 318:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 31c:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 268 <startup-0x1ffffd98>
 320:	616c706f 	cmnvs	ip, pc, rrx
 324:	61726f62 	cmnvs	r2, r2, ror #30
 328:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 32c:	442f7265 	strtmi	r7, [pc], #-613	; 334 <startup-0x1ffffccc>
 330:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
 334:	63746957 	cmnvs	r4, #1425408	; 0x15c000
 338:	00432f68 	subeq	r2, r3, r8, ror #30
 33c:	72696600 	rsbvc	r6, r9, #0, 12
 340:	00632e65 	rsbeq	r2, r3, r5, ror #28
 344:	73000001 	movwvc	r0, #1
 348:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 34c:	00682e65 	rsbeq	r2, r8, r5, ror #28
 350:	69000001 	stmdbvs	r0, {r0}
 354:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 358:	0100682e 	tsteq	r0, lr, lsr #16
 35c:	61670000 	cmnvs	r7, r0
 360:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
 364:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 368:	0100682e 	tsteq	r0, lr, lsr #16
 36c:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
 370:	625f6572 	subsvs	r6, pc, #478150656	; 0x1c800000
 374:	6b63616c 	blvs	18d892c <startup-0x1e7276d4>
 378:	782e325f 	stmdavc	lr!, {r0, r1, r2, r3, r4, r6, r9, ip, sp}
 37c:	01006d62 	tsteq	r0, r2, ror #26
 380:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
 384:	5f316572 	svcpl	0x00316572
 388:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 38c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 390:	00000100 	andeq	r0, r0, r0, lsl #2
 394:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 398:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
 39c:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
 3a0:	006d6278 	rsbeq	r6, sp, r8, ror r2
 3a4:	66000001 	strvs	r0, [r0], -r1
 3a8:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
 3ac:	6172675f 	cmnvs	r2, pc, asr r7
 3b0:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
 3b4:	0001006d 	andeq	r0, r1, sp, rrx
 3b8:	72696600 	rsbvc	r6, r9, #0, 12
 3bc:	6c5f3265 	lfmvs	f3, 2, [pc], {101}	; 0x65
 3c0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 3c4:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 3c8:	00000100 	andeq	r0, r0, r0, lsl #2
 3cc:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 3d0:	72675f33 	rsbvc	r5, r7, #51, 30	; 0xcc
 3d4:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 3d8:	01006d62 	tsteq	r0, r2, ror #26
 3dc:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
 3e0:	5f336572 	svcpl	0x00336572
 3e4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 3e8:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
 3ec:	0001006d 	andeq	r0, r1, sp, rrx
 3f0:	72696600 	rsbvc	r6, r9, #0, 12
 3f4:	675f3465 	ldrbvs	r3, [pc, -r5, ror #8]
 3f8:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
 3fc:	006d6278 	rsbeq	r6, sp, r8, ror r2
 400:	66000001 	strvs	r0, [r0], -r1
 404:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
 408:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 40c:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
 410:	01006d62 	tsteq	r0, r2, ror #26
 414:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
 418:	5f356572 	svcpl	0x00356572
 41c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 420:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 424:	00000100 	andeq	r0, r0, r0, lsl #2
 428:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 42c:	696c5f35 	stmdbvs	ip!, {r0, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 430:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
 434:	006d6278 	rsbeq	r6, sp, r8, ror r2
 438:	00000001 	andeq	r0, r0, r1
 43c:	60020500 	andvs	r0, r2, r0, lsl #10
 440:	0320000b 			; <UNDEFINED> instruction: 0x0320000b
 444:	2f3d0130 	svccs	0x003d0130
 448:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 44c:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 450:	2f3e672f 	svccs	0x003e672f
 454:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 458:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 45c:	2f3e672f 	svccs	0x003e672f
 460:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 464:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
 468:	4c144602 	ldcmi	6, cr4, [r4], {2}
 46c:	4b3e2f4b 	blmi	f8c1a0 <startup-0x1f073e60>
 470:	5a595959 	bpl	16569dc <startup-0x1e9a9624>
 474:	91919191 			; <UNDEFINED> instruction: 0x91919191
 478:	3d3d3e93 	ldccc	14, cr3, [sp, #-588]!	; 0xfffffdb4
 47c:	31023d3d 	tstcc	r2, sp, lsr sp
 480:	9d010100 	stflss	f0, [r1, #-0]
 484:	02000000 	andeq	r0, r0, #0
 488:	00006c00 	andeq	r6, r0, r0, lsl #24
 48c:	fb010200 	blx	40c96 <startup-0x1ffbf36a>
 490:	01000d0e 	tsteq	r0, lr, lsl #26
 494:	00010101 	andeq	r0, r1, r1, lsl #2
 498:	00010000 	andeq	r0, r1, r0
 49c:	3a430100 	bcc	10c08a4 <startup-0x1ef3f75c>
 4a0:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 4a4:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 3f0 <startup-0x1ffffc10>
 4a8:	616c706f 	cmnvs	ip, pc, rrx
 4ac:	61726f62 	cmnvs	r2, r2, ror #30
 4b0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 4b4:	442f7265 	strtmi	r7, [pc], #-613	; 4bc <startup-0x1ffffb44>
 4b8:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
 4bc:	63746957 	cmnvs	r4, #1425408	; 0x15c000
 4c0:	00432f68 	subeq	r2, r3, r8, ror #30
 4c4:	616c7000 	cmnvs	ip, r0
 4c8:	2e726579 	mrccs	5, 3, r6, cr2, cr9, {3}
 4cc:	00010063 	andeq	r0, r1, r3, rrx
 4d0:	72707300 	rsbsvc	r7, r0, #0, 6
 4d4:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
 4d8:	00010068 	andeq	r0, r1, r8, rrx
 4dc:	616d6900 	cmnvs	sp, r0, lsl #18
 4e0:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
 4e4:	00000100 	andeq	r0, r0, r0, lsl #2
 4e8:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 4ec:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 4f0:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 4f4:	00000100 	andeq	r0, r0, r0, lsl #2
 4f8:	02050000 	andeq	r0, r5, #0
 4fc:	20000e08 	andcs	r0, r0, r8, lsl #28
 500:	67594b17 	smmlavs	r9, r7, fp, r4
 504:	0200cf3d 	andeq	ip, r0, #61, 30	; 0xf4
 508:	4a060104 	bmi	180920 <startup-0x1fe7f6e0>
 50c:	005b5906 	subseq	r5, fp, r6, lsl #18
 510:	06010402 	streq	r0, [r1], -r2, lsl #8
 514:	5b59064a 	blpl	1641e44 <startup-0x1e9be1bc>
 518:	4b684b76 	blmi	1a132f8 <startup-0x1e5ecd08>
 51c:	0268675b 	rsbeq	r6, r8, #23855104	; 0x16c0000
 520:	0101000b 	tsteq	r1, fp
 524:	000001dd 	ldrdeq	r0, [r0], -sp
 528:	01820002 	orreq	r0, r2, r2
 52c:	01020000 	mrseq	r0, (UNDEF: 2)
 530:	000d0efb 	strdeq	r0, [sp], -fp
 534:	01010101 	tsteq	r1, r1, lsl #2
 538:	01000000 	mrseq	r0, (UNDEF: 0)
 53c:	43010000 	movwmi	r0, #4096	; 0x1000
 540:	6f6d2f3a 	svcvs	0x006d2f3a
 544:	2f632f70 	svccs	0x00632f70
 548:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 54c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 550:	6f697461 	svcvs	0x00697461
 554:	2f72656e 	svccs	0x0072656e
 558:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 55c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 560:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 564:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
 568:	632e6472 			; <UNDEFINED> instruction: 0x632e6472
 56c:	00000100 	andeq	r0, r0, r0, lsl #2
 570:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 574:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
 578:	00000100 	andeq	r0, r0, r0, lsl #2
 57c:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
 580:	00682e65 	rsbeq	r2, r8, r5, ror #28
 584:	67000001 	strvs	r0, [r0, -r1]
 588:	6f656d61 	svcvs	0x00656d61
 58c:	63656a62 	cmnvs	r5, #401408	; 0x62000
 590:	00682e74 	rsbeq	r2, r8, r4, ror lr
 594:	62000001 	andvs	r0, r0, #1
 598:	31647269 	cmncc	r4, r9, ror #4
 59c:	616c625f 	cmnvs	ip, pc, asr r2
 5a0:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
 5a4:	01006d62 	tsteq	r0, r2, ror #26
 5a8:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
 5ac:	5f316472 	svcpl	0x00316472
 5b0:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 5b4:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 5b8:	00000100 	andeq	r0, r0, r0, lsl #2
 5bc:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
 5c0:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
 5c4:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
 5c8:	006d6278 	rsbeq	r6, sp, r8, ror r2
 5cc:	62000001 	andvs	r0, r0, #1
 5d0:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
 5d4:	616c625f 	cmnvs	ip, pc, asr r2
 5d8:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
 5dc:	01006d62 	tsteq	r0, r2, ror #26
 5e0:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
 5e4:	5f326472 	svcpl	0x00326472
 5e8:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 5ec:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 5f0:	00000100 	andeq	r0, r0, r0, lsl #2
 5f4:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
 5f8:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
 5fc:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
 600:	006d6278 	rsbeq	r6, sp, r8, ror r2
 604:	62000001 	andvs	r0, r0, #1
 608:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
 60c:	616c625f 	cmnvs	ip, pc, asr r2
 610:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
 614:	01006d62 	tsteq	r0, r2, ror #26
 618:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
 61c:	5f336472 	svcpl	0x00336472
 620:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 624:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 628:	00000100 	andeq	r0, r0, r0, lsl #2
 62c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
 630:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
 634:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
 638:	006d6278 	rsbeq	r6, sp, r8, ror r2
 63c:	62000001 	andvs	r0, r0, #1
 640:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
 644:	616c625f 	cmnvs	ip, pc, asr r2
 648:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
 64c:	01006d62 	tsteq	r0, r2, ror #26
 650:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
 654:	5f346472 	svcpl	0x00346472
 658:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 65c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 660:	00000100 	andeq	r0, r0, r0, lsl #2
 664:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
 668:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 66c:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
 670:	006d6278 	rsbeq	r6, sp, r8, ror r2
 674:	62000001 	andvs	r0, r0, #1
 678:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
 67c:	616c625f 	cmnvs	ip, pc, asr r2
 680:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
 684:	01006d62 	tsteq	r0, r2, ror #26
 688:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
 68c:	5f356472 	svcpl	0x00356472
 690:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 694:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 698:	00000100 	andeq	r0, r0, r0, lsl #2
 69c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
 6a0:	696c5f35 	stmdbvs	ip!, {r0, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 6a4:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
 6a8:	006d6278 	rsbeq	r6, sp, r8, ror r2
 6ac:	00000001 	andeq	r0, r0, r1
 6b0:	e0020500 	and	r0, r2, r0, lsl #10
 6b4:	0320000e 			; <UNDEFINED> instruction: 0x0320000e
 6b8:	2f3e013f 	svccs	0x003e013f
 6bc:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
 6c0:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
 6c4:	2f3d672f 	svccs	0x003d672f
 6c8:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
 6cc:	3d672f3f 	stclcc	15, cr2, [r7, #-252]!	; 0xffffff04
 6d0:	2f3d672f 	svccs	0x003d672f
 6d4:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 6d8:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
 6dc:	2f3e672f 	svccs	0x003e672f
 6e0:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
 6e4:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
 6e8:	4c145e02 	ldcmi	14, cr5, [r4], {2}
 6ec:	4b3e2f4b 	blmi	f8c420 <startup-0x1f073be0>
 6f0:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 6f4:	9191915c 	orrsls	r9, r1, ip, asr r1
 6f8:	3e949391 	mrccc	3, 4, r9, cr4, cr1, {4}
 6fc:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 700:	01003d02 	tsteq	r0, r2, lsl #26
 704:	00034e01 	andeq	r4, r3, r1, lsl #28
 708:	7c000200 	sfmvc	f0, 4, [r0], {-0}
 70c:	02000000 	andeq	r0, r0, #0
 710:	0d0efb01 	vstreq	d15, [lr, #-4]
 714:	01010100 	mrseq	r0, (UNDEF: 17)
 718:	00000001 	andeq	r0, r0, r1
 71c:	01000001 	tsteq	r0, r1
 720:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 724:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 728:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 72c:	6f62616c 	svcvs	0x0062616c
 730:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 734:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 738:	5049442f 	subpl	r4, r9, pc, lsr #8
 73c:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 740:	2f686374 	svccs	0x00686374
 744:	67000043 	strvs	r0, [r0, -r3, asr #32]
 748:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 74c:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
 750:	00010063 	andeq	r0, r1, r3, rrx
 754:	72707300 	rsbsvc	r7, r0, #0, 6
 758:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
 75c:	00010068 	andeq	r0, r1, r8, rrx
 760:	616d6900 	cmnvs	sp, r0, lsl #18
 764:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
 768:	00000100 	andeq	r0, r0, r0, lsl #2
 76c:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 770:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 774:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 778:	00000100 	andeq	r0, r0, r0, lsl #2
 77c:	70617267 	rsbvc	r7, r1, r7, ror #4
 780:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 784:	0100682e 	tsteq	r0, lr, lsr #16
 788:	00000000 	andeq	r0, r0, r0
 78c:	12440205 	subne	r0, r4, #1342177280	; 0x50000000
 790:	30152000 	andscc	r2, r5, r0
 794:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 798:	01040200 	mrseq	r0, R12_usr
 79c:	67062006 	strvs	r2, [r6, -r6]
 7a0:	3d30a03d 	ldccc	0, cr10, [r0, #-244]!	; 0xffffff0c
 7a4:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
 7a8:	06010402 	streq	r0, [r1], -r2, lsl #8
 7ac:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
 7b0:	2f214ba0 	svccs	0x00214ba0
 7b4:	5e2a2f2f 	cdppl	15, 2, cr2, cr10, cr15, {1}
 7b8:	57214f4c 	strpl	r4, [r1, -ip, asr #30]!
 7bc:	4a09035b 	bmi	241530 <startup-0x1fdbead0>
 7c0:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
 7c4:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 7c8:	00570304 	subseq	r0, r7, r4, lsl #6
 7cc:	06010402 	streq	r0, [r1], -r2, lsl #8
 7d0:	674c063c 	smlaldxvs	r0, ip, ip, r6
 7d4:	2f674b2f 	svccs	0x00674b2f
 7d8:	a14b4b4b 	cmpge	fp, fp, asr #22
 7dc:	83915968 	orrshi	r5, r1, #104, 18	; 0x1a0000
 7e0:	59687659 	stmdbpl	r8!, {r0, r3, r4, r6, r9, sl, ip, sp, lr}^
 7e4:	675983d7 	smmlsvs	r9, r7, r3, r8
 7e8:	74120367 	ldrvc	r0, [r2], #-871	; 0xfffffc99
 7ec:	03206e03 			; <UNDEFINED> instruction: 0x03206e03
 7f0:	70034a12 	andvc	r4, r3, r2, lsl sl
 7f4:	223d3d20 	eorscs	r3, sp, #32, 26	; 0x800
 7f8:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 7fc:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 800:	3d3e4c22 	ldccc	12, cr4, [lr, #-136]!	; 0xffffff78
 804:	313d3d3d 	teqcc	sp, sp, lsr sp
 808:	3d752f3d 	ldclcc	15, cr2, [r5, #-244]!	; 0xffffff0c
 80c:	4a790331 	bmi	1e414d8 <startup-0x1e1beb28>
 810:	bc3d2327 	ldclt	3, cr2, [sp], #-156	; 0xffffff64
 814:	3d3d3d67 	ldccc	13, cr3, [sp, #-412]!	; 0xfffffe64
 818:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 81c:	3e3d592f 	vaddcc.f16	s10, s26, s31	; <UNPREDICTABLE>
 820:	4b303d4b 	blmi	c0fd54 <startup-0x1f3f02ac>
 824:	bc3d313d 	ldflts	f3, [sp], #-244	; 0xffffff0c
 828:	5a595967 	bpl	1656dcc <startup-0x1e9a9234>
 82c:	2f594b91 	svccs	0x00594b91
 830:	593e2f3d 	ldmdbpl	lr!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 834:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 838:	3d3d3d31 	ldccc	13, cr3, [sp, #-196]!	; 0xffffff3c
 83c:	593d9167 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, ip, pc}
 840:	4b833d3d 	blmi	fe0cfd3c <firstTime.4093+0xde0c9574>
 844:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 848:	2f4c833d 	svccs	0x004c833d
 84c:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
 850:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
 854:	4b4b4b3e 	blmi	12d3554 <startup-0x1ed2caac>
 858:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 85c:	4c9f4b3e 	vldmiami	pc, {d4-<overflow reg d34>}
 860:	03040200 	movweq	r0, #16896	; 0x4200
 864:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 868:	02004903 	andeq	r4, r0, #49152	; 0xc000
 86c:	58060104 	stmdapl	r6, {r2, r8}
 870:	02040200 	andeq	r0, r4, #0, 4
 874:	02004606 	andeq	r4, r0, #6291456	; 0x600000
 878:	58060104 	stmdapl	r6, {r2, r8}
 87c:	764d5206 	strbvc	r5, [sp], -r6, lsl #4
 880:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 884:	004a0601 	subeq	r0, sl, r1, lsl #12
 888:	4a020402 	bmi	81898 <startup-0x1ff7e768>
 88c:	03040200 	movweq	r0, #16896	; 0x4200
 890:	084c064a 	stmdaeq	ip, {r1, r3, r6, r9, sl}^
 894:	3e3d3d13 	mrccc	13, 1, r3, cr13, cr3, {0}
 898:	76763dbc 			; <UNDEFINED> instruction: 0x76763dbc
 89c:	d71fd93d 			; <UNDEFINED> instruction: 0xd71fd93d
 8a0:	1fd93d23 	svcne	0x00d93d23
 8a4:	d93d23d7 	ldmdble	sp!, {r0, r1, r2, r4, r6, r7, r8, r9, sp}
 8a8:	6103d71f 	tstvs	r3, pc, lsl r7
 8ac:	2023032e 	eorcs	r0, r3, lr, lsr #6
 8b0:	020069af 	andeq	r6, r0, #2867200	; 0x2bc000
 8b4:	4a060104 	bmi	180ccc <startup-0x1fe7f334>
 8b8:	02040200 	andeq	r0, r4, #0, 4
 8bc:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 8c0:	4b064a03 	blmi	1930d4 <startup-0x1fe6cf2c>
 8c4:	59130875 	ldmdbpl	r3, {r0, r2, r4, r5, r6, fp}
 8c8:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 8cc:	3d5b5959 	vldrcc.16	s11, [fp, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
 8d0:	4c4b3d76 	mcrrmi	13, 7, r3, fp, cr6
 8d4:	d8c93e4b 	stmiale	r9, {r0, r1, r3, r6, r9, sl, fp, ip, sp}^
 8d8:	ae3dca9f 			; <UNDEFINED> instruction: 0xae3dca9f
 8dc:	ac5e03a0 	mrrcge	3, 10, r0, lr, cr0
 8e0:	84202303 	strthi	r2, [r0], #-771	; 0xfffffcfd
 8e4:	00592f4c 	subseq	r2, r9, ip, asr #30
 8e8:	06010402 	streq	r0, [r1], -r2, lsl #8
 8ec:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 8f0:	02002e02 	andeq	r2, r0, #2, 28
 8f4:	00200404 	eoreq	r0, r0, r4, lsl #8
 8f8:	06040402 	streq	r0, [r4], -r2, lsl #8
 8fc:	75d7593d 	ldrbvc	r5, [r7, #2365]	; 0x93d
 900:	03040200 	movweq	r0, #16896	; 0x4200
 904:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 908:	0200ab03 	andeq	sl, r0, #3072	; 0xc00
 90c:	9e060104 	adflss	f0, f6, f4
 910:	02040200 	andeq	r0, r4, #0, 4
 914:	02005506 	andeq	r5, r0, #25165824	; 0x1800000
 918:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
 91c:	02040200 	andeq	r0, r4, #0, 4
 920:	02005606 	andeq	r5, r0, #6291456	; 0x600000
 924:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
 928:	580a0306 	stmdapl	sl, {r1, r2, r8, r9}
 92c:	5a597652 	bpl	165e27c <startup-0x1e9a1d84>
 930:	bb3d3d59 	bllt	f4fe9c <startup-0x1f0b0164>
 934:	3de6913d 	stfccp	f1, [r6, #244]!	; 0xf4
 938:	02006708 	andeq	r6, r0, #8, 14	; 0x200000
 93c:	7a030204 	bvc	c1154 <startup-0x1ff3eeac>
 940:	02006608 	andeq	r6, r0, #8, 12	; 0x800000
 944:	3c060104 	stfccs	f0, [r6], {4}
 948:	02040200 	andeq	r0, r4, #0, 4
 94c:	02003a06 	andeq	r3, r0, #24576	; 0x6000
 950:	3c060104 	stfccs	f0, [r6], {4}
 954:	02040200 	andeq	r0, r4, #0, 4
 958:	02004906 	andeq	r4, r0, #98304	; 0x18000
 95c:	3c060104 	stfccs	f0, [r6], {4}
 960:	580e0306 	stmdapl	lr, {r1, r2, r8, r9}
 964:	003d774c 	eorseq	r7, sp, ip, asr #14
 968:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 96c:	03040200 	movweq	r0, #16896	; 0x4200
 970:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
 974:	003c0601 	eorseq	r0, ip, r1, lsl #12
 978:	06020402 	streq	r0, [r2], -r2, lsl #8
 97c:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
 980:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 984:	3d774c6b 	ldclcc	12, cr4, [r7, #-428]!	; 0xfffffe54
 988:	03040200 	movweq	r0, #16896	; 0x4200
 98c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 990:	02006503 	andeq	r6, r0, #12582912	; 0xc00000
 994:	3c060104 	stfccs	f0, [r6], {4}
 998:	02040200 	andeq	r0, r4, #0, 4
 99c:	02006506 	andeq	r6, r0, #25165824	; 0x1800000
 9a0:	3c060104 	stfccs	f0, [r6], {4}
 9a4:	3d4d6b06 	vstrcc	d22, [sp, #-24]	; 0xffffffe8
 9a8:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
 9ac:	02006930 	andeq	r6, r0, #48, 18	; 0xc0000
 9b0:	00300104 	eorseq	r0, r0, r4, lsl #2
 9b4:	2f010402 	svccs	0x00010402
 9b8:	01040200 	mrseq	r0, R12_usr
 9bc:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 9c0:	0200c901 	andeq	ip, r0, #16384	; 0x4000
 9c4:	13080104 	movwne	r0, #33028	; 0x8104
 9c8:	01040200 	mrseq	r0, R12_usr
 9cc:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 9d0:	02002f01 	andeq	r2, r0, #1, 30
 9d4:	00680104 	rsbeq	r0, r8, r4, lsl #2
 9d8:	c9010402 	stmdbgt	r1, {r1, sl}
 9dc:	01040200 	mrseq	r0, R12_usr
 9e0:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
 9e4:	00920104 	addseq	r0, r2, r4, lsl #2
 9e8:	4b010402 	blmi	419f8 <startup-0x1ffbe608>
 9ec:	01040200 	mrseq	r0, R12_usr
 9f0:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 9f4:	02002f01 	andeq	r2, r0, #1, 30
 9f8:	00670104 	rsbeq	r0, r7, r4, lsl #2
 9fc:	08010402 	stmdaeq	r1, {r1, sl}
 a00:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 a04:	02004c01 	andeq	r4, r0, #256	; 0x100
 a08:	6c030104 	stfvss	f0, [r3], {4}
 a0c:	3c19033c 	ldccc	3, cr0, [r9], {60}	; 0x3c
 a10:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 a14:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 a18:	91080304 	tstls	r8, r4, lsl #6
 a1c:	03040200 	movweq	r0, #16896	; 0x4200
 a20:	02009108 	andeq	r9, r0, #8, 2
 a24:	91080304 	tstls	r8, r4, lsl #6
 a28:	03040200 	movweq	r0, #16896	; 0x4200
 a2c:	02004608 	andeq	r4, r0, #8, 12	; 0x800000
 a30:	3c060104 	stfccs	f0, [r6], {4}
 a34:	3e085006 	cdpcc	0, 0, cr5, cr8, cr6, {0}
 a38:	21083d4b 	tstcs	r8, fp, asr #26
 a3c:	21082108 	tstcs	r8, r8, lsl #2
 a40:	21304b4d 	teqcs	r0, sp, asr #22
 a44:	3e4b3e4b 	cdpcc	14, 4, cr3, cr11, cr11, {2}
 a48:	034b3e4b 	movteq	r3, #48715	; 0xbe4b
 a4c:	0e033c75 	mcreq	12, 0, r3, cr3, cr5, {3}
 a50:	0b023058 	bleq	8cbb8 <startup-0x1ff73448>
 a54:	72010100 	andvc	r0, r1, #0, 2
 a58:	02000000 	andeq	r0, r0, #0
 a5c:	00005b00 	andeq	r5, r0, r0, lsl #22
 a60:	fb010200 	blx	4126a <startup-0x1ffbed96>
 a64:	01000d0e 	tsteq	r0, lr, lsl #26
 a68:	00010101 	andeq	r0, r1, r1, lsl #2
 a6c:	00010000 	andeq	r0, r1, r0
 a70:	3a430100 	bcc	10c0e78 <startup-0x1ef3f188>
 a74:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 a78:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 9c4 <startup-0x1ffff63c>
 a7c:	616c706f 	cmnvs	ip, pc, rrx
 a80:	61726f62 	cmnvs	r2, r2, ror #30
 a84:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 a88:	442f7265 	strtmi	r7, [pc], #-613	; a90 <startup-0x1ffff570>
 a8c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
 a90:	63746957 	cmnvs	r4, #1425408	; 0x15c000
 a94:	00432f68 	subeq	r2, r3, r8, ror #30
 a98:	616d6900 	cmnvs	sp, r0, lsl #18
 a9c:	632e6567 			; <UNDEFINED> instruction: 0x632e6567
 aa0:	00000100 	andeq	r0, r0, r0, lsl #2
 aa4:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 aa8:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
 aac:	00000100 	andeq	r0, r0, r0, lsl #2
 ab0:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
 ab4:	00682e65 	rsbeq	r2, r8, r5, ror #28
 ab8:	00000001 	andeq	r0, r0, r1
 abc:	88020500 	stmdahi	r2, {r8, sl}
 ac0:	14200020 	strtne	r0, [r0], #-32	; 0xffffffe0
 ac4:	3d3d3d75 	ldccc	13, cr3, [sp, #-468]!	; 0xfffffe2c
 ac8:	01000402 	tsteq	r0, r2, lsl #8
 acc:	00006801 	andeq	r6, r0, r1, lsl #16
 ad0:	51000200 	mrspl	r0, R8_usr
 ad4:	02000000 	andeq	r0, r0, #0
 ad8:	0d0efb01 	vstreq	d15, [lr, #-4]
 adc:	01010100 	mrseq	r0, (UNDEF: 17)
 ae0:	00000001 	andeq	r0, r0, r1
 ae4:	01000001 	tsteq	r0, r1
 ae8:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 aec:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 af0:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 af4:	6f62616c 	svcvs	0x0062616c
 af8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 afc:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 b00:	5049442f 	subpl	r4, r9, pc, lsr #8
 b04:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 b08:	2f686374 	svccs	0x00686374
 b0c:	73000043 	movwvc	r0, #67	; 0x43
 b10:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 b14:	00632e65 	rsbeq	r2, r3, r5, ror #28
 b18:	73000001 	movwvc	r0, #1
 b1c:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 b20:	00682e65 	rsbeq	r2, r8, r5, ror #28
 b24:	00000001 	andeq	r0, r0, r1
 b28:	b0020500 	andlt	r0, r2, r0, lsl #10
 b2c:	15200020 	strne	r0, [r0, #-32]!	; 0xffffffe0
 b30:	3d3d3d75 	ldccc	13, cr3, [sp, #-468]!	; 0xfffffe2c
 b34:	01000402 	tsteq	r0, r2, lsl #8
 b38:	00006b01 	andeq	r6, r0, r1, lsl #22
 b3c:	4d000200 	sfmmi	f0, 4, [r0, #-0]
 b40:	02000000 	andeq	r0, r0, #0
 b44:	0d0efb01 	vstreq	d15, [lr, #-4]
 b48:	01010100 	mrseq	r0, (UNDEF: 17)
 b4c:	00000001 	andeq	r0, r0, r1
 b50:	01000001 	tsteq	r0, r1
 b54:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 b58:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 b5c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 b60:	6f62616c 	svcvs	0x0062616c
 b64:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 b68:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 b6c:	5049442f 	subpl	r4, r9, pc, lsr #8
 b70:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 b74:	2f686374 	svccs	0x00686374
 b78:	67000043 	strvs	r0, [r0, -r3, asr #32]
 b7c:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 b80:	00010063 	andeq	r0, r1, r3, rrx
 b84:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 b88:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 b8c:	00000001 	andeq	r0, r0, r1
 b90:	d8020500 	stmdale	r2, {r8, sl}
 b94:	15200020 	strne	r0, [r0, #-32]!	; 0xffffffe0
 b98:	2f763d2f 	svccs	0x00763d2f
 b9c:	674b5b3d 	smlaldxvs	r5, fp, sp, fp
 ba0:	02223091 	eoreq	r3, r2, #145	; 0x91
 ba4:	01010004 	tsteq	r1, r4
 ba8:	0000015a 	andeq	r0, r0, sl, asr r1
 bac:	00810002 	addeq	r0, r1, r2
 bb0:	01020000 	mrseq	r0, (UNDEF: 2)
 bb4:	000d0efb 	strdeq	r0, [sp], -fp
 bb8:	01010101 	tsteq	r1, r1, lsl #2
 bbc:	01000000 	mrseq	r0, (UNDEF: 0)
 bc0:	43010000 	movwmi	r0, #4096	; 0x1000
 bc4:	6f6d2f3a 	svcvs	0x006d2f3a
 bc8:	2f632f70 	svccs	0x00632f70
 bcc:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 bd0:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 bd4:	6f697461 	svcvs	0x00697461
 bd8:	2f72656e 	svccs	0x0072656e
 bdc:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 be0:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 be4:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 be8:	73610000 	cmnvc	r1, #0
 bec:	5f696963 	svcpl	0x00696963
 bf0:	70736964 	rsbsvc	r6, r3, r4, ror #18
 bf4:	2e79616c 	rpwcsez	f6, f1, #4.0
 bf8:	00010063 	andeq	r0, r1, r3, rrx
 bfc:	72707300 	rsbsvc	r7, r0, #0, 6
 c00:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
 c04:	00010068 	andeq	r0, r1, r8, rrx
 c08:	616d6900 	cmnvs	sp, r0, lsl #18
 c0c:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
 c10:	00000100 	andeq	r0, r0, r0, lsl #2
 c14:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 c18:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 c1c:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 c20:	00000100 	andeq	r0, r0, r0, lsl #2
 c24:	70617267 	rsbvc	r7, r1, r7, ror #4
 c28:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 c2c:	0100682e 	tsteq	r0, lr, lsr #16
 c30:	00000000 	andeq	r0, r0, r0
 c34:	21380205 	teqcs	r8, r5, lsl #4
 c38:	2e032000 	cdpcs	0, 0, cr2, cr3, cr0, {0}
 c3c:	bb596901 	bllt	165b048 <startup-0x1e9a4fb8>
 c40:	59696859 	stmdbpl	r9!, {r0, r3, r4, r6, fp, sp, lr}^
 c44:	76591308 	ldrbvc	r1, [r9], -r8, lsl #6
 c48:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
 c4c:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
 c50:	673e4c59 			; <UNDEFINED> instruction: 0x673e4c59
 c54:	675a3d3d 	smmlarvs	sl, sp, sp, r3
 c58:	3e842f67 	cdpcc	15, 8, cr2, cr4, cr7, {3}
 c5c:	5a3d3d67 	bpl	f50200 <startup-0x1f0afe00>
 c60:	842f6767 	strthi	r6, [pc], #-1895	; c68 <startup-0x1ffff398>
 c64:	2f4b3d67 	svccs	0x004b3d67
 c68:	3d3e683d 	ldccc	8, cr6, [lr, #-244]!	; 0xffffff0c
 c6c:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
 c70:	0067762f 	rsbeq	r7, r7, pc, lsr #12
 c74:	06010402 	streq	r0, [r1], -r2, lsl #8
 c78:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 c7c:	914c3d59 	cmpls	ip, r9, asr sp
 c80:	9f764b67 	svcls	0x00764b67
 c84:	0200304c 	andeq	r3, r0, #76	; 0x4c
 c88:	20060104 	andcs	r0, r6, r4, lsl #2
 c8c:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
 c90:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
 c94:	06200601 	strteq	r0, [r0], -r1, lsl #12
 c98:	3f3d3d83 	svccc	0x003d3d83
 c9c:	01040200 	mrseq	r0, R12_usr
 ca0:	83062006 	movwhi	r2, #24582	; 0x6006
 ca4:	003f3d3d 	eorseq	r3, pc, sp, lsr sp	; <UNPREDICTABLE>
 ca8:	06010402 	streq	r0, [r1], -r2, lsl #8
 cac:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 cb0:	343e3f3d 	ldrtcc	r3, [lr], #-3901	; 0xfffff0c3
 cb4:	2f2f843d 	svccs	0x002f843d
 cb8:	843e3e2f 	ldrthi	r3, [lr], #-3631	; 0xfffff1d1
 cbc:	73214b2f 			; <UNDEFINED> instruction: 0x73214b2f
 cc0:	214b2f4d 	cmpcs	fp, sp, asr #30
 cc4:	59684d73 	stmdbpl	r8!, {r0, r1, r4, r5, r6, r8, sl, fp, lr}^
 cc8:	73214b30 			; <UNDEFINED> instruction: 0x73214b30
 ccc:	73214b4d 			; <UNDEFINED> instruction: 0x73214b4d
 cd0:	754c4b4e 	strbvc	r4, [ip, #-2894]	; 0xfffff4b2
 cd4:	3d2f4b30 	vstmdbcc	pc!, {d4-d27}
 cd8:	02007321 	andeq	r7, r0, #-2080374784	; 0x84000000
 cdc:	4a060104 	bmi	1810f4 <startup-0x1fe7ef0c>
 ce0:	2f4b6b06 	svccs	0x004b6b06
 ce4:	0073213d 	rsbseq	r2, r3, sp, lsr r1
 ce8:	06010402 	streq	r0, [r1], -r2, lsl #8
 cec:	4b6b064a 	blmi	1ac261c <startup-0x1e53d9e4>
 cf0:	68753e4e 	ldmdavs	r5!, {r1, r2, r3, r6, r9, sl, fp, ip, sp}^
 cf4:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
 cf8:	4b4d7321 	blmi	135d984 <startup-0x1eca267c>
 cfc:	4d73212f 	ldfmie	f2, [r3, #-188]!	; 0xffffff44
 d00:	00080221 	andeq	r0, r8, r1, lsr #4
 d04:	00760101 	rsbseq	r0, r6, r1, lsl #2
 d08:	00020000 	andeq	r0, r2, r0
 d0c:	00000057 	andeq	r0, r0, r7, asr r0
 d10:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 d14:	0101000d 	tsteq	r1, sp
 d18:	00000101 	andeq	r0, r0, r1, lsl #2
 d1c:	00000100 	andeq	r0, r0, r0, lsl #2
 d20:	2f3a4301 	svccs	0x003a4301
 d24:	2f706f6d 	svccs	0x00706f6d
 d28:	6f4d2f63 	svcvs	0x004d2f63
 d2c:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 d30:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 d34:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 d38:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 d3c:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
 d40:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
 d44:	0000432f 	andeq	r4, r0, pc, lsr #6
 d48:	776f6c73 			; <UNDEFINED> instruction: 0x776f6c73
 d4c:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
 d50:	00632e74 	rsbeq	r2, r3, r4, ror lr
 d54:	73000001 	movwvc	r0, #1
 d58:	5f776f6c 	svcpl	0x00776f6c
 d5c:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 d60:	0100682e 	tsteq	r0, lr, lsr #16
 d64:	00000000 	andeq	r0, r0, r0
 d68:	26580205 	ldrbcs	r0, [r8], -r5, lsl #4
 d6c:	59152000 	ldmdbpl	r5, {sp}
 d70:	5984c99f 	stmibpl	r4, {r0, r1, r2, r3, r4, r7, r8, fp, lr, pc}
 d74:	3d3d754c 	cfldr32cc	mvfx7, [sp, #-304]!	; 0xfffffed0
 d78:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
 d7c:	01010007 	tsteq	r1, r7

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
       4:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
       8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
       c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
      10:	696c0073 	stmdbvs	ip!, {r0, r1, r4, r5, r6}^
      14:	49746867 	ldmdbmi	r4!, {r0, r1, r2, r5, r6, fp, sp, lr}^
      18:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      1c:	61726700 	cmnvs	r2, r0, lsl #14
      20:	616d4979 	smcvs	54425	; 0xd499
      24:	63006567 	movwvs	r6, #1383	; 0x567
      28:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
      2c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
      30:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
      34:	00737469 	rsbseq	r7, r3, r9, ror #8
      38:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
      3c:	61726b5f 	cmnvs	r2, pc, asr fp
      40:	665f6e00 	ldrbvs	r6, [pc], -r0, lsl #28
      44:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
      48:	61630073 	smcvs	12291	; 0x3003
      4c:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
      50:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
      54:	6f700074 	svcvs	0x00700074
      58:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
      5c:	00303172 	eorseq	r3, r0, r2, ror r1
      60:	706d6574 	rsbvc	r6, sp, r4, ror r5
      64:	74736143 	ldrbtvc	r6, [r3], #-323	; 0xfffffebd
      68:	6c42656c 	cfstr64vs	mvdx6, [r2], {108}	; 0x6c
      6c:	006b6361 	rsbeq	r6, fp, r1, ror #6
      70:	20554e47 	subscs	r4, r5, r7, asr #28
      74:	20393943 	eorscs	r3, r9, r3, asr #18
      78:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
      7c:	30322031 	eorscc	r2, r2, r1, lsr r0
      80:	32303731 	eorscc	r3, r0, #12845056	; 0xc40000
      84:	28203531 	stmdacs	r0!, {r0, r4, r5, r8, sl, ip, sp}
      88:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
      8c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
      90:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
      94:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
      98:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
      9c:	362d6465 	strtcc	r6, [sp], -r5, ror #8
      a0:	6172622d 	cmnvs	r2, sp, lsr #4
      a4:	2068636e 	rsbcs	r6, r8, lr, ror #6
      a8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
      ac:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
      b0:	35343220 	ldrcc	r3, [r4, #-544]!	; 0xfffffde0
      b4:	5d323135 	ldfpls	f3, [r2, #-212]!	; 0xffffff2c
      b8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
      bc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
      c0:	616d2d20 	cmnvs	sp, r0, lsr #26
      c4:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
      c8:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
      cc:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
      d0:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
      d4:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
      d8:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
      dc:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
      e0:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
      e4:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
      e8:	616d2d20 	cmnvs	sp, r0, lsr #26
      ec:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
      f0:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
      f4:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
      f8:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
      fc:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
     100:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
     104:	00393963 	eorseq	r3, r9, r3, ror #18
     108:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     10c:	00726574 	rsbseq	r6, r2, r4, ror r5
     110:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     114:	624f656c 	subvs	r6, pc, #108, 10	; 0x1b000000
     118:	6f6d006a 	svcvs	0x006d006a
     11c:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     120:	696f5072 	stmdbvs	pc!, {r1, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
     124:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     128:	65727000 	ldrbvs	r7, [r2, #-0]!
     12c:	625f7373 	subsvs	r7, pc, #-872415231	; 0xcc000001
     130:	6b63616c 	blvs	18d86e8 <startup-0x1e727918>
     134:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     138:	61630073 	smcvs	12291	; 0x3003
     13c:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     140:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     144:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
     148:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     14c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     150:	74730065 	ldrbtvc	r0, [r3], #-101	; 0xffffff9b
     154:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     158:	65740070 	ldrbvs	r0, [r4, #-112]!	; 0xffffff90
     15c:	00317478 	eorseq	r7, r1, r8, ror r4
     160:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     164:	4c726574 	cfldr64mi	mvdx6, [r2], #-464	; 0xfffffe30
     168:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     16c:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     170:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
     174:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     178:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     17c:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     180:	6f4d706d 	svcvs	0x004d706d
     184:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     188:	61724772 	cmnvs	r2, r2, ror r7
     18c:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     190:	00327478 	eorseq	r7, r2, r8, ror r4
     194:	73657270 	cmnvc	r5, #112, 4
     198:	61724773 	cmnvs	r2, r3, ror r7
     19c:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     1a0:	00347478 	eorseq	r7, r4, r8, ror r4
     1a4:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     1a8:	65740033 	ldrbvs	r0, [r4, #-51]!	; 0xffffffcd
     1ac:	00357478 	eorseq	r7, r5, r8, ror r4
     1b0:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     1b4:	65740036 	ldrbvs	r0, [r4, #-54]!	; 0xffffffca
     1b8:	6742706d 	strbvs	r7, [r2, -sp, rrx]
     1bc:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1c0:	74003874 	strvc	r3, [r0], #-2164	; 0xfffff78c
     1c4:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     1c8:	616c625f 	cmnvs	ip, pc, asr r2
     1cc:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     1d0:	00737469 	rsbseq	r7, r3, r9, ror #8
     1d4:	706d6574 	rsbvc	r6, sp, r4, ror r5
     1d8:	736e6f4d 	cmnvc	lr, #308	; 0x134
     1dc:	4c726574 	cfldr64mi	mvdx6, [r2], #-464	; 0xfffffe30
     1e0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     1e4:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1e8:	64003774 	strvs	r3, [r0], #-1908	; 0xfffff88c
     1ec:	5f776172 	svcpl	0x00776172
     1f0:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     1f4:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
     1f8:	6b63616c 	blvs	18d87b0 <startup-0x1e727850>
     1fc:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     200:	6d003974 	vstrvs.16	s6, [r0, #-232]	; 0xffffff18	; <UNPREDICTABLE>
     204:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     208:	6f507265 	svcvs	0x00507265
     20c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     210:	6d003272 	sfmvs	f3, 4, [r0, #-456]	; 0xfffffe38
     214:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     218:	6f507265 	svcvs	0x00507265
     21c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     220:	72003372 	andvc	r3, r0, #-939524095	; 0xc8000001
     224:	0032776f 	eorseq	r7, r2, pc, ror #14
     228:	70736964 	rsbsvc	r6, r3, r4, ror #18
     22c:	0079616c 	rsbseq	r6, r9, ip, ror #2
     230:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     234:	5f726574 	svcpl	0x00726574
     238:	63616c62 	cmnvs	r1, #25088	; 0x6200
     23c:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     240:	69007374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
     244:	5f74696e 	svcpl	0x0074696e
     248:	00707061 	rsbseq	r7, r0, r1, rrx
     24c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     250:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
     254:	72700074 	rsbsvc	r0, r0, #116	; 0x74
     258:	4f737365 	svcmi	0x00737365
     25c:	64006a62 	strvs	r6, [r0], #-2658	; 0xfffff59e
     260:	5f776172 	svcpl	0x00776172
     264:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     268:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
     26c:	6b63616c 	blvs	18d8824 <startup-0x1e7277dc>
     270:	6172675f 	cmnvs	r2, pc, asr r7
     274:	696c5f79 	stmdbvs	ip!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     278:	00746867 	rsbseq	r6, r4, r7, ror #16
     27c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     280:	34726574 	ldrbtcc	r6, [r2], #-1396	; 0xfffffa8c
     284:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     288:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     28c:	6f700035 	svcvs	0x00700035
     290:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     294:	70003672 	andvc	r3, r0, r2, ror r6
     298:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     29c:	00377265 	eorseq	r7, r7, r5, ror #4
     2a0:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     2a4:	38726574 	ldmdacc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     2a8:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     2ac:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     2b0:	65740039 	ldrbvs	r0, [r4, #-57]!	; 0xffffffc7
     2b4:	6143706d 	cmpvs	r3, sp, rrx
     2b8:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     2bc:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     2c0:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
     2c4:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
     2c8:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
     2cc:	64006874 	strvs	r6, [r0], #-2164	; 0xfffff78c
     2d0:	5f776172 	svcpl	0x00776172
     2d4:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     2d8:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
     2dc:	6b63616c 	blvs	18d8894 <startup-0x1e72776c>
     2e0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     2e4:	73007468 	movwvc	r7, #1128	; 0x468
     2e8:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     2ec:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     2f0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     2f4:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     2f8:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
     2fc:	5f79616c 	svcpl	0x0079616c
     300:	69746e75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     304:	65745f6c 	ldrbvs	r5, [r4, #-3948]!	; 0xfffff094
     308:	74007478 	strvc	r7, [r0], #-1144	; 0xfffffb88
     30c:	4d706d65 	ldclmi	13, cr6, [r0, #-404]!	; 0xfffffe6c
     310:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     314:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
     318:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     31c:	63616c42 	cmnvs	r1, #16896	; 0x4200
     320:	7270006b 	rsbsvc	r0, r0, #107	; 0x6b
     324:	5f737365 	svcpl	0x00737365
     328:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     32c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     330:	6e610073 	mcrvs	0, 3, r0, cr1, cr3, {3}
     334:	74616d69 	strbtvc	r6, [r1], #-3433	; 0xfffff297
     338:	5f6e6f69 	svcpl	0x006e6f69
     33c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
     340:	6e610064 	cdpvs	0, 6, cr0, cr1, cr4, {3}
     344:	74616d69 	strbtvc	r6, [r1], #-3433	; 0xfffff297
     348:	5f6e6f69 	svcpl	0x006e6f69
     34c:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
     350:	00726574 	rsbseq	r6, r2, r4, ror r5
     354:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     358:	4f726574 	svcmi	0x00726574
     35c:	73006a62 	movwvc	r6, #2658	; 0xa62
     360:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xfffff597
     364:	00657079 	rsbeq	r7, r5, r9, ror r0
     368:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     36c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
     370:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     374:	00737469 	rsbseq	r7, r3, r9, ror #8
     378:	6d61476e 	stclvs	7, cr4, [r1, #-440]!	; 0xfffffe48
     37c:	6a624f65 	bvs	1894118 <startup-0x1e76bee8>
     380:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
     384:	65727000 	ldrbvs	r7, [r2, #-0]!
     388:	6c5f7373 	mrrcvs	3, 7, r7, pc, cr3	; <UNPREDICTABLE>
     38c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     390:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     394:	72700073 	rsbsvc	r0, r0, #115	; 0x73
     398:	49737365 	ldmdbmi	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
     39c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     3a0:	616d6900 	cmnvs	sp, r0, lsl #18
     3a4:	00736567 	rsbseq	r6, r3, r7, ror #10
     3a8:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     3ac:	65745f74 	ldrbvs	r5, [r4, #-3956]!	; 0xfffff08c
     3b0:	63007478 	movwvs	r7, #1144	; 0x478
     3b4:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
     3b8:	665f746e 	ldrbvs	r7, [pc], -lr, ror #8
     3bc:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
     3c0:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     3c4:	694c656c 	stmdbvs	ip, {r2, r3, r5, r6, r8, sl, sp, lr}^
     3c8:	00746867 	rsbseq	r6, r4, r7, ror #16
     3cc:	706d6574 	rsbvc	r6, sp, r4, ror r5
     3d0:	73657250 	cmnvc	r5, #80, 4
     3d4:	61724773 	cmnvs	r2, r3, ror r7
     3d8:	6e690079 	mcrvs	0, 3, r0, cr9, cr9, {3}
     3dc:	70537469 	subsvc	r7, r3, r9, ror #8
     3e0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     3e4:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     3e8:	6143706d 	cmpvs	r3, sp, rrx
     3ec:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     3f0:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     3f4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     3f8:	74695470 	strbtvc	r5, [r9], #-1136	; 0xfffffb90
     3fc:	6c42656c 	cfstr64vs	mvdx6, [r2], {108}	; 0x6c
     400:	006b6361 	rsbeq	r6, fp, r1, ror #6
     404:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     408:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     40c:	61686320 	cmnvs	r8, r0, lsr #6
     410:	72640072 	rsbvc	r0, r4, #114	; 0x72
     414:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
     418:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     41c:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
     420:	5f6b6361 	svcpl	0x006b6361
     424:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     428:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     42c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     430:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     434:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     438:	00737469 	rsbseq	r7, r3, r9, ror #8
     43c:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     440:	625f656c 	subsvs	r6, pc, #108, 10	; 0x1b000000
     444:	6b63616c 	blvs	18d89fc <startup-0x1e727604>
     448:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     44c:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
     450:	4f656c74 	svcmi	0x00656c74
     454:	43006a62 	movwmi	r6, #2658	; 0xa62
     458:	6f6d2f3a 	svcvs	0x006d2f3a
     45c:	2f632f70 	svccs	0x00632f70
     460:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     464:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     468:	6f697461 	svcvs	0x00697461
     46c:	2f72656e 	svccs	0x0072656e
     470:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     474:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     478:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     47c:	6174732f 	cmnvs	r4, pc, lsr #6
     480:	70757472 	rsbsvc	r7, r5, r2, ror r4
     484:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
     488:	4f656d61 	svcmi	0x00656d61
     48c:	63656a62 	cmnvs	r5, #401408	; 0x62000
     490:	63007374 	movwvs	r7, #884	; 0x374
     494:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     498:	61724765 	cmnvs	r2, r5, ror #14
     49c:	6f6d0079 	svcvs	0x006d0079
     4a0:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     4a4:	61724772 	cmnvs	r2, r2, ror r7
     4a8:	69740079 	ldmdbvs	r4!, {r0, r3, r4, r5, r6}^
     4ac:	47656c74 			; <UNDEFINED> instruction: 0x47656c74
     4b0:	00796172 	rsbseq	r6, r9, r2, ror r1
     4b4:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
     4b8:	5f746e65 	svcpl	0x00746e65
     4bc:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
     4c0:	74006e65 	strvc	r6, [r0], #-3685	; 0xfffff19b
     4c4:	50706d65 	rsbspl	r6, r0, r5, ror #26
     4c8:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     4cc:	63616c42 	cmnvs	r1, #16896	; 0x4200
     4d0:	6762006b 	strbvs	r0, [r2, -fp, rrx]!
     4d4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     4d8:	6c620073 	stclvs	0, cr0, [r2], #-460	; 0xfffffe34
     4dc:	496b6361 	stmdbmi	fp!, {r0, r5, r6, r8, r9, sp, lr}^
     4e0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     4e4:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     4e8:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     4ec:	6172675f 	cmnvs	r2, pc, asr r7
     4f0:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     4f4:	63007374 	movwvs	r7, #884	; 0x374
     4f8:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     4fc:	616d4965 	cmnvs	sp, r5, ror #18
     500:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
     504:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     508:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     50c:	66007365 	strvs	r7, [r0], -r5, ror #6
     510:	31657269 	cmncc	r5, r9, ror #4
     514:	72696600 	rsbvc	r6, r9, #0, 12
     518:	66003265 	strvs	r3, [r0], -r5, ror #4
     51c:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     520:	72696600 	rsbvc	r6, r9, #0, 12
     524:	70003465 	andvc	r3, r0, r5, ror #8
     528:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     52c:	63616c42 	cmnvs	r1, #16896	; 0x4200
     530:	6f6d006b 	svcvs	0x006d006b
     534:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     538:	616d4972 	smcvs	54418	; 0xd492
     53c:	79006567 	stmdbvc	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     540:	00736f50 	rsbseq	r6, r3, r0, asr pc
     544:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     548:	74003231 	strvc	r3, [r0], #-561	; 0xfffffdcf
     54c:	54706d65 	ldrbtpl	r6, [r0], #-3429	; 0xfffff29b
     550:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     554:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     558:	70750074 	rsbsvc	r0, r5, r4, ror r0
     55c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     560:	65727000 	ldrbvs	r7, [r2, #-0]!
     564:	6d497373 	stclvs	3, cr7, [r9, #-460]	; 0xfffffe34
     568:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     56c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     570:	74695470 	strbtvc	r5, [r9], #-1136	; 0xfffffb90
     574:	7247656c 	subvc	r6, r7, #108, 10	; 0x1b000000
     578:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     57c:	776f6c53 			; <UNDEFINED> instruction: 0x776f6c53
     580:	74786554 	ldrbtvc	r6, [r8], #-1364	; 0xfffffaac
     584:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
     588:	745f3874 	ldrbvc	r3, [pc], #-2164	; 590 <startup-0x1ffffa70>
     58c:	63616200 	cmnvs	r1, #0, 4
     590:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
     594:	4c726566 	cfldr64mi	mvdx6, [r2], #-408	; 0xfffffe68
     598:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     59c:	63616200 	cmnvs	r1, #0, 4
     5a0:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
     5a4:	47726566 	ldrbmi	r6, [r2, -r6, ror #10]!
     5a8:	00796172 	rsbseq	r6, r9, r2, ror r1
     5ac:	706d6574 	rsbvc	r6, sp, r4, ror r5
     5b0:	73657250 	cmnvc	r5, #80, 4
     5b4:	67694c73 			; <UNDEFINED> instruction: 0x67694c73
     5b8:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     5bc:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
     5c0:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
     5c4:	78007463 	stmdavc	r0, {r0, r1, r5, r6, sl, ip, sp, lr}
     5c8:	00736f50 	rsbseq	r6, r3, r0, asr pc
     5cc:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     5d0:	6c42656c 	cfstr64vs	mvdx6, [r2], {108}	; 0x6c
     5d4:	006b6361 	rsbeq	r6, fp, r1, ror #6
     5d8:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     5dc:	74003031 	strvc	r3, [r0], #-49	; 0xffffffcf
     5e0:	31747865 	cmncc	r4, r5, ror #16
     5e4:	65680031 	strbvs	r0, [r8, #-49]!	; 0xffffffcf
     5e8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     5ec:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     5f0:	7270006e 	rsbsvc	r0, r0, #110	; 0x6e
     5f4:	4c737365 	ldclmi	3, cr7, [r3], #-404	; 0xfffffe6c
     5f8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     5fc:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     600:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     604:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     608:	67007365 	strvs	r7, [r0, -r5, ror #6]
     60c:	4f656d61 	svcmi	0x00656d61
     610:	63656a62 	cmnvs	r5, #401408	; 0x62000
     614:	64705574 	ldrbtvs	r5, [r0], #-1396	; 0xfffffa8c
     618:	00657461 	rsbeq	r7, r5, r1, ror #8
     61c:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     620:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     624:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     628:	6f62616c 	svcvs	0x0062616c
     62c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     630:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     634:	5049442f 	subpl	r4, r9, pc, lsr #8
     638:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     63c:	2f686374 	svccs	0x00686374
     640:	61672f43 	cmnvs	r7, r3, asr #30
     644:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
     648:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     64c:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
     650:	00736968 	rsbseq	r6, r3, r8, ror #18
     654:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     658:	61724735 	cmnvs	r2, r5, lsr r7
     65c:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     660:	47316572 			; <UNDEFINED> instruction: 0x47316572
     664:	00796172 	rsbseq	r6, r9, r2, ror r1
     668:	706d6574 	rsbvc	r6, sp, r4, ror r5
     66c:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     670:	61724732 	cmnvs	r2, r2, lsr r7
     674:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     678:	47336572 			; <UNDEFINED> instruction: 0x47336572
     67c:	00796172 	rsbseq	r6, r9, r2, ror r1
     680:	706d6574 	rsbvc	r6, sp, r4, ror r5
     684:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     688:	61724734 	cmnvs	r2, r4, lsr r7
     68c:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     690:	6c426572 	cfstr64vs	mvdx6, [r2], {114}	; 0x72
     694:	006b6361 	rsbeq	r6, fp, r1, ror #6
     698:	706d6574 	rsbvc	r6, sp, r4, ror r5
     69c:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     6a0:	61724733 	cmnvs	r2, r3, lsr r7
     6a4:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     6a8:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     6ac:	6c426572 	cfstr64vs	mvdx6, [r2], {114}	; 0x72
     6b0:	006b6361 	rsbeq	r6, fp, r1, ror #6
     6b4:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     6b8:	67694c31 			; <UNDEFINED> instruction: 0x67694c31
     6bc:	66007468 	strvs	r7, [r0], -r8, ror #8
     6c0:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     6c4:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     6c8:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     6cc:	5f326572 	svcpl	0x00326572
     6d0:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     6d4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     6d8:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     6dc:	5f346572 	svcpl	0x00346572
     6e0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     6e4:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     6e8:	66007374 			; <UNDEFINED> instruction: 0x66007374
     6ec:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     6f0:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     6f4:	6f700074 	svcvs	0x00700074
     6f8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     6fc:	70003172 	andvc	r3, r0, r2, ror r1
     700:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     704:	00337265 	eorseq	r7, r3, r5, ror #4
     708:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     70c:	72675f35 	rsbvc	r5, r7, #53, 30	; 0xd4
     710:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     714:	00737469 	rsbseq	r7, r3, r9, ror #8
     718:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     71c:	616d4933 	cmnvs	sp, r3, lsr r9
     720:	70006567 	andvc	r6, r0, r7, ror #10
     724:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     728:	00307265 	eorseq	r7, r0, r5, ror #4
     72c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     730:	67694c35 			; <UNDEFINED> instruction: 0x67694c35
     734:	70007468 	andvc	r7, r0, r8, ror #8
     738:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     73c:	00327265 	eorseq	r7, r2, r5, ror #4
     740:	706d6574 	rsbvc	r6, sp, r4, ror r5
     744:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     748:	61724735 	cmnvs	r2, r5, lsr r7
     74c:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     750:	5f316572 	svcpl	0x00316572
     754:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     758:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     75c:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     760:	4c326572 	cfldr32mi	mvfx6, [r2], #-456	; 0xfffffe38
     764:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     768:	72696600 	rsbvc	r6, r9, #0, 12
     76c:	6c5f3165 	ldfvse	f3, [pc], {101}	; 0x65
     770:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     774:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     778:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     77c:	5f326572 	svcpl	0x00326572
     780:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     784:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     788:	66007374 			; <UNDEFINED> instruction: 0x66007374
     78c:	4f657269 	svcmi	0x00657269
     790:	66006a62 	strvs	r6, [r0], -r2, ror #20
     794:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     798:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     79c:	72696600 	rsbvc	r6, r9, #0, 12
     7a0:	675f3465 	ldrbvs	r3, [pc, -r5, ror #8]
     7a4:	5f796172 	svcpl	0x00796172
     7a8:	73746962 	cmnvc	r4, #1605632	; 0x188000
     7ac:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     7b0:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     7b4:	694c3365 	stmdbvs	ip, {r0, r2, r5, r6, r8, r9, ip, sp}^
     7b8:	00746867 	rsbseq	r6, r4, r7, ror #16
     7bc:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     7c0:	616d4934 	cmnvs	sp, r4, lsr r9
     7c4:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
     7c8:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     7cc:	31657269 	cmncc	r5, r9, ror #4
     7d0:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     7d4:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     7d8:	54747372 	ldrbtpl	r7, [r4], #-882	; 0xfffffc8e
     7dc:	00656d69 	rsbeq	r6, r5, r9, ror #26
     7e0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     7e4:	7269665f 	rsbvc	r6, r9, #99614720	; 0x5f00000
     7e8:	69660065 	stmdbvs	r6!, {r0, r2, r5, r6}^
     7ec:	5f356572 	svcpl	0x00356572
     7f0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     7f4:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     7f8:	66007374 			; <UNDEFINED> instruction: 0x66007374
     7fc:	49657269 	stmdbmi	r5!, {r0, r3, r5, r6, r9, ip, sp, lr}^
     800:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     804:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     808:	49316572 	ldmdbmi	r1!, {r1, r4, r5, r6, r8, sl, sp, lr}
     80c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     810:	72696600 	rsbvc	r6, r9, #0, 12
     814:	72473465 	subvc	r3, r7, #1694498816	; 0x65000000
     818:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     81c:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     820:	31657269 	cmncc	r5, r9, ror #4
     824:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     828:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     82c:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     830:	694c3465 	stmdbvs	ip, {r0, r2, r5, r6, sl, ip, sp}^
     834:	00746867 	rsbseq	r6, r4, r7, ror #16
     838:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     83c:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     840:	5f746867 	svcpl	0x00746867
     844:	73746962 	cmnvc	r4, #1605632	; 0x188000
     848:	72696600 	rsbvc	r6, r9, #0, 12
     84c:	6d493565 	cfstr64vs	mvdx3, [r9, #-404]	; 0xfffffe6c
     850:	00656761 	rsbeq	r6, r5, r1, ror #14
     854:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     858:	616c625f 	cmnvs	ip, pc, asr r2
     85c:	325f6b63 	subscc	r6, pc, #101376	; 0x18c00
     860:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     864:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     868:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     86c:	4c326572 	cfldr32mi	mvfx6, [r2], #-456	; 0xfffffe38
     870:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     874:	72696600 	rsbvc	r6, r9, #0, 12
     878:	6d493265 	sfmvs	f3, 2, [r9, #-404]	; 0xfffffe6c
     87c:	00656761 	rsbeq	r6, r5, r1, ror #14
     880:	706d6574 	rsbvc	r6, sp, r4, ror r5
     884:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     888:	67694c35 			; <UNDEFINED> instruction: 0x67694c35
     88c:	43007468 	movwmi	r7, #1128	; 0x468
     890:	6f6d2f3a 	svcvs	0x006d2f3a
     894:	2f632f70 	svccs	0x00632f70
     898:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     89c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     8a0:	6f697461 	svcvs	0x00697461
     8a4:	2f72656e 	svccs	0x0072656e
     8a8:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     8ac:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     8b0:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     8b4:	7269662f 	rsbvc	r6, r9, #49283072	; 0x2f00000
     8b8:	00632e65 	rsbeq	r2, r3, r5, ror #28
     8bc:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     8c0:	72675f33 	rsbvc	r5, r7, #51, 30	; 0xcc
     8c4:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     8c8:	00737469 	rsbseq	r7, r3, r9, ror #8
     8cc:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     8d0:	68676952 	stmdavs	r7!, {r1, r4, r6, r8, fp, sp, lr}^
     8d4:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
     8d8:	6c006575 	cfstr32vs	mvfx6, [r0], {117}	; 0x75
     8dc:	4c747361 	ldclmi	3, cr7, [r4], #-388	; 0xfffffe7c
     8e0:	56746665 	ldrbtpl	r6, [r4], -r5, ror #12
     8e4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     8e8:	2f3a4300 	svccs	0x003a4300
     8ec:	2f706f6d 	svccs	0x00706f6d
     8f0:	6f4d2f63 	svcvs	0x004d2f63
     8f4:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     8f8:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     8fc:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     900:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     904:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     908:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     90c:	702f432f 	eorvc	r4, pc, pc, lsr #6
     910:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     914:	00632e72 	rsbeq	r2, r3, r2, ror lr
     918:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     91c:	70557265 	subsvc	r7, r5, r5, ror #4
     920:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     924:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     928:	72694270 	rsbvc	r4, r9, #112, 4
     92c:	694c3264 	stmdbvs	ip, {r2, r5, r6, r9, ip, sp}^
     930:	00746867 	rsbseq	r6, r4, r7, ror #16
     934:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     938:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     93c:	5f746867 	svcpl	0x00746867
     940:	73746962 	cmnvc	r4, #1605632	; 0x188000
     944:	72696200 	rsbvc	r6, r9, #0, 4
     948:	6d493464 	cfstrdvs	mvd3, [r9, #-400]	; 0xfffffe70
     94c:	00656761 	rsbeq	r6, r5, r1, ror #14
     950:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     954:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     958:	5f746867 	svcpl	0x00746867
     95c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     960:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     964:	72694270 	rsbvc	r4, r9, #112, 4
     968:	694c3564 	stmdbvs	ip, {r2, r5, r6, r8, sl, ip, sp}^
     96c:	00746867 	rsbseq	r6, r4, r7, ror #16
     970:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     974:	31726574 	cmncc	r2, r4, ror r5
     978:	69620034 	stmdbvs	r2!, {r2, r4, r5}^
     97c:	5f356472 	svcpl	0x00356472
     980:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     984:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     988:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     98c:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     990:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     994:	6f700074 	svcvs	0x00700074
     998:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     99c:	00393172 	eorseq	r3, r9, r2, ror r1
     9a0:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     9a4:	67694c31 			; <UNDEFINED> instruction: 0x67694c31
     9a8:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
     9ac:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     9b0:	63616c42 	cmnvs	r1, #16896	; 0x4200
     9b4:	6962006b 	stmdbvs	r2!, {r0, r1, r3, r5, r6}^
     9b8:	47316472 			; <UNDEFINED> instruction: 0x47316472
     9bc:	00796172 	rsbseq	r6, r9, r2, ror r1
     9c0:	706d6574 	rsbvc	r6, sp, r4, ror r5
     9c4:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     9c8:	616c4234 	cmnvs	ip, r4, lsr r2
     9cc:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     9d0:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     9d4:	63616c42 	cmnvs	r1, #16896	; 0x4200
     9d8:	6f70006b 	svcvs	0x0070006b
     9dc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     9e0:	00303272 	eorseq	r3, r0, r2, ror r2
     9e4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     9e8:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     9ec:	69620031 	stmdbvs	r2!, {r0, r4, r5}^
     9f0:	47346472 			; <UNDEFINED> instruction: 0x47346472
     9f4:	00796172 	rsbseq	r6, r9, r2, ror r1
     9f8:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     9fc:	616c4232 	cmnvs	ip, r2, lsr r2
     a00:	70006b63 	andvc	r6, r0, r3, ror #22
     a04:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     a08:	34327265 	ldrtcc	r7, [r2], #-613	; 0xfffffd9b
     a0c:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     a10:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     a14:	74003631 	strvc	r3, [r0], #-1585	; 0xfffff9cf
     a18:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     a1c:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     a20:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     a24:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     a28:	72694270 	rsbvc	r4, r9, #112, 4
     a2c:	72473464 	subvc	r3, r7, #100, 8	; 0x64000000
     a30:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     a34:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     a38:	4c647269 	sfmmi	f7, 2, [r4], #-420	; 0xfffffe5c
     a3c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     a40:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     a44:	72694270 	rsbvc	r4, r9, #112, 4
     a48:	72473564 	subvc	r3, r7, #100, 10	; 0x19000000
     a4c:	70007961 	andvc	r7, r0, r1, ror #18
     a50:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     a54:	33317265 	teqcc	r1, #1342177286	; 0x50000006
     a58:	72696200 	rsbvc	r6, r9, #0, 4
     a5c:	625f3264 	subsvs	r3, pc, #100, 4	; 0x40000006
     a60:	6b63616c 	blvs	18d9018 <startup-0x1e726fe8>
     a64:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     a68:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     a6c:	5f316472 	svcpl	0x00316472
     a70:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     a74:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     a78:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     a7c:	49366472 	ldmdbmi	r6!, {r1, r4, r5, r6, sl, sp, lr}
     a80:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     a84:	72696200 	rsbvc	r6, r9, #0, 4
     a88:	625f3364 	subsvs	r3, pc, #100, 6	; 0x90000001
     a8c:	6b63616c 	blvs	18d9044 <startup-0x1e726fbc>
     a90:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     a94:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     a98:	5f346472 	svcpl	0x00346472
     a9c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     aa0:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     aa4:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     aa8:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     aac:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     ab0:	69620065 	stmdbvs	r2!, {r0, r2, r5, r6}^
     ab4:	5f316472 	svcpl	0x00316472
     ab8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     abc:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     ac0:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     ac4:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     ac8:	616c625f 	cmnvs	ip, pc, asr r2
     acc:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     ad0:	00737469 	rsbseq	r7, r3, r9, ror #8
     ad4:	706d6574 	rsbvc	r6, sp, r4, ror r5
     ad8:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     adc:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     ae0:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
     ae4:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     ae8:	6172675f 	cmnvs	r2, pc, asr r7
     aec:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     af0:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     af4:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     af8:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     afc:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     b00:	72694270 	rsbvc	r4, r9, #112, 4
     b04:	694c3464 	stmdbvs	ip, {r2, r5, r6, sl, ip, sp}^
     b08:	00746867 	rsbseq	r6, r4, r7, ror #16
     b0c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     b10:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     b14:	61724733 	cmnvs	r2, r3, lsr r7
     b18:	69620079 	stmdbvs	r2!, {r0, r3, r4, r5, r6}^
     b1c:	5f346472 	svcpl	0x00346472
     b20:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     b24:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     b28:	6f700073 	svcvs	0x00700073
     b2c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     b30:	00333272 	eorseq	r3, r3, r2, ror r2
     b34:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b38:	67694c35 			; <UNDEFINED> instruction: 0x67694c35
     b3c:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
     b40:	49647269 	stmdbmi	r4!, {r0, r3, r5, r6, r9, ip, sp, lr}^
     b44:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     b48:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     b4c:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     b50:	42356472 	eorsmi	r6, r5, #1912602624	; 0x72000000
     b54:	6b63616c 	blvs	18d910c <startup-0x1e726ef4>
     b58:	72696200 	rsbvc	r6, r9, #0, 4
     b5c:	6c423464 	cfstrdvs	mvd3, [r2], {100}	; 0x64
     b60:	006b6361 	rsbeq	r6, fp, r1, ror #6
     b64:	706d6574 	rsbvc	r6, sp, r4, ror r5
     b68:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     b6c:	616c4232 	cmnvs	ip, r2, lsr r2
     b70:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     b74:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     b78:	6172675f 	cmnvs	r2, pc, asr r7
     b7c:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     b80:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     b84:	31647269 	cmncc	r4, r9, ror #4
     b88:	63616c42 	cmnvs	r1, #16896	; 0x4200
     b8c:	6962006b 	stmdbvs	r2!, {r0, r1, r3, r5, r6}^
     b90:	4c326472 	cfldrsmi	mvf6, [r2], #-456	; 0xfffffe38
     b94:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     b98:	2f3a4300 	svccs	0x003a4300
     b9c:	2f706f6d 	svccs	0x00706f6d
     ba0:	6f4d2f63 	svcvs	0x004d2f63
     ba4:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     ba8:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     bac:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     bb0:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     bb4:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     bb8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     bbc:	622f432f 	eorvs	r4, pc, #-1140850688	; 0xbc000000
     bc0:	2e647269 	cdpcs	2, 6, cr7, cr4, cr9, {3}
     bc4:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
     bc8:	625f7469 	subsvs	r7, pc, #1761607680	; 0x69000000
     bcc:	00647269 	rsbeq	r7, r4, r9, ror #4
     bd0:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     bd4:	006a624f 	rsbeq	r6, sl, pc, asr #4
     bd8:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     bdc:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     be0:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     be4:	00737469 	rsbseq	r7, r3, r9, ror #8
     be8:	706d6574 	rsbvc	r6, sp, r4, ror r5
     bec:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     bf0:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     bf4:	72696200 	rsbvc	r6, r9, #0, 4
     bf8:	72473564 	subvc	r3, r7, #100, 10	; 0x19000000
     bfc:	62007961 	andvs	r7, r0, #1589248	; 0x184000
     c00:	31647269 	cmncc	r4, r9, ror #4
     c04:	616c625f 	cmnvs	ip, pc, asr r2
     c08:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     c0c:	00737469 	rsbseq	r7, r3, r9, ror #8
     c10:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c14:	616d4931 	cmnvs	sp, r1, lsr r9
     c18:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
     c1c:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     c20:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     c24:	6e696600 	cdpvs	6, 6, cr6, cr9, cr0, {0}
     c28:	6f506c61 	svcvs	0x00506c61
     c2c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     c30:	65740072 	ldrbvs	r0, [r4, #-114]!	; 0xffffff8e
     c34:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     c38:	6c426472 	cfstrdvs	mvd6, [r2], {114}	; 0x72
     c3c:	006b6361 	rsbeq	r6, fp, r1, ror #6
     c40:	706d6574 	rsbvc	r6, sp, r4, ror r5
     c44:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     c48:	616c4233 	cmnvs	ip, r3, lsr r2
     c4c:	70006b63 	andvc	r6, r0, r3, ror #22
     c50:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     c54:	31317265 	teqcc	r1, r5, ror #4
     c58:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     c5c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     c60:	62003231 	andvs	r3, r0, #268435459	; 0x10000003
     c64:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     c68:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     c6c:	69620074 	stmdbvs	r2!, {r2, r4, r5, r6}^
     c70:	49356472 	ldmdbmi	r5!, {r1, r4, r5, r6, sl, sp, lr}
     c74:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     c78:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     c7c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     c80:	70003531 	andvc	r3, r0, r1, lsr r5
     c84:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     c88:	37317265 	ldrcc	r7, [r1, -r5, ror #4]!
     c8c:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     c90:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     c94:	62003831 	andvs	r3, r0, #3211264	; 0x310000
     c98:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     c9c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     ca0:	6f700065 	svcvs	0x00700065
     ca4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     ca8:	00323272 	eorseq	r3, r2, r2, ror r2
     cac:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     cb0:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     cb4:	5f746867 	svcpl	0x00746867
     cb8:	73746962 	cmnvc	r4, #1605632	; 0x188000
     cbc:	67617000 	strbvs	r7, [r1, -r0]!
     cc0:	72670065 	rsbvc	r0, r7, #101	; 0x65
     cc4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
     cc8:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
     ccc:	62006461 	andvs	r6, r0, #1627389952	; 0x61000000
     cd0:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     cd4:	61760072 	cmnvs	r6, r2, ror r0
     cd8:	0065756c 	rsbeq	r7, r5, ip, ror #10
     cdc:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
     ce0:	6400326c 	strvs	r3, [r0], #-620	; 0xfffffd94
     ce4:	5f776172 	svcpl	0x00776172
     ce8:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     cec:	6a626f5f 	bvs	189ca70 <startup-0x1e763590>
     cf0:	00746365 	rsbseq	r6, r4, r5, ror #6
     cf4:	616c6564 	cmnvs	ip, r4, ror #10
     cf8:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     cfc:	006f7263 	rsbeq	r7, pc, r3, ror #4
     d00:	70617267 	rsbvc	r7, r1, r7, ror #4
     d04:	5f636968 	svcpl	0x00636968
     d08:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
     d0c:	6f635f65 	svcvs	0x00635f65
     d10:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
     d14:	6c630064 	stclvs	0, cr0, [r3], #-400	; 0xfffffe70
     d18:	5f726165 	svcpl	0x00726165
     d1c:	6b636162 	blvs	18d92ac <startup-0x1e726d54>
     d20:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     d24:	70007265 	andvc	r7, r0, r5, ror #4
     d28:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
     d2c:	624f6700 	subvs	r6, pc, #0, 14
     d30:	7267006a 	rsbvc	r0, r7, #106	; 0x6a
     d34:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
     d38:	72645f63 	rsbvc	r5, r4, #396	; 0x18c
     d3c:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
     d40:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
     d44:	6564006e 	strbvs	r0, [r4, #-110]!	; 0xffffff92
     d48:	5f79616c 	svcpl	0x0079616c
     d4c:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
     d50:	68730069 	ldmdavs	r3!, {r0, r3, r5, r6}^
     d54:	665f776f 	ldrbvs	r7, [pc], -pc, ror #14
     d58:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
     d5c:	61726400 	cmnvs	r2, r0, lsl #8
     d60:	70735f77 	rsbsvc	r5, r3, r7, ror pc
     d64:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     d68:	6c656400 	cfstrdvs	mvd6, [r5], #-0
     d6c:	355f7961 	ldrbcc	r7, [pc, #-2401]	; 413 <startup-0x1ffffbed>
     d70:	736e3030 	cmnvc	lr, #48	; 0x30
     d74:	61726700 	cmnvs	r2, r0, lsl #14
     d78:	63696870 	cmnvs	r9, #112, 16	; 0x700000
     d7c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     d80:	67006574 	smlsdxvs	r0, r4, r5, r6
     d84:	53796172 	cmnpl	r9, #-2147483620	; 0x8000001c
     d88:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
     d8c:	74736554 	ldrbtvc	r6, [r3], #-1364	; 0xfffffaac
     d90:	61726700 	cmnvs	r2, r0, lsl #14
     d94:	63696870 	cmnvs	r9, #112, 16	; 0x700000
     d98:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
     d9c:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     da0:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     da4:	00726165 	rsbseq	r6, r2, r5, ror #2
     da8:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     dac:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     db0:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     db4:	6f62616c 	svcvs	0x0062616c
     db8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     dbc:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     dc0:	5049442f 	subpl	r4, r9, pc, lsr #8
     dc4:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     dc8:	2f686374 	svccs	0x00686374
     dcc:	72672f43 	rsbvc	r2, r7, #268	; 0x10c
     dd0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
     dd4:	632e7363 			; <UNDEFINED> instruction: 0x632e7363
     dd8:	61726700 	cmnvs	r2, r0, lsl #14
     ddc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
     de0:	6165725f 	cmnvs	r5, pc, asr r2
     de4:	61645f64 	cmnvs	r4, r4, ror #30
     de8:	63006174 	movwvs	r6, #372	; 0x174
     dec:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
     df0:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
     df4:	5f70755f 	svcpl	0x0070755f
     df8:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     dfc:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     e00:	73726566 	cmnvc	r2, #427819008	; 0x19800000
     e04:	61726700 	cmnvs	r2, r0, lsl #14
     e08:	63696870 	cmnvs	r9, #112, 16	; 0x700000
     e0c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
     e10:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     e14:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
     e18:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
     e1c:	5f79616c 	svcpl	0x0079616c
     e20:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
     e24:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     e28:	65526c6c 	ldrbvs	r6, [r2, #-3180]	; 0xfffff394
     e2c:	6e617463 	cdpvs	4, 6, cr7, cr1, cr3, {3}
     e30:	00656c67 	rsbeq	r6, r5, r7, ror #24
     e34:	6b73616d 	blvs	1cd93f0 <startup-0x1e326c10>
     e38:	61726600 	cmnvs	r2, r0, lsl #12
     e3c:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
     e40:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
     e44:	72670068 	rsbvc	r0, r7, #104	; 0x68
     e48:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
     e4c:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
     e50:	5f657469 	svcpl	0x00657469
     e54:	61746164 	cmnvs	r4, r4, ror #2
     e58:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
     e5c:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
     e60:	5f687464 	svcpl	0x00687464
     e64:	625f6e69 	subsvs	r6, pc, #1680	; 0x690
     e68:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
     e6c:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
     e70:	615f7261 	cmpvs	pc, r1, ror #4
     e74:	625f6c6c 	subsvs	r6, pc, #108, 24	; 0x6c00
     e78:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
     e7c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     e80:	63007372 	movwvs	r7, #882	; 0x372
     e84:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     e88:	74636552 	strbtvc	r6, [r3], #-1362	; 0xfffffaae
     e8c:	6c676e61 	stclvs	14, cr6, [r7], #-388	; 0xfffffe7c
     e90:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
     e94:	00786564 	rsbseq	r6, r8, r4, ror #10
     e98:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
     e9c:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
     ea0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     ea4:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
     ea8:	72670072 	rsbvc	r0, r7, #114	; 0x72
     eac:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
     eb0:	61775f63 	cmnvs	r7, r3, ror #30
     eb4:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
     eb8:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     ebc:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
     ec0:	745f7261 	ldrbvc	r7, [pc], #-609	; ec8 <startup-0x1ffff138>
     ec4:	42736968 	rsbsmi	r6, r3, #104, 18	; 0x1a0000
     ec8:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
     ecc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     ed0:	72670072 	rsbvc	r0, r7, #114	; 0x72
     ed4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
     ed8:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
     edc:	61697469 	cmnvs	r9, r9, ror #8
     ee0:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
     ee4:	61726700 	cmnvs	r2, r0, lsl #14
     ee8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
     eec:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
     ef0:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
     ef4:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
     ef8:	6f6c006e 	svcvs	0x006c006e
     efc:	695f6461 	ldmdbvs	pc, {r0, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
     f00:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     f04:	2f3a4300 	svccs	0x003a4300
     f08:	2f706f6d 	svccs	0x00706f6d
     f0c:	6f4d2f63 	svcvs	0x004d2f63
     f10:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     f14:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     f18:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     f1c:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     f20:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     f24:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f28:	692f432f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r8, r9, lr}	; <UNPREDICTABLE>
     f2c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     f30:	6c00632e 	stcvs	3, cr6, [r0], {46}	; 0x2e
     f34:	5f64616f 	svcpl	0x0064616f
     f38:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     f3c:	43006574 	movwmi	r6, #1396	; 0x574
     f40:	6f6d2f3a 	svcvs	0x006d2f3a
     f44:	2f632f70 	svccs	0x00632f70
     f48:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     f4c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     f50:	6f697461 	svcvs	0x00697461
     f54:	2f72656e 	svccs	0x0072656e
     f58:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     f5c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     f60:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     f64:	7270732f 	rsbsvc	r7, r0, #-1140850688	; 0xbc000000
     f68:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     f6c:	6f4d0063 	svcvs	0x004d0063
     f70:	00726564 	rsbseq	r6, r2, r4, ror #10
     f74:	5f746573 	svcpl	0x00746573
     f78:	445f7075 	ldrbmi	r7, [pc], #-117	; f80 <startup-0x1ffff080>
     f7c:	6f004c49 	svcvs	0x00004c49
     f80:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
     f84:	6f006867 	svcvs	0x00006867
     f88:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     f8c:	50470072 	subpl	r0, r7, r2, ror r0
     f90:	50004f49 	andpl	r4, r0, r9, asr #30
     f94:	72645075 	rsbvc	r5, r4, #117	; 0x75
     f98:	72646900 	rsbvc	r6, r4, #0, 18
     f9c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     fa0:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
     fa4:	2f3a4300 	svccs	0x003a4300
     fa8:	2f706f6d 	svccs	0x00706f6d
     fac:	6f4d2f63 	svcvs	0x004d2f63
     fb0:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     fb4:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     fb8:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     fbc:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     fc0:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     fc4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     fc8:	672f432f 	strvs	r4, [pc, -pc, lsr #6]!
     fcc:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     fd0:	746f0063 	strbtvc	r0, [pc], #-99	; fd8 <startup-0x1ffff028>
     fd4:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     fd8:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
     fdc:	61657200 	cmnvs	r5, r0, lsl #4
     fe0:	49445f64 	stmdbmi	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     fe4:	69735f4c 	ldmdbvs	r3!, {r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     fe8:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0xfffff892
     fec:	72646f00 	rsbvc	r6, r4, #0, 30
     ff0:	00776f4c 	rsbseq	r6, r7, ip, asr #30
     ff4:	6570536f 	ldrbvs	r5, [r0, #-879]!	; 0xfffffc91
     ff8:	00726465 	rsbseq	r6, r2, r5, ror #8
     ffc:	48726469 	ldmdami	r2!, {r0, r3, r5, r6, sl, sp, lr}^
    1000:	00686769 	rsbeq	r6, r8, r9, ror #14
    1004:	4c726469 	cfldrdmi	mvd6, [r2], #-420	; 0xfffffe5c
    1008:	6f00776f 	svcvs	0x0000776f
    100c:	65527264 	ldrbvs	r7, [r2, #-612]	; 0xfffffd9c
    1010:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1014:	72006465 	andvc	r6, r0, #1694498816	; 0x65000000
    1018:	5f646165 	svcpl	0x00646165
    101c:	004c4944 	subeq	r4, ip, r4, asr #18
    1020:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1024:	7070615f 	rsbsvc	r6, r0, pc, asr r1
    1028:	6163696c 	cmnvs	r3, ip, ror #18
    102c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1030:	6d696c00 	stclvs	12, cr6, [r9, #-0]
    1034:	00327469 	eorseq	r7, r2, r9, ror #8
    1038:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    103c:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
    1040:	645f6461 	ldrbvs	r6, [pc], #-1121	; 1048 <startup-0x1fffefb8>
    1044:	00617461 	rsbeq	r7, r1, r1, ror #8
    1048:	5f746573 	svcpl	0x00746573
    104c:	615f7075 	cmpvs	pc, r5, ror r0	; <UNPREDICTABLE>
    1050:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1054:	63736100 	cmnvs	r3, #0, 2
    1058:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
    105c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1060:	756c6f63 	strbvc	r6, [ip, #-3939]!	; 0xfffff09d
    1064:	63006e6d 	movwvs	r6, #3693	; 0xe6d
    1068:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    106c:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
    1070:	61006969 	tstvs	r0, r9, ror #18
    1074:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1078:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    107c:	705f6574 	subsvc	r6, pc, r4, ror r5	; <UNPREDICTABLE>
    1080:	00747261 	rsbseq	r7, r4, r1, ror #4
    1084:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1088:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
    108c:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
    1090:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1094:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
    1098:	73610072 	cmnvc	r1, #114	; 0x72
    109c:	5f696963 	svcpl	0x00696963
    10a0:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    10a4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    10a8:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    10ac:	63736100 	cmnvs	r3, #0, 2
    10b0:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
    10b4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    10b8:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    10bc:	73657400 	cmnvc	r5, #0, 8
    10c0:	74003174 	strvc	r3, [r0], #-372	; 0xfffffe8c
    10c4:	32747365 	rsbscc	r7, r4, #-1811939327	; 0x94000001
    10c8:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    10cc:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    10d0:	63736100 	cmnvs	r3, #0, 2
    10d4:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
    10d8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    10dc:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    10e0:	73610061 	cmnvc	r1, #97	; 0x61
    10e4:	5f696963 	svcpl	0x00696963
    10e8:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
    10ec:	63736100 	cmnvs	r3, #0, 2
    10f0:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
    10f4:	5f646165 	svcpl	0x00646165
    10f8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    10fc:	61007375 	tstvs	r0, r5, ror r3
    1100:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1104:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    1108:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    110c:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
    1110:	00726165 	rsbseq	r6, r2, r5, ror #2
    1114:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1118:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    111c:	00657469 	rsbeq	r7, r5, r9, ror #8
    1120:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1124:	6f675f69 	svcvs	0x00675f69
    1128:	59586f54 	ldmdbpl	r8, {r2, r4, r6, r8, r9, sl, fp, sp, lr}^
    112c:	63736100 	cmnvs	r3, #0, 2
    1130:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
    1134:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1138:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    113c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; f74 <startup-0x1ffff08c>
    1140:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1144:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1148:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    114c:	5f657469 	svcpl	0x00657469
    1150:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    1154:	6d696c00 	stclvs	12, cr6, [r9, #-0]
    1158:	00317469 	eorseq	r7, r1, r9, ror #8
    115c:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1160:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1164:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1168:	6f62616c 	svcvs	0x0062616c
    116c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1170:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1174:	5049442f 	subpl	r4, r9, pc, lsr #8
    1178:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    117c:	2f686374 	svccs	0x00686374
    1180:	73612f43 	cmnvc	r1, #268	; 0x10c
    1184:	5f696963 	svcpl	0x00696963
    1188:	70736964 	rsbsvc	r6, r3, r4, ror #18
    118c:	2e79616c 	rpwcsez	f6, f1, #4.0
    1190:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
    1194:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    1198:	5f776f6c 	svcpl	0x00776f6c
    119c:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
    11a0:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
    11a4:	5f687467 	svcpl	0x00687467
    11a8:	725f666f 	subsvc	r6, pc, #116391936	; 0x6f00000
    11ac:	0031776f 	eorseq	r7, r1, pc, ror #14
    11b0:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    11b4:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    11b8:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    11bc:	6f62616c 	svcvs	0x0062616c
    11c0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    11c4:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    11c8:	5049442f 	subpl	r4, r9, pc, lsr #8
    11cc:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    11d0:	2f686374 	svccs	0x00686374
    11d4:	6c732f43 	ldclvs	15, cr2, [r3], #-268	; 0xfffffef4
    11d8:	745f776f 	ldrbvc	r7, [pc], #-1903	; 11e0 <startup-0x1fffee20>
    11dc:	2e747865 	cdpcs	8, 7, cr7, cr4, cr5, {3}
    11e0:	Address 0x000011e0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000024 	andeq	r0, r0, r4, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000034 	andcs	r0, r0, r4, lsr r0
  48:	000001c8 	andeq	r0, r0, r8, asr #3
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	300e4101 	andcc	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	200001fc 	strdcs	r0, [r0], -ip
  68:	0000090c 	andeq	r0, r0, ip, lsl #18
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	05b80e42 	ldreq	r0, [r8, #3650]!	; 0xe42
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000000c 	andeq	r0, r0, ip
  84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  88:	7c020001 	stcvc	0, cr0, [r2], {1}
  8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000080 	andeq	r0, r0, r0, lsl #1
  98:	20000b08 	andcs	r0, r0, r8, lsl #22
  9c:	00000010 	andeq	r0, r0, r0, lsl r0
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000080 	andeq	r0, r0, r0, lsl #1
  b8:	20000b18 	andcs	r0, r0, r8, lsl fp
  bc:	00000046 	andeq	r0, r0, r6, asr #32
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000000c 	andeq	r0, r0, ip
  d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d8:	7c020001 	stcvc	0, cr0, [r2], {1}
  dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  e8:	20000b60 	andcs	r0, r0, r0, ror #22
  ec:	00000184 	andeq	r0, r0, r4, lsl #3
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f8:	380e4101 	stmdacc	lr, {r0, r8, lr}
  fc:	00070d41 	andeq	r0, r7, r1, asr #26
 100:	00000020 	andeq	r0, r0, r0, lsr #32
 104:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 108:	20000ce4 	andcs	r0, r0, r4, ror #25
 10c:	00000124 	andeq	r0, r0, r4, lsr #2
 110:	400c0e41 	andmi	r0, ip, r1, asr #28
 114:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 118:	018e4002 	orreq	r4, lr, r2
 11c:	41180e41 	tstmi	r8, r1, asr #28
 120:	0000070d 	andeq	r0, r0, sp, lsl #14
 124:	0000000c 	andeq	r0, r0, ip
 128:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 12c:	7c020001 	stcvc	0, cr0, [r2], {1}
 130:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000124 	andeq	r0, r0, r4, lsr #2
 13c:	20000e08 	andcs	r0, r0, r8, lsl #28
 140:	000000d8 	ldrdeq	r0, [r0], -r8
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000000c 	andeq	r0, r0, ip
 158:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 15c:	7c020001 	stcvc	0, cr0, [r2], {1}
 160:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 164:	0000001c 	andeq	r0, r0, ip, lsl r0
 168:	00000154 	andeq	r0, r0, r4, asr r1
 16c:	20000ee0 	andcs	r0, r0, r0, ror #29
 170:	0000020c 	andeq	r0, r0, ip, lsl #4
 174:	40080e41 	andmi	r0, r8, r1, asr #28
 178:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 17c:	480e4101 	stmdami	lr, {r0, r8, lr}
 180:	00070d41 	andeq	r0, r7, r1, asr #26
 184:	00000020 	andeq	r0, r0, r0, lsr #32
 188:	00000154 	andeq	r0, r0, r4, asr r1
 18c:	200010ec 	andcs	r1, r0, ip, ror #1
 190:	00000158 	andeq	r0, r0, r8, asr r1
 194:	400c0e41 	andmi	r0, ip, r1, asr #28
 198:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 19c:	018e4002 	orreq	r4, lr, r2
 1a0:	41180e41 	tstmi	r8, r1, asr #28
 1a4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1a8:	0000000c 	andeq	r0, r0, ip
 1ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1b0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	000001a8 	andeq	r0, r0, r8, lsr #3
 1c0:	20001244 	andcs	r1, r0, r4, asr #4
 1c4:	00000044 	andeq	r0, r0, r4, asr #32
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d4:	00000018 	andeq	r0, r0, r8, lsl r0
 1d8:	000001a8 	andeq	r0, r0, r8, lsr #3
 1dc:	20001288 	andcs	r1, r0, r8, lsl #5
 1e0:	00000044 	andeq	r0, r0, r4, asr #32
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	000001a8 	andeq	r0, r0, r8, lsr #3
 1f8:	200012cc 	andcs	r1, r0, ip, asr #5
 1fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	000001a8 	andeq	r0, r0, r8, lsr #3
 218:	200012f8 	strdcs	r1, [r0], -r8
 21c:	00000026 	andeq	r0, r0, r6, lsr #32
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	100e4101 	andne	r4, lr, r1, lsl #2
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	000001a8 	andeq	r0, r0, r8, lsr #3
 238:	2000131e 	andcs	r1, r0, lr, lsl r3
 23c:	00000032 	andeq	r0, r0, r2, lsr r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	180e4101 	stmdane	lr, {r0, r8, lr}
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	00000018 	andeq	r0, r0, r8, lsl r0
 254:	000001a8 	andeq	r0, r0, r8, lsr #3
 258:	20001350 	andcs	r1, r0, r0, asr r3
 25c:	00000018 	andeq	r0, r0, r8, lsl r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 26c:	00000018 	andeq	r0, r0, r8, lsl r0
 270:	000001a8 	andeq	r0, r0, r8, lsr #3
 274:	20001368 	andcs	r1, r0, r8, ror #6
 278:	00000030 	andeq	r0, r0, r0, lsr r0
 27c:	40080e41 	andmi	r0, r8, r1, asr #28
 280:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 284:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 288:	0000001c 	andeq	r0, r0, ip, lsl r0
 28c:	000001a8 	andeq	r0, r0, r8, lsr #3
 290:	20001398 	mulcs	r0, r8, r3
 294:	00000050 	andeq	r0, r0, r0, asr r0
 298:	40080e41 	andmi	r0, r8, r1, asr #28
 29c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a4:	00070d41 	andeq	r0, r7, r1, asr #26
 2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ac:	000001a8 	andeq	r0, r0, r8, lsr #3
 2b0:	200013e8 	andcs	r1, r0, r8, ror #7
 2b4:	00000058 	andeq	r0, r0, r8, asr r0
 2b8:	40080e41 	andmi	r0, r8, r1, asr #28
 2bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2c4:	00070d41 	andeq	r0, r7, r1, asr #26
 2c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2cc:	000001a8 	andeq	r0, r0, r8, lsr #3
 2d0:	20001440 	andcs	r1, r0, r0, asr #8
 2d4:	00000066 	andeq	r0, r0, r6, rrx
 2d8:	40080e41 	andmi	r0, r8, r1, asr #28
 2dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e0:	100e4101 	andne	r4, lr, r1, lsl #2
 2e4:	00070d41 	andeq	r0, r7, r1, asr #26
 2e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ec:	000001a8 	andeq	r0, r0, r8, lsr #3
 2f0:	200014a6 	andcs	r1, r0, r6, lsr #9
 2f4:	0000006e 	andeq	r0, r0, lr, rrx
 2f8:	40080e41 	andmi	r0, r8, r1, asr #28
 2fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 300:	100e4101 	andne	r4, lr, r1, lsl #2
 304:	00070d41 	andeq	r0, r7, r1, asr #26
 308:	0000001c 	andeq	r0, r0, ip, lsl r0
 30c:	000001a8 	andeq	r0, r0, r8, lsr #3
 310:	20001514 	andcs	r1, r0, r4, lsl r5
 314:	00000094 	muleq	r0, r4, r0
 318:	40080e41 	andmi	r0, r8, r1, asr #28
 31c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 320:	180e4101 	stmdane	lr, {r0, r8, lr}
 324:	00070d41 	andeq	r0, r7, r1, asr #26
 328:	0000001c 	andeq	r0, r0, ip, lsl r0
 32c:	000001a8 	andeq	r0, r0, r8, lsr #3
 330:	200015a8 	andcs	r1, r0, r8, lsr #11
 334:	0000002a 	andeq	r0, r0, sl, lsr #32
 338:	40080e41 	andmi	r0, r8, r1, asr #28
 33c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 340:	100e4101 	andne	r4, lr, r1, lsl #2
 344:	00070d41 	andeq	r0, r7, r1, asr #26
 348:	0000001c 	andeq	r0, r0, ip, lsl r0
 34c:	000001a8 	andeq	r0, r0, r8, lsr #3
 350:	200015d2 	ldrdcs	r1, [r0], -r2
 354:	0000007e 	andeq	r0, r0, lr, ror r0
 358:	40080e41 	andmi	r0, r8, r1, asr #28
 35c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 360:	100e4101 	andne	r4, lr, r1, lsl #2
 364:	00070d41 	andeq	r0, r7, r1, asr #26
 368:	0000001c 	andeq	r0, r0, ip, lsl r0
 36c:	000001a8 	andeq	r0, r0, r8, lsr #3
 370:	20001650 	andcs	r1, r0, r0, asr r6
 374:	00000046 	andeq	r0, r0, r6, asr #32
 378:	40080e41 	andmi	r0, r8, r1, asr #28
 37c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 380:	100e4101 	andne	r4, lr, r1, lsl #2
 384:	00070d41 	andeq	r0, r7, r1, asr #26
 388:	0000001c 	andeq	r0, r0, ip, lsl r0
 38c:	000001a8 	andeq	r0, r0, r8, lsr #3
 390:	20001696 	mulcs	r0, r6, r6
 394:	00000046 	andeq	r0, r0, r6, asr #32
 398:	40080e41 	andmi	r0, r8, r1, asr #28
 39c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a0:	100e4101 	andne	r4, lr, r1, lsl #2
 3a4:	00070d41 	andeq	r0, r7, r1, asr #26
 3a8:	00000018 	andeq	r0, r0, r8, lsl r0
 3ac:	000001a8 	andeq	r0, r0, r8, lsr #3
 3b0:	200016dc 	ldrdcs	r1, [r0], -ip
 3b4:	0000006e 	andeq	r0, r0, lr, rrx
 3b8:	40080e41 	andmi	r0, r8, r1, asr #28
 3bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c8:	000001a8 	andeq	r0, r0, r8, lsr #3
 3cc:	2000174a 	andcs	r1, r0, sl, asr #14
 3d0:	00000066 	andeq	r0, r0, r6, rrx
 3d4:	40080e41 	andmi	r0, r8, r1, asr #28
 3d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3dc:	100e4101 	andne	r4, lr, r1, lsl #2
 3e0:	00070d41 	andeq	r0, r7, r1, asr #26
 3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e8:	000001a8 	andeq	r0, r0, r8, lsr #3
 3ec:	200017b0 			; <UNDEFINED> instruction: 0x200017b0
 3f0:	00000180 	andeq	r0, r0, r0, lsl #3
 3f4:	40080e41 	andmi	r0, r8, r1, asr #28
 3f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3fc:	200e4101 	andcs	r4, lr, r1, lsl #2
 400:	00070d41 	andeq	r0, r7, r1, asr #26
 404:	0000001c 	andeq	r0, r0, ip, lsl r0
 408:	000001a8 	andeq	r0, r0, r8, lsr #3
 40c:	20001930 	andcs	r1, r0, r0, lsr r9
 410:	000001a0 	andeq	r0, r0, r0, lsr #3
 414:	40080e41 	andmi	r0, r8, r1, asr #28
 418:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 41c:	280e4101 	stmdacs	lr, {r0, r8, lr}
 420:	00070d41 	andeq	r0, r7, r1, asr #26
 424:	0000001c 	andeq	r0, r0, ip, lsl r0
 428:	000001a8 	andeq	r0, r0, r8, lsr #3
 42c:	20001ad0 	ldrdcs	r1, [r0], -r0
 430:	000000d6 	ldrdeq	r0, [r0], -r6
 434:	40080e41 	andmi	r0, r8, r1, asr #28
 438:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 43c:	200e4101 	andcs	r4, lr, r1, lsl #2
 440:	00070d41 	andeq	r0, r7, r1, asr #26
 444:	00000024 	andeq	r0, r0, r4, lsr #32
 448:	000001a8 	andeq	r0, r0, r8, lsr #3
 44c:	20001ba6 	andcs	r1, r0, r6, lsr #23
 450:	0000011a 	andeq	r0, r0, sl, lsl r1
 454:	40100e41 	andsmi	r0, r0, r1, asr #28
 458:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 45c:	02874003 	addeq	r4, r7, #3
 460:	41018e40 	tstmi	r1, r0, asr #28
 464:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 468:	00000007 	andeq	r0, r0, r7
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	000001a8 	andeq	r0, r0, r8, lsr #3
 474:	20001cc0 	andcs	r1, r0, r0, asr #25
 478:	00000052 	andeq	r0, r0, r2, asr r0
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	200e4101 	andcs	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	000001a8 	andeq	r0, r0, r8, lsr #3
 494:	20001d12 	andcs	r1, r0, r2, lsl sp
 498:	00000052 	andeq	r0, r0, r2, asr r0
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	200e4101 	andcs	r4, lr, r1, lsl #2
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	00000020 	andeq	r0, r0, r0, lsr #32
 4b0:	000001a8 	andeq	r0, r0, r8, lsr #3
 4b4:	20001d64 	andcs	r1, r0, r4, ror #26
 4b8:	00000130 	andeq	r0, r0, r0, lsr r1
 4bc:	400c0e41 	andmi	r0, ip, r1, asr #28
 4c0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4c4:	018e4002 	orreq	r4, lr, r2
 4c8:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 4cc:	0000070d 	andeq	r0, r0, sp, lsl #14
 4d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d4:	000001a8 	andeq	r0, r0, r8, lsr #3
 4d8:	20001e94 	mulcs	r0, r4, lr
 4dc:	00000108 	andeq	r0, r0, r8, lsl #2
 4e0:	40080e41 	andmi	r0, r8, r1, asr #28
 4e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e8:	100e4101 	andne	r4, lr, r1, lsl #2
 4ec:	00070d41 	andeq	r0, r7, r1, asr #26
 4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f4:	000001a8 	andeq	r0, r0, r8, lsr #3
 4f8:	20001f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
 4fc:	00000082 	andeq	r0, r0, r2, lsl #1
 500:	40080e41 	andmi	r0, r8, r1, asr #28
 504:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 508:	200e4101 	andcs	r4, lr, r1, lsl #2
 50c:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
 514:	000001a8 	andeq	r0, r0, r8, lsr #3
 518:	2000201e 	andcs	r2, r0, lr, lsl r0
 51c:	0000006a 	andeq	r0, r0, sl, rrx
 520:	40080e41 	andmi	r0, r8, r1, asr #28
 524:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 528:	100e4101 	andne	r4, lr, r1, lsl #2
 52c:	00070d41 	andeq	r0, r7, r1, asr #26
 530:	0000000c 	andeq	r0, r0, ip
 534:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 538:	7c020001 	stcvc	0, cr0, [r2], {1}
 53c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 540:	0000001c 	andeq	r0, r0, ip, lsl r0
 544:	00000530 	andeq	r0, r0, r0, lsr r5
 548:	20002088 	andcs	r2, r0, r8, lsl #1
 54c:	00000028 	andeq	r0, r0, r8, lsr #32
 550:	40080e41 	andmi	r0, r8, r1, asr #28
 554:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 558:	180e4101 	stmdane	lr, {r0, r8, lr}
 55c:	00070d41 	andeq	r0, r7, r1, asr #26
 560:	0000000c 	andeq	r0, r0, ip
 564:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 568:	7c020001 	stcvc	0, cr0, [r2], {1}
 56c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 570:	0000001c 	andeq	r0, r0, ip, lsl r0
 574:	00000560 	andeq	r0, r0, r0, ror #10
 578:	200020b0 	strhcs	r2, [r0], -r0
 57c:	00000028 	andeq	r0, r0, r8, lsr #32
 580:	40080e41 	andmi	r0, r8, r1, asr #28
 584:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 588:	180e4101 	stmdane	lr, {r0, r8, lr}
 58c:	00070d41 	andeq	r0, r7, r1, asr #26
 590:	0000000c 	andeq	r0, r0, ip
 594:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 598:	7c020001 	stcvc	0, cr0, [r2], {1}
 59c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5a0:	00000018 	andeq	r0, r0, r8, lsl r0
 5a4:	00000590 	muleq	r0, r0, r5
 5a8:	200020d8 	ldrdcs	r2, [r0], -r8
 5ac:	00000018 	andeq	r0, r0, r8, lsl r0
 5b0:	40080e41 	andmi	r0, r8, r1, asr #28
 5b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5b8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 5bc:	00000018 	andeq	r0, r0, r8, lsl r0
 5c0:	00000590 	muleq	r0, r0, r5
 5c4:	200020f0 	strdcs	r2, [r0], -r0
 5c8:	00000014 	andeq	r0, r0, r4, lsl r0
 5cc:	40080e41 	andmi	r0, r8, r1, asr #28
 5d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5d4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 5d8:	00000020 	andeq	r0, r0, r0, lsr #32
 5dc:	00000590 	muleq	r0, r0, r5
 5e0:	20002104 	andcs	r2, r0, r4, lsl #2
 5e4:	00000034 	andeq	r0, r0, r4, lsr r0
 5e8:	400c0e41 	andmi	r0, ip, r1, asr #28
 5ec:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 5f0:	018e4002 	orreq	r4, lr, r2
 5f4:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 5f8:	0000070d 	andeq	r0, r0, sp, lsl #14
 5fc:	0000000c 	andeq	r0, r0, ip
 600:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 604:	7c020001 	stcvc	0, cr0, [r2], {1}
 608:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	000005fc 	strdeq	r0, [r0], -ip
 614:	20002138 	andcs	r2, r0, r8, lsr r1
 618:	00000044 	andeq	r0, r0, r4, asr #32
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	180e4101 	stmdane	lr, {r0, r8, lr}
 628:	00070d41 	andeq	r0, r7, r1, asr #26
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	000005fc 	strdeq	r0, [r0], -ip
 634:	2000217c 	andcs	r2, r0, ip, ror r1
 638:	00000050 	andeq	r0, r0, r0, asr r0
 63c:	40080e41 	andmi	r0, r8, r1, asr #28
 640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 644:	180e4101 	stmdane	lr, {r0, r8, lr}
 648:	00070d41 	andeq	r0, r7, r1, asr #26
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	000005fc 	strdeq	r0, [r0], -ip
 654:	200021cc 	andcs	r2, r0, ip, asr #3
 658:	0000002a 	andeq	r0, r0, sl, lsr #32
 65c:	40080e41 	andmi	r0, r8, r1, asr #28
 660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 664:	100e4101 	andne	r4, lr, r1, lsl #2
 668:	00070d41 	andeq	r0, r7, r1, asr #26
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	000005fc 	strdeq	r0, [r0], -ip
 674:	200021f6 	strdcs	r2, [r0], -r6
 678:	0000002a 	andeq	r0, r0, sl, lsr #32
 67c:	40080e41 	andmi	r0, r8, r1, asr #28
 680:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 684:	100e4101 	andne	r4, lr, r1, lsl #2
 688:	00070d41 	andeq	r0, r7, r1, asr #26
 68c:	00000020 	andeq	r0, r0, r0, lsr #32
 690:	000005fc 	strdeq	r0, [r0], -ip
 694:	20002220 	andcs	r2, r0, r0, lsr #4
 698:	00000054 	andeq	r0, r0, r4, asr r0
 69c:	400c0e41 	andmi	r0, ip, r1, asr #28
 6a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 6a4:	018e4002 	orreq	r4, lr, r2
 6a8:	41180e41 	tstmi	r8, r1, asr #28
 6ac:	0000070d 	andeq	r0, r0, sp, lsl #14
 6b0:	00000020 	andeq	r0, r0, r0, lsr #32
 6b4:	000005fc 	strdeq	r0, [r0], -ip
 6b8:	20002274 	andcs	r2, r0, r4, ror r2
 6bc:	00000054 	andeq	r0, r0, r4, asr r0
 6c0:	400c0e41 	andmi	r0, ip, r1, asr #28
 6c4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 6c8:	018e4002 	orreq	r4, lr, r2
 6cc:	41180e41 	tstmi	r8, r1, asr #28
 6d0:	0000070d 	andeq	r0, r0, sp, lsl #14
 6d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6d8:	000005fc 	strdeq	r0, [r0], -ip
 6dc:	200022c8 	andcs	r2, r0, r8, asr #5
 6e0:	00000030 	andeq	r0, r0, r0, lsr r0
 6e4:	40080e41 	andmi	r0, r8, r1, asr #28
 6e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6ec:	100e4101 	andne	r4, lr, r1, lsl #2
 6f0:	00070d41 	andeq	r0, r7, r1, asr #26
 6f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6f8:	000005fc 	strdeq	r0, [r0], -ip
 6fc:	200022f8 	strdcs	r2, [r0], -r8
 700:	00000034 	andeq	r0, r0, r4, lsr r0
 704:	40080e41 	andmi	r0, r8, r1, asr #28
 708:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 70c:	100e4101 	andne	r4, lr, r1, lsl #2
 710:	00070d41 	andeq	r0, r7, r1, asr #26
 714:	0000001c 	andeq	r0, r0, ip, lsl r0
 718:	000005fc 	strdeq	r0, [r0], -ip
 71c:	2000232c 	andcs	r2, r0, ip, lsr #6
 720:	0000003c 	andeq	r0, r0, ip, lsr r0
 724:	40080e41 	andmi	r0, r8, r1, asr #28
 728:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 72c:	100e4101 	andne	r4, lr, r1, lsl #2
 730:	00070d41 	andeq	r0, r7, r1, asr #26
 734:	0000001c 	andeq	r0, r0, ip, lsl r0
 738:	000005fc 	strdeq	r0, [r0], -ip
 73c:	20002368 	andcs	r2, r0, r8, ror #6
 740:	00000050 	andeq	r0, r0, r0, asr r0
 744:	40080e41 	andmi	r0, r8, r1, asr #28
 748:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 74c:	180e4101 	stmdane	lr, {r0, r8, lr}
 750:	00070d41 	andeq	r0, r7, r1, asr #26
 754:	00000018 	andeq	r0, r0, r8, lsl r0
 758:	000005fc 	strdeq	r0, [r0], -ip
 75c:	200023b8 			; <UNDEFINED> instruction: 0x200023b8
 760:	0000009a 	muleq	r0, sl, r0
 764:	40080e41 	andmi	r0, r8, r1, asr #28
 768:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 76c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 770:	00000018 	andeq	r0, r0, r8, lsl r0
 774:	000005fc 	strdeq	r0, [r0], -ip
 778:	20002452 	andcs	r2, r0, r2, asr r4
 77c:	0000001a 	andeq	r0, r0, sl, lsl r0
 780:	40080e41 	andmi	r0, r8, r1, asr #28
 784:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 788:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 78c:	00000018 	andeq	r0, r0, r8, lsl r0
 790:	000005fc 	strdeq	r0, [r0], -ip
 794:	2000246c 	andcs	r2, r0, ip, ror #8
 798:	00000012 	andeq	r0, r0, r2, lsl r0
 79c:	40080e41 	andmi	r0, r8, r1, asr #28
 7a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 7a8:	00000020 	andeq	r0, r0, r0, lsr #32
 7ac:	000005fc 	strdeq	r0, [r0], -ip
 7b0:	2000247e 	andcs	r2, r0, lr, ror r4
 7b4:	0000006a 	andeq	r0, r0, sl, rrx
 7b8:	400c0e41 	andmi	r0, ip, r1, asr #28
 7bc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 7c0:	018e4002 	orreq	r4, lr, r2
 7c4:	41300e41 	teqmi	r0, r1, asr #28
 7c8:	0000070d 	andeq	r0, r0, sp, lsl #14
 7cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 7d0:	000005fc 	strdeq	r0, [r0], -ip
 7d4:	200024e8 	andcs	r2, r0, r8, ror #9
 7d8:	0000005e 	andeq	r0, r0, lr, asr r0
 7dc:	40080e41 	andmi	r0, r8, r1, asr #28
 7e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7e4:	100e4101 	andne	r4, lr, r1, lsl #2
 7e8:	00070d41 	andeq	r0, r7, r1, asr #26
 7ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 7f0:	000005fc 	strdeq	r0, [r0], -ip
 7f4:	20002546 	andcs	r2, r0, r6, asr #10
 7f8:	0000008e 	andeq	r0, r0, lr, lsl #1
 7fc:	40080e41 	andmi	r0, r8, r1, asr #28
 800:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 804:	200e4101 	andcs	r4, lr, r1, lsl #2
 808:	00070d41 	andeq	r0, r7, r1, asr #26
 80c:	00000020 	andeq	r0, r0, r0, lsr #32
 810:	000005fc 	strdeq	r0, [r0], -ip
 814:	200025d4 	ldrdcs	r2, [r0], -r4
 818:	00000084 	andeq	r0, r0, r4, lsl #1
 81c:	400c0e41 	andmi	r0, ip, r1, asr #28
 820:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 824:	018e4002 	orreq	r4, lr, r2
 828:	41380e41 	teqmi	r8, r1, asr #28
 82c:	0000070d 	andeq	r0, r0, sp, lsl #14
 830:	0000000c 	andeq	r0, r0, ip
 834:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 838:	7c020001 	stcvc	0, cr0, [r2], {1}
 83c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 840:	0000001c 	andeq	r0, r0, ip, lsl r0
 844:	00000830 	andeq	r0, r0, r0, lsr r8
 848:	20002658 	andcs	r2, r0, r8, asr r6
 84c:	0000005a 	andeq	r0, r0, sl, asr r0
 850:	40080e41 	andmi	r0, r8, r1, asr #28
 854:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 858:	180e4101 	stmdane	lr, {r0, r8, lr}
 85c:	00070d41 	andeq	r0, r7, r1, asr #26
 860:	0000001c 	andeq	r0, r0, ip, lsl r0
 864:	00000830 	andeq	r0, r0, r0, lsr r8
 868:	200026b2 			; <UNDEFINED> instruction: 0x200026b2
 86c:	0000003a 	andeq	r0, r0, sl, lsr r0
 870:	40080e41 	andmi	r0, r8, r1, asr #28
 874:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 878:	180e4101 	stmdane	lr, {r0, r8, lr}
 87c:	00070d41 	andeq	r0, r7, r1, asr #26
 880:	0000000c 	andeq	r0, r0, ip
 884:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 888:	7c010001 	stcvc	0, cr0, [r1], {1}
 88c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 890:	0000000c 	andeq	r0, r0, ip
 894:	00000880 	andeq	r0, r0, r0, lsl #17
 898:	200026ed 	andcs	r2, r0, sp, ror #13
 89c:	000001cc 	andeq	r0, r0, ip, asr #3
