
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#endif
}

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8fa 	bl	200001fc <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:
void init_app( void ) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000014:	4b05      	ldr	r3, [pc, #20]	; (2000002c <init_app+0x1c>)
20000016:	4a06      	ldr	r2, [pc, #24]	; (20000030 <init_app+0x20>)
20000018:	601a      	str	r2, [r3, #0]
	set_up_DIL();
2000001a:	f002 fb07 	bl	2000262c <set_up_DIL>
	graphic_initialize();
2000001e:	f001 fe07 	bl	20001c30 <graphic_initialize>
	graphic_clear_screen();
20000022:	f001 fe3c 	bl	20001c9e <graphic_clear_screen>
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}
2000002c:	40021000 	andmi	r1, r2, r0
20000030:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000034 <initSprites>:
sprite tempTitleLight;
sprite tempPressBlack;
sprite tempPressGray;
sprite tempPressLight;

void initSprites( void ) {
20000034:	b580      	push	{r7, lr}
20000036:	b08a      	sub	sp, #40	; 0x28
20000038:	af00      	add	r7, sp, #0
	sprite *monsterPointer = &tempMonster;
2000003a:	4b49      	ldr	r3, [pc, #292]	; (20000160 <initSprites+0x12c>)
2000003c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(monsterPointer, monster_black_bits, monster_black_width, monster_black_height);
2000003e:	4949      	ldr	r1, [pc, #292]	; (20000164 <initSprites+0x130>)
20000040:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000042:	231e      	movs	r3, #30
20000044:	221e      	movs	r2, #30
20000046:	f002 fadd 	bl	20002604 <load_sprite>
	monster = monsterPointer;
2000004a:	4b47      	ldr	r3, [pc, #284]	; (20000168 <initSprites+0x134>)
2000004c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000004e:	601a      	str	r2, [r3, #0]
	
	sprite *monsterPointer2 = &tempMonsterLight;
20000050:	4b46      	ldr	r3, [pc, #280]	; (2000016c <initSprites+0x138>)
20000052:	623b      	str	r3, [r7, #32]
	load_sprite(monsterPointer2, monster_light_bits, monster_light_width, monster_light_height);
20000054:	4946      	ldr	r1, [pc, #280]	; (20000170 <initSprites+0x13c>)
20000056:	6a38      	ldr	r0, [r7, #32]
20000058:	231e      	movs	r3, #30
2000005a:	221e      	movs	r2, #30
2000005c:	f002 fad2 	bl	20002604 <load_sprite>
	monsterLight = monsterPointer2;
20000060:	4b44      	ldr	r3, [pc, #272]	; (20000174 <initSprites+0x140>)
20000062:	6a3a      	ldr	r2, [r7, #32]
20000064:	601a      	str	r2, [r3, #0]

	sprite *monsterPointer3 = &tempMonsterGray;
20000066:	4b44      	ldr	r3, [pc, #272]	; (20000178 <initSprites+0x144>)
20000068:	61fb      	str	r3, [r7, #28]
	load_sprite(monsterPointer3, monster_gray_bits, monster_gray_width, monster_gray_height);
2000006a:	4944      	ldr	r1, [pc, #272]	; (2000017c <initSprites+0x148>)
2000006c:	69f8      	ldr	r0, [r7, #28]
2000006e:	231e      	movs	r3, #30
20000070:	221e      	movs	r2, #30
20000072:	f002 fac7 	bl	20002604 <load_sprite>
	monsterGray = monsterPointer3;
20000076:	4b42      	ldr	r3, [pc, #264]	; (20000180 <initSprites+0x14c>)
20000078:	69fa      	ldr	r2, [r7, #28]
2000007a:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempBg;
2000007c:	4b41      	ldr	r3, [pc, #260]	; (20000184 <initSprites+0x150>)
2000007e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer4, bg_bits, bg_width, bg_height);
20000080:	4941      	ldr	r1, [pc, #260]	; (20000188 <initSprites+0x154>)
20000082:	69b8      	ldr	r0, [r7, #24]
20000084:	2340      	movs	r3, #64	; 0x40
20000086:	2280      	movs	r2, #128	; 0x80
20000088:	f002 fabc 	bl	20002604 <load_sprite>
	bg = pointer4;
2000008c:	4b3f      	ldr	r3, [pc, #252]	; (2000018c <initSprites+0x158>)
2000008e:	69ba      	ldr	r2, [r7, #24]
20000090:	601a      	str	r2, [r3, #0]
	
	sprite *pointer5 = &tempCastleBlack;
20000092:	4b3f      	ldr	r3, [pc, #252]	; (20000190 <initSprites+0x15c>)
20000094:	617b      	str	r3, [r7, #20]
	load_sprite(pointer5, castle_black_bits, castle_black_width, castle_black_height);
20000096:	493f      	ldr	r1, [pc, #252]	; (20000194 <initSprites+0x160>)
20000098:	6978      	ldr	r0, [r7, #20]
2000009a:	2340      	movs	r3, #64	; 0x40
2000009c:	2280      	movs	r2, #128	; 0x80
2000009e:	f002 fab1 	bl	20002604 <load_sprite>
	castleBlack = pointer5;
200000a2:	4b3d      	ldr	r3, [pc, #244]	; (20000198 <initSprites+0x164>)
200000a4:	697a      	ldr	r2, [r7, #20]
200000a6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer6 = &tempCastleGray;
200000a8:	4b3c      	ldr	r3, [pc, #240]	; (2000019c <initSprites+0x168>)
200000aa:	613b      	str	r3, [r7, #16]
	load_sprite(pointer6, castle_gray_bits, castle_black_width, castle_black_height);
200000ac:	493c      	ldr	r1, [pc, #240]	; (200001a0 <initSprites+0x16c>)
200000ae:	6938      	ldr	r0, [r7, #16]
200000b0:	2340      	movs	r3, #64	; 0x40
200000b2:	2280      	movs	r2, #128	; 0x80
200000b4:	f002 faa6 	bl	20002604 <load_sprite>
	castleGray = pointer6;
200000b8:	4b3a      	ldr	r3, [pc, #232]	; (200001a4 <initSprites+0x170>)
200000ba:	693a      	ldr	r2, [r7, #16]
200000bc:	601a      	str	r2, [r3, #0]
	
	sprite *pointer7 = &tempCastleLight;
200000be:	4b3a      	ldr	r3, [pc, #232]	; (200001a8 <initSprites+0x174>)
200000c0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer7, castle_light_bits, castle_black_width, castle_black_height);
200000c2:	493a      	ldr	r1, [pc, #232]	; (200001ac <initSprites+0x178>)
200000c4:	68f8      	ldr	r0, [r7, #12]
200000c6:	2340      	movs	r3, #64	; 0x40
200000c8:	2280      	movs	r2, #128	; 0x80
200000ca:	f002 fa9b 	bl	20002604 <load_sprite>
	castleLight = pointer7;
200000ce:	4b38      	ldr	r3, [pc, #224]	; (200001b0 <initSprites+0x17c>)
200000d0:	68fa      	ldr	r2, [r7, #12]
200000d2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer8 = &tempTitleLight;
200000d4:	4b37      	ldr	r3, [pc, #220]	; (200001b4 <initSprites+0x180>)
200000d6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, title_light_bits, title_black_width, title_black_height);
200000d8:	4937      	ldr	r1, [pc, #220]	; (200001b8 <initSprites+0x184>)
200000da:	68b8      	ldr	r0, [r7, #8]
200000dc:	231e      	movs	r3, #30
200000de:	2232      	movs	r2, #50	; 0x32
200000e0:	f002 fa90 	bl	20002604 <load_sprite>
	titleLight = pointer8;
200000e4:	4b35      	ldr	r3, [pc, #212]	; (200001bc <initSprites+0x188>)
200000e6:	68ba      	ldr	r2, [r7, #8]
200000e8:	601a      	str	r2, [r3, #0]
	sprite *pointer9 = &tempTitleGray;
200000ea:	4b35      	ldr	r3, [pc, #212]	; (200001c0 <initSprites+0x18c>)
200000ec:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, title_gray_bits, title_black_width, title_black_height);
200000ee:	4935      	ldr	r1, [pc, #212]	; (200001c4 <initSprites+0x190>)
200000f0:	6878      	ldr	r0, [r7, #4]
200000f2:	231e      	movs	r3, #30
200000f4:	2232      	movs	r2, #50	; 0x32
200000f6:	f002 fa85 	bl	20002604 <load_sprite>
	titleGray = pointer9;
200000fa:	4b33      	ldr	r3, [pc, #204]	; (200001c8 <initSprites+0x194>)
200000fc:	687a      	ldr	r2, [r7, #4]
200000fe:	601a      	str	r2, [r3, #0]
	sprite *pointer10 = &tempTitleBlack;
20000100:	4b32      	ldr	r3, [pc, #200]	; (200001cc <initSprites+0x198>)
20000102:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, title_black_bits, title_black_width, title_black_height);
20000104:	4932      	ldr	r1, [pc, #200]	; (200001d0 <initSprites+0x19c>)
20000106:	6838      	ldr	r0, [r7, #0]
20000108:	231e      	movs	r3, #30
2000010a:	2232      	movs	r2, #50	; 0x32
2000010c:	f002 fa7a 	bl	20002604 <load_sprite>
	titleBlack = pointer10;	
20000110:	4b30      	ldr	r3, [pc, #192]	; (200001d4 <initSprites+0x1a0>)
20000112:	683a      	ldr	r2, [r7, #0]
20000114:	601a      	str	r2, [r3, #0]
	
	pointer8 = &tempPressLight;
20000116:	4b30      	ldr	r3, [pc, #192]	; (200001d8 <initSprites+0x1a4>)
20000118:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, press_light_bits, press_black_width, press_black_height);
2000011a:	4930      	ldr	r1, [pc, #192]	; (200001dc <initSprites+0x1a8>)
2000011c:	68b8      	ldr	r0, [r7, #8]
2000011e:	2323      	movs	r3, #35	; 0x23
20000120:	223c      	movs	r2, #60	; 0x3c
20000122:	f002 fa6f 	bl	20002604 <load_sprite>
	pressLight = pointer8;
20000126:	4b2e      	ldr	r3, [pc, #184]	; (200001e0 <initSprites+0x1ac>)
20000128:	68ba      	ldr	r2, [r7, #8]
2000012a:	601a      	str	r2, [r3, #0]
	pointer9 = &tempPressGray;
2000012c:	4b2d      	ldr	r3, [pc, #180]	; (200001e4 <initSprites+0x1b0>)
2000012e:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, press_gray_bits, press_black_width, press_black_height);
20000130:	492d      	ldr	r1, [pc, #180]	; (200001e8 <initSprites+0x1b4>)
20000132:	6878      	ldr	r0, [r7, #4]
20000134:	2323      	movs	r3, #35	; 0x23
20000136:	223c      	movs	r2, #60	; 0x3c
20000138:	f002 fa64 	bl	20002604 <load_sprite>
	pressGray = pointer9;
2000013c:	4b2b      	ldr	r3, [pc, #172]	; (200001ec <initSprites+0x1b8>)
2000013e:	687a      	ldr	r2, [r7, #4]
20000140:	601a      	str	r2, [r3, #0]
	pointer10 = &tempPressBlack;
20000142:	4b2b      	ldr	r3, [pc, #172]	; (200001f0 <initSprites+0x1bc>)
20000144:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, press_black_bits, press_black_width, press_black_height);
20000146:	492b      	ldr	r1, [pc, #172]	; (200001f4 <initSprites+0x1c0>)
20000148:	6838      	ldr	r0, [r7, #0]
2000014a:	2323      	movs	r3, #35	; 0x23
2000014c:	223c      	movs	r2, #60	; 0x3c
2000014e:	f002 fa59 	bl	20002604 <load_sprite>
	pressBlack = pointer10;	
20000152:	4b29      	ldr	r3, [pc, #164]	; (200001f8 <initSprites+0x1c4>)
20000154:	683a      	ldr	r2, [r7, #0]
20000156:	601a      	str	r2, [r3, #0]
	
	
}
20000158:	46c0      	nop			; (mov r8, r8)
2000015a:	46bd      	mov	sp, r7
2000015c:	b00a      	add	sp, #40	; 0x28
2000015e:	bd80      	pop	{r7, pc}
20000160:	20003034 	andcs	r3, r0, r4, lsr r0
20000164:	20005348 	andcs	r5, r0, r8, asr #6
20000168:	20003008 	andcs	r3, r0, r8
2000016c:	2000308c 	andcs	r3, r0, ip, lsl #1
20000170:	200053c0 	andcs	r5, r0, r0, asr #7
20000174:	200030b4 	strhcs	r3, [r0], -r4
20000178:	20003054 	andcs	r3, r0, r4, asr r0
2000017c:	20005438 	andcs	r5, r0, r8, lsr r4
20000180:	200030c8 	andcs	r3, r0, r8, asr #1
20000184:	200030cc 	andcs	r3, r0, ip, asr #1
20000188:	20006674 	andcs	r6, r0, r4, ror r6
2000018c:	20003050 	andcs	r3, r0, r0, asr r0
20000190:	2000300c 	andcs	r3, r0, ip
20000194:	200057f8 	strdcs	r5, [r0], -r8
20000198:	20003030 	andcs	r3, r0, r0, lsr r0
2000019c:	200030a8 	andcs	r3, r0, r8, lsr #1
200001a0:	20005bf8 	strdcs	r5, [r0], -r8
200001a4:	200030bc 	strhcs	r3, [r0], -ip
200001a8:	2000307c 	andcs	r3, r0, ip, ror r0
200001ac:	20005ff8 	strdcs	r5, [r0], -r8
200001b0:	2000306c 	andcs	r3, r0, ip, rrx
200001b4:	20003060 	andcs	r3, r0, r0, rrx
200001b8:	200063f8 	strdcs	r6, [r0], -r8
200001bc:	200030b8 	strhcs	r3, [r0], -r8
200001c0:	20003024 	andcs	r3, r0, r4, lsr #32
200001c4:	200064cc 	andcs	r6, r0, ip, asr #9
200001c8:	200030a4 	andcs	r3, r0, r4, lsr #1
200001cc:	20003044 	andcs	r3, r0, r4, asr #32
200001d0:	200065a0 	andcs	r6, r0, r0, lsr #11
200001d4:	200030d8 	ldrdcs	r3, [r0], -r8
200001d8:	20003070 	andcs	r3, r0, r0, ror r0
200001dc:	200055c8 	andcs	r5, r0, r8, asr #11
200001e0:	20003040 	andcs	r3, r0, r0, asr #32
200001e4:	20003018 	andcs	r3, r0, r8, lsl r0
200001e8:	200056e0 	andcs	r5, r0, r0, ror #13
200001ec:	20003088 	andcs	r3, r0, r8, lsl #1
200001f0:	20003098 	mulcs	r0, r8, r0
200001f4:	200054b0 			; <UNDEFINED> instruction: 0x200054b0
200001f8:	200030c4 	andcs	r3, r0, r4, asr #1

200001fc <main>:
	
int counter = 0;
int current_screen = START_SCREEN;
void main(void)
{
200001fc:	b590      	push	{r4, r7, lr}
200001fe:	4cfe      	ldr	r4, [pc, #1016]	; (200005f8 <main+0x3fc>)
20000200:	44a5      	add	sp, r4
20000202:	af00      	add	r7, sp, #0
 * 2. Draw it with method above.
 * 3. Show frame with some long fram_length for testing.
 * 
 * */
	
	init_app();	
20000204:	f7ff ff04 	bl	20000010 <init_app>
	initSprites();
20000208:	f7ff ff14 	bl	20000034 <initSprites>
	
	GameObject monsterObj;
	Image monsterImage;
	Image monsterImages[] = {monsterImage};
2000020c:	23bf      	movs	r3, #191	; 0xbf
2000020e:	009b      	lsls	r3, r3, #2
20000210:	18fb      	adds	r3, r7, r3
20000212:	22c2      	movs	r2, #194	; 0xc2
20000214:	0092      	lsls	r2, r2, #2
20000216:	18ba      	adds	r2, r7, r2
20000218:	ca13      	ldmia	r2!, {r0, r1, r4}
2000021a:	c313      	stmia	r3!, {r0, r1, r4}
	monsterObj.images = monsterImages;
2000021c:	23c5      	movs	r3, #197	; 0xc5
2000021e:	009b      	lsls	r3, r3, #2
20000220:	18fb      	adds	r3, r7, r3
20000222:	22bf      	movs	r2, #191	; 0xbf
20000224:	0092      	lsls	r2, r2, #2
20000226:	18ba      	adds	r2, r7, r2
20000228:	601a      	str	r2, [r3, #0]
	load_image(&monsterObj.images[0], monster, monsterGray, monsterLight);
2000022a:	23c5      	movs	r3, #197	; 0xc5
2000022c:	009b      	lsls	r3, r3, #2
2000022e:	18fb      	adds	r3, r7, r3
20000230:	6818      	ldr	r0, [r3, #0]
20000232:	4bf2      	ldr	r3, [pc, #968]	; (200005fc <main+0x400>)
20000234:	6819      	ldr	r1, [r3, #0]
20000236:	4bf2      	ldr	r3, [pc, #968]	; (20000600 <main+0x404>)
20000238:	681a      	ldr	r2, [r3, #0]
2000023a:	4bf2      	ldr	r3, [pc, #968]	; (20000604 <main+0x408>)
2000023c:	681b      	ldr	r3, [r3, #0]
2000023e:	f002 f9cd 	bl	200025dc <load_image>
	monsterObj.xPos = 30;
20000242:	23c5      	movs	r3, #197	; 0xc5
20000244:	009b      	lsls	r3, r3, #2
20000246:	18fb      	adds	r3, r7, r3
20000248:	221e      	movs	r2, #30
2000024a:	605a      	str	r2, [r3, #4]
	monsterObj.yPos = 4;
2000024c:	23c5      	movs	r3, #197	; 0xc5
2000024e:	009b      	lsls	r3, r3, #2
20000250:	18fb      	adds	r3, r7, r3
20000252:	2204      	movs	r2, #4
20000254:	609a      	str	r2, [r3, #8]
	monsterObj.current_frame = 0;
20000256:	23c5      	movs	r3, #197	; 0xc5
20000258:	009b      	lsls	r3, r3, #2
2000025a:	18fb      	adds	r3, r7, r3
2000025c:	2200      	movs	r2, #0
2000025e:	615a      	str	r2, [r3, #20]
	monsterObj.update = playerUpdate;
20000260:	23c5      	movs	r3, #197	; 0xc5
20000262:	009b      	lsls	r3, r3, #2
20000264:	18fb      	adds	r3, r7, r3
20000266:	4ae8      	ldr	r2, [pc, #928]	; (20000608 <main+0x40c>)
20000268:	60da      	str	r2, [r3, #12]
	
	GameObject titleObj;
	Image titleImage;
	Image titleImages[] = {titleImage};
2000026a:	23b0      	movs	r3, #176	; 0xb0
2000026c:	009b      	lsls	r3, r3, #2
2000026e:	18fb      	adds	r3, r7, r3
20000270:	22b3      	movs	r2, #179	; 0xb3
20000272:	0092      	lsls	r2, r2, #2
20000274:	18ba      	adds	r2, r7, r2
20000276:	ca13      	ldmia	r2!, {r0, r1, r4}
20000278:	c313      	stmia	r3!, {r0, r1, r4}
	titleObj.images = titleImages;
2000027a:	23b6      	movs	r3, #182	; 0xb6
2000027c:	009b      	lsls	r3, r3, #2
2000027e:	18fb      	adds	r3, r7, r3
20000280:	22b0      	movs	r2, #176	; 0xb0
20000282:	0092      	lsls	r2, r2, #2
20000284:	18ba      	adds	r2, r7, r2
20000286:	601a      	str	r2, [r3, #0]
	load_image(&titleObj.images[0], titleBlack, titleGray, titleLight);
20000288:	23b6      	movs	r3, #182	; 0xb6
2000028a:	009b      	lsls	r3, r3, #2
2000028c:	18fb      	adds	r3, r7, r3
2000028e:	6818      	ldr	r0, [r3, #0]
20000290:	4bde      	ldr	r3, [pc, #888]	; (2000060c <main+0x410>)
20000292:	6819      	ldr	r1, [r3, #0]
20000294:	4bde      	ldr	r3, [pc, #888]	; (20000610 <main+0x414>)
20000296:	681a      	ldr	r2, [r3, #0]
20000298:	4bde      	ldr	r3, [pc, #888]	; (20000614 <main+0x418>)
2000029a:	681b      	ldr	r3, [r3, #0]
2000029c:	f002 f99e 	bl	200025dc <load_image>
	titleObj.xPos = 1;
200002a0:	23b6      	movs	r3, #182	; 0xb6
200002a2:	009b      	lsls	r3, r3, #2
200002a4:	18fb      	adds	r3, r7, r3
200002a6:	2201      	movs	r2, #1
200002a8:	605a      	str	r2, [r3, #4]
	titleObj.yPos = -40;
200002aa:	23b6      	movs	r3, #182	; 0xb6
200002ac:	009b      	lsls	r3, r3, #2
200002ae:	18fb      	adds	r3, r7, r3
200002b0:	2228      	movs	r2, #40	; 0x28
200002b2:	4252      	negs	r2, r2
200002b4:	609a      	str	r2, [r3, #8]
	titleObj.current_frame = 0;
200002b6:	23b6      	movs	r3, #182	; 0xb6
200002b8:	009b      	lsls	r3, r3, #2
200002ba:	18fb      	adds	r3, r7, r3
200002bc:	2200      	movs	r2, #0
200002be:	615a      	str	r2, [r3, #20]
	
	GameObject pressObj;
	Image pressImage;
	Image pressImages[] = {pressImage};
200002c0:	23a1      	movs	r3, #161	; 0xa1
200002c2:	009b      	lsls	r3, r3, #2
200002c4:	18fb      	adds	r3, r7, r3
200002c6:	22a4      	movs	r2, #164	; 0xa4
200002c8:	0092      	lsls	r2, r2, #2
200002ca:	18ba      	adds	r2, r7, r2
200002cc:	ca13      	ldmia	r2!, {r0, r1, r4}
200002ce:	c313      	stmia	r3!, {r0, r1, r4}
	pressObj.images = pressImages;
200002d0:	23a7      	movs	r3, #167	; 0xa7
200002d2:	009b      	lsls	r3, r3, #2
200002d4:	18fb      	adds	r3, r7, r3
200002d6:	22a1      	movs	r2, #161	; 0xa1
200002d8:	0092      	lsls	r2, r2, #2
200002da:	18ba      	adds	r2, r7, r2
200002dc:	601a      	str	r2, [r3, #0]
	load_image(&pressObj.images[0], pressBlack, pressLight, pressGray);
200002de:	23a7      	movs	r3, #167	; 0xa7
200002e0:	009b      	lsls	r3, r3, #2
200002e2:	18fb      	adds	r3, r7, r3
200002e4:	6818      	ldr	r0, [r3, #0]
200002e6:	4bcc      	ldr	r3, [pc, #816]	; (20000618 <main+0x41c>)
200002e8:	6819      	ldr	r1, [r3, #0]
200002ea:	4bcc      	ldr	r3, [pc, #816]	; (2000061c <main+0x420>)
200002ec:	681a      	ldr	r2, [r3, #0]
200002ee:	4bcc      	ldr	r3, [pc, #816]	; (20000620 <main+0x424>)
200002f0:	681b      	ldr	r3, [r3, #0]
200002f2:	f002 f973 	bl	200025dc <load_image>
	pressObj.xPos = 65-30;
200002f6:	23a7      	movs	r3, #167	; 0xa7
200002f8:	009b      	lsls	r3, r3, #2
200002fa:	18fb      	adds	r3, r7, r3
200002fc:	2223      	movs	r2, #35	; 0x23
200002fe:	605a      	str	r2, [r3, #4]
	pressObj.yPos = 29-15;
20000300:	23a7      	movs	r3, #167	; 0xa7
20000302:	009b      	lsls	r3, r3, #2
20000304:	18fb      	adds	r3, r7, r3
20000306:	220e      	movs	r2, #14
20000308:	609a      	str	r2, [r3, #8]
	pressObj.current_frame = 0;
2000030a:	23a7      	movs	r3, #167	; 0xa7
2000030c:	009b      	lsls	r3, r3, #2
2000030e:	18fb      	adds	r3, r7, r3
20000310:	2200      	movs	r2, #0
20000312:	615a      	str	r2, [r3, #20]
	
	GameObject castleObj;
	Image castleImage;
	Image castleImages[] = {castleImage};
20000314:	2392      	movs	r3, #146	; 0x92
20000316:	009b      	lsls	r3, r3, #2
20000318:	18fb      	adds	r3, r7, r3
2000031a:	2295      	movs	r2, #149	; 0x95
2000031c:	0092      	lsls	r2, r2, #2
2000031e:	18ba      	adds	r2, r7, r2
20000320:	ca13      	ldmia	r2!, {r0, r1, r4}
20000322:	c313      	stmia	r3!, {r0, r1, r4}
	castleObj.images = castleImages;
20000324:	2398      	movs	r3, #152	; 0x98
20000326:	009b      	lsls	r3, r3, #2
20000328:	18fb      	adds	r3, r7, r3
2000032a:	2292      	movs	r2, #146	; 0x92
2000032c:	0092      	lsls	r2, r2, #2
2000032e:	18ba      	adds	r2, r7, r2
20000330:	601a      	str	r2, [r3, #0]
	load_image(&castleObj.images[0], castleBlack, castleGray, castleLight);
20000332:	2398      	movs	r3, #152	; 0x98
20000334:	009b      	lsls	r3, r3, #2
20000336:	18fb      	adds	r3, r7, r3
20000338:	6818      	ldr	r0, [r3, #0]
2000033a:	4bba      	ldr	r3, [pc, #744]	; (20000624 <main+0x428>)
2000033c:	6819      	ldr	r1, [r3, #0]
2000033e:	4bba      	ldr	r3, [pc, #744]	; (20000628 <main+0x42c>)
20000340:	681a      	ldr	r2, [r3, #0]
20000342:	4bba      	ldr	r3, [pc, #744]	; (2000062c <main+0x430>)
20000344:	681b      	ldr	r3, [r3, #0]
20000346:	f002 f949 	bl	200025dc <load_image>
	castleObj.xPos = 1;
2000034a:	2398      	movs	r3, #152	; 0x98
2000034c:	009b      	lsls	r3, r3, #2
2000034e:	18fb      	adds	r3, r7, r3
20000350:	2201      	movs	r2, #1
20000352:	605a      	str	r2, [r3, #4]
	castleObj.yPos = 1;
20000354:	2398      	movs	r3, #152	; 0x98
20000356:	009b      	lsls	r3, r3, #2
20000358:	18fb      	adds	r3, r7, r3
2000035a:	2201      	movs	r2, #1
2000035c:	609a      	str	r2, [r3, #8]
	castleObj.current_frame = 0;
2000035e:	2398      	movs	r3, #152	; 0x98
20000360:	009b      	lsls	r3, r3, #2
20000362:	18fb      	adds	r3, r7, r3
20000364:	2200      	movs	r2, #0
20000366:	615a      	str	r2, [r3, #20]
	
	GameObject indoors;
	init_indoors( &indoors );
20000368:	2389      	movs	r3, #137	; 0x89
2000036a:	009b      	lsls	r3, r3, #2
2000036c:	18fb      	adds	r3, r7, r3
2000036e:	0018      	movs	r0, r3
20000370:	f002 fca6 	bl	20002cc0 <init_indoors>
	indoors.xPos = 1;
20000374:	4bae      	ldr	r3, [pc, #696]	; (20000630 <main+0x434>)
20000376:	22d0      	movs	r2, #208	; 0xd0
20000378:	0092      	lsls	r2, r2, #2
2000037a:	4694      	mov	ip, r2
2000037c:	44bc      	add	ip, r7
2000037e:	4463      	add	r3, ip
20000380:	2201      	movs	r2, #1
20000382:	605a      	str	r2, [r3, #4]
	indoors.yPos = 1;
20000384:	4baa      	ldr	r3, [pc, #680]	; (20000630 <main+0x434>)
20000386:	22d0      	movs	r2, #208	; 0xd0
20000388:	0092      	lsls	r2, r2, #2
2000038a:	4694      	mov	ip, r2
2000038c:	44bc      	add	ip, r7
2000038e:	4463      	add	r3, ip
20000390:	2201      	movs	r2, #1
20000392:	609a      	str	r2, [r3, #8]
	
	GameObject indoors2;
	init_indoors2( &indoors2 );
20000394:	2380      	movs	r3, #128	; 0x80
20000396:	009b      	lsls	r3, r3, #2
20000398:	18fb      	adds	r3, r7, r3
2000039a:	0018      	movs	r0, r3
2000039c:	f002 fd04 	bl	20002da8 <init_indoors2>
	indoors2.xPos = 1;
200003a0:	4ba4      	ldr	r3, [pc, #656]	; (20000634 <main+0x438>)
200003a2:	22d0      	movs	r2, #208	; 0xd0
200003a4:	0092      	lsls	r2, r2, #2
200003a6:	4694      	mov	ip, r2
200003a8:	44bc      	add	ip, r7
200003aa:	4463      	add	r3, ip
200003ac:	2201      	movs	r2, #1
200003ae:	605a      	str	r2, [r3, #4]
	indoors2.yPos = 1;
200003b0:	4ba0      	ldr	r3, [pc, #640]	; (20000634 <main+0x438>)
200003b2:	22d0      	movs	r2, #208	; 0xd0
200003b4:	0092      	lsls	r2, r2, #2
200003b6:	4694      	mov	ip, r2
200003b8:	44bc      	add	ip, r7
200003ba:	4463      	add	r3, ip
200003bc:	2201      	movs	r2, #1
200003be:	609a      	str	r2, [r3, #8]
	
	GameObject bird;
	init_bird( &bird );
200003c0:	23ee      	movs	r3, #238	; 0xee
200003c2:	005b      	lsls	r3, r3, #1
200003c4:	18fb      	adds	r3, r7, r3
200003c6:	0018      	movs	r0, r3
200003c8:	f001 f81e 	bl	20001408 <init_bird>
	bird.xPos = 180;
200003cc:	4b9a      	ldr	r3, [pc, #616]	; (20000638 <main+0x43c>)
200003ce:	22d0      	movs	r2, #208	; 0xd0
200003d0:	0092      	lsls	r2, r2, #2
200003d2:	4694      	mov	ip, r2
200003d4:	44bc      	add	ip, r7
200003d6:	4463      	add	r3, ip
200003d8:	22b4      	movs	r2, #180	; 0xb4
200003da:	605a      	str	r2, [r3, #4]
	bird.yPos = 40;
200003dc:	4b96      	ldr	r3, [pc, #600]	; (20000638 <main+0x43c>)
200003de:	22d0      	movs	r2, #208	; 0xd0
200003e0:	0092      	lsls	r2, r2, #2
200003e2:	4694      	mov	ip, r2
200003e4:	44bc      	add	ip, r7
200003e6:	4463      	add	r3, ip
200003e8:	2228      	movs	r2, #40	; 0x28
200003ea:	609a      	str	r2, [r3, #8]
	bird.update = gameObjectUpdate;
200003ec:	4b92      	ldr	r3, [pc, #584]	; (20000638 <main+0x43c>)
200003ee:	22d0      	movs	r2, #208	; 0xd0
200003f0:	0092      	lsls	r2, r2, #2
200003f2:	4694      	mov	ip, r2
200003f4:	44bc      	add	ip, r7
200003f6:	4463      	add	r3, ip
200003f8:	4a90      	ldr	r2, [pc, #576]	; (2000063c <main+0x440>)
200003fa:	60da      	str	r2, [r3, #12]
	
	GameObject player;
	init_witch( &player );
200003fc:	23dc      	movs	r3, #220	; 0xdc
200003fe:	005b      	lsls	r3, r3, #1
20000400:	18fb      	adds	r3, r7, r3
20000402:	0018      	movs	r0, r3
20000404:	f001 f94c 	bl	200016a0 <init_witch>
	player.xPos = 3;
20000408:	4b8d      	ldr	r3, [pc, #564]	; (20000640 <main+0x444>)
2000040a:	22d0      	movs	r2, #208	; 0xd0
2000040c:	0092      	lsls	r2, r2, #2
2000040e:	4694      	mov	ip, r2
20000410:	44bc      	add	ip, r7
20000412:	4463      	add	r3, ip
20000414:	2203      	movs	r2, #3
20000416:	605a      	str	r2, [r3, #4]
	player.yPos = 64-18-7; //player position
20000418:	4b89      	ldr	r3, [pc, #548]	; (20000640 <main+0x444>)
2000041a:	22d0      	movs	r2, #208	; 0xd0
2000041c:	0092      	lsls	r2, r2, #2
2000041e:	4694      	mov	ip, r2
20000420:	44bc      	add	ip, r7
20000422:	4463      	add	r3, ip
20000424:	2227      	movs	r2, #39	; 0x27
20000426:	609a      	str	r2, [r3, #8]
	player.update = playerUpdate;
20000428:	4b85      	ldr	r3, [pc, #532]	; (20000640 <main+0x444>)
2000042a:	22d0      	movs	r2, #208	; 0xd0
2000042c:	0092      	lsls	r2, r2, #2
2000042e:	4694      	mov	ip, r2
20000430:	44bc      	add	ip, r7
20000432:	4463      	add	r3, ip
20000434:	4a74      	ldr	r2, [pc, #464]	; (20000608 <main+0x40c>)
20000436:	60da      	str	r2, [r3, #12]
	
	GameObject fire2;
	init_fire( &fire2 );
20000438:	23ca      	movs	r3, #202	; 0xca
2000043a:	005b      	lsls	r3, r3, #1
2000043c:	18fb      	adds	r3, r7, r3
2000043e:	0018      	movs	r0, r3
20000440:	f000 fdcc 	bl	20000fdc <init_fire>
	GameObject fire3;
	init_fire( &fire3 );
20000444:	23b8      	movs	r3, #184	; 0xb8
20000446:	005b      	lsls	r3, r3, #1
20000448:	18fb      	adds	r3, r7, r3
2000044a:	0018      	movs	r0, r3
2000044c:	f000 fdc6 	bl	20000fdc <init_fire>
	GameObject fire4;
	init_fire( &fire4 );
20000450:	23a6      	movs	r3, #166	; 0xa6
20000452:	005b      	lsls	r3, r3, #1
20000454:	18fb      	adds	r3, r7, r3
20000456:	0018      	movs	r0, r3
20000458:	f000 fdc0 	bl	20000fdc <init_fire>
	GameObject fire1;
	init_fire( &fire1 );
2000045c:	2394      	movs	r3, #148	; 0x94
2000045e:	005b      	lsls	r3, r3, #1
20000460:	18fb      	adds	r3, r7, r3
20000462:	0018      	movs	r0, r3
20000464:	f000 fdba 	bl	20000fdc <init_fire>
	GameObject fire1_indoors;
	init_fire( &fire1_indoors );
20000468:	1d7b      	adds	r3, r7, #5
2000046a:	33ff      	adds	r3, #255	; 0xff
2000046c:	0018      	movs	r0, r3
2000046e:	f000 fdb5 	bl	20000fdc <init_fire>
	fire1_indoors.xPos = 105;		//FIRE1_INDO
20000472:	4b74      	ldr	r3, [pc, #464]	; (20000644 <main+0x448>)
20000474:	22d0      	movs	r2, #208	; 0xd0
20000476:	0092      	lsls	r2, r2, #2
20000478:	4694      	mov	ip, r2
2000047a:	44bc      	add	ip, r7
2000047c:	4463      	add	r3, ip
2000047e:	2269      	movs	r2, #105	; 0x69
20000480:	605a      	str	r2, [r3, #4]
	fire1_indoors.yPos = 64-11-7;
20000482:	4b70      	ldr	r3, [pc, #448]	; (20000644 <main+0x448>)
20000484:	22d0      	movs	r2, #208	; 0xd0
20000486:	0092      	lsls	r2, r2, #2
20000488:	4694      	mov	ip, r2
2000048a:	44bc      	add	ip, r7
2000048c:	4463      	add	r3, ip
2000048e:	222e      	movs	r2, #46	; 0x2e
20000490:	609a      	str	r2, [r3, #8]
	fire1_indoors.update = gameObjectUpdate;
20000492:	4b6c      	ldr	r3, [pc, #432]	; (20000644 <main+0x448>)
20000494:	22d0      	movs	r2, #208	; 0xd0
20000496:	0092      	lsls	r2, r2, #2
20000498:	4694      	mov	ip, r2
2000049a:	44bc      	add	ip, r7
2000049c:	4463      	add	r3, ip
2000049e:	4a67      	ldr	r2, [pc, #412]	; (2000063c <main+0x440>)
200004a0:	60da      	str	r2, [r3, #12]
	
	fire2.xPos = 98;
200004a2:	4b69      	ldr	r3, [pc, #420]	; (20000648 <main+0x44c>)
200004a4:	22d0      	movs	r2, #208	; 0xd0
200004a6:	0092      	lsls	r2, r2, #2
200004a8:	4694      	mov	ip, r2
200004aa:	44bc      	add	ip, r7
200004ac:	4463      	add	r3, ip
200004ae:	2262      	movs	r2, #98	; 0x62
200004b0:	605a      	str	r2, [r3, #4]
	fire2.yPos = 26-12;
200004b2:	4b65      	ldr	r3, [pc, #404]	; (20000648 <main+0x44c>)
200004b4:	22d0      	movs	r2, #208	; 0xd0
200004b6:	0092      	lsls	r2, r2, #2
200004b8:	4694      	mov	ip, r2
200004ba:	44bc      	add	ip, r7
200004bc:	4463      	add	r3, ip
200004be:	220e      	movs	r2, #14
200004c0:	609a      	str	r2, [r3, #8]
	fire3.xPos = 115;
200004c2:	4b62      	ldr	r3, [pc, #392]	; (2000064c <main+0x450>)
200004c4:	22d0      	movs	r2, #208	; 0xd0
200004c6:	0092      	lsls	r2, r2, #2
200004c8:	4694      	mov	ip, r2
200004ca:	44bc      	add	ip, r7
200004cc:	4463      	add	r3, ip
200004ce:	2273      	movs	r2, #115	; 0x73
200004d0:	605a      	str	r2, [r3, #4]
	fire3.yPos = 34-12;
200004d2:	4b5e      	ldr	r3, [pc, #376]	; (2000064c <main+0x450>)
200004d4:	22d0      	movs	r2, #208	; 0xd0
200004d6:	0092      	lsls	r2, r2, #2
200004d8:	4694      	mov	ip, r2
200004da:	44bc      	add	ip, r7
200004dc:	4463      	add	r3, ip
200004de:	2216      	movs	r2, #22
200004e0:	609a      	str	r2, [r3, #8]
	
	fire1.xPos = 85;
200004e2:	4b5b      	ldr	r3, [pc, #364]	; (20000650 <main+0x454>)
200004e4:	22d0      	movs	r2, #208	; 0xd0
200004e6:	0092      	lsls	r2, r2, #2
200004e8:	4694      	mov	ip, r2
200004ea:	44bc      	add	ip, r7
200004ec:	4463      	add	r3, ip
200004ee:	2255      	movs	r2, #85	; 0x55
200004f0:	605a      	str	r2, [r3, #4]
	fire1.yPos = 23-12;
200004f2:	4b57      	ldr	r3, [pc, #348]	; (20000650 <main+0x454>)
200004f4:	22d0      	movs	r2, #208	; 0xd0
200004f6:	0092      	lsls	r2, r2, #2
200004f8:	4694      	mov	ip, r2
200004fa:	44bc      	add	ip, r7
200004fc:	4463      	add	r3, ip
200004fe:	220b      	movs	r2, #11
20000500:	609a      	str	r2, [r3, #8]
	fire4.xPos = 71;
20000502:	4b54      	ldr	r3, [pc, #336]	; (20000654 <main+0x458>)
20000504:	22d0      	movs	r2, #208	; 0xd0
20000506:	0092      	lsls	r2, r2, #2
20000508:	4694      	mov	ip, r2
2000050a:	44bc      	add	ip, r7
2000050c:	4463      	add	r3, ip
2000050e:	2247      	movs	r2, #71	; 0x47
20000510:	605a      	str	r2, [r3, #4]
	fire4.yPos = 27-11;
20000512:	4b50      	ldr	r3, [pc, #320]	; (20000654 <main+0x458>)
20000514:	22d0      	movs	r2, #208	; 0xd0
20000516:	0092      	lsls	r2, r2, #2
20000518:	4694      	mov	ip, r2
2000051a:	44bc      	add	ip, r7
2000051c:	4463      	add	r3, ip
2000051e:	2210      	movs	r2, #16
20000520:	609a      	str	r2, [r3, #8]
	//draw_game_object(&castleObj);
	
	fire2.animation_speed = 2;
20000522:	4b49      	ldr	r3, [pc, #292]	; (20000648 <main+0x44c>)
20000524:	22d0      	movs	r2, #208	; 0xd0
20000526:	0092      	lsls	r2, r2, #2
20000528:	4694      	mov	ip, r2
2000052a:	44bc      	add	ip, r7
2000052c:	4463      	add	r3, ip
2000052e:	2202      	movs	r2, #2
20000530:	61da      	str	r2, [r3, #28]
	fire3.animation_speed = 2;
20000532:	4b46      	ldr	r3, [pc, #280]	; (2000064c <main+0x450>)
20000534:	22d0      	movs	r2, #208	; 0xd0
20000536:	0092      	lsls	r2, r2, #2
20000538:	4694      	mov	ip, r2
2000053a:	44bc      	add	ip, r7
2000053c:	4463      	add	r3, ip
2000053e:	2202      	movs	r2, #2
20000540:	61da      	str	r2, [r3, #28]
	fire1.animation_speed = 2;
20000542:	4b43      	ldr	r3, [pc, #268]	; (20000650 <main+0x454>)
20000544:	22d0      	movs	r2, #208	; 0xd0
20000546:	0092      	lsls	r2, r2, #2
20000548:	4694      	mov	ip, r2
2000054a:	44bc      	add	ip, r7
2000054c:	4463      	add	r3, ip
2000054e:	2202      	movs	r2, #2
20000550:	61da      	str	r2, [r3, #28]
	fire4.animation_speed = 2;
20000552:	4b40      	ldr	r3, [pc, #256]	; (20000654 <main+0x458>)
20000554:	22d0      	movs	r2, #208	; 0xd0
20000556:	0092      	lsls	r2, r2, #2
20000558:	4694      	mov	ip, r2
2000055a:	44bc      	add	ip, r7
2000055c:	4463      	add	r3, ip
2000055e:	2202      	movs	r2, #2
20000560:	61da      	str	r2, [r3, #28]
	
	fire2.update = gameObjectUpdate;
20000562:	4b39      	ldr	r3, [pc, #228]	; (20000648 <main+0x44c>)
20000564:	22d0      	movs	r2, #208	; 0xd0
20000566:	0092      	lsls	r2, r2, #2
20000568:	4694      	mov	ip, r2
2000056a:	44bc      	add	ip, r7
2000056c:	4463      	add	r3, ip
2000056e:	4a33      	ldr	r2, [pc, #204]	; (2000063c <main+0x440>)
20000570:	60da      	str	r2, [r3, #12]
	fire3.update = gameObjectUpdate;
20000572:	4b36      	ldr	r3, [pc, #216]	; (2000064c <main+0x450>)
20000574:	22d0      	movs	r2, #208	; 0xd0
20000576:	0092      	lsls	r2, r2, #2
20000578:	4694      	mov	ip, r2
2000057a:	44bc      	add	ip, r7
2000057c:	4463      	add	r3, ip
2000057e:	4a2f      	ldr	r2, [pc, #188]	; (2000063c <main+0x440>)
20000580:	60da      	str	r2, [r3, #12]
	fire1.update = gameObjectUpdate;
20000582:	4b33      	ldr	r3, [pc, #204]	; (20000650 <main+0x454>)
20000584:	22d0      	movs	r2, #208	; 0xd0
20000586:	0092      	lsls	r2, r2, #2
20000588:	4694      	mov	ip, r2
2000058a:	44bc      	add	ip, r7
2000058c:	4463      	add	r3, ip
2000058e:	4a2b      	ldr	r2, [pc, #172]	; (2000063c <main+0x440>)
20000590:	60da      	str	r2, [r3, #12]
	fire4.update = gameObjectUpdate;
20000592:	4b30      	ldr	r3, [pc, #192]	; (20000654 <main+0x458>)
20000594:	22d0      	movs	r2, #208	; 0xd0
20000596:	0092      	lsls	r2, r2, #2
20000598:	4694      	mov	ip, r2
2000059a:	44bc      	add	ip, r7
2000059c:	4463      	add	r3, ip
2000059e:	4a27      	ldr	r2, [pc, #156]	; (2000063c <main+0x440>)
200005a0:	60da      	str	r2, [r3, #12]
	SlowText text8;
	SlowText text9;
	SlowText text10;
	SlowText text11;
	SlowText text12;
	init_slow_text(&text_kra, "*KRA!* *KRA!*", "   ", 1);
200005a2:	4a2d      	ldr	r2, [pc, #180]	; (20000658 <main+0x45c>)
200005a4:	492d      	ldr	r1, [pc, #180]	; (2000065c <main+0x460>)
200005a6:	23f0      	movs	r3, #240	; 0xf0
200005a8:	18f8      	adds	r0, r7, r3
200005aa:	2301      	movs	r3, #1
200005ac:	f002 fb31 	bl	20002c12 <init_slow_text>
	init_slow_text(&text1, "For centuries the", "DILs-witches have", 1);
200005b0:	4a2b      	ldr	r2, [pc, #172]	; (20000660 <main+0x464>)
200005b2:	492c      	ldr	r1, [pc, #176]	; (20000664 <main+0x468>)
200005b4:	23dc      	movs	r3, #220	; 0xdc
200005b6:	18f8      	adds	r0, r7, r3
200005b8:	2301      	movs	r3, #1
200005ba:	f002 fb2a 	bl	20002c12 <init_slow_text>
	init_slow_text(&text2, "coiled in fear,", "    ", 1);
200005be:	4a2a      	ldr	r2, [pc, #168]	; (20000668 <main+0x46c>)
200005c0:	492a      	ldr	r1, [pc, #168]	; (2000066c <main+0x470>)
200005c2:	23c8      	movs	r3, #200	; 0xc8
200005c4:	18f8      	adds	r0, r7, r3
200005c6:	2301      	movs	r3, #1
200005c8:	f002 fb23 	bl	20002c12 <init_slow_text>
	init_slow_text(&text3, "whenever they hear", "that a DIPs-witch", 1);
200005cc:	4a28      	ldr	r2, [pc, #160]	; (20000670 <main+0x474>)
200005ce:	4929      	ldr	r1, [pc, #164]	; (20000674 <main+0x478>)
200005d0:	23b4      	movs	r3, #180	; 0xb4
200005d2:	18f8      	adds	r0, r7, r3
200005d4:	2301      	movs	r3, #1
200005d6:	f002 fb1c 	bl	20002c12 <init_slow_text>
	init_slow_text(&text4, "is near.", "   ", 1);
200005da:	4a1f      	ldr	r2, [pc, #124]	; (20000658 <main+0x45c>)
200005dc:	4926      	ldr	r1, [pc, #152]	; (20000678 <main+0x47c>)
200005de:	23a0      	movs	r3, #160	; 0xa0
200005e0:	18f8      	adds	r0, r7, r3
200005e2:	2301      	movs	r3, #1
200005e4:	f002 fb15 	bl	20002c12 <init_slow_text>
	init_slow_text(&text5, "So it is quite", "surprising, finding", 1);
200005e8:	4a24      	ldr	r2, [pc, #144]	; (2000067c <main+0x480>)
200005ea:	4925      	ldr	r1, [pc, #148]	; (20000680 <main+0x484>)
200005ec:	238c      	movs	r3, #140	; 0x8c
200005ee:	18f8      	adds	r0, r7, r3
200005f0:	2301      	movs	r3, #1
200005f2:	f002 fb0e 	bl	20002c12 <init_slow_text>
200005f6:	e045      	b.n	20000684 <main+0x488>
200005f8:	fffffcbc 			; <UNDEFINED> instruction: 0xfffffcbc
200005fc:	20003008 	andcs	r3, r0, r8
20000600:	200030c8 	andcs	r3, r0, r8, asr #1
20000604:	200030b4 	strhcs	r3, [r0], -r4
20000608:	20001101 	andcs	r1, r0, r1, lsl #2
2000060c:	200030d8 	ldrdcs	r3, [r0], -r8
20000610:	200030a4 	andcs	r3, r0, r4, lsr #1
20000614:	200030b8 	strhcs	r3, [r0], -r8
20000618:	200030c4 	andcs	r3, r0, r4, asr #1
2000061c:	20003040 	andcs	r3, r0, r0, asr #32
20000620:	20003088 	andcs	r3, r0, r8, lsl #1
20000624:	20003030 	andcs	r3, r0, r0, lsr r0
20000628:	200030bc 	strhcs	r3, [r0], -ip
2000062c:	2000306c 	andcs	r3, r0, ip, rrx
20000630:	fffffee4 			; <UNDEFINED> instruction: 0xfffffee4
20000634:	fffffec0 			; <UNDEFINED> instruction: 0xfffffec0
20000638:	fffffe9c 			; <UNDEFINED> instruction: 0xfffffe9c
2000063c:	20000e11 	andcs	r0, r0, r1, lsl lr
20000640:	fffffe78 			; <UNDEFINED> instruction: 0xfffffe78
20000644:	fffffdc4 			; <UNDEFINED> instruction: 0xfffffdc4
20000648:	fffffe54 			; <UNDEFINED> instruction: 0xfffffe54
2000064c:	fffffe30 			; <UNDEFINED> instruction: 0xfffffe30
20000650:	fffffde8 			; <UNDEFINED> instruction: 0xfffffde8
20000654:	fffffe0c 			; <UNDEFINED> instruction: 0xfffffe0c
20000658:	20008af4 	strdcs	r8, [r0], -r4
2000065c:	20008af8 	strdcs	r8, [r0], -r8	; <UNPREDICTABLE>
20000660:	20008b08 	andcs	r8, r0, r8, lsl #22
20000664:	20008b1c 	andcs	r8, r0, ip, lsl fp
20000668:	20008b30 	andcs	r8, r0, r0, lsr fp
2000066c:	20008b38 	andcs	r8, r0, r8, lsr fp
20000670:	20008b48 	andcs	r8, r0, r8, asr #22
20000674:	20008b5c 	andcs	r8, r0, ip, asr fp
20000678:	20008b70 	andcs	r8, r0, r0, ror fp
2000067c:	20008b7c 	andcs	r8, r0, ip, ror fp
20000680:	20008b90 	mulcs	r0, r0, fp
	init_slow_text(&text6, "you here,", "    ", 1);
20000684:	4ad8      	ldr	r2, [pc, #864]	; (200009e8 <main+0x7ec>)
20000686:	49d9      	ldr	r1, [pc, #868]	; (200009ec <main+0x7f0>)
20000688:	2378      	movs	r3, #120	; 0x78
2000068a:	18f8      	adds	r0, r7, r3
2000068c:	2301      	movs	r3, #1
2000068e:	f002 fac0 	bl	20002c12 <init_slow_text>
	init_slow_text(&text7, "queen Daffo of DILs,", "heir to king Lear.", 1);
20000692:	4ad7      	ldr	r2, [pc, #860]	; (200009f0 <main+0x7f4>)
20000694:	49d7      	ldr	r1, [pc, #860]	; (200009f4 <main+0x7f8>)
20000696:	2364      	movs	r3, #100	; 0x64
20000698:	18f8      	adds	r0, r7, r3
2000069a:	2301      	movs	r3, #1
2000069c:	f002 fab9 	bl	20002c12 <init_slow_text>
	init_slow_text(&text8, "But maybe you're", "tempted, to loot", 1);
200006a0:	4ad5      	ldr	r2, [pc, #852]	; (200009f8 <main+0x7fc>)
200006a2:	49d6      	ldr	r1, [pc, #856]	; (200009fc <main+0x800>)
200006a4:	2350      	movs	r3, #80	; 0x50
200006a6:	18f8      	adds	r0, r7, r3
200006a8:	2301      	movs	r3, #1
200006aa:	f002 fab2 	bl	20002c12 <init_slow_text>
	init_slow_text(&text9, "from the riches,", "    ", 1);
200006ae:	4ace      	ldr	r2, [pc, #824]	; (200009e8 <main+0x7ec>)
200006b0:	49d3      	ldr	r1, [pc, #844]	; (20000a00 <main+0x804>)
200006b2:	233c      	movs	r3, #60	; 0x3c
200006b4:	18f8      	adds	r0, r7, r3
200006b6:	2301      	movs	r3, #1
200006b8:	f002 faab 	bl	20002c12 <init_slow_text>
	init_slow_text(&text12, "wicked DIPs-witches.", "    ", 1);
200006bc:	4aca      	ldr	r2, [pc, #808]	; (200009e8 <main+0x7ec>)
200006be:	49d1      	ldr	r1, [pc, #836]	; (20000a04 <main+0x808>)
200006c0:	0038      	movs	r0, r7
200006c2:	2301      	movs	r3, #1
200006c4:	f002 faa5 	bl	20002c12 <init_slow_text>
	init_slow_text(&text10, "so grippily trea-", "sured by", 1);
200006c8:	4acf      	ldr	r2, [pc, #828]	; (20000a08 <main+0x80c>)
200006ca:	49d0      	ldr	r1, [pc, #832]	; (20000a0c <main+0x810>)
200006cc:	2328      	movs	r3, #40	; 0x28
200006ce:	18f8      	adds	r0, r7, r3
200006d0:	2301      	movs	r3, #1
200006d2:	f002 fa9e 	bl	20002c12 <init_slow_text>
	init_slow_text(&text11, "Enter, brave witch,", "- reset the switch!", 1);
200006d6:	4ace      	ldr	r2, [pc, #824]	; (20000a10 <main+0x814>)
200006d8:	49ce      	ldr	r1, [pc, #824]	; (20000a14 <main+0x818>)
200006da:	2314      	movs	r3, #20
200006dc:	18f8      	adds	r0, r7, r3
200006de:	2301      	movs	r3, #1
200006e0:	f002 fa97 	bl	20002c12 <init_slow_text>
	//ascii_write_part("Yeeaaah!!!", "This is working! :)", 5, 10);
	set_up_ascii();
200006e4:	f002 f972 	bl	200029cc <set_up_ascii>
	set_up_DIL();
200006e8:	f001 ffa0 	bl	2000262c <set_up_DIL>
	clear_ascii();
200006ec:	f002 f977 	bl	200029de <clear_ascii>
	
	if(read_DIL() == 0) {
200006f0:	f001 ffa8 	bl	20002644 <read_DIL>
200006f4:	1e03      	subs	r3, r0, #0
200006f6:	d102      	bne.n	200006fe <main+0x502>
		current_screen = SWITCH_LOCK; 
200006f8:	4bc7      	ldr	r3, [pc, #796]	; (20000a18 <main+0x81c>)
200006fa:	2200      	movs	r2, #0
200006fc:	601a      	str	r2, [r3, #0]
	}
	
	int is_climbing = 0;
200006fe:	2300      	movs	r3, #0
20000700:	22cf      	movs	r2, #207	; 0xcf
20000702:	0092      	lsls	r2, r2, #2
20000704:	18ba      	adds	r2, r7, r2
20000706:	6013      	str	r3, [r2, #0]
	int has_climbed = 0;
20000708:	2300      	movs	r3, #0
2000070a:	22ce      	movs	r2, #206	; 0xce
2000070c:	0092      	lsls	r2, r2, #2
2000070e:	18ba      	adds	r2, r7, r2
20000710:	6013      	str	r3, [r2, #0]
	
	//Game loop
	while(1) {
			
		switch(current_screen) {
20000712:	4bc1      	ldr	r3, [pc, #772]	; (20000a18 <main+0x81c>)
20000714:	681b      	ldr	r3, [r3, #0]
20000716:	2b01      	cmp	r3, #1
20000718:	d019      	beq.n	2000074e <main+0x552>
2000071a:	2b02      	cmp	r3, #2
2000071c:	d100      	bne.n	20000720 <main+0x524>
2000071e:	e299      	b.n	20000c54 <main+0xa58>
20000720:	2b00      	cmp	r3, #0
20000722:	d1f6      	bne.n	20000712 <main+0x516>
			
			case SWITCH_LOCK: //before

				while(read_DIL() == 0){
20000724:	e008      	b.n	20000738 <main+0x53c>
					draw_game_object(&pressObj);
20000726:	23a7      	movs	r3, #167	; 0xa7
20000728:	009b      	lsls	r3, r3, #2
2000072a:	18fb      	adds	r3, r7, r3
2000072c:	0018      	movs	r0, r3
2000072e:	f001 fedf 	bl	200024f0 <draw_game_object>
					show_frame(1);
20000732:	2001      	movs	r0, #1
20000734:	f001 ff1d 	bl	20002572 <show_frame>
				while(read_DIL() == 0){
20000738:	f001 ff84 	bl	20002644 <read_DIL>
2000073c:	1e03      	subs	r3, r0, #0
2000073e:	d0f2      	beq.n	20000726 <main+0x52a>
				}
				
				counter = 0;
20000740:	4bb6      	ldr	r3, [pc, #728]	; (20000a1c <main+0x820>)
20000742:	2200      	movs	r2, #0
20000744:	601a      	str	r2, [r3, #0]
				current_screen = START_SCREEN;
20000746:	4bb4      	ldr	r3, [pc, #720]	; (20000a18 <main+0x81c>)
20000748:	2201      	movs	r2, #1
2000074a:	601a      	str	r2, [r3, #0]
				break;
2000074c:	e333      	b.n	20000db6 <main+0xbba>
			
			
			case START_SCREEN: //outside
				
				counter++;
2000074e:	4bb3      	ldr	r3, [pc, #716]	; (20000a1c <main+0x820>)
20000750:	681b      	ldr	r3, [r3, #0]
20000752:	1c5a      	adds	r2, r3, #1
20000754:	4bb1      	ldr	r3, [pc, #708]	; (20000a1c <main+0x820>)
20000756:	601a      	str	r2, [r3, #0]
				
				if(titleObj.yPos < 1) {
20000758:	23b6      	movs	r3, #182	; 0xb6
2000075a:	009b      	lsls	r3, r3, #2
2000075c:	18fb      	adds	r3, r7, r3
2000075e:	689b      	ldr	r3, [r3, #8]
20000760:	2b00      	cmp	r3, #0
20000762:	dc08      	bgt.n	20000776 <main+0x57a>
					titleObj.yPos++;
20000764:	23b6      	movs	r3, #182	; 0xb6
20000766:	009b      	lsls	r3, r3, #2
20000768:	18fb      	adds	r3, r7, r3
2000076a:	689b      	ldr	r3, [r3, #8]
2000076c:	1c5a      	adds	r2, r3, #1
2000076e:	23b6      	movs	r3, #182	; 0xb6
20000770:	009b      	lsls	r3, r3, #2
20000772:	18fb      	adds	r3, r7, r3
20000774:	609a      	str	r2, [r3, #8]
				}
				
				draw_game_object(&castleObj);
20000776:	2398      	movs	r3, #152	; 0x98
20000778:	009b      	lsls	r3, r3, #2
2000077a:	18fb      	adds	r3, r7, r3
2000077c:	0018      	movs	r0, r3
2000077e:	f001 feb7 	bl	200024f0 <draw_game_object>
				draw_game_object(&fire2);
20000782:	23ca      	movs	r3, #202	; 0xca
20000784:	005b      	lsls	r3, r3, #1
20000786:	18fb      	adds	r3, r7, r3
20000788:	0018      	movs	r0, r3
2000078a:	f001 feb1 	bl	200024f0 <draw_game_object>
				draw_game_object(&fire3);
2000078e:	23b8      	movs	r3, #184	; 0xb8
20000790:	005b      	lsls	r3, r3, #1
20000792:	18fb      	adds	r3, r7, r3
20000794:	0018      	movs	r0, r3
20000796:	f001 feab 	bl	200024f0 <draw_game_object>
				draw_game_object(&fire1);
2000079a:	2394      	movs	r3, #148	; 0x94
2000079c:	005b      	lsls	r3, r3, #1
2000079e:	18fb      	adds	r3, r7, r3
200007a0:	0018      	movs	r0, r3
200007a2:	f001 fea5 	bl	200024f0 <draw_game_object>
				draw_game_object(&fire4);
200007a6:	23a6      	movs	r3, #166	; 0xa6
200007a8:	005b      	lsls	r3, r3, #1
200007aa:	18fb      	adds	r3, r7, r3
200007ac:	0018      	movs	r0, r3
200007ae:	f001 fe9f 	bl	200024f0 <draw_game_object>
				draw_game_object(&titleObj);
200007b2:	23b6      	movs	r3, #182	; 0xb6
200007b4:	009b      	lsls	r3, r3, #2
200007b6:	18fb      	adds	r3, r7, r3
200007b8:	0018      	movs	r0, r3
200007ba:	f001 fe99 	bl	200024f0 <draw_game_object>
				draw_game_object(&bird);
200007be:	23ee      	movs	r3, #238	; 0xee
200007c0:	005b      	lsls	r3, r3, #1
200007c2:	18fb      	adds	r3, r7, r3
200007c4:	0018      	movs	r0, r3
200007c6:	f001 fe93 	bl	200024f0 <draw_game_object>
				show_frame(1);
200007ca:	2001      	movs	r0, #1
200007cc:	f001 fed1 	bl	20002572 <show_frame>
				
				static int long_text = 40;
				static int short_text = 20;
				static int delay_until_text = 130;
				
				if (counter < delay_until_text - 55 && counter > delay_until_text - 90)
200007d0:	4b93      	ldr	r3, [pc, #588]	; (20000a20 <main+0x824>)
200007d2:	681b      	ldr	r3, [r3, #0]
200007d4:	3b37      	subs	r3, #55	; 0x37
200007d6:	001a      	movs	r2, r3
200007d8:	4b90      	ldr	r3, [pc, #576]	; (20000a1c <main+0x820>)
200007da:	681b      	ldr	r3, [r3, #0]
200007dc:	429a      	cmp	r2, r3
200007de:	dd13      	ble.n	20000808 <main+0x60c>
200007e0:	4b8f      	ldr	r3, [pc, #572]	; (20000a20 <main+0x824>)
200007e2:	681b      	ldr	r3, [r3, #0]
200007e4:	3b5a      	subs	r3, #90	; 0x5a
200007e6:	001a      	movs	r2, r3
200007e8:	4b8c      	ldr	r3, [pc, #560]	; (20000a1c <main+0x820>)
200007ea:	681b      	ldr	r3, [r3, #0]
200007ec:	429a      	cmp	r2, r3
200007ee:	da0b      	bge.n	20000808 <main+0x60c>
					text_kra.display(&text_kra, 20);
200007f0:	4b8c      	ldr	r3, [pc, #560]	; (20000a24 <main+0x828>)
200007f2:	22d0      	movs	r2, #208	; 0xd0
200007f4:	0092      	lsls	r2, r2, #2
200007f6:	4694      	mov	ip, r2
200007f8:	44bc      	add	ip, r7
200007fa:	4463      	add	r3, ip
200007fc:	691b      	ldr	r3, [r3, #16]
200007fe:	22f0      	movs	r2, #240	; 0xf0
20000800:	18ba      	adds	r2, r7, r2
20000802:	2114      	movs	r1, #20
20000804:	0010      	movs	r0, r2
20000806:	4798      	blx	r3
				if (counter == delay_until_text - 25)
20000808:	4b85      	ldr	r3, [pc, #532]	; (20000a20 <main+0x824>)
2000080a:	681b      	ldr	r3, [r3, #0]
2000080c:	3b19      	subs	r3, #25
2000080e:	001a      	movs	r2, r3
20000810:	4b82      	ldr	r3, [pc, #520]	; (20000a1c <main+0x820>)
20000812:	681b      	ldr	r3, [r3, #0]
20000814:	429a      	cmp	r2, r3
20000816:	d101      	bne.n	2000081c <main+0x620>
					clear_ascii();
20000818:	f002 f8e1 	bl	200029de <clear_ascii>
				
				if (counter < delay_until_text);
2000081c:	4b7f      	ldr	r3, [pc, #508]	; (20000a1c <main+0x820>)
2000081e:	681a      	ldr	r2, [r3, #0]
20000820:	4b7f      	ldr	r3, [pc, #508]	; (20000a20 <main+0x824>)
20000822:	681b      	ldr	r3, [r3, #0]
20000824:	429a      	cmp	r2, r3
20000826:	da00      	bge.n	2000082a <main+0x62e>
20000828:	e1a1      	b.n	20000b6e <main+0x972>
				else if (counter < delay_until_text + 1*long_text)
2000082a:	4b7d      	ldr	r3, [pc, #500]	; (20000a20 <main+0x824>)
2000082c:	681a      	ldr	r2, [r3, #0]
2000082e:	4b7e      	ldr	r3, [pc, #504]	; (20000a28 <main+0x82c>)
20000830:	681b      	ldr	r3, [r3, #0]
20000832:	18d2      	adds	r2, r2, r3
20000834:	4b79      	ldr	r3, [pc, #484]	; (20000a1c <main+0x820>)
20000836:	681b      	ldr	r3, [r3, #0]
20000838:	429a      	cmp	r2, r3
2000083a:	dd0c      	ble.n	20000856 <main+0x65a>
					text1.display(&text1, 20);
2000083c:	4b7b      	ldr	r3, [pc, #492]	; (20000a2c <main+0x830>)
2000083e:	22d0      	movs	r2, #208	; 0xd0
20000840:	0092      	lsls	r2, r2, #2
20000842:	4694      	mov	ip, r2
20000844:	44bc      	add	ip, r7
20000846:	4463      	add	r3, ip
20000848:	691b      	ldr	r3, [r3, #16]
2000084a:	22dc      	movs	r2, #220	; 0xdc
2000084c:	18ba      	adds	r2, r7, r2
2000084e:	2114      	movs	r1, #20
20000850:	0010      	movs	r0, r2
20000852:	4798      	blx	r3
20000854:	e18b      	b.n	20000b6e <main+0x972>
				else if(counter < delay_until_text + 1*long_text + 1*short_text)
20000856:	4b72      	ldr	r3, [pc, #456]	; (20000a20 <main+0x824>)
20000858:	681a      	ldr	r2, [r3, #0]
2000085a:	4b73      	ldr	r3, [pc, #460]	; (20000a28 <main+0x82c>)
2000085c:	681b      	ldr	r3, [r3, #0]
2000085e:	18d2      	adds	r2, r2, r3
20000860:	4b73      	ldr	r3, [pc, #460]	; (20000a30 <main+0x834>)
20000862:	681b      	ldr	r3, [r3, #0]
20000864:	18d2      	adds	r2, r2, r3
20000866:	4b6d      	ldr	r3, [pc, #436]	; (20000a1c <main+0x820>)
20000868:	681b      	ldr	r3, [r3, #0]
2000086a:	429a      	cmp	r2, r3
2000086c:	dd0c      	ble.n	20000888 <main+0x68c>
					text2.display(&text2, 20);
2000086e:	4b71      	ldr	r3, [pc, #452]	; (20000a34 <main+0x838>)
20000870:	22d0      	movs	r2, #208	; 0xd0
20000872:	0092      	lsls	r2, r2, #2
20000874:	4694      	mov	ip, r2
20000876:	44bc      	add	ip, r7
20000878:	4463      	add	r3, ip
2000087a:	691b      	ldr	r3, [r3, #16]
2000087c:	22c8      	movs	r2, #200	; 0xc8
2000087e:	18ba      	adds	r2, r7, r2
20000880:	2114      	movs	r1, #20
20000882:	0010      	movs	r0, r2
20000884:	4798      	blx	r3
20000886:	e172      	b.n	20000b6e <main+0x972>
				else if(counter < delay_until_text + 2*long_text + 1*short_text)
20000888:	4b67      	ldr	r3, [pc, #412]	; (20000a28 <main+0x82c>)
2000088a:	681b      	ldr	r3, [r3, #0]
2000088c:	005a      	lsls	r2, r3, #1
2000088e:	4b64      	ldr	r3, [pc, #400]	; (20000a20 <main+0x824>)
20000890:	681b      	ldr	r3, [r3, #0]
20000892:	18d2      	adds	r2, r2, r3
20000894:	4b66      	ldr	r3, [pc, #408]	; (20000a30 <main+0x834>)
20000896:	681b      	ldr	r3, [r3, #0]
20000898:	18d2      	adds	r2, r2, r3
2000089a:	4b60      	ldr	r3, [pc, #384]	; (20000a1c <main+0x820>)
2000089c:	681b      	ldr	r3, [r3, #0]
2000089e:	429a      	cmp	r2, r3
200008a0:	dd0c      	ble.n	200008bc <main+0x6c0>
					text3.display(&text3, 20);
200008a2:	4b65      	ldr	r3, [pc, #404]	; (20000a38 <main+0x83c>)
200008a4:	22d0      	movs	r2, #208	; 0xd0
200008a6:	0092      	lsls	r2, r2, #2
200008a8:	4694      	mov	ip, r2
200008aa:	44bc      	add	ip, r7
200008ac:	4463      	add	r3, ip
200008ae:	691b      	ldr	r3, [r3, #16]
200008b0:	22b4      	movs	r2, #180	; 0xb4
200008b2:	18ba      	adds	r2, r7, r2
200008b4:	2114      	movs	r1, #20
200008b6:	0010      	movs	r0, r2
200008b8:	4798      	blx	r3
200008ba:	e158      	b.n	20000b6e <main+0x972>
				else if(counter < delay_until_text + 2*long_text + 2*short_text)
200008bc:	4b5a      	ldr	r3, [pc, #360]	; (20000a28 <main+0x82c>)
200008be:	681b      	ldr	r3, [r3, #0]
200008c0:	005a      	lsls	r2, r3, #1
200008c2:	4b57      	ldr	r3, [pc, #348]	; (20000a20 <main+0x824>)
200008c4:	681b      	ldr	r3, [r3, #0]
200008c6:	18d2      	adds	r2, r2, r3
200008c8:	4b59      	ldr	r3, [pc, #356]	; (20000a30 <main+0x834>)
200008ca:	681b      	ldr	r3, [r3, #0]
200008cc:	005b      	lsls	r3, r3, #1
200008ce:	18d2      	adds	r2, r2, r3
200008d0:	4b52      	ldr	r3, [pc, #328]	; (20000a1c <main+0x820>)
200008d2:	681b      	ldr	r3, [r3, #0]
200008d4:	429a      	cmp	r2, r3
200008d6:	dd0c      	ble.n	200008f2 <main+0x6f6>
					text4.display(&text4, 20);
200008d8:	4b58      	ldr	r3, [pc, #352]	; (20000a3c <main+0x840>)
200008da:	22d0      	movs	r2, #208	; 0xd0
200008dc:	0092      	lsls	r2, r2, #2
200008de:	4694      	mov	ip, r2
200008e0:	44bc      	add	ip, r7
200008e2:	4463      	add	r3, ip
200008e4:	691b      	ldr	r3, [r3, #16]
200008e6:	22a0      	movs	r2, #160	; 0xa0
200008e8:	18ba      	adds	r2, r7, r2
200008ea:	2114      	movs	r1, #20
200008ec:	0010      	movs	r0, r2
200008ee:	4798      	blx	r3
200008f0:	e13d      	b.n	20000b6e <main+0x972>
				else if(counter < delay_until_text + 3*long_text + 2*short_text)
200008f2:	4b4d      	ldr	r3, [pc, #308]	; (20000a28 <main+0x82c>)
200008f4:	681a      	ldr	r2, [r3, #0]
200008f6:	0013      	movs	r3, r2
200008f8:	005b      	lsls	r3, r3, #1
200008fa:	189a      	adds	r2, r3, r2
200008fc:	4b48      	ldr	r3, [pc, #288]	; (20000a20 <main+0x824>)
200008fe:	681b      	ldr	r3, [r3, #0]
20000900:	18d2      	adds	r2, r2, r3
20000902:	4b4b      	ldr	r3, [pc, #300]	; (20000a30 <main+0x834>)
20000904:	681b      	ldr	r3, [r3, #0]
20000906:	005b      	lsls	r3, r3, #1
20000908:	18d2      	adds	r2, r2, r3
2000090a:	4b44      	ldr	r3, [pc, #272]	; (20000a1c <main+0x820>)
2000090c:	681b      	ldr	r3, [r3, #0]
2000090e:	429a      	cmp	r2, r3
20000910:	dd0c      	ble.n	2000092c <main+0x730>
					text5.display(&text5, 15);
20000912:	4b4b      	ldr	r3, [pc, #300]	; (20000a40 <main+0x844>)
20000914:	22d0      	movs	r2, #208	; 0xd0
20000916:	0092      	lsls	r2, r2, #2
20000918:	4694      	mov	ip, r2
2000091a:	44bc      	add	ip, r7
2000091c:	4463      	add	r3, ip
2000091e:	691b      	ldr	r3, [r3, #16]
20000920:	228c      	movs	r2, #140	; 0x8c
20000922:	18ba      	adds	r2, r7, r2
20000924:	210f      	movs	r1, #15
20000926:	0010      	movs	r0, r2
20000928:	4798      	blx	r3
2000092a:	e120      	b.n	20000b6e <main+0x972>
				else if(counter < delay_until_text + 3*long_text + 3*short_text)
2000092c:	4b3e      	ldr	r3, [pc, #248]	; (20000a28 <main+0x82c>)
2000092e:	681a      	ldr	r2, [r3, #0]
20000930:	0013      	movs	r3, r2
20000932:	005b      	lsls	r3, r3, #1
20000934:	189a      	adds	r2, r3, r2
20000936:	4b3a      	ldr	r3, [pc, #232]	; (20000a20 <main+0x824>)
20000938:	681b      	ldr	r3, [r3, #0]
2000093a:	18d1      	adds	r1, r2, r3
2000093c:	4b3c      	ldr	r3, [pc, #240]	; (20000a30 <main+0x834>)
2000093e:	681a      	ldr	r2, [r3, #0]
20000940:	0013      	movs	r3, r2
20000942:	005b      	lsls	r3, r3, #1
20000944:	189b      	adds	r3, r3, r2
20000946:	18ca      	adds	r2, r1, r3
20000948:	4b34      	ldr	r3, [pc, #208]	; (20000a1c <main+0x820>)
2000094a:	681b      	ldr	r3, [r3, #0]
2000094c:	429a      	cmp	r2, r3
2000094e:	dd0c      	ble.n	2000096a <main+0x76e>
					text6.display(&text6, 20);
20000950:	4b3c      	ldr	r3, [pc, #240]	; (20000a44 <main+0x848>)
20000952:	22d0      	movs	r2, #208	; 0xd0
20000954:	0092      	lsls	r2, r2, #2
20000956:	4694      	mov	ip, r2
20000958:	44bc      	add	ip, r7
2000095a:	4463      	add	r3, ip
2000095c:	691b      	ldr	r3, [r3, #16]
2000095e:	2278      	movs	r2, #120	; 0x78
20000960:	18ba      	adds	r2, r7, r2
20000962:	2114      	movs	r1, #20
20000964:	0010      	movs	r0, r2
20000966:	4798      	blx	r3
20000968:	e101      	b.n	20000b6e <main+0x972>
				else if(counter < delay_until_text + 4*long_text + 3*short_text + 3)
2000096a:	4b2f      	ldr	r3, [pc, #188]	; (20000a28 <main+0x82c>)
2000096c:	681b      	ldr	r3, [r3, #0]
2000096e:	009a      	lsls	r2, r3, #2
20000970:	4b2b      	ldr	r3, [pc, #172]	; (20000a20 <main+0x824>)
20000972:	681b      	ldr	r3, [r3, #0]
20000974:	18d1      	adds	r1, r2, r3
20000976:	4b2e      	ldr	r3, [pc, #184]	; (20000a30 <main+0x834>)
20000978:	681a      	ldr	r2, [r3, #0]
2000097a:	0013      	movs	r3, r2
2000097c:	005b      	lsls	r3, r3, #1
2000097e:	189b      	adds	r3, r3, r2
20000980:	18cb      	adds	r3, r1, r3
20000982:	1cda      	adds	r2, r3, #3
20000984:	4b25      	ldr	r3, [pc, #148]	; (20000a1c <main+0x820>)
20000986:	681b      	ldr	r3, [r3, #0]
20000988:	429a      	cmp	r2, r3
2000098a:	dd0c      	ble.n	200009a6 <main+0x7aa>
					text7.display(&text7, 20);
2000098c:	4b2e      	ldr	r3, [pc, #184]	; (20000a48 <main+0x84c>)
2000098e:	22d0      	movs	r2, #208	; 0xd0
20000990:	0092      	lsls	r2, r2, #2
20000992:	4694      	mov	ip, r2
20000994:	44bc      	add	ip, r7
20000996:	4463      	add	r3, ip
20000998:	691b      	ldr	r3, [r3, #16]
2000099a:	2264      	movs	r2, #100	; 0x64
2000099c:	18ba      	adds	r2, r7, r2
2000099e:	2114      	movs	r1, #20
200009a0:	0010      	movs	r0, r2
200009a2:	4798      	blx	r3
200009a4:	e0e3      	b.n	20000b6e <main+0x972>
				else if(counter < delay_until_text + 5*long_text + 3*short_text + 2)
200009a6:	4b20      	ldr	r3, [pc, #128]	; (20000a28 <main+0x82c>)
200009a8:	681a      	ldr	r2, [r3, #0]
200009aa:	0013      	movs	r3, r2
200009ac:	009b      	lsls	r3, r3, #2
200009ae:	189a      	adds	r2, r3, r2
200009b0:	4b1b      	ldr	r3, [pc, #108]	; (20000a20 <main+0x824>)
200009b2:	681b      	ldr	r3, [r3, #0]
200009b4:	18d1      	adds	r1, r2, r3
200009b6:	4b1e      	ldr	r3, [pc, #120]	; (20000a30 <main+0x834>)
200009b8:	681a      	ldr	r2, [r3, #0]
200009ba:	0013      	movs	r3, r2
200009bc:	005b      	lsls	r3, r3, #1
200009be:	189b      	adds	r3, r3, r2
200009c0:	18cb      	adds	r3, r1, r3
200009c2:	1c9a      	adds	r2, r3, #2
200009c4:	4b15      	ldr	r3, [pc, #84]	; (20000a1c <main+0x820>)
200009c6:	681b      	ldr	r3, [r3, #0]
200009c8:	429a      	cmp	r2, r3
200009ca:	dd41      	ble.n	20000a50 <main+0x854>
					text8.display(&text8, 20);
200009cc:	4b1f      	ldr	r3, [pc, #124]	; (20000a4c <main+0x850>)
200009ce:	22d0      	movs	r2, #208	; 0xd0
200009d0:	0092      	lsls	r2, r2, #2
200009d2:	4694      	mov	ip, r2
200009d4:	44bc      	add	ip, r7
200009d6:	4463      	add	r3, ip
200009d8:	691b      	ldr	r3, [r3, #16]
200009da:	2250      	movs	r2, #80	; 0x50
200009dc:	18ba      	adds	r2, r7, r2
200009de:	2114      	movs	r1, #20
200009e0:	0010      	movs	r0, r2
200009e2:	4798      	blx	r3
200009e4:	e0c3      	b.n	20000b6e <main+0x972>
200009e6:	46c0      	nop			; (mov r8, r8)
200009e8:	20008b30 	andcs	r8, r0, r0, lsr fp
200009ec:	20008ba0 	andcs	r8, r0, r0, lsr #23
200009f0:	20008bac 	andcs	r8, r0, ip, lsr #23
200009f4:	20008bc0 	andcs	r8, r0, r0, asr #23
200009f8:	20008bd8 	ldrdcs	r8, [r0], -r8	; <UNPREDICTABLE>
200009fc:	20008bec 	andcs	r8, r0, ip, ror #23
20000a00:	20008c00 	andcs	r8, r0, r0, lsl #24
20000a04:	20008c14 	andcs	r8, r0, r4, lsl ip
20000a08:	20008c2c 	andcs	r8, r0, ip, lsr #24
20000a0c:	20008c38 	andcs	r8, r0, r8, lsr ip
20000a10:	20008c4c 	andcs	r8, r0, ip, asr #24
20000a14:	20008c60 	andcs	r8, r0, r0, ror #24
20000a18:	20006a74 	andcs	r6, r0, r4, ror sl
20000a1c:	20002ff4 	strdcs	r2, [r0], -r4
20000a20:	20006a78 	andcs	r6, r0, r8, ror sl
20000a24:	fffffdb0 			; <UNDEFINED> instruction: 0xfffffdb0
20000a28:	20006a7c 	andcs	r6, r0, ip, ror sl
20000a2c:	fffffd9c 			; <UNDEFINED> instruction: 0xfffffd9c
20000a30:	20006a80 	andcs	r6, r0, r0, lsl #21
20000a34:	fffffd88 			; <UNDEFINED> instruction: 0xfffffd88
20000a38:	fffffd74 			; <UNDEFINED> instruction: 0xfffffd74
20000a3c:	fffffd60 			; <UNDEFINED> instruction: 0xfffffd60
20000a40:	fffffd4c 			; <UNDEFINED> instruction: 0xfffffd4c
20000a44:	fffffd38 			; <UNDEFINED> instruction: 0xfffffd38
20000a48:	fffffd24 			; <UNDEFINED> instruction: 0xfffffd24
20000a4c:	fffffd10 			; <UNDEFINED> instruction: 0xfffffd10
				else if(counter < delay_until_text + 5*long_text + 4*short_text + 2)
20000a50:	4bd9      	ldr	r3, [pc, #868]	; (20000db8 <main+0xbbc>)
20000a52:	681a      	ldr	r2, [r3, #0]
20000a54:	0013      	movs	r3, r2
20000a56:	009b      	lsls	r3, r3, #2
20000a58:	189a      	adds	r2, r3, r2
20000a5a:	4bd8      	ldr	r3, [pc, #864]	; (20000dbc <main+0xbc0>)
20000a5c:	681b      	ldr	r3, [r3, #0]
20000a5e:	18d2      	adds	r2, r2, r3
20000a60:	4bd7      	ldr	r3, [pc, #860]	; (20000dc0 <main+0xbc4>)
20000a62:	681b      	ldr	r3, [r3, #0]
20000a64:	009b      	lsls	r3, r3, #2
20000a66:	18d3      	adds	r3, r2, r3
20000a68:	1c9a      	adds	r2, r3, #2
20000a6a:	4bd6      	ldr	r3, [pc, #856]	; (20000dc4 <main+0xbc8>)
20000a6c:	681b      	ldr	r3, [r3, #0]
20000a6e:	429a      	cmp	r2, r3
20000a70:	dd0c      	ble.n	20000a8c <main+0x890>
					text9.display(&text9, 20);
20000a72:	4bd5      	ldr	r3, [pc, #852]	; (20000dc8 <main+0xbcc>)
20000a74:	22d0      	movs	r2, #208	; 0xd0
20000a76:	0092      	lsls	r2, r2, #2
20000a78:	4694      	mov	ip, r2
20000a7a:	44bc      	add	ip, r7
20000a7c:	4463      	add	r3, ip
20000a7e:	691b      	ldr	r3, [r3, #16]
20000a80:	223c      	movs	r2, #60	; 0x3c
20000a82:	18ba      	adds	r2, r7, r2
20000a84:	2114      	movs	r1, #20
20000a86:	0010      	movs	r0, r2
20000a88:	4798      	blx	r3
20000a8a:	e070      	b.n	20000b6e <main+0x972>
				else if(counter < delay_until_text + 6*long_text + 4*short_text - 2 + 2)
20000a8c:	4bca      	ldr	r3, [pc, #808]	; (20000db8 <main+0xbbc>)
20000a8e:	681a      	ldr	r2, [r3, #0]
20000a90:	0013      	movs	r3, r2
20000a92:	005b      	lsls	r3, r3, #1
20000a94:	189b      	adds	r3, r3, r2
20000a96:	005b      	lsls	r3, r3, #1
20000a98:	001a      	movs	r2, r3
20000a9a:	4bc8      	ldr	r3, [pc, #800]	; (20000dbc <main+0xbc0>)
20000a9c:	681b      	ldr	r3, [r3, #0]
20000a9e:	18d2      	adds	r2, r2, r3
20000aa0:	4bc7      	ldr	r3, [pc, #796]	; (20000dc0 <main+0xbc4>)
20000aa2:	681b      	ldr	r3, [r3, #0]
20000aa4:	009b      	lsls	r3, r3, #2
20000aa6:	18d2      	adds	r2, r2, r3
20000aa8:	4bc6      	ldr	r3, [pc, #792]	; (20000dc4 <main+0xbc8>)
20000aaa:	681b      	ldr	r3, [r3, #0]
20000aac:	429a      	cmp	r2, r3
20000aae:	dd0c      	ble.n	20000aca <main+0x8ce>
					text10.display(&text10, 15);
20000ab0:	4bc6      	ldr	r3, [pc, #792]	; (20000dcc <main+0xbd0>)
20000ab2:	22d0      	movs	r2, #208	; 0xd0
20000ab4:	0092      	lsls	r2, r2, #2
20000ab6:	4694      	mov	ip, r2
20000ab8:	44bc      	add	ip, r7
20000aba:	4463      	add	r3, ip
20000abc:	691b      	ldr	r3, [r3, #16]
20000abe:	2228      	movs	r2, #40	; 0x28
20000ac0:	18ba      	adds	r2, r7, r2
20000ac2:	210f      	movs	r1, #15
20000ac4:	0010      	movs	r0, r2
20000ac6:	4798      	blx	r3
20000ac8:	e051      	b.n	20000b6e <main+0x972>
				else if(counter < delay_until_text + 6*long_text + 5*short_text + 3 + 2)
20000aca:	4bbb      	ldr	r3, [pc, #748]	; (20000db8 <main+0xbbc>)
20000acc:	681a      	ldr	r2, [r3, #0]
20000ace:	0013      	movs	r3, r2
20000ad0:	005b      	lsls	r3, r3, #1
20000ad2:	189b      	adds	r3, r3, r2
20000ad4:	005b      	lsls	r3, r3, #1
20000ad6:	001a      	movs	r2, r3
20000ad8:	4bb8      	ldr	r3, [pc, #736]	; (20000dbc <main+0xbc0>)
20000ada:	681b      	ldr	r3, [r3, #0]
20000adc:	18d1      	adds	r1, r2, r3
20000ade:	4bb8      	ldr	r3, [pc, #736]	; (20000dc0 <main+0xbc4>)
20000ae0:	681a      	ldr	r2, [r3, #0]
20000ae2:	0013      	movs	r3, r2
20000ae4:	009b      	lsls	r3, r3, #2
20000ae6:	189b      	adds	r3, r3, r2
20000ae8:	18cb      	adds	r3, r1, r3
20000aea:	1d5a      	adds	r2, r3, #5
20000aec:	4bb5      	ldr	r3, [pc, #724]	; (20000dc4 <main+0xbc8>)
20000aee:	681b      	ldr	r3, [r3, #0]
20000af0:	429a      	cmp	r2, r3
20000af2:	dd0b      	ble.n	20000b0c <main+0x910>
					text12.display(&text12, 15);
20000af4:	4bb6      	ldr	r3, [pc, #728]	; (20000dd0 <main+0xbd4>)
20000af6:	22d0      	movs	r2, #208	; 0xd0
20000af8:	0092      	lsls	r2, r2, #2
20000afa:	4694      	mov	ip, r2
20000afc:	44bc      	add	ip, r7
20000afe:	4463      	add	r3, ip
20000b00:	691b      	ldr	r3, [r3, #16]
20000b02:	003a      	movs	r2, r7
20000b04:	210f      	movs	r1, #15
20000b06:	0010      	movs	r0, r2
20000b08:	4798      	blx	r3
20000b0a:	e030      	b.n	20000b6e <main+0x972>
				else if(counter < delay_until_text + 7*long_text + 5*short_text + 6 + 2) {
20000b0c:	4baa      	ldr	r3, [pc, #680]	; (20000db8 <main+0xbbc>)
20000b0e:	681a      	ldr	r2, [r3, #0]
20000b10:	0013      	movs	r3, r2
20000b12:	00db      	lsls	r3, r3, #3
20000b14:	1a9a      	subs	r2, r3, r2
20000b16:	4ba9      	ldr	r3, [pc, #676]	; (20000dbc <main+0xbc0>)
20000b18:	681b      	ldr	r3, [r3, #0]
20000b1a:	18d1      	adds	r1, r2, r3
20000b1c:	4ba8      	ldr	r3, [pc, #672]	; (20000dc0 <main+0xbc4>)
20000b1e:	681a      	ldr	r2, [r3, #0]
20000b20:	0013      	movs	r3, r2
20000b22:	009b      	lsls	r3, r3, #2
20000b24:	189b      	adds	r3, r3, r2
20000b26:	18cb      	adds	r3, r1, r3
20000b28:	3308      	adds	r3, #8
20000b2a:	001a      	movs	r2, r3
20000b2c:	4ba5      	ldr	r3, [pc, #660]	; (20000dc4 <main+0xbc8>)
20000b2e:	681b      	ldr	r3, [r3, #0]
20000b30:	429a      	cmp	r2, r3
20000b32:	dd0c      	ble.n	20000b4e <main+0x952>
					text11.display(&text11, 20);
20000b34:	4ba7      	ldr	r3, [pc, #668]	; (20000dd4 <main+0xbd8>)
20000b36:	22d0      	movs	r2, #208	; 0xd0
20000b38:	0092      	lsls	r2, r2, #2
20000b3a:	4694      	mov	ip, r2
20000b3c:	44bc      	add	ip, r7
20000b3e:	4463      	add	r3, ip
20000b40:	691b      	ldr	r3, [r3, #16]
20000b42:	2214      	movs	r2, #20
20000b44:	18ba      	adds	r2, r7, r2
20000b46:	2114      	movs	r1, #20
20000b48:	0010      	movs	r0, r2
20000b4a:	4798      	blx	r3
20000b4c:	e00f      	b.n	20000b6e <main+0x972>
				} else {
					if (read_DIL() == 0) {
20000b4e:	f001 fd79 	bl	20002644 <read_DIL>
20000b52:	1e03      	subs	r3, r0, #0
20000b54:	d10b      	bne.n	20000b6e <main+0x972>
						current_screen = GAME_SCREEN;
20000b56:	4ba0      	ldr	r3, [pc, #640]	; (20000dd8 <main+0xbdc>)
20000b58:	2202      	movs	r2, #2
20000b5a:	601a      	str	r2, [r3, #0]
						random_seed = counter;
20000b5c:	4b99      	ldr	r3, [pc, #612]	; (20000dc4 <main+0xbc8>)
20000b5e:	681a      	ldr	r2, [r3, #0]
20000b60:	4b9e      	ldr	r3, [pc, #632]	; (20000ddc <main+0xbe0>)
20000b62:	601a      	str	r2, [r3, #0]
						counter = 0;
20000b64:	4b97      	ldr	r3, [pc, #604]	; (20000dc4 <main+0xbc8>)
20000b66:	2200      	movs	r2, #0
20000b68:	601a      	str	r2, [r3, #0]
						clear_ascii();
20000b6a:	f001 ff38 	bl	200029de <clear_ascii>
					}
				}
				
				if(read_DIL() == SKIP_VALUE) {
20000b6e:	f001 fd69 	bl	20002644 <read_DIL>
20000b72:	0003      	movs	r3, r0
20000b74:	2b8f      	cmp	r3, #143	; 0x8f
20000b76:	d10b      	bne.n	20000b90 <main+0x994>
					current_screen = GAME_SCREEN;
20000b78:	4b97      	ldr	r3, [pc, #604]	; (20000dd8 <main+0xbdc>)
20000b7a:	2202      	movs	r2, #2
20000b7c:	601a      	str	r2, [r3, #0]
					random_seed = counter;
20000b7e:	4b91      	ldr	r3, [pc, #580]	; (20000dc4 <main+0xbc8>)
20000b80:	681a      	ldr	r2, [r3, #0]
20000b82:	4b96      	ldr	r3, [pc, #600]	; (20000ddc <main+0xbe0>)
20000b84:	601a      	str	r2, [r3, #0]
					counter = 0;
20000b86:	4b8f      	ldr	r3, [pc, #572]	; (20000dc4 <main+0xbc8>)
20000b88:	2200      	movs	r2, #0
20000b8a:	601a      	str	r2, [r3, #0]
					clear_ascii();
20000b8c:	f001 ff27 	bl	200029de <clear_ascii>
				}
				
				
				fire2.update(&fire2);
20000b90:	4b93      	ldr	r3, [pc, #588]	; (20000de0 <main+0xbe4>)
20000b92:	22d0      	movs	r2, #208	; 0xd0
20000b94:	0092      	lsls	r2, r2, #2
20000b96:	4694      	mov	ip, r2
20000b98:	44bc      	add	ip, r7
20000b9a:	4463      	add	r3, ip
20000b9c:	68db      	ldr	r3, [r3, #12]
20000b9e:	22ca      	movs	r2, #202	; 0xca
20000ba0:	0052      	lsls	r2, r2, #1
20000ba2:	18ba      	adds	r2, r7, r2
20000ba4:	0010      	movs	r0, r2
20000ba6:	4798      	blx	r3
				fire3.update(&fire3);
20000ba8:	4b8e      	ldr	r3, [pc, #568]	; (20000de4 <main+0xbe8>)
20000baa:	22d0      	movs	r2, #208	; 0xd0
20000bac:	0092      	lsls	r2, r2, #2
20000bae:	4694      	mov	ip, r2
20000bb0:	44bc      	add	ip, r7
20000bb2:	4463      	add	r3, ip
20000bb4:	68db      	ldr	r3, [r3, #12]
20000bb6:	22b8      	movs	r2, #184	; 0xb8
20000bb8:	0052      	lsls	r2, r2, #1
20000bba:	18ba      	adds	r2, r7, r2
20000bbc:	0010      	movs	r0, r2
20000bbe:	4798      	blx	r3
				fire1.update(&fire1);
20000bc0:	4b89      	ldr	r3, [pc, #548]	; (20000de8 <main+0xbec>)
20000bc2:	22d0      	movs	r2, #208	; 0xd0
20000bc4:	0092      	lsls	r2, r2, #2
20000bc6:	4694      	mov	ip, r2
20000bc8:	44bc      	add	ip, r7
20000bca:	4463      	add	r3, ip
20000bcc:	68db      	ldr	r3, [r3, #12]
20000bce:	2294      	movs	r2, #148	; 0x94
20000bd0:	0052      	lsls	r2, r2, #1
20000bd2:	18ba      	adds	r2, r7, r2
20000bd4:	0010      	movs	r0, r2
20000bd6:	4798      	blx	r3
				fire4.update(&fire4);
20000bd8:	4b84      	ldr	r3, [pc, #528]	; (20000dec <main+0xbf0>)
20000bda:	22d0      	movs	r2, #208	; 0xd0
20000bdc:	0092      	lsls	r2, r2, #2
20000bde:	4694      	mov	ip, r2
20000be0:	44bc      	add	ip, r7
20000be2:	4463      	add	r3, ip
20000be4:	68db      	ldr	r3, [r3, #12]
20000be6:	22a6      	movs	r2, #166	; 0xa6
20000be8:	0052      	lsls	r2, r2, #1
20000bea:	18ba      	adds	r2, r7, r2
20000bec:	0010      	movs	r0, r2
20000bee:	4798      	blx	r3
				bird.update(&bird);
20000bf0:	4b7f      	ldr	r3, [pc, #508]	; (20000df0 <main+0xbf4>)
20000bf2:	22d0      	movs	r2, #208	; 0xd0
20000bf4:	0092      	lsls	r2, r2, #2
20000bf6:	4694      	mov	ip, r2
20000bf8:	44bc      	add	ip, r7
20000bfa:	4463      	add	r3, ip
20000bfc:	68db      	ldr	r3, [r3, #12]
20000bfe:	22ee      	movs	r2, #238	; 0xee
20000c00:	0052      	lsls	r2, r2, #1
20000c02:	18ba      	adds	r2, r7, r2
20000c04:	0010      	movs	r0, r2
20000c06:	4798      	blx	r3
				bird.xPos -= 2;
20000c08:	4b79      	ldr	r3, [pc, #484]	; (20000df0 <main+0xbf4>)
20000c0a:	22d0      	movs	r2, #208	; 0xd0
20000c0c:	0092      	lsls	r2, r2, #2
20000c0e:	4694      	mov	ip, r2
20000c10:	44bc      	add	ip, r7
20000c12:	4463      	add	r3, ip
20000c14:	685b      	ldr	r3, [r3, #4]
20000c16:	1e9a      	subs	r2, r3, #2
20000c18:	4b75      	ldr	r3, [pc, #468]	; (20000df0 <main+0xbf4>)
20000c1a:	21d0      	movs	r1, #208	; 0xd0
20000c1c:	0089      	lsls	r1, r1, #2
20000c1e:	468c      	mov	ip, r1
20000c20:	44bc      	add	ip, r7
20000c22:	4463      	add	r3, ip
20000c24:	605a      	str	r2, [r3, #4]
				if (counter % 2 == 0) {
20000c26:	4b67      	ldr	r3, [pc, #412]	; (20000dc4 <main+0xbc8>)
20000c28:	681b      	ldr	r3, [r3, #0]
20000c2a:	001a      	movs	r2, r3
20000c2c:	2301      	movs	r3, #1
20000c2e:	4013      	ands	r3, r2
20000c30:	d000      	beq.n	20000c34 <main+0xa38>
20000c32:	e0bf      	b.n	20000db4 <main+0xbb8>
					bird.yPos--;
20000c34:	4b6e      	ldr	r3, [pc, #440]	; (20000df0 <main+0xbf4>)
20000c36:	22d0      	movs	r2, #208	; 0xd0
20000c38:	0092      	lsls	r2, r2, #2
20000c3a:	4694      	mov	ip, r2
20000c3c:	44bc      	add	ip, r7
20000c3e:	4463      	add	r3, ip
20000c40:	689b      	ldr	r3, [r3, #8]
20000c42:	1e5a      	subs	r2, r3, #1
20000c44:	4b6a      	ldr	r3, [pc, #424]	; (20000df0 <main+0xbf4>)
20000c46:	21d0      	movs	r1, #208	; 0xd0
20000c48:	0089      	lsls	r1, r1, #2
20000c4a:	468c      	mov	ip, r1
20000c4c:	44bc      	add	ip, r7
20000c4e:	4463      	add	r3, ip
20000c50:	609a      	str	r2, [r3, #8]
				}
				
				break;
20000c52:	e0af      	b.n	20000db4 <main+0xbb8>
				
			case GAME_SCREEN: //inside
				
				counter++;
20000c54:	4b5b      	ldr	r3, [pc, #364]	; (20000dc4 <main+0xbc8>)
20000c56:	681b      	ldr	r3, [r3, #0]
20000c58:	1c5a      	adds	r2, r3, #1
20000c5a:	4b5a      	ldr	r3, [pc, #360]	; (20000dc4 <main+0xbc8>)
20000c5c:	601a      	str	r2, [r3, #0]
				if(read_DIL_single( LIGHT_TRIGGER )) {
20000c5e:	2006      	movs	r0, #6
20000c60:	f001 fd00 	bl	20002664 <read_DIL_single>
20000c64:	1e03      	subs	r3, r0, #0
20000c66:	d006      	beq.n	20000c76 <main+0xa7a>
					draw_game_object( &indoors2 );
20000c68:	2380      	movs	r3, #128	; 0x80
20000c6a:	009b      	lsls	r3, r3, #2
20000c6c:	18fb      	adds	r3, r7, r3
20000c6e:	0018      	movs	r0, r3
20000c70:	f001 fc3e 	bl	200024f0 <draw_game_object>
20000c74:	e00a      	b.n	20000c8c <main+0xa90>
				} else {
					draw_game_object( &indoors );
20000c76:	2389      	movs	r3, #137	; 0x89
20000c78:	009b      	lsls	r3, r3, #2
20000c7a:	18fb      	adds	r3, r7, r3
20000c7c:	0018      	movs	r0, r3
20000c7e:	f001 fc37 	bl	200024f0 <draw_game_object>
					draw_game_object( &fire1_indoors );
20000c82:	1d7b      	adds	r3, r7, #5
20000c84:	33ff      	adds	r3, #255	; 0xff
20000c86:	0018      	movs	r0, r3
20000c88:	f001 fc32 	bl	200024f0 <draw_game_object>
				}
				
				draw_game_object( &player );
20000c8c:	23dc      	movs	r3, #220	; 0xdc
20000c8e:	005b      	lsls	r3, r3, #1
20000c90:	18fb      	adds	r3, r7, r3
20000c92:	0018      	movs	r0, r3
20000c94:	f001 fc2c 	bl	200024f0 <draw_game_object>
				show_frame(1);
20000c98:	2001      	movs	r0, #1
20000c9a:	f001 fc6a 	bl	20002572 <show_frame>
				
				static int last_climb_value = 100;
				if((read_DIL_single(CLIMB_TRIGGER) != last_climb_value) && player.xPos > 90 && player.xPos < 108 && !has_climbed) {
20000c9e:	2004      	movs	r0, #4
20000ca0:	f001 fce0 	bl	20002664 <read_DIL_single>
20000ca4:	0002      	movs	r2, r0
20000ca6:	4b53      	ldr	r3, [pc, #332]	; (20000df4 <main+0xbf8>)
20000ca8:	681b      	ldr	r3, [r3, #0]
20000caa:	429a      	cmp	r2, r3
20000cac:	d024      	beq.n	20000cf8 <main+0xafc>
20000cae:	4b52      	ldr	r3, [pc, #328]	; (20000df8 <main+0xbfc>)
20000cb0:	22d0      	movs	r2, #208	; 0xd0
20000cb2:	0092      	lsls	r2, r2, #2
20000cb4:	4694      	mov	ip, r2
20000cb6:	44bc      	add	ip, r7
20000cb8:	4463      	add	r3, ip
20000cba:	685b      	ldr	r3, [r3, #4]
20000cbc:	2b5a      	cmp	r3, #90	; 0x5a
20000cbe:	dd1b      	ble.n	20000cf8 <main+0xafc>
20000cc0:	4b4d      	ldr	r3, [pc, #308]	; (20000df8 <main+0xbfc>)
20000cc2:	22d0      	movs	r2, #208	; 0xd0
20000cc4:	0092      	lsls	r2, r2, #2
20000cc6:	4694      	mov	ip, r2
20000cc8:	44bc      	add	ip, r7
20000cca:	4463      	add	r3, ip
20000ccc:	685b      	ldr	r3, [r3, #4]
20000cce:	2b6b      	cmp	r3, #107	; 0x6b
20000cd0:	dc12      	bgt.n	20000cf8 <main+0xafc>
20000cd2:	23ce      	movs	r3, #206	; 0xce
20000cd4:	009b      	lsls	r3, r3, #2
20000cd6:	18fb      	adds	r3, r7, r3
20000cd8:	681b      	ldr	r3, [r3, #0]
20000cda:	2b00      	cmp	r3, #0
20000cdc:	d10c      	bne.n	20000cf8 <main+0xafc>
					is_climbing = 1;
20000cde:	2301      	movs	r3, #1
20000ce0:	22cf      	movs	r2, #207	; 0xcf
20000ce2:	0092      	lsls	r2, r2, #2
20000ce4:	18ba      	adds	r2, r7, r2
20000ce6:	6013      	str	r3, [r2, #0]
					player.xPos = 98;
20000ce8:	4b43      	ldr	r3, [pc, #268]	; (20000df8 <main+0xbfc>)
20000cea:	22d0      	movs	r2, #208	; 0xd0
20000cec:	0092      	lsls	r2, r2, #2
20000cee:	4694      	mov	ip, r2
20000cf0:	44bc      	add	ip, r7
20000cf2:	4463      	add	r3, ip
20000cf4:	2262      	movs	r2, #98	; 0x62
20000cf6:	605a      	str	r2, [r3, #4]
				}
				last_climb_value = read_DIL_single(CLIMB_TRIGGER);
20000cf8:	2004      	movs	r0, #4
20000cfa:	f001 fcb3 	bl	20002664 <read_DIL_single>
20000cfe:	0002      	movs	r2, r0
20000d00:	4b3c      	ldr	r3, [pc, #240]	; (20000df4 <main+0xbf8>)
20000d02:	601a      	str	r2, [r3, #0]
				
				if(is_climbing) {
20000d04:	23cf      	movs	r3, #207	; 0xcf
20000d06:	009b      	lsls	r3, r3, #2
20000d08:	18fb      	adds	r3, r7, r3
20000d0a:	681b      	ldr	r3, [r3, #0]
20000d0c:	2b00      	cmp	r3, #0
20000d0e:	d039      	beq.n	20000d84 <main+0xb88>
					gameObjectUpdate( &player );
20000d10:	23dc      	movs	r3, #220	; 0xdc
20000d12:	005b      	lsls	r3, r3, #1
20000d14:	18fb      	adds	r3, r7, r3
20000d16:	0018      	movs	r0, r3
20000d18:	f000 f87a 	bl	20000e10 <gameObjectUpdate>
					if(player.yPos > 4) {
20000d1c:	4b36      	ldr	r3, [pc, #216]	; (20000df8 <main+0xbfc>)
20000d1e:	22d0      	movs	r2, #208	; 0xd0
20000d20:	0092      	lsls	r2, r2, #2
20000d22:	4694      	mov	ip, r2
20000d24:	44bc      	add	ip, r7
20000d26:	4463      	add	r3, ip
20000d28:	689b      	ldr	r3, [r3, #8]
20000d2a:	2b04      	cmp	r3, #4
20000d2c:	dd0f      	ble.n	20000d4e <main+0xb52>
						player.yPos--;
20000d2e:	4b32      	ldr	r3, [pc, #200]	; (20000df8 <main+0xbfc>)
20000d30:	22d0      	movs	r2, #208	; 0xd0
20000d32:	0092      	lsls	r2, r2, #2
20000d34:	4694      	mov	ip, r2
20000d36:	44bc      	add	ip, r7
20000d38:	4463      	add	r3, ip
20000d3a:	689b      	ldr	r3, [r3, #8]
20000d3c:	1e5a      	subs	r2, r3, #1
20000d3e:	4b2e      	ldr	r3, [pc, #184]	; (20000df8 <main+0xbfc>)
20000d40:	21d0      	movs	r1, #208	; 0xd0
20000d42:	0089      	lsls	r1, r1, #2
20000d44:	468c      	mov	ip, r1
20000d46:	44bc      	add	ip, r7
20000d48:	4463      	add	r3, ip
20000d4a:	609a      	str	r2, [r3, #8]
20000d4c:	e026      	b.n	20000d9c <main+0xba0>
					} else {	//Stay at top level and disable climbing forever!
						player.yPos = 4;
20000d4e:	4b2a      	ldr	r3, [pc, #168]	; (20000df8 <main+0xbfc>)
20000d50:	22d0      	movs	r2, #208	; 0xd0
20000d52:	0092      	lsls	r2, r2, #2
20000d54:	4694      	mov	ip, r2
20000d56:	44bc      	add	ip, r7
20000d58:	4463      	add	r3, ip
20000d5a:	2204      	movs	r2, #4
20000d5c:	609a      	str	r2, [r3, #8]
						player.xPos = 96;
20000d5e:	4b26      	ldr	r3, [pc, #152]	; (20000df8 <main+0xbfc>)
20000d60:	22d0      	movs	r2, #208	; 0xd0
20000d62:	0092      	lsls	r2, r2, #2
20000d64:	4694      	mov	ip, r2
20000d66:	44bc      	add	ip, r7
20000d68:	4463      	add	r3, ip
20000d6a:	2260      	movs	r2, #96	; 0x60
20000d6c:	605a      	str	r2, [r3, #4]
						is_climbing = 0;
20000d6e:	2300      	movs	r3, #0
20000d70:	22cf      	movs	r2, #207	; 0xcf
20000d72:	0092      	lsls	r2, r2, #2
20000d74:	18ba      	adds	r2, r7, r2
20000d76:	6013      	str	r3, [r2, #0]
						has_climbed = 1;
20000d78:	2301      	movs	r3, #1
20000d7a:	22ce      	movs	r2, #206	; 0xce
20000d7c:	0092      	lsls	r2, r2, #2
20000d7e:	18ba      	adds	r2, r7, r2
20000d80:	6013      	str	r3, [r2, #0]
20000d82:	e00b      	b.n	20000d9c <main+0xba0>
					}
				} else {
					player.update(&player);
20000d84:	4b1c      	ldr	r3, [pc, #112]	; (20000df8 <main+0xbfc>)
20000d86:	22d0      	movs	r2, #208	; 0xd0
20000d88:	0092      	lsls	r2, r2, #2
20000d8a:	4694      	mov	ip, r2
20000d8c:	44bc      	add	ip, r7
20000d8e:	4463      	add	r3, ip
20000d90:	68db      	ldr	r3, [r3, #12]
20000d92:	22dc      	movs	r2, #220	; 0xdc
20000d94:	0052      	lsls	r2, r2, #1
20000d96:	18ba      	adds	r2, r7, r2
20000d98:	0010      	movs	r0, r2
20000d9a:	4798      	blx	r3
				}
				
				fire1_indoors.update(&fire1_indoors);
20000d9c:	4b17      	ldr	r3, [pc, #92]	; (20000dfc <main+0xc00>)
20000d9e:	22d0      	movs	r2, #208	; 0xd0
20000da0:	0092      	lsls	r2, r2, #2
20000da2:	4694      	mov	ip, r2
20000da4:	44bc      	add	ip, r7
20000da6:	4463      	add	r3, ip
20000da8:	68db      	ldr	r3, [r3, #12]
20000daa:	1d7a      	adds	r2, r7, #5
20000dac:	32ff      	adds	r2, #255	; 0xff
20000dae:	0010      	movs	r0, r2
20000db0:	4798      	blx	r3
				
				break;
20000db2:	e000      	b.n	20000db6 <main+0xbba>
				break;
20000db4:	46c0      	nop			; (mov r8, r8)
		switch(current_screen) {
20000db6:	e4ac      	b.n	20000712 <main+0x516>
20000db8:	20006a7c 	andcs	r6, r0, ip, ror sl
20000dbc:	20006a78 	andcs	r6, r0, r8, ror sl
20000dc0:	20006a80 	andcs	r6, r0, r0, lsl #21
20000dc4:	20002ff4 	strdcs	r2, [r0], -r4
20000dc8:	fffffcfc 			; <UNDEFINED> instruction: 0xfffffcfc
20000dcc:	fffffce8 			; <UNDEFINED> instruction: 0xfffffce8
20000dd0:	fffffcc0 			; <UNDEFINED> instruction: 0xfffffcc0
20000dd4:	fffffcd4 			; <UNDEFINED> instruction: 0xfffffcd4
20000dd8:	20006a74 	andcs	r6, r0, r4, ror sl
20000ddc:	200030c0 	andcs	r3, r0, r0, asr #1
20000de0:	fffffe54 			; <UNDEFINED> instruction: 0xfffffe54
20000de4:	fffffe30 			; <UNDEFINED> instruction: 0xfffffe30
20000de8:	fffffde8 			; <UNDEFINED> instruction: 0xfffffde8
20000dec:	fffffe0c 			; <UNDEFINED> instruction: 0xfffffe0c
20000df0:	fffffe9c 			; <UNDEFINED> instruction: 0xfffffe9c
20000df4:	20006a84 	andcs	r6, r0, r4, lsl #21
20000df8:	fffffe78 			; <UNDEFINED> instruction: 0xfffffe78
20000dfc:	fffffdc4 			; <UNDEFINED> instruction: 0xfffffdc4

20000e00 <render>:
GameObject* gameObjects[100];
int nGameObjects = 0;


void render(GameObject* this)
{
20000e00:	b580      	push	{r7, lr}
20000e02:	b082      	sub	sp, #8
20000e04:	af00      	add	r7, sp, #0
20000e06:	6078      	str	r0, [r7, #4]
    
}
20000e08:	46c0      	nop			; (mov r8, r8)
20000e0a:	46bd      	mov	sp, r7
20000e0c:	b002      	add	sp, #8
20000e0e:	bd80      	pop	{r7, pc}

20000e10 <gameObjectUpdate>:

void gameObjectUpdate(GameObject *this) {
20000e10:	b580      	push	{r7, lr}
20000e12:	b082      	sub	sp, #8
20000e14:	af00      	add	r7, sp, #0
20000e16:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
20000e18:	687b      	ldr	r3, [r7, #4]
20000e1a:	6a1b      	ldr	r3, [r3, #32]
20000e1c:	1c5a      	adds	r2, r3, #1
20000e1e:	687b      	ldr	r3, [r7, #4]
20000e20:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
20000e22:	687b      	ldr	r3, [r7, #4]
20000e24:	6a1a      	ldr	r2, [r3, #32]
20000e26:	687b      	ldr	r3, [r7, #4]
20000e28:	69db      	ldr	r3, [r3, #28]
20000e2a:	429a      	cmp	r2, r3
20000e2c:	d10f      	bne.n	20000e4e <gameObjectUpdate+0x3e>
		this->animation_counter = 0;
20000e2e:	687b      	ldr	r3, [r7, #4]
20000e30:	2200      	movs	r2, #0
20000e32:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20000e34:	687b      	ldr	r3, [r7, #4]
20000e36:	695b      	ldr	r3, [r3, #20]
20000e38:	1c5a      	adds	r2, r3, #1
20000e3a:	687b      	ldr	r3, [r7, #4]
20000e3c:	699b      	ldr	r3, [r3, #24]
20000e3e:	0019      	movs	r1, r3
20000e40:	0010      	movs	r0, r2
20000e42:	f002 f8d1 	bl	20002fe8 <__aeabi_idivmod>
20000e46:	000b      	movs	r3, r1
20000e48:	001a      	movs	r2, r3
20000e4a:	687b      	ldr	r3, [r7, #4]
20000e4c:	615a      	str	r2, [r3, #20]
	}
}
20000e4e:	46c0      	nop			; (mov r8, r8)
20000e50:	46bd      	mov	sp, r7
20000e52:	b002      	add	sp, #8
20000e54:	bd80      	pop	{r7, pc}
	...

20000e58 <initSprites>:
Image fire2Image;
Image fire3Image;
Image fire4Image;
Image fire5Image;
Image fireImages[5];
static void initSprites( void ) {	
20000e58:	b580      	push	{r7, lr}
20000e5a:	b08c      	sub	sp, #48	; 0x30
20000e5c:	af00      	add	r7, sp, #0
	sprite *pointer0 = &tempFireBlack;
20000e5e:	4b3e      	ldr	r3, [pc, #248]	; (20000f58 <initSprites+0x100>)
20000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer0, fire_black_2_bits, fire1_gray_width, fire1_gray_height);
20000e62:	493e      	ldr	r1, [pc, #248]	; (20000f5c <initSprites+0x104>)
20000e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20000e66:	230c      	movs	r3, #12
20000e68:	2208      	movs	r2, #8
20000e6a:	f001 fbcb 	bl	20002604 <load_sprite>
	fireBlack = pointer0;
20000e6e:	4b3c      	ldr	r3, [pc, #240]	; (20000f60 <initSprites+0x108>)
20000e70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20000e72:	601a      	str	r2, [r3, #0]
	
	sprite *pointer1 = &tempFire1Gray;
20000e74:	4b3b      	ldr	r3, [pc, #236]	; (20000f64 <initSprites+0x10c>)
20000e76:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer1, fire1_gray_bits, fire1_gray_width, fire1_gray_height);
20000e78:	493b      	ldr	r1, [pc, #236]	; (20000f68 <initSprites+0x110>)
20000e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20000e7c:	230c      	movs	r3, #12
20000e7e:	2208      	movs	r2, #8
20000e80:	f001 fbc0 	bl	20002604 <load_sprite>
	fire1Gray = pointer1;
20000e84:	4b39      	ldr	r3, [pc, #228]	; (20000f6c <initSprites+0x114>)
20000e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
20000e88:	601a      	str	r2, [r3, #0]

	sprite *pointer2 = &tempFire1Light;
20000e8a:	4b39      	ldr	r3, [pc, #228]	; (20000f70 <initSprites+0x118>)
20000e8c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer2, fire1_light_bits, fire1_gray_width, fire1_gray_height);
20000e8e:	4939      	ldr	r1, [pc, #228]	; (20000f74 <initSprites+0x11c>)
20000e90:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000e92:	230c      	movs	r3, #12
20000e94:	2208      	movs	r2, #8
20000e96:	f001 fbb5 	bl	20002604 <load_sprite>
	fire1Light = pointer2;
20000e9a:	4b37      	ldr	r3, [pc, #220]	; (20000f78 <initSprites+0x120>)
20000e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000e9e:	601a      	str	r2, [r3, #0]

	sprite *pointer3 = &tempFire2Gray;
20000ea0:	4b36      	ldr	r3, [pc, #216]	; (20000f7c <initSprites+0x124>)
20000ea2:	623b      	str	r3, [r7, #32]
	load_sprite(pointer3, fire2_gray_bits, fire1_gray_width, fire1_gray_height);
20000ea4:	4936      	ldr	r1, [pc, #216]	; (20000f80 <initSprites+0x128>)
20000ea6:	6a38      	ldr	r0, [r7, #32]
20000ea8:	230c      	movs	r3, #12
20000eaa:	2208      	movs	r2, #8
20000eac:	f001 fbaa 	bl	20002604 <load_sprite>
	fire2Gray = pointer3;
20000eb0:	4b34      	ldr	r3, [pc, #208]	; (20000f84 <initSprites+0x12c>)
20000eb2:	6a3a      	ldr	r2, [r7, #32]
20000eb4:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempFire2Light;
20000eb6:	4b34      	ldr	r3, [pc, #208]	; (20000f88 <initSprites+0x130>)
20000eb8:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer4, fire2_light_bits, fire1_gray_width, fire1_gray_height);
20000eba:	4934      	ldr	r1, [pc, #208]	; (20000f8c <initSprites+0x134>)
20000ebc:	69f8      	ldr	r0, [r7, #28]
20000ebe:	230c      	movs	r3, #12
20000ec0:	2208      	movs	r2, #8
20000ec2:	f001 fb9f 	bl	20002604 <load_sprite>
	fire2Light = pointer4;
20000ec6:	4b32      	ldr	r3, [pc, #200]	; (20000f90 <initSprites+0x138>)
20000ec8:	69fa      	ldr	r2, [r7, #28]
20000eca:	601a      	str	r2, [r3, #0]

	sprite *pointer5 = &tempFire3Gray;
20000ecc:	4b31      	ldr	r3, [pc, #196]	; (20000f94 <initSprites+0x13c>)
20000ece:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer5, fire3_gray_bits, fire1_gray_width, fire1_gray_height);
20000ed0:	4931      	ldr	r1, [pc, #196]	; (20000f98 <initSprites+0x140>)
20000ed2:	69b8      	ldr	r0, [r7, #24]
20000ed4:	230c      	movs	r3, #12
20000ed6:	2208      	movs	r2, #8
20000ed8:	f001 fb94 	bl	20002604 <load_sprite>
	fire3Gray = pointer5;
20000edc:	4b2f      	ldr	r3, [pc, #188]	; (20000f9c <initSprites+0x144>)
20000ede:	69ba      	ldr	r2, [r7, #24]
20000ee0:	601a      	str	r2, [r3, #0]

	sprite *pointer6 = &tempFire3Light;
20000ee2:	4b2f      	ldr	r3, [pc, #188]	; (20000fa0 <initSprites+0x148>)
20000ee4:	617b      	str	r3, [r7, #20]
	load_sprite(pointer6, fire3_light_bits, fire1_gray_width, fire1_gray_height);
20000ee6:	492f      	ldr	r1, [pc, #188]	; (20000fa4 <initSprites+0x14c>)
20000ee8:	6978      	ldr	r0, [r7, #20]
20000eea:	230c      	movs	r3, #12
20000eec:	2208      	movs	r2, #8
20000eee:	f001 fb89 	bl	20002604 <load_sprite>
	fire3Light = pointer6;
20000ef2:	4b2d      	ldr	r3, [pc, #180]	; (20000fa8 <initSprites+0x150>)
20000ef4:	697a      	ldr	r2, [r7, #20]
20000ef6:	601a      	str	r2, [r3, #0]

	sprite *pointer7 = &tempFire4Gray;
20000ef8:	4b2c      	ldr	r3, [pc, #176]	; (20000fac <initSprites+0x154>)
20000efa:	613b      	str	r3, [r7, #16]
	load_sprite(pointer7, fire4_gray_bits, fire1_gray_width, fire1_gray_height);
20000efc:	492c      	ldr	r1, [pc, #176]	; (20000fb0 <initSprites+0x158>)
20000efe:	6938      	ldr	r0, [r7, #16]
20000f00:	230c      	movs	r3, #12
20000f02:	2208      	movs	r2, #8
20000f04:	f001 fb7e 	bl	20002604 <load_sprite>
	fire4Gray = pointer7;
20000f08:	4b2a      	ldr	r3, [pc, #168]	; (20000fb4 <initSprites+0x15c>)
20000f0a:	693a      	ldr	r2, [r7, #16]
20000f0c:	601a      	str	r2, [r3, #0]

	sprite *pointer8 = &tempFire4Light;
20000f0e:	4b2a      	ldr	r3, [pc, #168]	; (20000fb8 <initSprites+0x160>)
20000f10:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer8, fire4_light_bits, fire1_gray_width, fire1_gray_height);
20000f12:	492a      	ldr	r1, [pc, #168]	; (20000fbc <initSprites+0x164>)
20000f14:	68f8      	ldr	r0, [r7, #12]
20000f16:	230c      	movs	r3, #12
20000f18:	2208      	movs	r2, #8
20000f1a:	f001 fb73 	bl	20002604 <load_sprite>
	fire4Light = pointer8;
20000f1e:	4b28      	ldr	r3, [pc, #160]	; (20000fc0 <initSprites+0x168>)
20000f20:	68fa      	ldr	r2, [r7, #12]
20000f22:	601a      	str	r2, [r3, #0]

	sprite *pointer9 = &tempFire5Gray;
20000f24:	4b27      	ldr	r3, [pc, #156]	; (20000fc4 <initSprites+0x16c>)
20000f26:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer9, fire5_gray_bits, fire1_gray_width, fire1_gray_height);
20000f28:	4927      	ldr	r1, [pc, #156]	; (20000fc8 <initSprites+0x170>)
20000f2a:	68b8      	ldr	r0, [r7, #8]
20000f2c:	230c      	movs	r3, #12
20000f2e:	2208      	movs	r2, #8
20000f30:	f001 fb68 	bl	20002604 <load_sprite>
	fire5Gray = pointer9;
20000f34:	4b25      	ldr	r3, [pc, #148]	; (20000fcc <initSprites+0x174>)
20000f36:	68ba      	ldr	r2, [r7, #8]
20000f38:	601a      	str	r2, [r3, #0]

	sprite *pointer10 = &tempFire5Light;
20000f3a:	4b25      	ldr	r3, [pc, #148]	; (20000fd0 <initSprites+0x178>)
20000f3c:	607b      	str	r3, [r7, #4]
	load_sprite(pointer10, fire5_light_bits, fire1_gray_width, fire1_gray_height);
20000f3e:	4925      	ldr	r1, [pc, #148]	; (20000fd4 <initSprites+0x17c>)
20000f40:	6878      	ldr	r0, [r7, #4]
20000f42:	230c      	movs	r3, #12
20000f44:	2208      	movs	r2, #8
20000f46:	f001 fb5d 	bl	20002604 <load_sprite>
	fire5Light = pointer10;
20000f4a:	4b23      	ldr	r3, [pc, #140]	; (20000fd8 <initSprites+0x180>)
20000f4c:	687a      	ldr	r2, [r7, #4]
20000f4e:	601a      	str	r2, [r3, #0]
}
20000f50:	46c0      	nop			; (mov r8, r8)
20000f52:	46bd      	mov	sp, r7
20000f54:	b00c      	add	sp, #48	; 0x30
20000f56:	bd80      	pop	{r7, pc}
20000f58:	200032a4 	andcs	r3, r0, r4, lsr #5
20000f5c:	20006a88 	andcs	r6, r0, r8, lsl #21
20000f60:	2000339c 	mulcs	r0, ip, r3
20000f64:	20003390 	mulcs	r0, r0, r3
20000f68:	20006a94 	mulcs	r0, r4, sl
20000f6c:	200033b4 			; <UNDEFINED> instruction: 0x200033b4
20000f70:	2000336c 	andcs	r3, r0, ip, ror #6
20000f74:	20006aa0 	andcs	r6, r0, r0, lsr #21
20000f78:	2000326c 	andcs	r3, r0, ip, ror #4
20000f7c:	20003298 	mulcs	r0, r8, r2
20000f80:	20006aac 	andcs	r6, r0, ip, lsr #21
20000f84:	200033b0 			; <UNDEFINED> instruction: 0x200033b0
20000f88:	200033a0 	andcs	r3, r0, r0, lsr #7
20000f8c:	20006ab8 			; <UNDEFINED> instruction: 0x20006ab8
20000f90:	20003388 	andcs	r3, r0, r8, lsl #7
20000f94:	20003350 	andcs	r3, r0, r0, asr r3
20000f98:	20006ac4 	andcs	r6, r0, r4, asr #21
20000f9c:	2000327c 	andcs	r3, r0, ip, ror r2
20000fa0:	20003270 	andcs	r3, r0, r0, ror r2
20000fa4:	20006ad0 	ldrdcs	r6, [r0], -r0
20000fa8:	200033ac 	andcs	r3, r0, ip, lsr #7
20000fac:	20003280 	andcs	r3, r0, r0, lsl #5
20000fb0:	20006adc 	ldrdcs	r6, [r0], -ip
20000fb4:	20003368 	andcs	r3, r0, r8, ror #6
20000fb8:	200032bc 			; <UNDEFINED> instruction: 0x200032bc
20000fbc:	20006ae8 	andcs	r6, r0, r8, ror #21
20000fc0:	200032d4 	ldrdcs	r3, [r0], -r4
20000fc4:	20003344 	andcs	r3, r0, r4, asr #6
20000fc8:	20006af4 	strdcs	r6, [r0], -r4
20000fcc:	20003384 	andcs	r3, r0, r4, lsl #7
20000fd0:	20003378 	andcs	r3, r0, r8, ror r3
20000fd4:	20006b00 	andcs	r6, r0, r0, lsl #22
20000fd8:	2000338c 	andcs	r3, r0, ip, lsl #7

20000fdc <init_fire>:
	
void init_fire( GameObject *fireObj ) {
20000fdc:	b590      	push	{r4, r7, lr}
20000fde:	b083      	sub	sp, #12
20000fe0:	af00      	add	r7, sp, #0
20000fe2:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20000fe4:	4b30      	ldr	r3, [pc, #192]	; (200010a8 <init_fire+0xcc>)
20000fe6:	681b      	ldr	r3, [r3, #0]
20000fe8:	2b00      	cmp	r3, #0
20000fea:	d049      	beq.n	20001080 <init_fire+0xa4>
		initSprites();
20000fec:	f7ff ff34 	bl	20000e58 <initSprites>
		firstTime = 0;			
20000ff0:	4b2d      	ldr	r3, [pc, #180]	; (200010a8 <init_fire+0xcc>)
20000ff2:	2200      	movs	r2, #0
20000ff4:	601a      	str	r2, [r3, #0]

		fireImages[0] = fire1Image;
20000ff6:	4b2d      	ldr	r3, [pc, #180]	; (200010ac <init_fire+0xd0>)
20000ff8:	4a2d      	ldr	r2, [pc, #180]	; (200010b0 <init_fire+0xd4>)
20000ffa:	ca13      	ldmia	r2!, {r0, r1, r4}
20000ffc:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[1] = fire2Image;
20000ffe:	4b2b      	ldr	r3, [pc, #172]	; (200010ac <init_fire+0xd0>)
20001000:	4a2c      	ldr	r2, [pc, #176]	; (200010b4 <init_fire+0xd8>)
20001002:	330c      	adds	r3, #12
20001004:	ca13      	ldmia	r2!, {r0, r1, r4}
20001006:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[2] = fire3Image;
20001008:	4b28      	ldr	r3, [pc, #160]	; (200010ac <init_fire+0xd0>)
2000100a:	4a2b      	ldr	r2, [pc, #172]	; (200010b8 <init_fire+0xdc>)
2000100c:	3318      	adds	r3, #24
2000100e:	ca13      	ldmia	r2!, {r0, r1, r4}
20001010:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[3] = fire4Image;
20001012:	4b26      	ldr	r3, [pc, #152]	; (200010ac <init_fire+0xd0>)
20001014:	4a29      	ldr	r2, [pc, #164]	; (200010bc <init_fire+0xe0>)
20001016:	3324      	adds	r3, #36	; 0x24
20001018:	ca13      	ldmia	r2!, {r0, r1, r4}
2000101a:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[4] = fire5Image;
2000101c:	4b23      	ldr	r3, [pc, #140]	; (200010ac <init_fire+0xd0>)
2000101e:	4a28      	ldr	r2, [pc, #160]	; (200010c0 <init_fire+0xe4>)
20001020:	3330      	adds	r3, #48	; 0x30
20001022:	ca13      	ldmia	r2!, {r0, r1, r4}
20001024:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&fireImages[0], fire1Gray, fire1Light, fireBlack);
20001026:	4b27      	ldr	r3, [pc, #156]	; (200010c4 <init_fire+0xe8>)
20001028:	6819      	ldr	r1, [r3, #0]
2000102a:	4b27      	ldr	r3, [pc, #156]	; (200010c8 <init_fire+0xec>)
2000102c:	681a      	ldr	r2, [r3, #0]
2000102e:	4b27      	ldr	r3, [pc, #156]	; (200010cc <init_fire+0xf0>)
20001030:	681b      	ldr	r3, [r3, #0]
20001032:	481e      	ldr	r0, [pc, #120]	; (200010ac <init_fire+0xd0>)
20001034:	f001 fad2 	bl	200025dc <load_image>
		load_image(&fireImages[1], fire2Gray, fire2Light, fireBlack);
20001038:	4b25      	ldr	r3, [pc, #148]	; (200010d0 <init_fire+0xf4>)
2000103a:	6819      	ldr	r1, [r3, #0]
2000103c:	4b25      	ldr	r3, [pc, #148]	; (200010d4 <init_fire+0xf8>)
2000103e:	681a      	ldr	r2, [r3, #0]
20001040:	4b22      	ldr	r3, [pc, #136]	; (200010cc <init_fire+0xf0>)
20001042:	681b      	ldr	r3, [r3, #0]
20001044:	4824      	ldr	r0, [pc, #144]	; (200010d8 <init_fire+0xfc>)
20001046:	f001 fac9 	bl	200025dc <load_image>
		load_image(&fireImages[2], fire3Gray, fire3Light, fireBlack);
2000104a:	4b24      	ldr	r3, [pc, #144]	; (200010dc <init_fire+0x100>)
2000104c:	6819      	ldr	r1, [r3, #0]
2000104e:	4b24      	ldr	r3, [pc, #144]	; (200010e0 <init_fire+0x104>)
20001050:	681a      	ldr	r2, [r3, #0]
20001052:	4b1e      	ldr	r3, [pc, #120]	; (200010cc <init_fire+0xf0>)
20001054:	681b      	ldr	r3, [r3, #0]
20001056:	4823      	ldr	r0, [pc, #140]	; (200010e4 <init_fire+0x108>)
20001058:	f001 fac0 	bl	200025dc <load_image>
		load_image(&fireImages[3], fire4Gray, fire4Light, fireBlack);
2000105c:	4b22      	ldr	r3, [pc, #136]	; (200010e8 <init_fire+0x10c>)
2000105e:	6819      	ldr	r1, [r3, #0]
20001060:	4b22      	ldr	r3, [pc, #136]	; (200010ec <init_fire+0x110>)
20001062:	681a      	ldr	r2, [r3, #0]
20001064:	4b19      	ldr	r3, [pc, #100]	; (200010cc <init_fire+0xf0>)
20001066:	681b      	ldr	r3, [r3, #0]
20001068:	4821      	ldr	r0, [pc, #132]	; (200010f0 <init_fire+0x114>)
2000106a:	f001 fab7 	bl	200025dc <load_image>
		load_image(&fireImages[4], fire5Gray, fire5Light, fireBlack);
2000106e:	4b21      	ldr	r3, [pc, #132]	; (200010f4 <init_fire+0x118>)
20001070:	6819      	ldr	r1, [r3, #0]
20001072:	4b21      	ldr	r3, [pc, #132]	; (200010f8 <init_fire+0x11c>)
20001074:	681a      	ldr	r2, [r3, #0]
20001076:	4b15      	ldr	r3, [pc, #84]	; (200010cc <init_fire+0xf0>)
20001078:	681b      	ldr	r3, [r3, #0]
2000107a:	4820      	ldr	r0, [pc, #128]	; (200010fc <init_fire+0x120>)
2000107c:	f001 faae 	bl	200025dc <load_image>
	}
	
	fireObj->images = fireImages;
20001080:	687b      	ldr	r3, [r7, #4]
20001082:	4a0a      	ldr	r2, [pc, #40]	; (200010ac <init_fire+0xd0>)
20001084:	601a      	str	r2, [r3, #0]

	fireObj->current_frame = 0;
20001086:	687b      	ldr	r3, [r7, #4]
20001088:	2200      	movs	r2, #0
2000108a:	615a      	str	r2, [r3, #20]
	fireObj->n_frames = 5;
2000108c:	687b      	ldr	r3, [r7, #4]
2000108e:	2205      	movs	r2, #5
20001090:	619a      	str	r2, [r3, #24]
	fireObj->animation_speed = 1;
20001092:	687b      	ldr	r3, [r7, #4]
20001094:	2201      	movs	r2, #1
20001096:	61da      	str	r2, [r3, #28]
	fireObj->animation_counter = 0;
20001098:	687b      	ldr	r3, [r7, #4]
2000109a:	2200      	movs	r2, #0
2000109c:	621a      	str	r2, [r3, #32]
}
2000109e:	46c0      	nop			; (mov r8, r8)
200010a0:	46bd      	mov	sp, r7
200010a2:	b003      	add	sp, #12
200010a4:	bd90      	pop	{r4, r7, pc}
200010a6:	46c0      	nop			; (mov r8, r8)
200010a8:	20006b0c 	andcs	r6, r0, ip, lsl #22
200010ac:	20003308 	andcs	r3, r0, r8, lsl #6
200010b0:	200032c8 	andcs	r3, r0, r8, asr #5
200010b4:	2000328c 	andcs	r3, r0, ip, lsl #5
200010b8:	200032b0 			; <UNDEFINED> instruction: 0x200032b0
200010bc:	2000335c 	andcs	r3, r0, ip, asr r3
200010c0:	200032fc 	strdcs	r3, [r0], -ip
200010c4:	200033b4 			; <UNDEFINED> instruction: 0x200033b4
200010c8:	2000326c 	andcs	r3, r0, ip, ror #4
200010cc:	2000339c 	mulcs	r0, ip, r3
200010d0:	200033b0 			; <UNDEFINED> instruction: 0x200033b0
200010d4:	20003388 	andcs	r3, r0, r8, lsl #7
200010d8:	20003314 	andcs	r3, r0, r4, lsl r3
200010dc:	2000327c 	andcs	r3, r0, ip, ror r2
200010e0:	200033ac 	andcs	r3, r0, ip, lsr #7
200010e4:	20003320 	andcs	r3, r0, r0, lsr #6
200010e8:	20003368 	andcs	r3, r0, r8, ror #6
200010ec:	200032d4 	ldrdcs	r3, [r0], -r4
200010f0:	2000332c 	andcs	r3, r0, ip, lsr #6
200010f4:	20003384 	andcs	r3, r0, r4, lsl #7
200010f8:	2000338c 	andcs	r3, r0, ip, lsl #7
200010fc:	20003338 	andcs	r3, r0, r8, lsr r3

20001100 <playerUpdate>:
#include "gpio.h"
#include "controls.h"
#include "gameobject.h"
#include "player.h"

void playerUpdate(GameObject *this) {
20001100:	b580      	push	{r7, lr}
20001102:	b082      	sub	sp, #8
20001104:	af00      	add	r7, sp, #0
20001106:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
20001108:	687b      	ldr	r3, [r7, #4]
2000110a:	6a1b      	ldr	r3, [r3, #32]
2000110c:	1c5a      	adds	r2, r3, #1
2000110e:	687b      	ldr	r3, [r7, #4]
20001110:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
20001112:	687b      	ldr	r3, [r7, #4]
20001114:	6a1a      	ldr	r2, [r3, #32]
20001116:	687b      	ldr	r3, [r7, #4]
20001118:	69db      	ldr	r3, [r3, #28]
2000111a:	429a      	cmp	r2, r3
2000111c:	d10f      	bne.n	2000113e <playerUpdate+0x3e>
		this->animation_counter = 0;
2000111e:	687b      	ldr	r3, [r7, #4]
20001120:	2200      	movs	r2, #0
20001122:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20001124:	687b      	ldr	r3, [r7, #4]
20001126:	695b      	ldr	r3, [r3, #20]
20001128:	1c5a      	adds	r2, r3, #1
2000112a:	687b      	ldr	r3, [r7, #4]
2000112c:	699b      	ldr	r3, [r3, #24]
2000112e:	0019      	movs	r1, r3
20001130:	0010      	movs	r0, r2
20001132:	f001 ff59 	bl	20002fe8 <__aeabi_idivmod>
20001136:	000b      	movs	r3, r1
20001138:	001a      	movs	r2, r3
2000113a:	687b      	ldr	r3, [r7, #4]
2000113c:	615a      	str	r2, [r3, #20]
	
	static lastRightValue = 0;
	static lastLeftValue = 0; 
	static speed = 0;
	
	if (!lastRightValue && read_DIL_single(RIGHT_TRIGGER)){
2000113e:	4b2c      	ldr	r3, [pc, #176]	; (200011f0 <playerUpdate+0xf0>)
20001140:	681b      	ldr	r3, [r3, #0]
20001142:	2b00      	cmp	r3, #0
20001144:	d109      	bne.n	2000115a <playerUpdate+0x5a>
20001146:	2000      	movs	r0, #0
20001148:	f001 fa8c 	bl	20002664 <read_DIL_single>
2000114c:	1e03      	subs	r3, r0, #0
2000114e:	d004      	beq.n	2000115a <playerUpdate+0x5a>
		speed += SPEED_ADD;
20001150:	4b28      	ldr	r3, [pc, #160]	; (200011f4 <playerUpdate+0xf4>)
20001152:	681b      	ldr	r3, [r3, #0]
20001154:	1cda      	adds	r2, r3, #3
20001156:	4b27      	ldr	r3, [pc, #156]	; (200011f4 <playerUpdate+0xf4>)
20001158:	601a      	str	r2, [r3, #0]
	}
	
	if (!lastLeftValue && read_DIL_single(LEFT_TRIGGER)){
2000115a:	4b27      	ldr	r3, [pc, #156]	; (200011f8 <playerUpdate+0xf8>)
2000115c:	681b      	ldr	r3, [r3, #0]
2000115e:	2b00      	cmp	r3, #0
20001160:	d109      	bne.n	20001176 <playerUpdate+0x76>
20001162:	2007      	movs	r0, #7
20001164:	f001 fa7e 	bl	20002664 <read_DIL_single>
20001168:	1e03      	subs	r3, r0, #0
2000116a:	d004      	beq.n	20001176 <playerUpdate+0x76>
		speed -= SPEED_ADD;
2000116c:	4b21      	ldr	r3, [pc, #132]	; (200011f4 <playerUpdate+0xf4>)
2000116e:	681b      	ldr	r3, [r3, #0]
20001170:	1eda      	subs	r2, r3, #3
20001172:	4b20      	ldr	r3, [pc, #128]	; (200011f4 <playerUpdate+0xf4>)
20001174:	601a      	str	r2, [r3, #0]
	}
	
	if (this->xPos + speed > LIMIT_RIGHT || this->xPos + speed < LIMIT_LEFT){
20001176:	687b      	ldr	r3, [r7, #4]
20001178:	685a      	ldr	r2, [r3, #4]
2000117a:	4b1e      	ldr	r3, [pc, #120]	; (200011f4 <playerUpdate+0xf4>)
2000117c:	681b      	ldr	r3, [r3, #0]
2000117e:	18d3      	adds	r3, r2, r3
20001180:	2b6e      	cmp	r3, #110	; 0x6e
20001182:	dc06      	bgt.n	20001192 <playerUpdate+0x92>
20001184:	687b      	ldr	r3, [r7, #4]
20001186:	685a      	ldr	r2, [r3, #4]
20001188:	4b1a      	ldr	r3, [pc, #104]	; (200011f4 <playerUpdate+0xf4>)
2000118a:	681b      	ldr	r3, [r3, #0]
2000118c:	18d3      	adds	r3, r2, r3
2000118e:	2b00      	cmp	r3, #0
20001190:	da04      	bge.n	2000119c <playerUpdate+0x9c>
		speed *= -1;	
20001192:	4b18      	ldr	r3, [pc, #96]	; (200011f4 <playerUpdate+0xf4>)
20001194:	681b      	ldr	r3, [r3, #0]
20001196:	425a      	negs	r2, r3
20001198:	4b16      	ldr	r3, [pc, #88]	; (200011f4 <playerUpdate+0xf4>)
2000119a:	601a      	str	r2, [r3, #0]
	}
	
	this->xPos += speed;	
2000119c:	687b      	ldr	r3, [r7, #4]
2000119e:	685a      	ldr	r2, [r3, #4]
200011a0:	4b14      	ldr	r3, [pc, #80]	; (200011f4 <playerUpdate+0xf4>)
200011a2:	681b      	ldr	r3, [r3, #0]
200011a4:	18d2      	adds	r2, r2, r3
200011a6:	687b      	ldr	r3, [r7, #4]
200011a8:	605a      	str	r2, [r3, #4]
	
	if (speed > 0){
200011aa:	4b12      	ldr	r3, [pc, #72]	; (200011f4 <playerUpdate+0xf4>)
200011ac:	681b      	ldr	r3, [r3, #0]
200011ae:	2b00      	cmp	r3, #0
200011b0:	dd05      	ble.n	200011be <playerUpdate+0xbe>
		speed--;
200011b2:	4b10      	ldr	r3, [pc, #64]	; (200011f4 <playerUpdate+0xf4>)
200011b4:	681b      	ldr	r3, [r3, #0]
200011b6:	1e5a      	subs	r2, r3, #1
200011b8:	4b0e      	ldr	r3, [pc, #56]	; (200011f4 <playerUpdate+0xf4>)
200011ba:	601a      	str	r2, [r3, #0]
200011bc:	e008      	b.n	200011d0 <playerUpdate+0xd0>
	}
	else if (speed < 0){
200011be:	4b0d      	ldr	r3, [pc, #52]	; (200011f4 <playerUpdate+0xf4>)
200011c0:	681b      	ldr	r3, [r3, #0]
200011c2:	2b00      	cmp	r3, #0
200011c4:	da04      	bge.n	200011d0 <playerUpdate+0xd0>
		speed++;
200011c6:	4b0b      	ldr	r3, [pc, #44]	; (200011f4 <playerUpdate+0xf4>)
200011c8:	681b      	ldr	r3, [r3, #0]
200011ca:	1c5a      	adds	r2, r3, #1
200011cc:	4b09      	ldr	r3, [pc, #36]	; (200011f4 <playerUpdate+0xf4>)
200011ce:	601a      	str	r2, [r3, #0]
	}
	
	lastRightValue = read_DIL_single(RIGHT_TRIGGER);
200011d0:	2000      	movs	r0, #0
200011d2:	f001 fa47 	bl	20002664 <read_DIL_single>
200011d6:	0002      	movs	r2, r0
200011d8:	4b05      	ldr	r3, [pc, #20]	; (200011f0 <playerUpdate+0xf0>)
200011da:	601a      	str	r2, [r3, #0]
	lastLeftValue = read_DIL_single(LEFT_TRIGGER);
200011dc:	2007      	movs	r0, #7
200011de:	f001 fa41 	bl	20002664 <read_DIL_single>
200011e2:	0002      	movs	r2, r0
200011e4:	4b04      	ldr	r3, [pc, #16]	; (200011f8 <playerUpdate+0xf8>)
200011e6:	601a      	str	r2, [r3, #0]
	
200011e8:	46c0      	nop			; (mov r8, r8)
200011ea:	46bd      	mov	sp, r7
200011ec:	b002      	add	sp, #8
200011ee:	bd80      	pop	{r7, pc}
200011f0:	20002ffc 	strdcs	r2, [r0], -ip
200011f4:	20003000 	andcs	r3, r0, r0
200011f8:	20003004 	andcs	r3, r0, r4

200011fc <initSprites>:
Image bird5Image;
Image bird6Image;
//Image bird7Image;
//Image bird8Image;
Image birdImages[6];
static void initSprites( void ) {	
200011fc:	b580      	push	{r7, lr}
200011fe:	b090      	sub	sp, #64	; 0x40
20001200:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempBirdLight;
20001202:	4b54      	ldr	r3, [pc, #336]	; (20001354 <initSprites+0x158>)
20001204:	63fb      	str	r3, [r7, #60]	; 0x3c
	load_sprite(pointer11, bird1_light_bits, bird1_black_width, bird1_black_height);
20001206:	4954      	ldr	r1, [pc, #336]	; (20001358 <initSprites+0x15c>)
20001208:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
2000120a:	2319      	movs	r3, #25
2000120c:	2219      	movs	r2, #25
2000120e:	f001 f9f9 	bl	20002604 <load_sprite>
	bird1Light = pointer11;
20001212:	4b52      	ldr	r3, [pc, #328]	; (2000135c <initSprites+0x160>)
20001214:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20001216:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempBirdGray;
20001218:	4b51      	ldr	r3, [pc, #324]	; (20001360 <initSprites+0x164>)
2000121a:	63bb      	str	r3, [r7, #56]	; 0x38
	load_sprite(pointer12, bird1_gray_bits, bird1_black_width, bird1_black_height);
2000121c:	4951      	ldr	r1, [pc, #324]	; (20001364 <initSprites+0x168>)
2000121e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20001220:	2319      	movs	r3, #25
20001222:	2219      	movs	r2, #25
20001224:	f001 f9ee 	bl	20002604 <load_sprite>
	bird1Gray = pointer12;
20001228:	4b4f      	ldr	r3, [pc, #316]	; (20001368 <initSprites+0x16c>)
2000122a:	6bba      	ldr	r2, [r7, #56]	; 0x38
2000122c:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempBirdBlack;
2000122e:	4b4f      	ldr	r3, [pc, #316]	; (2000136c <initSprites+0x170>)
20001230:	637b      	str	r3, [r7, #52]	; 0x34
	load_sprite(pointer13, bird1_black_bits, bird1_black_width, bird1_black_height);
20001232:	494f      	ldr	r1, [pc, #316]	; (20001370 <initSprites+0x174>)
20001234:	6b78      	ldr	r0, [r7, #52]	; 0x34
20001236:	2319      	movs	r3, #25
20001238:	2219      	movs	r2, #25
2000123a:	f001 f9e3 	bl	20002604 <load_sprite>
	bird1Black = pointer13;	
2000123e:	4b4d      	ldr	r3, [pc, #308]	; (20001374 <initSprites+0x178>)
20001240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20001242:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempBird2Light;
20001244:	4b4c      	ldr	r3, [pc, #304]	; (20001378 <initSprites+0x17c>)
20001246:	633b      	str	r3, [r7, #48]	; 0x30
	load_sprite(pointer14, bird2_light_bits, bird2_black_width, bird2_black_height);
20001248:	494c      	ldr	r1, [pc, #304]	; (2000137c <initSprites+0x180>)
2000124a:	6b38      	ldr	r0, [r7, #48]	; 0x30
2000124c:	2319      	movs	r3, #25
2000124e:	2219      	movs	r2, #25
20001250:	f001 f9d8 	bl	20002604 <load_sprite>
	bird2Light = pointer14;
20001254:	4b4a      	ldr	r3, [pc, #296]	; (20001380 <initSprites+0x184>)
20001256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001258:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempBird2Gray;
2000125a:	4b4a      	ldr	r3, [pc, #296]	; (20001384 <initSprites+0x188>)
2000125c:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer15, bird2_gray_bits, bird2_black_width, bird2_black_height);
2000125e:	494a      	ldr	r1, [pc, #296]	; (20001388 <initSprites+0x18c>)
20001260:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001262:	2319      	movs	r3, #25
20001264:	2219      	movs	r2, #25
20001266:	f001 f9cd 	bl	20002604 <load_sprite>
	bird2Gray = pointer15;
2000126a:	4b48      	ldr	r3, [pc, #288]	; (2000138c <initSprites+0x190>)
2000126c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000126e:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempBird2Black;
20001270:	4b47      	ldr	r3, [pc, #284]	; (20001390 <initSprites+0x194>)
20001272:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer16, bird2_black_bits, bird2_black_width, bird2_black_height);
20001274:	4947      	ldr	r1, [pc, #284]	; (20001394 <initSprites+0x198>)
20001276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001278:	2319      	movs	r3, #25
2000127a:	2219      	movs	r2, #25
2000127c:	f001 f9c2 	bl	20002604 <load_sprite>
	bird2Black = pointer16;
20001280:	4b45      	ldr	r3, [pc, #276]	; (20001398 <initSprites+0x19c>)
20001282:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001284:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempBird3Light;
20001286:	4b45      	ldr	r3, [pc, #276]	; (2000139c <initSprites+0x1a0>)
20001288:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(finalPointer, bird3_light_bits, bird3_black_width, bird3_black_height);
2000128a:	4945      	ldr	r1, [pc, #276]	; (200013a0 <initSprites+0x1a4>)
2000128c:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000128e:	2319      	movs	r3, #25
20001290:	2219      	movs	r2, #25
20001292:	f001 f9b7 	bl	20002604 <load_sprite>
	bird3Light = finalPointer;
20001296:	4b43      	ldr	r3, [pc, #268]	; (200013a4 <initSprites+0x1a8>)
20001298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000129a:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempBird3Gray;
2000129c:	4b42      	ldr	r3, [pc, #264]	; (200013a8 <initSprites+0x1ac>)
2000129e:	623b      	str	r3, [r7, #32]
	load_sprite(pointer17, bird3_gray_bits, bird3_black_width, bird3_black_height);
200012a0:	4942      	ldr	r1, [pc, #264]	; (200013ac <initSprites+0x1b0>)
200012a2:	6a38      	ldr	r0, [r7, #32]
200012a4:	2319      	movs	r3, #25
200012a6:	2219      	movs	r2, #25
200012a8:	f001 f9ac 	bl	20002604 <load_sprite>
	bird3Gray = pointer17;
200012ac:	4b40      	ldr	r3, [pc, #256]	; (200013b0 <initSprites+0x1b4>)
200012ae:	6a3a      	ldr	r2, [r7, #32]
200012b0:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempBird3Black;
200012b2:	4b40      	ldr	r3, [pc, #256]	; (200013b4 <initSprites+0x1b8>)
200012b4:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer18, bird3_black_bits, bird3_black_width, bird3_black_height);
200012b6:	4940      	ldr	r1, [pc, #256]	; (200013b8 <initSprites+0x1bc>)
200012b8:	69f8      	ldr	r0, [r7, #28]
200012ba:	2319      	movs	r3, #25
200012bc:	2219      	movs	r2, #25
200012be:	f001 f9a1 	bl	20002604 <load_sprite>
	bird3Black = pointer18;	
200012c2:	4b3e      	ldr	r3, [pc, #248]	; (200013bc <initSprites+0x1c0>)
200012c4:	69fa      	ldr	r2, [r7, #28]
200012c6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempBird4Light;
200012c8:	4b3d      	ldr	r3, [pc, #244]	; (200013c0 <initSprites+0x1c4>)
200012ca:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer19, bird4_light_bits, bird4_black_width, bird4_black_height);
200012cc:	493d      	ldr	r1, [pc, #244]	; (200013c4 <initSprites+0x1c8>)
200012ce:	69b8      	ldr	r0, [r7, #24]
200012d0:	2319      	movs	r3, #25
200012d2:	2219      	movs	r2, #25
200012d4:	f001 f996 	bl	20002604 <load_sprite>
	bird4Light = pointer19;
200012d8:	4b3b      	ldr	r3, [pc, #236]	; (200013c8 <initSprites+0x1cc>)
200012da:	69ba      	ldr	r2, [r7, #24]
200012dc:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempBird4Gray;
200012de:	4b3b      	ldr	r3, [pc, #236]	; (200013cc <initSprites+0x1d0>)
200012e0:	617b      	str	r3, [r7, #20]
	load_sprite(pointer20, bird4_gray_bits, bird4_black_width, bird4_black_height);
200012e2:	493b      	ldr	r1, [pc, #236]	; (200013d0 <initSprites+0x1d4>)
200012e4:	6978      	ldr	r0, [r7, #20]
200012e6:	2319      	movs	r3, #25
200012e8:	2219      	movs	r2, #25
200012ea:	f001 f98b 	bl	20002604 <load_sprite>
	bird4Gray = pointer20;
200012ee:	4b39      	ldr	r3, [pc, #228]	; (200013d4 <initSprites+0x1d8>)
200012f0:	697a      	ldr	r2, [r7, #20]
200012f2:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempBird4Black;
200012f4:	4b38      	ldr	r3, [pc, #224]	; (200013d8 <initSprites+0x1dc>)
200012f6:	613b      	str	r3, [r7, #16]
	load_sprite(pointer21, bird4_black_bits, bird4_black_width, bird4_black_height);
200012f8:	4938      	ldr	r1, [pc, #224]	; (200013dc <initSprites+0x1e0>)
200012fa:	6938      	ldr	r0, [r7, #16]
200012fc:	2319      	movs	r3, #25
200012fe:	2219      	movs	r2, #25
20001300:	f001 f980 	bl	20002604 <load_sprite>
	bird4Black = pointer21;	
20001304:	4b36      	ldr	r3, [pc, #216]	; (200013e0 <initSprites+0x1e4>)
20001306:	693a      	ldr	r2, [r7, #16]
20001308:	601a      	str	r2, [r3, #0]
	
	sprite *pointer22 = &tempBird5Light;
2000130a:	4b36      	ldr	r3, [pc, #216]	; (200013e4 <initSprites+0x1e8>)
2000130c:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer22, bird5_light_bits, bird5_black_width, bird5_black_height);
2000130e:	4936      	ldr	r1, [pc, #216]	; (200013e8 <initSprites+0x1ec>)
20001310:	68f8      	ldr	r0, [r7, #12]
20001312:	2319      	movs	r3, #25
20001314:	2219      	movs	r2, #25
20001316:	f001 f975 	bl	20002604 <load_sprite>
	bird5Light = pointer22;
2000131a:	4b34      	ldr	r3, [pc, #208]	; (200013ec <initSprites+0x1f0>)
2000131c:	68fa      	ldr	r2, [r7, #12]
2000131e:	601a      	str	r2, [r3, #0]
	sprite *pointer23 = &tempBird5Gray;
20001320:	4b33      	ldr	r3, [pc, #204]	; (200013f0 <initSprites+0x1f4>)
20001322:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer23, bird5_gray_bits, bird5_black_width, bird5_black_height);
20001324:	4933      	ldr	r1, [pc, #204]	; (200013f4 <initSprites+0x1f8>)
20001326:	68b8      	ldr	r0, [r7, #8]
20001328:	2319      	movs	r3, #25
2000132a:	2219      	movs	r2, #25
2000132c:	f001 f96a 	bl	20002604 <load_sprite>
	bird5Gray = pointer23;
20001330:	4b31      	ldr	r3, [pc, #196]	; (200013f8 <initSprites+0x1fc>)
20001332:	68ba      	ldr	r2, [r7, #8]
20001334:	601a      	str	r2, [r3, #0]
	sprite *pointer24 = &tempBird5Black;
20001336:	4b31      	ldr	r3, [pc, #196]	; (200013fc <initSprites+0x200>)
20001338:	607b      	str	r3, [r7, #4]
	load_sprite(pointer24, bird5_black_bits, bird5_black_width, bird5_black_height);
2000133a:	4931      	ldr	r1, [pc, #196]	; (20001400 <initSprites+0x204>)
2000133c:	6878      	ldr	r0, [r7, #4]
2000133e:	2319      	movs	r3, #25
20001340:	2219      	movs	r2, #25
20001342:	f001 f95f 	bl	20002604 <load_sprite>
	bird5Black = pointer24;
20001346:	4b2f      	ldr	r3, [pc, #188]	; (20001404 <initSprites+0x208>)
20001348:	687a      	ldr	r2, [r7, #4]
2000134a:	601a      	str	r2, [r3, #0]
}
2000134c:	46c0      	nop			; (mov r8, r8)
2000134e:	46bd      	mov	sp, r7
20001350:	b010      	add	sp, #64	; 0x40
20001352:	bd80      	pop	{r7, pc}
20001354:	200034a8 	andcs	r3, r0, r8, lsr #9
20001358:	20006bd8 	ldrdcs	r6, [r0], -r8
2000135c:	200034b4 			; <UNDEFINED> instruction: 0x200034b4
20001360:	20003444 	andcs	r3, r0, r4, asr #8
20001364:	20006b74 	andcs	r6, r0, r4, ror fp
20001368:	200033bc 			; <UNDEFINED> instruction: 0x200033bc
2000136c:	20003434 	andcs	r3, r0, r4, lsr r4
20001370:	20006b10 	andcs	r6, r0, r0, lsl fp
20001374:	20003424 	andcs	r3, r0, r4, lsr #8
20001378:	200034b8 			; <UNDEFINED> instruction: 0x200034b8
2000137c:	20006d04 	andcs	r6, r0, r4, lsl #26
20001380:	20003558 	andcs	r3, r0, r8, asr r5
20001384:	20003460 	andcs	r3, r0, r0, ror #8
20001388:	20006ca0 	andcs	r6, r0, r0, lsr #25
2000138c:	200034a4 	andcs	r3, r0, r4, lsr #9
20001390:	20003540 	andcs	r3, r0, r0, asr #10
20001394:	20006c3c 	andcs	r6, r0, ip, lsr ip
20001398:	20003420 	andcs	r3, r0, r0, lsr #8
2000139c:	200034dc 	ldrdcs	r3, [r0], -ip
200013a0:	20006e30 	andcs	r6, r0, r0, lsr lr
200013a4:	2000346c 	andcs	r3, r0, ip, ror #8
200013a8:	200034e8 	andcs	r3, r0, r8, ror #9
200013ac:	20006dcc 	andcs	r6, r0, ip, asr #27
200013b0:	20003440 	andcs	r3, r0, r0, asr #8
200013b4:	20003498 	mulcs	r0, r8, r4
200013b8:	20006d68 	andcs	r6, r0, r8, ror #26
200013bc:	20003418 	andcs	r3, r0, r8, lsl r4
200013c0:	200034d0 	ldrdcs	r3, [r0], -r0
200013c4:	20006f5c 	andcs	r6, r0, ip, asr pc
200013c8:	200033b8 			; <UNDEFINED> instruction: 0x200033b8
200013cc:	2000354c 	andcs	r3, r0, ip, asr #10
200013d0:	20006ef8 	strdcs	r6, [r0], -r8
200013d4:	2000341c 	andcs	r3, r0, ip, lsl r4
200013d8:	200033d0 	ldrdcs	r3, [r0], -r0
200013dc:	20006e94 	mulcs	r0, r4, lr
200013e0:	2000353c 	andcs	r3, r0, ip, lsr r5
200013e4:	20003454 	andcs	r3, r0, r4, asr r4
200013e8:	20007088 	andcs	r7, r0, r8, lsl #1
200013ec:	20003494 	mulcs	r0, r4, r4
200013f0:	20003470 	andcs	r3, r0, r0, ror r4
200013f4:	20007024 	andcs	r7, r0, r4, lsr #32
200013f8:	20003450 	andcs	r3, r0, r0, asr r4
200013fc:	2000347c 	andcs	r3, r0, ip, ror r4
20001400:	20006fc0 	andcs	r6, r0, r0, asr #31
20001404:	200033cc 	andcs	r3, r0, ip, asr #7

20001408 <init_bird>:
	
void init_bird( GameObject *birdObj ) {
20001408:	b590      	push	{r4, r7, lr}
2000140a:	b083      	sub	sp, #12
2000140c:	af00      	add	r7, sp, #0
2000140e:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001410:	4b37      	ldr	r3, [pc, #220]	; (200014f0 <init_bird+0xe8>)
20001412:	681b      	ldr	r3, [r3, #0]
20001414:	2b00      	cmp	r3, #0
20001416:	d057      	beq.n	200014c8 <init_bird+0xc0>
		initSprites();
20001418:	f7ff fef0 	bl	200011fc <initSprites>
		firstTime = 0;			
2000141c:	4b34      	ldr	r3, [pc, #208]	; (200014f0 <init_bird+0xe8>)
2000141e:	2200      	movs	r2, #0
20001420:	601a      	str	r2, [r3, #0]

		birdImages[0] = bird1Image;
20001422:	4b34      	ldr	r3, [pc, #208]	; (200014f4 <init_bird+0xec>)
20001424:	4a34      	ldr	r2, [pc, #208]	; (200014f8 <init_bird+0xf0>)
20001426:	ca13      	ldmia	r2!, {r0, r1, r4}
20001428:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[1] = bird2Image;
2000142a:	4b32      	ldr	r3, [pc, #200]	; (200014f4 <init_bird+0xec>)
2000142c:	4a33      	ldr	r2, [pc, #204]	; (200014fc <init_bird+0xf4>)
2000142e:	330c      	adds	r3, #12
20001430:	ca13      	ldmia	r2!, {r0, r1, r4}
20001432:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[2] = bird3Image;
20001434:	4b2f      	ldr	r3, [pc, #188]	; (200014f4 <init_bird+0xec>)
20001436:	4a32      	ldr	r2, [pc, #200]	; (20001500 <init_bird+0xf8>)
20001438:	3318      	adds	r3, #24
2000143a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000143c:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[3] = bird4Image;
2000143e:	4b2d      	ldr	r3, [pc, #180]	; (200014f4 <init_bird+0xec>)
20001440:	4a30      	ldr	r2, [pc, #192]	; (20001504 <init_bird+0xfc>)
20001442:	3324      	adds	r3, #36	; 0x24
20001444:	ca13      	ldmia	r2!, {r0, r1, r4}
20001446:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[4] = bird5Image;
20001448:	4b2a      	ldr	r3, [pc, #168]	; (200014f4 <init_bird+0xec>)
2000144a:	4a2f      	ldr	r2, [pc, #188]	; (20001508 <init_bird+0x100>)
2000144c:	3330      	adds	r3, #48	; 0x30
2000144e:	ca13      	ldmia	r2!, {r0, r1, r4}
20001450:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[5] = bird6Image;
20001452:	4b28      	ldr	r3, [pc, #160]	; (200014f4 <init_bird+0xec>)
20001454:	4a2d      	ldr	r2, [pc, #180]	; (2000150c <init_bird+0x104>)
20001456:	333c      	adds	r3, #60	; 0x3c
20001458:	ca13      	ldmia	r2!, {r0, r1, r4}
2000145a:	c313      	stmia	r3!, {r0, r1, r4}
//		birdImages[6] = bird7Image;
		//birdImages[7] = bird8Image;
		
		load_image(&birdImages[0], bird1Black, bird1Gray, bird1Light);
2000145c:	4b2c      	ldr	r3, [pc, #176]	; (20001510 <init_bird+0x108>)
2000145e:	6819      	ldr	r1, [r3, #0]
20001460:	4b2c      	ldr	r3, [pc, #176]	; (20001514 <init_bird+0x10c>)
20001462:	681a      	ldr	r2, [r3, #0]
20001464:	4b2c      	ldr	r3, [pc, #176]	; (20001518 <init_bird+0x110>)
20001466:	681b      	ldr	r3, [r3, #0]
20001468:	4822      	ldr	r0, [pc, #136]	; (200014f4 <init_bird+0xec>)
2000146a:	f001 f8b7 	bl	200025dc <load_image>
		load_image(&birdImages[1], bird2Black, bird2Gray, bird2Light);
2000146e:	4b2b      	ldr	r3, [pc, #172]	; (2000151c <init_bird+0x114>)
20001470:	6819      	ldr	r1, [r3, #0]
20001472:	4b2b      	ldr	r3, [pc, #172]	; (20001520 <init_bird+0x118>)
20001474:	681a      	ldr	r2, [r3, #0]
20001476:	4b2b      	ldr	r3, [pc, #172]	; (20001524 <init_bird+0x11c>)
20001478:	681b      	ldr	r3, [r3, #0]
2000147a:	482b      	ldr	r0, [pc, #172]	; (20001528 <init_bird+0x120>)
2000147c:	f001 f8ae 	bl	200025dc <load_image>
		load_image(&birdImages[2], bird3Black, bird3Gray, bird3Light);
20001480:	4b2a      	ldr	r3, [pc, #168]	; (2000152c <init_bird+0x124>)
20001482:	6819      	ldr	r1, [r3, #0]
20001484:	4b2a      	ldr	r3, [pc, #168]	; (20001530 <init_bird+0x128>)
20001486:	681a      	ldr	r2, [r3, #0]
20001488:	4b2a      	ldr	r3, [pc, #168]	; (20001534 <init_bird+0x12c>)
2000148a:	681b      	ldr	r3, [r3, #0]
2000148c:	482a      	ldr	r0, [pc, #168]	; (20001538 <init_bird+0x130>)
2000148e:	f001 f8a5 	bl	200025dc <load_image>
		load_image(&birdImages[3], bird4Black, bird4Gray, bird4Light);
20001492:	4b2a      	ldr	r3, [pc, #168]	; (2000153c <init_bird+0x134>)
20001494:	6819      	ldr	r1, [r3, #0]
20001496:	4b2a      	ldr	r3, [pc, #168]	; (20001540 <init_bird+0x138>)
20001498:	681a      	ldr	r2, [r3, #0]
2000149a:	4b2a      	ldr	r3, [pc, #168]	; (20001544 <init_bird+0x13c>)
2000149c:	681b      	ldr	r3, [r3, #0]
2000149e:	482a      	ldr	r0, [pc, #168]	; (20001548 <init_bird+0x140>)
200014a0:	f001 f89c 	bl	200025dc <load_image>
		load_image(&birdImages[4], bird5Black, bird5Gray, bird5Light);
200014a4:	4b29      	ldr	r3, [pc, #164]	; (2000154c <init_bird+0x144>)
200014a6:	6819      	ldr	r1, [r3, #0]
200014a8:	4b29      	ldr	r3, [pc, #164]	; (20001550 <init_bird+0x148>)
200014aa:	681a      	ldr	r2, [r3, #0]
200014ac:	4b29      	ldr	r3, [pc, #164]	; (20001554 <init_bird+0x14c>)
200014ae:	681b      	ldr	r3, [r3, #0]
200014b0:	4829      	ldr	r0, [pc, #164]	; (20001558 <init_bird+0x150>)
200014b2:	f001 f893 	bl	200025dc <load_image>
		
		//load_image(&birdImages[7], bird2Black, bird2Gray, bird2Light);
		load_image(&birdImages[5], bird3Black, bird3Gray, bird3Light);
200014b6:	4b1d      	ldr	r3, [pc, #116]	; (2000152c <init_bird+0x124>)
200014b8:	6819      	ldr	r1, [r3, #0]
200014ba:	4b1d      	ldr	r3, [pc, #116]	; (20001530 <init_bird+0x128>)
200014bc:	681a      	ldr	r2, [r3, #0]
200014be:	4b1d      	ldr	r3, [pc, #116]	; (20001534 <init_bird+0x12c>)
200014c0:	681b      	ldr	r3, [r3, #0]
200014c2:	4826      	ldr	r0, [pc, #152]	; (2000155c <init_bird+0x154>)
200014c4:	f001 f88a 	bl	200025dc <load_image>
		//load_image(&birdImages[5], bird4Black, bird4Gray, bird4Light);
	}
	
	birdObj->images = birdImages;
200014c8:	687b      	ldr	r3, [r7, #4]
200014ca:	4a0a      	ldr	r2, [pc, #40]	; (200014f4 <init_bird+0xec>)
200014cc:	601a      	str	r2, [r3, #0]

	birdObj->current_frame = 0;
200014ce:	687b      	ldr	r3, [r7, #4]
200014d0:	2200      	movs	r2, #0
200014d2:	615a      	str	r2, [r3, #20]
	birdObj->n_frames = 6;
200014d4:	687b      	ldr	r3, [r7, #4]
200014d6:	2206      	movs	r2, #6
200014d8:	619a      	str	r2, [r3, #24]
	birdObj->animation_speed = 1;
200014da:	687b      	ldr	r3, [r7, #4]
200014dc:	2201      	movs	r2, #1
200014de:	61da      	str	r2, [r3, #28]
	birdObj->animation_counter = 0;
200014e0:	687b      	ldr	r3, [r7, #4]
200014e2:	2200      	movs	r2, #0
200014e4:	621a      	str	r2, [r3, #32]
}
200014e6:	46c0      	nop			; (mov r8, r8)
200014e8:	46bd      	mov	sp, r7
200014ea:	b003      	add	sp, #12
200014ec:	bd90      	pop	{r4, r7, pc}
200014ee:	46c0      	nop			; (mov r8, r8)
200014f0:	200070ec 	andcs	r7, r0, ip, ror #1
200014f4:	200034f4 	strdcs	r3, [r0], -r4
200014f8:	2000340c 	andcs	r3, r0, ip, lsl #8
200014fc:	200033dc 	ldrdcs	r3, [r0], -ip
20001500:	200034c4 	andcs	r3, r0, r4, asr #9
20001504:	20003428 	andcs	r3, r0, r8, lsr #8
20001508:	20003488 	andcs	r3, r0, r8, lsl #9
2000150c:	200033c0 	andcs	r3, r0, r0, asr #7
20001510:	20003424 	andcs	r3, r0, r4, lsr #8
20001514:	200033bc 			; <UNDEFINED> instruction: 0x200033bc
20001518:	200034b4 			; <UNDEFINED> instruction: 0x200034b4
2000151c:	20003420 	andcs	r3, r0, r0, lsr #8
20001520:	200034a4 	andcs	r3, r0, r4, lsr #9
20001524:	20003558 	andcs	r3, r0, r8, asr r5
20001528:	20003500 	andcs	r3, r0, r0, lsl #10
2000152c:	20003418 	andcs	r3, r0, r8, lsl r4
20001530:	20003440 	andcs	r3, r0, r0, asr #8
20001534:	2000346c 	andcs	r3, r0, ip, ror #8
20001538:	2000350c 	andcs	r3, r0, ip, lsl #10
2000153c:	2000353c 	andcs	r3, r0, ip, lsr r5
20001540:	2000341c 	andcs	r3, r0, ip, lsl r4
20001544:	200033b8 			; <UNDEFINED> instruction: 0x200033b8
20001548:	20003518 	andcs	r3, r0, r8, lsl r5
2000154c:	200033cc 	andcs	r3, r0, ip, asr #7
20001550:	20003450 	andcs	r3, r0, r0, asr r4
20001554:	20003494 	mulcs	r0, r4, r4
20001558:	20003524 	andcs	r3, r0, r4, lsr #10
2000155c:	20003530 	andcs	r3, r0, r0, lsr r5

20001560 <initSprites>:
Image witch1Image;
Image witch2Image;
Image witch3Image;
Image witch4Image;
Image witchImages[4];
static void initSprites( void ) {	
20001560:	b580      	push	{r7, lr}
20001562:	b08a      	sub	sp, #40	; 0x28
20001564:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempWitchLight;
20001566:	4b33      	ldr	r3, [pc, #204]	; (20001634 <initSprites+0xd4>)
20001568:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer11, witch1_light_bits, witch1_black_width, witch1_black_height);
2000156a:	4933      	ldr	r1, [pc, #204]	; (20001638 <initSprites+0xd8>)
2000156c:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000156e:	2312      	movs	r3, #18
20001570:	2212      	movs	r2, #18
20001572:	f001 f847 	bl	20002604 <load_sprite>
	witch1Light = pointer11;
20001576:	4b31      	ldr	r3, [pc, #196]	; (2000163c <initSprites+0xdc>)
20001578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000157a:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempWitchGray;
2000157c:	4b30      	ldr	r3, [pc, #192]	; (20001640 <initSprites+0xe0>)
2000157e:	623b      	str	r3, [r7, #32]
	load_sprite(pointer12, witch1_gray_bits, witch1_black_width, witch1_black_height);
20001580:	4930      	ldr	r1, [pc, #192]	; (20001644 <initSprites+0xe4>)
20001582:	6a38      	ldr	r0, [r7, #32]
20001584:	2312      	movs	r3, #18
20001586:	2212      	movs	r2, #18
20001588:	f001 f83c 	bl	20002604 <load_sprite>
	witch1Gray = pointer12;
2000158c:	4b2e      	ldr	r3, [pc, #184]	; (20001648 <initSprites+0xe8>)
2000158e:	6a3a      	ldr	r2, [r7, #32]
20001590:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempWitchBlack;
20001592:	4b2e      	ldr	r3, [pc, #184]	; (2000164c <initSprites+0xec>)
20001594:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer13, witch1_black_bits, witch1_black_width, witch1_black_height);
20001596:	492e      	ldr	r1, [pc, #184]	; (20001650 <initSprites+0xf0>)
20001598:	69f8      	ldr	r0, [r7, #28]
2000159a:	2312      	movs	r3, #18
2000159c:	2212      	movs	r2, #18
2000159e:	f001 f831 	bl	20002604 <load_sprite>
	witch1Black = pointer13;	
200015a2:	4b2c      	ldr	r3, [pc, #176]	; (20001654 <initSprites+0xf4>)
200015a4:	69fa      	ldr	r2, [r7, #28]
200015a6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempWitch2Light;
200015a8:	4b2b      	ldr	r3, [pc, #172]	; (20001658 <initSprites+0xf8>)
200015aa:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer14, witch2_light_bits, witch2_black_width, witch2_black_height);
200015ac:	492b      	ldr	r1, [pc, #172]	; (2000165c <initSprites+0xfc>)
200015ae:	69b8      	ldr	r0, [r7, #24]
200015b0:	2312      	movs	r3, #18
200015b2:	2212      	movs	r2, #18
200015b4:	f001 f826 	bl	20002604 <load_sprite>
	witch2Light = pointer14;
200015b8:	4b29      	ldr	r3, [pc, #164]	; (20001660 <initSprites+0x100>)
200015ba:	69ba      	ldr	r2, [r7, #24]
200015bc:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempWitch2Gray;
200015be:	4b29      	ldr	r3, [pc, #164]	; (20001664 <initSprites+0x104>)
200015c0:	617b      	str	r3, [r7, #20]
	load_sprite(pointer15, witch2_gray_bits, witch2_black_width, witch2_black_height);
200015c2:	4929      	ldr	r1, [pc, #164]	; (20001668 <initSprites+0x108>)
200015c4:	6978      	ldr	r0, [r7, #20]
200015c6:	2312      	movs	r3, #18
200015c8:	2212      	movs	r2, #18
200015ca:	f001 f81b 	bl	20002604 <load_sprite>
	witch2Gray = pointer15;
200015ce:	4b27      	ldr	r3, [pc, #156]	; (2000166c <initSprites+0x10c>)
200015d0:	697a      	ldr	r2, [r7, #20]
200015d2:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempWitch2Black;
200015d4:	4b26      	ldr	r3, [pc, #152]	; (20001670 <initSprites+0x110>)
200015d6:	613b      	str	r3, [r7, #16]
	load_sprite(pointer16, witch2_black_bits, witch2_black_width, witch2_black_height);
200015d8:	4926      	ldr	r1, [pc, #152]	; (20001674 <initSprites+0x114>)
200015da:	6938      	ldr	r0, [r7, #16]
200015dc:	2312      	movs	r3, #18
200015de:	2212      	movs	r2, #18
200015e0:	f001 f810 	bl	20002604 <load_sprite>
	witch2Black = pointer16;
200015e4:	4b24      	ldr	r3, [pc, #144]	; (20001678 <initSprites+0x118>)
200015e6:	693a      	ldr	r2, [r7, #16]
200015e8:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempWitch3Light;
200015ea:	4b24      	ldr	r3, [pc, #144]	; (2000167c <initSprites+0x11c>)
200015ec:	60fb      	str	r3, [r7, #12]
	load_sprite(finalPointer, witch3_light_bits, witch3_black_width, witch3_black_height);
200015ee:	4924      	ldr	r1, [pc, #144]	; (20001680 <initSprites+0x120>)
200015f0:	68f8      	ldr	r0, [r7, #12]
200015f2:	2312      	movs	r3, #18
200015f4:	2212      	movs	r2, #18
200015f6:	f001 f805 	bl	20002604 <load_sprite>
	witch3Light = finalPointer;
200015fa:	4b22      	ldr	r3, [pc, #136]	; (20001684 <initSprites+0x124>)
200015fc:	68fa      	ldr	r2, [r7, #12]
200015fe:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempWitch3Gray;
20001600:	4b21      	ldr	r3, [pc, #132]	; (20001688 <initSprites+0x128>)
20001602:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer17, witch3_gray_bits, witch3_black_width, witch3_black_height);
20001604:	4921      	ldr	r1, [pc, #132]	; (2000168c <initSprites+0x12c>)
20001606:	68b8      	ldr	r0, [r7, #8]
20001608:	2312      	movs	r3, #18
2000160a:	2212      	movs	r2, #18
2000160c:	f000 fffa 	bl	20002604 <load_sprite>
	witch3Gray = pointer17;
20001610:	4b1f      	ldr	r3, [pc, #124]	; (20001690 <initSprites+0x130>)
20001612:	68ba      	ldr	r2, [r7, #8]
20001614:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempWitch3Black;
20001616:	4b1f      	ldr	r3, [pc, #124]	; (20001694 <initSprites+0x134>)
20001618:	607b      	str	r3, [r7, #4]
	load_sprite(pointer18, witch3_black_bits, witch3_black_width, witch3_black_height);
2000161a:	491f      	ldr	r1, [pc, #124]	; (20001698 <initSprites+0x138>)
2000161c:	6878      	ldr	r0, [r7, #4]
2000161e:	2312      	movs	r3, #18
20001620:	2212      	movs	r2, #18
20001622:	f000 ffef 	bl	20002604 <load_sprite>
	witch3Black = pointer18;	
20001626:	4b1d      	ldr	r3, [pc, #116]	; (2000169c <initSprites+0x13c>)
20001628:	687a      	ldr	r2, [r7, #4]
2000162a:	601a      	str	r2, [r3, #0]
	
}
2000162c:	46c0      	nop			; (mov r8, r8)
2000162e:	46bd      	mov	sp, r7
20001630:	b00a      	add	sp, #40	; 0x28
20001632:	bd80      	pop	{r7, pc}
20001634:	20003644 	andcs	r3, r0, r4, asr #12
20001638:	20007160 	andcs	r7, r0, r0, ror #2
2000163c:	2000365c 	andcs	r3, r0, ip, asr r6
20001640:	200035d4 	ldrdcs	r3, [r0], -r4
20001644:	20007128 	andcs	r7, r0, r8, lsr #2
20001648:	2000355c 	andcs	r3, r0, ip, asr r5
2000164c:	200035ac 	andcs	r3, r0, ip, lsr #11
20001650:	200070f0 	strdcs	r7, [r0], -r0
20001654:	20003630 	andcs	r3, r0, r0, lsr r6
20001658:	20003650 	andcs	r3, r0, r0, asr r6
2000165c:	20007208 	andcs	r7, r0, r8, lsl #4
20001660:	20003560 	andcs	r3, r0, r0, ror #10
20001664:	200035ec 	andcs	r3, r0, ip, ror #11
20001668:	200071d0 	ldrdcs	r7, [r0], -r0
2000166c:	200035d0 	ldrdcs	r3, [r0], -r0
20001670:	200035a0 	andcs	r3, r0, r0, lsr #11
20001674:	20007198 	mulcs	r0, r8, r1
20001678:	2000366c 	andcs	r3, r0, ip, ror #12
2000167c:	200035b8 			; <UNDEFINED> instruction: 0x200035b8
20001680:	200072b0 			; <UNDEFINED> instruction: 0x200072b0
20001684:	20003620 	andcs	r3, r0, r0, lsr #12
20001688:	20003624 	andcs	r3, r0, r4, lsr #12
2000168c:	20007278 	andcs	r7, r0, r8, ror r2
20001690:	20003634 	andcs	r3, r0, r4, lsr r6
20001694:	200035e0 	andcs	r3, r0, r0, ror #11
20001698:	20007240 	andcs	r7, r0, r0, asr #4
2000169c:	200035f8 	strdcs	r3, [r0], -r8

200016a0 <init_witch>:
	
void init_witch( GameObject *witchObj ) {
200016a0:	b590      	push	{r4, r7, lr}
200016a2:	b083      	sub	sp, #12
200016a4:	af00      	add	r7, sp, #0
200016a6:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
200016a8:	4b29      	ldr	r3, [pc, #164]	; (20001750 <init_witch+0xb0>)
200016aa:	681b      	ldr	r3, [r3, #0]
200016ac:	2b00      	cmp	r3, #0
200016ae:	d03b      	beq.n	20001728 <init_witch+0x88>
		initSprites();
200016b0:	f7ff ff56 	bl	20001560 <initSprites>
		firstTime = 0;			
200016b4:	4b26      	ldr	r3, [pc, #152]	; (20001750 <init_witch+0xb0>)
200016b6:	2200      	movs	r2, #0
200016b8:	601a      	str	r2, [r3, #0]

		witchImages[0] = witch1Image;
200016ba:	4b26      	ldr	r3, [pc, #152]	; (20001754 <init_witch+0xb4>)
200016bc:	4a26      	ldr	r2, [pc, #152]	; (20001758 <init_witch+0xb8>)
200016be:	ca13      	ldmia	r2!, {r0, r1, r4}
200016c0:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[1] = witch2Image;
200016c2:	4b24      	ldr	r3, [pc, #144]	; (20001754 <init_witch+0xb4>)
200016c4:	4a25      	ldr	r2, [pc, #148]	; (2000175c <init_witch+0xbc>)
200016c6:	330c      	adds	r3, #12
200016c8:	ca13      	ldmia	r2!, {r0, r1, r4}
200016ca:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[2] = witch3Image;
200016cc:	4b21      	ldr	r3, [pc, #132]	; (20001754 <init_witch+0xb4>)
200016ce:	4a24      	ldr	r2, [pc, #144]	; (20001760 <init_witch+0xc0>)
200016d0:	3318      	adds	r3, #24
200016d2:	ca13      	ldmia	r2!, {r0, r1, r4}
200016d4:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[3] = witch4Image;
200016d6:	4b1f      	ldr	r3, [pc, #124]	; (20001754 <init_witch+0xb4>)
200016d8:	4a22      	ldr	r2, [pc, #136]	; (20001764 <init_witch+0xc4>)
200016da:	3324      	adds	r3, #36	; 0x24
200016dc:	ca13      	ldmia	r2!, {r0, r1, r4}
200016de:	c313      	stmia	r3!, {r0, r1, r4}
		
		
		load_image(&witchImages[0], witch1Black, witch1Gray, witch1Light);
200016e0:	4b21      	ldr	r3, [pc, #132]	; (20001768 <init_witch+0xc8>)
200016e2:	6819      	ldr	r1, [r3, #0]
200016e4:	4b21      	ldr	r3, [pc, #132]	; (2000176c <init_witch+0xcc>)
200016e6:	681a      	ldr	r2, [r3, #0]
200016e8:	4b21      	ldr	r3, [pc, #132]	; (20001770 <init_witch+0xd0>)
200016ea:	681b      	ldr	r3, [r3, #0]
200016ec:	4819      	ldr	r0, [pc, #100]	; (20001754 <init_witch+0xb4>)
200016ee:	f000 ff75 	bl	200025dc <load_image>
		load_image(&witchImages[1], witch2Black, witch2Gray, witch2Light);
200016f2:	4b20      	ldr	r3, [pc, #128]	; (20001774 <init_witch+0xd4>)
200016f4:	6819      	ldr	r1, [r3, #0]
200016f6:	4b20      	ldr	r3, [pc, #128]	; (20001778 <init_witch+0xd8>)
200016f8:	681a      	ldr	r2, [r3, #0]
200016fa:	4b20      	ldr	r3, [pc, #128]	; (2000177c <init_witch+0xdc>)
200016fc:	681b      	ldr	r3, [r3, #0]
200016fe:	4820      	ldr	r0, [pc, #128]	; (20001780 <init_witch+0xe0>)
20001700:	f000 ff6c 	bl	200025dc <load_image>
		load_image(&witchImages[2], witch3Black, witch3Gray, witch3Light);
20001704:	4b1f      	ldr	r3, [pc, #124]	; (20001784 <init_witch+0xe4>)
20001706:	6819      	ldr	r1, [r3, #0]
20001708:	4b1f      	ldr	r3, [pc, #124]	; (20001788 <init_witch+0xe8>)
2000170a:	681a      	ldr	r2, [r3, #0]
2000170c:	4b1f      	ldr	r3, [pc, #124]	; (2000178c <init_witch+0xec>)
2000170e:	681b      	ldr	r3, [r3, #0]
20001710:	481f      	ldr	r0, [pc, #124]	; (20001790 <init_witch+0xf0>)
20001712:	f000 ff63 	bl	200025dc <load_image>
		load_image(&witchImages[3], witch2Black, witch2Gray, witch2Light);
20001716:	4b17      	ldr	r3, [pc, #92]	; (20001774 <init_witch+0xd4>)
20001718:	6819      	ldr	r1, [r3, #0]
2000171a:	4b17      	ldr	r3, [pc, #92]	; (20001778 <init_witch+0xd8>)
2000171c:	681a      	ldr	r2, [r3, #0]
2000171e:	4b17      	ldr	r3, [pc, #92]	; (2000177c <init_witch+0xdc>)
20001720:	681b      	ldr	r3, [r3, #0]
20001722:	481c      	ldr	r0, [pc, #112]	; (20001794 <init_witch+0xf4>)
20001724:	f000 ff5a 	bl	200025dc <load_image>
		
	}
	
	witchObj->images = witchImages;
20001728:	687b      	ldr	r3, [r7, #4]
2000172a:	4a0a      	ldr	r2, [pc, #40]	; (20001754 <init_witch+0xb4>)
2000172c:	601a      	str	r2, [r3, #0]

	witchObj->current_frame = 0;
2000172e:	687b      	ldr	r3, [r7, #4]
20001730:	2200      	movs	r2, #0
20001732:	615a      	str	r2, [r3, #20]
	witchObj->n_frames = 4;
20001734:	687b      	ldr	r3, [r7, #4]
20001736:	2204      	movs	r2, #4
20001738:	619a      	str	r2, [r3, #24]
	witchObj->animation_speed = 1;
2000173a:	687b      	ldr	r3, [r7, #4]
2000173c:	2201      	movs	r2, #1
2000173e:	61da      	str	r2, [r3, #28]
	witchObj->animation_counter = 0;
20001740:	687b      	ldr	r3, [r7, #4]
20001742:	2200      	movs	r2, #0
20001744:	621a      	str	r2, [r3, #32]
}
20001746:	46c0      	nop			; (mov r8, r8)
20001748:	46bd      	mov	sp, r7
2000174a:	b003      	add	sp, #12
2000174c:	bd90      	pop	{r4, r7, pc}
2000174e:	46c0      	nop			; (mov r8, r8)
20001750:	200072e8 	andcs	r7, r0, r8, ror #5
20001754:	20003564 	andcs	r3, r0, r4, ror #10
20001758:	20003638 	andcs	r3, r0, r8, lsr r6
2000175c:	20003594 	mulcs	r0, r4, r5
20001760:	20003660 	andcs	r3, r0, r0, ror #12
20001764:	200035c4 	andcs	r3, r0, r4, asr #11
20001768:	20003630 	andcs	r3, r0, r0, lsr r6
2000176c:	2000355c 	andcs	r3, r0, ip, asr r5
20001770:	2000365c 	andcs	r3, r0, ip, asr r6
20001774:	2000366c 	andcs	r3, r0, ip, ror #12
20001778:	200035d0 	ldrdcs	r3, [r0], -r0
2000177c:	20003560 	andcs	r3, r0, r0, ror #10
20001780:	20003570 	andcs	r3, r0, r0, ror r5
20001784:	200035f8 	strdcs	r3, [r0], -r8
20001788:	20003634 	andcs	r3, r0, r4, lsr r6
2000178c:	20003620 	andcs	r3, r0, r0, lsr #12
20001790:	2000357c 	andcs	r3, r0, ip, ror r5
20001794:	20003588 	andcs	r3, r0, r8, lsl #11

20001798 <delay_250ns>:
#include "graphics.h"


void delay_250ns(void){
20001798:	b580      	push	{r7, lr}
2000179a:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
2000179c:	4b0c      	ldr	r3, [pc, #48]	; (200017d0 <delay_250ns+0x38>)
2000179e:	2200      	movs	r2, #0
200017a0:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1);
200017a2:	4b0c      	ldr	r3, [pc, #48]	; (200017d4 <delay_250ns+0x3c>)
200017a4:	2229      	movs	r2, #41	; 0x29
200017a6:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200017a8:	4b0b      	ldr	r3, [pc, #44]	; (200017d8 <delay_250ns+0x40>)
200017aa:	2200      	movs	r2, #0
200017ac:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200017ae:	4b08      	ldr	r3, [pc, #32]	; (200017d0 <delay_250ns+0x38>)
200017b0:	2205      	movs	r2, #5
200017b2:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
200017b4:	46c0      	nop			; (mov r8, r8)
200017b6:	4b06      	ldr	r3, [pc, #24]	; (200017d0 <delay_250ns+0x38>)
200017b8:	681a      	ldr	r2, [r3, #0]
200017ba:	2380      	movs	r3, #128	; 0x80
200017bc:	025b      	lsls	r3, r3, #9
200017be:	4013      	ands	r3, r2
200017c0:	d0f9      	beq.n	200017b6 <delay_250ns+0x1e>
	*STK_CTRL = 0;
200017c2:	4b03      	ldr	r3, [pc, #12]	; (200017d0 <delay_250ns+0x38>)
200017c4:	2200      	movs	r2, #0
200017c6:	601a      	str	r2, [r3, #0]
}
200017c8:	46c0      	nop			; (mov r8, r8)
200017ca:	46bd      	mov	sp, r7
200017cc:	bd80      	pop	{r7, pc}
200017ce:	46c0      	nop			; (mov r8, r8)
200017d0:	e000e010 	and	lr, r0, r0, lsl r0
200017d4:	e000e014 	and	lr, r0, r4, lsl r0
200017d8:	e000e018 	and	lr, r0, r8, lsl r0

200017dc <delay_500ns>:

void delay_500ns(void){
200017dc:	b580      	push	{r7, lr}
200017de:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
200017e0:	4b0c      	ldr	r3, [pc, #48]	; (20001814 <delay_500ns+0x38>)
200017e2:	2200      	movs	r2, #0
200017e4:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/2) -1);
200017e6:	4b0c      	ldr	r3, [pc, #48]	; (20001818 <delay_500ns+0x3c>)
200017e8:	2253      	movs	r2, #83	; 0x53
200017ea:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200017ec:	4b0b      	ldr	r3, [pc, #44]	; (2000181c <delay_500ns+0x40>)
200017ee:	2200      	movs	r2, #0
200017f0:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200017f2:	4b08      	ldr	r3, [pc, #32]	; (20001814 <delay_500ns+0x38>)
200017f4:	2205      	movs	r2, #5
200017f6:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
200017f8:	46c0      	nop			; (mov r8, r8)
200017fa:	4b06      	ldr	r3, [pc, #24]	; (20001814 <delay_500ns+0x38>)
200017fc:	681a      	ldr	r2, [r3, #0]
200017fe:	2380      	movs	r3, #128	; 0x80
20001800:	025b      	lsls	r3, r3, #9
20001802:	4013      	ands	r3, r2
20001804:	d0f9      	beq.n	200017fa <delay_500ns+0x1e>
	*STK_CTRL = 0;
20001806:	4b03      	ldr	r3, [pc, #12]	; (20001814 <delay_500ns+0x38>)
20001808:	2200      	movs	r2, #0
2000180a:	601a      	str	r2, [r3, #0]
}
2000180c:	46c0      	nop			; (mov r8, r8)
2000180e:	46bd      	mov	sp, r7
20001810:	bd80      	pop	{r7, pc}
20001812:	46c0      	nop			; (mov r8, r8)
20001814:	e000e010 	and	lr, r0, r0, lsl r0
20001818:	e000e014 	and	lr, r0, r4, lsl r0
2000181c:	e000e018 	and	lr, r0, r8, lsl r0

20001820 <delay_micro>:

void delay_micro(unsigned int us){
20001820:	b580      	push	{r7, lr}
20001822:	b082      	sub	sp, #8
20001824:	af00      	add	r7, sp, #0
20001826:	6078      	str	r0, [r7, #4]
	while(us--) {
20001828:	e007      	b.n	2000183a <delay_micro+0x1a>
		delay_250ns();
2000182a:	f7ff ffb5 	bl	20001798 <delay_250ns>
		delay_250ns();
2000182e:	f7ff ffb3 	bl	20001798 <delay_250ns>
		delay_250ns();
20001832:	f7ff ffb1 	bl	20001798 <delay_250ns>
		delay_250ns();
20001836:	f7ff ffaf 	bl	20001798 <delay_250ns>
	while(us--) {
2000183a:	687b      	ldr	r3, [r7, #4]
2000183c:	1e5a      	subs	r2, r3, #1
2000183e:	607a      	str	r2, [r7, #4]
20001840:	2b00      	cmp	r3, #0
20001842:	d1f2      	bne.n	2000182a <delay_micro+0xa>
	}
}
20001844:	46c0      	nop			; (mov r8, r8)
20001846:	46bd      	mov	sp, r7
20001848:	b002      	add	sp, #8
2000184a:	bd80      	pop	{r7, pc}

2000184c <delay_milli>:

void delay_milli(unsigned int ms){
2000184c:	b580      	push	{r7, lr}
2000184e:	b082      	sub	sp, #8
20001850:	af00      	add	r7, sp, #0
20001852:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		while(ms--)
			delay_micro(1);
	#else
		while(ms--)
20001854:	e004      	b.n	20001860 <delay_milli+0x14>
			delay_micro(1000);
20001856:	23fa      	movs	r3, #250	; 0xfa
20001858:	009b      	lsls	r3, r3, #2
2000185a:	0018      	movs	r0, r3
2000185c:	f7ff ffe0 	bl	20001820 <delay_micro>
		while(ms--)
20001860:	687b      	ldr	r3, [r7, #4]
20001862:	1e5a      	subs	r2, r3, #1
20001864:	607a      	str	r2, [r7, #4]
20001866:	2b00      	cmp	r3, #0
20001868:	d1f5      	bne.n	20001856 <delay_milli+0xa>
	#endif
}
2000186a:	46c0      	nop			; (mov r8, r8)
2000186c:	46bd      	mov	sp, r7
2000186e:	b002      	add	sp, #8
20001870:	bd80      	pop	{r7, pc}

20001872 <clear_thisBackBuffer>:
uint8_t draw_buffer_black_light[1024]; // 128 * 64 / 8
uint8_t draw_buffer_black_gray_light[1024]; // 128 * 64 / 8
uint8_t backBuffer[1024]; // 128 * 64 / 8
uint8_t backBufferGray[1024]; // 128 * 64 / 8
uint8_t backBufferLight[1024]; // 128 * 64 / 8
void clear_thisBackBuffer(uint8_t *buffer) {
20001872:	b580      	push	{r7, lr}
20001874:	b084      	sub	sp, #16
20001876:	af00      	add	r7, sp, #0
20001878:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < 1024; i++)
2000187a:	2300      	movs	r3, #0
2000187c:	60fb      	str	r3, [r7, #12]
2000187e:	e007      	b.n	20001890 <clear_thisBackBuffer+0x1e>
		buffer[i] = 0;
20001880:	68fb      	ldr	r3, [r7, #12]
20001882:	687a      	ldr	r2, [r7, #4]
20001884:	18d3      	adds	r3, r2, r3
20001886:	2200      	movs	r2, #0
20001888:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
2000188a:	68fb      	ldr	r3, [r7, #12]
2000188c:	3301      	adds	r3, #1
2000188e:	60fb      	str	r3, [r7, #12]
20001890:	68fb      	ldr	r3, [r7, #12]
20001892:	4a03      	ldr	r2, [pc, #12]	; (200018a0 <clear_thisBackBuffer+0x2e>)
20001894:	4293      	cmp	r3, r2
20001896:	ddf3      	ble.n	20001880 <clear_thisBackBuffer+0xe>
}
20001898:	46c0      	nop			; (mov r8, r8)
2000189a:	46bd      	mov	sp, r7
2000189c:	b004      	add	sp, #16
2000189e:	bd80      	pop	{r7, pc}
200018a0:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200018a4 <clear_backBuffer>:
void clear_backBuffer() {
200018a4:	b580      	push	{r7, lr}
200018a6:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
200018a8:	4b03      	ldr	r3, [pc, #12]	; (200018b8 <clear_backBuffer+0x14>)
200018aa:	0018      	movs	r0, r3
200018ac:	f7ff ffe1 	bl	20001872 <clear_thisBackBuffer>
}
200018b0:	46c0      	nop			; (mov r8, r8)
200018b2:	46bd      	mov	sp, r7
200018b4:	bd80      	pop	{r7, pc}
200018b6:	46c0      	nop			; (mov r8, r8)
200018b8:	20003e70 	andcs	r3, r0, r0, ror lr

200018bc <clear_all_backBuffers>:
void clear_all_backBuffers() {
200018bc:	b580      	push	{r7, lr}
200018be:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
200018c0:	4b07      	ldr	r3, [pc, #28]	; (200018e0 <clear_all_backBuffers+0x24>)
200018c2:	0018      	movs	r0, r3
200018c4:	f7ff ffd5 	bl	20001872 <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferGray);
200018c8:	4b06      	ldr	r3, [pc, #24]	; (200018e4 <clear_all_backBuffers+0x28>)
200018ca:	0018      	movs	r0, r3
200018cc:	f7ff ffd1 	bl	20001872 <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferLight);
200018d0:	4b05      	ldr	r3, [pc, #20]	; (200018e8 <clear_all_backBuffers+0x2c>)
200018d2:	0018      	movs	r0, r3
200018d4:	f7ff ffcd 	bl	20001872 <clear_thisBackBuffer>
}
200018d8:	46c0      	nop			; (mov r8, r8)
200018da:	46bd      	mov	sp, r7
200018dc:	bd80      	pop	{r7, pc}
200018de:	46c0      	nop			; (mov r8, r8)
200018e0:	20003e70 	andcs	r3, r0, r0, ror lr
200018e4:	20003670 	andcs	r3, r0, r0, ror r6
200018e8:	20004e70 	andcs	r4, r0, r0, ror lr

200018ec <graphic_ctrl_bit_set>:

/* välj grafik-display och ettställ de bitar som är 1 i x */
static void graphic_ctrl_bit_set( uint8_t x) {
200018ec:	b580      	push	{r7, lr}
200018ee:	b084      	sub	sp, #16
200018f0:	af00      	add	r7, sp, #0
200018f2:	0002      	movs	r2, r0
200018f4:	1dfb      	adds	r3, r7, #7
200018f6:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
200018f8:	4a0f      	ldr	r2, [pc, #60]	; (20001938 <graphic_ctrl_bit_set+0x4c>)
200018fa:	230f      	movs	r3, #15
200018fc:	18fb      	adds	r3, r7, r3
200018fe:	7812      	ldrb	r2, [r2, #0]
20001900:	701a      	strb	r2, [r3, #0]
	c |= x;
20001902:	230f      	movs	r3, #15
20001904:	18fb      	adds	r3, r7, r3
20001906:	220f      	movs	r2, #15
20001908:	18b9      	adds	r1, r7, r2
2000190a:	1dfa      	adds	r2, r7, #7
2000190c:	7809      	ldrb	r1, [r1, #0]
2000190e:	7812      	ldrb	r2, [r2, #0]
20001910:	430a      	orrs	r2, r1
20001912:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
20001914:	230f      	movs	r3, #15
20001916:	18fb      	adds	r3, r7, r3
20001918:	220f      	movs	r2, #15
2000191a:	18ba      	adds	r2, r7, r2
2000191c:	7812      	ldrb	r2, [r2, #0]
2000191e:	2104      	movs	r1, #4
20001920:	438a      	bics	r2, r1
20001922:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20001924:	4a04      	ldr	r2, [pc, #16]	; (20001938 <graphic_ctrl_bit_set+0x4c>)
20001926:	230f      	movs	r3, #15
20001928:	18fb      	adds	r3, r7, r3
2000192a:	781b      	ldrb	r3, [r3, #0]
2000192c:	7013      	strb	r3, [r2, #0]
}
2000192e:	46c0      	nop			; (mov r8, r8)
20001930:	46bd      	mov	sp, r7
20001932:	b004      	add	sp, #16
20001934:	bd80      	pop	{r7, pc}
20001936:	46c0      	nop			; (mov r8, r8)
20001938:	40021014 	andmi	r1, r2, r4, lsl r0

2000193c <graphic_ctrl_bit_clear>:
/* välj grafik-display och nollställ de bitar som är 1 i x */
static void graphic_ctrl_bit_clear( uint8_t x) {
2000193c:	b580      	push	{r7, lr}
2000193e:	b084      	sub	sp, #16
20001940:	af00      	add	r7, sp, #0
20001942:	0002      	movs	r2, r0
20001944:	1dfb      	adds	r3, r7, #7
20001946:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20001948:	4a11      	ldr	r2, [pc, #68]	; (20001990 <graphic_ctrl_bit_clear+0x54>)
2000194a:	230f      	movs	r3, #15
2000194c:	18fb      	adds	r3, r7, r3
2000194e:	7812      	ldrb	r2, [r2, #0]
20001950:	701a      	strb	r2, [r3, #0]
	c &= ~x;
20001952:	1dfb      	adds	r3, r7, #7
20001954:	781b      	ldrb	r3, [r3, #0]
20001956:	b25b      	sxtb	r3, r3
20001958:	43db      	mvns	r3, r3
2000195a:	b25b      	sxtb	r3, r3
2000195c:	220f      	movs	r2, #15
2000195e:	18ba      	adds	r2, r7, r2
20001960:	7812      	ldrb	r2, [r2, #0]
20001962:	b252      	sxtb	r2, r2
20001964:	4013      	ands	r3, r2
20001966:	b25a      	sxtb	r2, r3
20001968:	230f      	movs	r3, #15
2000196a:	18fb      	adds	r3, r7, r3
2000196c:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
2000196e:	230f      	movs	r3, #15
20001970:	18fb      	adds	r3, r7, r3
20001972:	220f      	movs	r2, #15
20001974:	18ba      	adds	r2, r7, r2
20001976:	7812      	ldrb	r2, [r2, #0]
20001978:	2104      	movs	r1, #4
2000197a:	438a      	bics	r2, r1
2000197c:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
2000197e:	4a04      	ldr	r2, [pc, #16]	; (20001990 <graphic_ctrl_bit_clear+0x54>)
20001980:	230f      	movs	r3, #15
20001982:	18fb      	adds	r3, r7, r3
20001984:	781b      	ldrb	r3, [r3, #0]
20001986:	7013      	strb	r3, [r2, #0]
}
20001988:	46c0      	nop			; (mov r8, r8)
2000198a:	46bd      	mov	sp, r7
2000198c:	b004      	add	sp, #16
2000198e:	bd80      	pop	{r7, pc}
20001990:	40021014 	andmi	r1, r2, r4, lsl r0

20001994 <select_controller>:
void select_controller( uint8_t controller) {
20001994:	b580      	push	{r7, lr}
20001996:	b082      	sub	sp, #8
20001998:	af00      	add	r7, sp, #0
2000199a:	0002      	movs	r2, r0
2000199c:	1dfb      	adds	r3, r7, #7
2000199e:	701a      	strb	r2, [r3, #0]
	switch (controller) {
200019a0:	1dfb      	adds	r3, r7, #7
200019a2:	781b      	ldrb	r3, [r3, #0]
200019a4:	2b08      	cmp	r3, #8
200019a6:	d00f      	beq.n	200019c8 <select_controller+0x34>
200019a8:	dc02      	bgt.n	200019b0 <select_controller+0x1c>
200019aa:	2b00      	cmp	r3, #0
200019ac:	d005      	beq.n	200019ba <select_controller+0x26>
		case (B_CS1|B_CS2): 
			graphic_ctrl_bit_set(B_CS1); 
			graphic_ctrl_bit_set(B_CS2); 
			break;
	}
}
200019ae:	e020      	b.n	200019f2 <select_controller+0x5e>
	switch (controller) {
200019b0:	2b10      	cmp	r3, #16
200019b2:	d010      	beq.n	200019d6 <select_controller+0x42>
200019b4:	2b18      	cmp	r3, #24
200019b6:	d015      	beq.n	200019e4 <select_controller+0x50>
}
200019b8:	e01b      	b.n	200019f2 <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
200019ba:	2008      	movs	r0, #8
200019bc:	f7ff ffbe 	bl	2000193c <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_clear(B_CS2); 
200019c0:	2010      	movs	r0, #16
200019c2:	f7ff ffbb 	bl	2000193c <graphic_ctrl_bit_clear>
			break;
200019c6:	e014      	b.n	200019f2 <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
200019c8:	2008      	movs	r0, #8
200019ca:	f7ff ff8f 	bl	200018ec <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2); 
200019ce:	2010      	movs	r0, #16
200019d0:	f7ff ffb4 	bl	2000193c <graphic_ctrl_bit_clear>
			break;
200019d4:	e00d      	b.n	200019f2 <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
200019d6:	2008      	movs	r0, #8
200019d8:	f7ff ffb0 	bl	2000193c <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2); 
200019dc:	2010      	movs	r0, #16
200019de:	f7ff ff85 	bl	200018ec <graphic_ctrl_bit_set>
			break;
200019e2:	e006      	b.n	200019f2 <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
200019e4:	2008      	movs	r0, #8
200019e6:	f7ff ff81 	bl	200018ec <graphic_ctrl_bit_set>
			graphic_ctrl_bit_set(B_CS2); 
200019ea:	2010      	movs	r0, #16
200019ec:	f7ff ff7e 	bl	200018ec <graphic_ctrl_bit_set>
			break;
200019f0:	46c0      	nop			; (mov r8, r8)
}
200019f2:	46c0      	nop			; (mov r8, r8)
200019f4:	46bd      	mov	sp, r7
200019f6:	b002      	add	sp, #8
200019f8:	bd80      	pop	{r7, pc}

200019fa <graphic_wait_ready>:

void graphic_wait_ready( void ) {
200019fa:	b580      	push	{r7, lr}
200019fc:	b082      	sub	sp, #8
200019fe:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20001a00:	2040      	movs	r0, #64	; 0x40
20001a02:	f7ff ff9b 	bl	2000193c <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20001a06:	4b14      	ldr	r3, [pc, #80]	; (20001a58 <graphic_wait_ready+0x5e>)
20001a08:	4a14      	ldr	r2, [pc, #80]	; (20001a5c <graphic_wait_ready+0x62>)
20001a0a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20001a0c:	2001      	movs	r0, #1
20001a0e:	f7ff ff95 	bl	2000193c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20001a12:	2002      	movs	r0, #2
20001a14:	f7ff ff6a 	bl	200018ec <graphic_ctrl_bit_set>
	delay_500ns();
20001a18:	f7ff fee0 	bl	200017dc <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
20001a1c:	2040      	movs	r0, #64	; 0x40
20001a1e:	f7ff ff65 	bl	200018ec <graphic_ctrl_bit_set>
		delay_500ns();
20001a22:	f7ff fedb 	bl	200017dc <delay_500ns>
		c = *portIdrHigh & LCD_BUSY; //...
20001a26:	4b0e      	ldr	r3, [pc, #56]	; (20001a60 <graphic_wait_ready+0x66>)
20001a28:	781b      	ldrb	r3, [r3, #0]
20001a2a:	b2da      	uxtb	r2, r3
20001a2c:	1dfb      	adds	r3, r7, #7
20001a2e:	217f      	movs	r1, #127	; 0x7f
20001a30:	438a      	bics	r2, r1
20001a32:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20001a34:	2040      	movs	r0, #64	; 0x40
20001a36:	f7ff ff81 	bl	2000193c <graphic_ctrl_bit_clear>
		delay_500ns();
20001a3a:	f7ff fecf 	bl	200017dc <delay_500ns>
		/*if (*portIdrHigh & 0x80 == 0x80) {
			break; }*/
		if (c == 0) break;
20001a3e:	1dfb      	adds	r3, r7, #7
20001a40:	781b      	ldrb	r3, [r3, #0]
20001a42:	2b00      	cmp	r3, #0
20001a44:	d000      	beq.n	20001a48 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
20001a46:	e7e9      	b.n	20001a1c <graphic_wait_ready+0x22>
		if (c == 0) break;
20001a48:	46c0      	nop			; (mov r8, r8)
	}
	//graphic_ctrl_bit_set(B_E); //<--
	*portModer = 0x55555555;	
20001a4a:	4b03      	ldr	r3, [pc, #12]	; (20001a58 <graphic_wait_ready+0x5e>)
20001a4c:	4a05      	ldr	r2, [pc, #20]	; (20001a64 <graphic_wait_ready+0x6a>)
20001a4e:	601a      	str	r2, [r3, #0]
}
20001a50:	46c0      	nop			; (mov r8, r8)
20001a52:	46bd      	mov	sp, r7
20001a54:	b002      	add	sp, #8
20001a56:	bd80      	pop	{r7, pc}
20001a58:	40021000 	andmi	r1, r2, r0
20001a5c:	00005555 	andeq	r5, r0, r5, asr r5
20001a60:	40021011 	andmi	r1, r2, r1, lsl r0
20001a64:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20001a68 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20001a68:	b580      	push	{r7, lr}
20001a6a:	b084      	sub	sp, #16
20001a6c:	af00      	add	r7, sp, #0
20001a6e:	0002      	movs	r2, r0
20001a70:	1dfb      	adds	r3, r7, #7
20001a72:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001a74:	2040      	movs	r0, #64	; 0x40
20001a76:	f7ff ff61 	bl	2000193c <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20001a7a:	4b1c      	ldr	r3, [pc, #112]	; (20001aec <graphic_read+0x84>)
20001a7c:	4a1c      	ldr	r2, [pc, #112]	; (20001af0 <graphic_read+0x88>)
20001a7e:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
20001a80:	2001      	movs	r0, #1
20001a82:	f7ff ff33 	bl	200018ec <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW);
20001a86:	2002      	movs	r0, #2
20001a88:	f7ff ff30 	bl	200018ec <graphic_ctrl_bit_set>
	select_controller(controller);
20001a8c:	1dfb      	adds	r3, r7, #7
20001a8e:	781b      	ldrb	r3, [r3, #0]
20001a90:	0018      	movs	r0, r3
20001a92:	f7ff ff7f 	bl	20001994 <select_controller>
	delay_500ns();
20001a96:	f7ff fea1 	bl	200017dc <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20001a9a:	2040      	movs	r0, #64	; 0x40
20001a9c:	f7ff ff26 	bl	200018ec <graphic_ctrl_bit_set>
	delay_500ns();
20001aa0:	f7ff fe9c 	bl	200017dc <delay_500ns>
	unsigned char rv = *portIdrHigh;
20001aa4:	4a13      	ldr	r2, [pc, #76]	; (20001af4 <graphic_read+0x8c>)
20001aa6:	230f      	movs	r3, #15
20001aa8:	18fb      	adds	r3, r7, r3
20001aaa:	7812      	ldrb	r2, [r2, #0]
20001aac:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001aae:	2040      	movs	r0, #64	; 0x40
20001ab0:	f7ff ff44 	bl	2000193c <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
20001ab4:	4b0d      	ldr	r3, [pc, #52]	; (20001aec <graphic_read+0x84>)
20001ab6:	4a10      	ldr	r2, [pc, #64]	; (20001af8 <graphic_read+0x90>)
20001ab8:	601a      	str	r2, [r3, #0]
	
	if(controller == B_CS1) {
20001aba:	1dfb      	adds	r3, r7, #7
20001abc:	781b      	ldrb	r3, [r3, #0]
20001abe:	2b08      	cmp	r3, #8
20001ac0:	d104      	bne.n	20001acc <graphic_read+0x64>
		select_controller(B_CS1);
20001ac2:	2008      	movs	r0, #8
20001ac4:	f7ff ff66 	bl	20001994 <select_controller>
		graphic_wait_ready();
20001ac8:	f7ff ff97 	bl	200019fa <graphic_wait_ready>
	}
	if(controller == B_CS2) {
20001acc:	1dfb      	adds	r3, r7, #7
20001ace:	781b      	ldrb	r3, [r3, #0]
20001ad0:	2b10      	cmp	r3, #16
20001ad2:	d104      	bne.n	20001ade <graphic_read+0x76>
		select_controller(B_CS2);
20001ad4:	2010      	movs	r0, #16
20001ad6:	f7ff ff5d 	bl	20001994 <select_controller>
		graphic_wait_ready();
20001ada:	f7ff ff8e 	bl	200019fa <graphic_wait_ready>
	}
	
	return rv;
20001ade:	230f      	movs	r3, #15
20001ae0:	18fb      	adds	r3, r7, r3
20001ae2:	781b      	ldrb	r3, [r3, #0]
}
20001ae4:	0018      	movs	r0, r3
20001ae6:	46bd      	mov	sp, r7
20001ae8:	b004      	add	sp, #16
20001aea:	bd80      	pop	{r7, pc}
20001aec:	40021000 	andmi	r1, r2, r0
20001af0:	00005555 	andeq	r5, r0, r5, asr r5
20001af4:	40021011 	andmi	r1, r2, r1, lsl r0
20001af8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20001afc <graphic_read_data>:

graphic_read_data(uint8_t controller) {
20001afc:	b580      	push	{r7, lr}
20001afe:	b082      	sub	sp, #8
20001b00:	af00      	add	r7, sp, #0
20001b02:	0002      	movs	r2, r0
20001b04:	1dfb      	adds	r3, r7, #7
20001b06:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
20001b08:	1dfb      	adds	r3, r7, #7
20001b0a:	781b      	ldrb	r3, [r3, #0]
20001b0c:	0018      	movs	r0, r3
20001b0e:	f7ff ffab 	bl	20001a68 <graphic_read>
	graphic_read(controller);
20001b12:	1dfb      	adds	r3, r7, #7
20001b14:	781b      	ldrb	r3, [r3, #0]
20001b16:	0018      	movs	r0, r3
20001b18:	f7ff ffa6 	bl	20001a68 <graphic_read>
}
20001b1c:	46c0      	nop			; (mov r8, r8)
20001b1e:	0018      	movs	r0, r3
20001b20:	46bd      	mov	sp, r7
20001b22:	b002      	add	sp, #8
20001b24:	bd80      	pop	{r7, pc}

20001b26 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
20001b26:	b580      	push	{r7, lr}
20001b28:	b082      	sub	sp, #8
20001b2a:	af00      	add	r7, sp, #0
20001b2c:	0002      	movs	r2, r0
20001b2e:	1dfb      	adds	r3, r7, #7
20001b30:	701a      	strb	r2, [r3, #0]
20001b32:	1dbb      	adds	r3, r7, #6
20001b34:	1c0a      	adds	r2, r1, #0
20001b36:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value; //I
20001b38:	4a19      	ldr	r2, [pc, #100]	; (20001ba0 <graphic_write+0x7a>)
20001b3a:	1dfb      	adds	r3, r7, #7
20001b3c:	781b      	ldrb	r3, [r3, #0]
20001b3e:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20001b40:	1dbb      	adds	r3, r7, #6
20001b42:	781b      	ldrb	r3, [r3, #0]
20001b44:	0018      	movs	r0, r3
20001b46:	f7ff ff25 	bl	20001994 <select_controller>
	delay_500ns();
20001b4a:	f7ff fe47 	bl	200017dc <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20001b4e:	2040      	movs	r0, #64	; 0x40
20001b50:	f7ff fecc 	bl	200018ec <graphic_ctrl_bit_set>
	delay_500ns();
20001b54:	f7ff fe42 	bl	200017dc <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20001b58:	2040      	movs	r0, #64	; 0x40
20001b5a:	f7ff feef 	bl	2000193c <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
20001b5e:	1dbb      	adds	r3, r7, #6
20001b60:	781b      	ldrb	r3, [r3, #0]
20001b62:	2208      	movs	r2, #8
20001b64:	4013      	ands	r3, r2
20001b66:	d004      	beq.n	20001b72 <graphic_write+0x4c>
		select_controller(B_CS1);
20001b68:	2008      	movs	r0, #8
20001b6a:	f7ff ff13 	bl	20001994 <select_controller>
		graphic_wait_ready();
20001b6e:	f7ff ff44 	bl	200019fa <graphic_wait_ready>
	}
	if(controller & B_CS2) {
20001b72:	1dbb      	adds	r3, r7, #6
20001b74:	781b      	ldrb	r3, [r3, #0]
20001b76:	2210      	movs	r2, #16
20001b78:	4013      	ands	r3, r2
20001b7a:	d004      	beq.n	20001b86 <graphic_write+0x60>
		select_controller(B_CS2);
20001b7c:	2010      	movs	r0, #16
20001b7e:	f7ff ff09 	bl	20001994 <select_controller>
		graphic_wait_ready();
20001b82:	f7ff ff3a 	bl	200019fa <graphic_wait_ready>
	}
	
	*portOdrHigh = 0;	//I
20001b86:	4b06      	ldr	r3, [pc, #24]	; (20001ba0 <graphic_write+0x7a>)
20001b88:	2200      	movs	r2, #0
20001b8a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20001b8c:	2040      	movs	r0, #64	; 0x40
20001b8e:	f7ff fead 	bl	200018ec <graphic_ctrl_bit_set>
	select_controller(0);
20001b92:	2000      	movs	r0, #0
20001b94:	f7ff fefe 	bl	20001994 <select_controller>
}
20001b98:	46c0      	nop			; (mov r8, r8)
20001b9a:	46bd      	mov	sp, r7
20001b9c:	b002      	add	sp, #8
20001b9e:	bd80      	pop	{r7, pc}
20001ba0:	40021015 	andmi	r1, r2, r5, lsl r0

20001ba4 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller) {
20001ba4:	b580      	push	{r7, lr}
20001ba6:	b082      	sub	sp, #8
20001ba8:	af00      	add	r7, sp, #0
20001baa:	0002      	movs	r2, r0
20001bac:	1dfb      	adds	r3, r7, #7
20001bae:	701a      	strb	r2, [r3, #0]
20001bb0:	1dbb      	adds	r3, r7, #6
20001bb2:	1c0a      	adds	r2, r1, #0
20001bb4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001bb6:	2040      	movs	r0, #64	; 0x40
20001bb8:	f7ff fec0 	bl	2000193c <graphic_ctrl_bit_clear>
	select_controller(controller);
20001bbc:	1dbb      	adds	r3, r7, #6
20001bbe:	781b      	ldrb	r3, [r3, #0]
20001bc0:	0018      	movs	r0, r3
20001bc2:	f7ff fee7 	bl	20001994 <select_controller>
	graphic_ctrl_bit_clear(B_RS);
20001bc6:	2001      	movs	r0, #1
20001bc8:	f7ff feb8 	bl	2000193c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
20001bcc:	2002      	movs	r0, #2
20001bce:	f7ff feb5 	bl	2000193c <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20001bd2:	1dbb      	adds	r3, r7, #6
20001bd4:	781a      	ldrb	r2, [r3, #0]
20001bd6:	1dfb      	adds	r3, r7, #7
20001bd8:	781b      	ldrb	r3, [r3, #0]
20001bda:	0011      	movs	r1, r2
20001bdc:	0018      	movs	r0, r3
20001bde:	f7ff ffa2 	bl	20001b26 <graphic_write>
}
20001be2:	46c0      	nop			; (mov r8, r8)
20001be4:	46bd      	mov	sp, r7
20001be6:	b002      	add	sp, #8
20001be8:	bd80      	pop	{r7, pc}

20001bea <graphic_write_data>:
void graphic_write_data(uint8_t command, uint8_t controller) {
20001bea:	b580      	push	{r7, lr}
20001bec:	b082      	sub	sp, #8
20001bee:	af00      	add	r7, sp, #0
20001bf0:	0002      	movs	r2, r0
20001bf2:	1dfb      	adds	r3, r7, #7
20001bf4:	701a      	strb	r2, [r3, #0]
20001bf6:	1dbb      	adds	r3, r7, #6
20001bf8:	1c0a      	adds	r2, r1, #0
20001bfa:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001bfc:	2040      	movs	r0, #64	; 0x40
20001bfe:	f7ff fe9d 	bl	2000193c <graphic_ctrl_bit_clear>
	select_controller(controller);
20001c02:	1dbb      	adds	r3, r7, #6
20001c04:	781b      	ldrb	r3, [r3, #0]
20001c06:	0018      	movs	r0, r3
20001c08:	f7ff fec4 	bl	20001994 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20001c0c:	2001      	movs	r0, #1
20001c0e:	f7ff fe6d 	bl	200018ec <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20001c12:	2002      	movs	r0, #2
20001c14:	f7ff fe92 	bl	2000193c <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20001c18:	1dbb      	adds	r3, r7, #6
20001c1a:	781a      	ldrb	r2, [r3, #0]
20001c1c:	1dfb      	adds	r3, r7, #7
20001c1e:	781b      	ldrb	r3, [r3, #0]
20001c20:	0011      	movs	r1, r2
20001c22:	0018      	movs	r0, r3
20001c24:	f7ff ff7f 	bl	20001b26 <graphic_write>
}
20001c28:	46c0      	nop			; (mov r8, r8)
20001c2a:	46bd      	mov	sp, r7
20001c2c:	b002      	add	sp, #8
20001c2e:	bd80      	pop	{r7, pc}

20001c30 <graphic_initialize>:

void graphic_initialize( void ) {
20001c30:	b580      	push	{r7, lr}
20001c32:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20001c34:	2040      	movs	r0, #64	; 0x40
20001c36:	f7ff fe59 	bl	200018ec <graphic_ctrl_bit_set>
	delay_micro(10);
20001c3a:	200a      	movs	r0, #10
20001c3c:	f7ff fdf0 	bl	20001820 <delay_micro>
	
	graphic_ctrl_bit_clear(B_CS1);
20001c40:	2008      	movs	r0, #8
20001c42:	f7ff fe7b 	bl	2000193c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
20001c46:	2010      	movs	r0, #16
20001c48:	f7ff fe78 	bl	2000193c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
20001c4c:	2020      	movs	r0, #32
20001c4e:	f7ff fe75 	bl	2000193c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
20001c52:	2040      	movs	r0, #64	; 0x40
20001c54:	f7ff fe72 	bl	2000193c <graphic_ctrl_bit_clear>
	//#define SIMULATOR
	delay_milli(30);
20001c58:	201e      	movs	r0, #30
20001c5a:	f7ff fdf7 	bl	2000184c <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20001c5e:	2020      	movs	r0, #32
20001c60:	f7ff fe44 	bl	200018ec <graphic_ctrl_bit_set>
	delay_milli(100); //...
20001c64:	2064      	movs	r0, #100	; 0x64
20001c66:	f7ff fdf1 	bl	2000184c <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20001c6a:	2118      	movs	r1, #24
20001c6c:	203e      	movs	r0, #62	; 0x3e
20001c6e:	f7ff ff99 	bl	20001ba4 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
20001c72:	2118      	movs	r1, #24
20001c74:	203f      	movs	r0, #63	; 0x3f
20001c76:	f7ff ff95 	bl	20001ba4 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20001c7a:	2118      	movs	r1, #24
20001c7c:	20c0      	movs	r0, #192	; 0xc0
20001c7e:	f7ff ff91 	bl	20001ba4 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20001c82:	2118      	movs	r1, #24
20001c84:	2040      	movs	r0, #64	; 0x40
20001c86:	f7ff ff8d 	bl	20001ba4 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20001c8a:	2118      	movs	r1, #24
20001c8c:	20b8      	movs	r0, #184	; 0xb8
20001c8e:	f7ff ff89 	bl	20001ba4 <graphic_write_command>
	select_controller(0);
20001c92:	2000      	movs	r0, #0
20001c94:	f7ff fe7e 	bl	20001994 <select_controller>
}
20001c98:	46c0      	nop			; (mov r8, r8)
20001c9a:	46bd      	mov	sp, r7
20001c9c:	bd80      	pop	{r7, pc}

20001c9e <graphic_clear_screen>:
void graphic_clear_screen( void ) {	//Annat i slidesen
20001c9e:	b580      	push	{r7, lr}
20001ca0:	b082      	sub	sp, #8
20001ca2:	af00      	add	r7, sp, #0
	uint8_t page;
	for (page = 0; page < 8; page++) {
20001ca4:	1dfb      	adds	r3, r7, #7
20001ca6:	2200      	movs	r2, #0
20001ca8:	701a      	strb	r2, [r3, #0]
20001caa:	e023      	b.n	20001cf4 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20001cac:	1dfb      	adds	r3, r7, #7
20001cae:	781b      	ldrb	r3, [r3, #0]
20001cb0:	2248      	movs	r2, #72	; 0x48
20001cb2:	4252      	negs	r2, r2
20001cb4:	4313      	orrs	r3, r2
20001cb6:	b2db      	uxtb	r3, r3
20001cb8:	2118      	movs	r1, #24
20001cba:	0018      	movs	r0, r3
20001cbc:	f7ff ff72 	bl	20001ba4 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20001cc0:	2118      	movs	r1, #24
20001cc2:	2040      	movs	r0, #64	; 0x40
20001cc4:	f7ff ff6e 	bl	20001ba4 <graphic_write_command>
		uint8_t add;
		for (add = 0; add < 64; add++) {
20001cc8:	1dbb      	adds	r3, r7, #6
20001cca:	2200      	movs	r2, #0
20001ccc:	701a      	strb	r2, [r3, #0]
20001cce:	e008      	b.n	20001ce2 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
20001cd0:	2118      	movs	r1, #24
20001cd2:	2000      	movs	r0, #0
20001cd4:	f7ff ff89 	bl	20001bea <graphic_write_data>
		for (add = 0; add < 64; add++) {
20001cd8:	1dbb      	adds	r3, r7, #6
20001cda:	781a      	ldrb	r2, [r3, #0]
20001cdc:	1dbb      	adds	r3, r7, #6
20001cde:	3201      	adds	r2, #1
20001ce0:	701a      	strb	r2, [r3, #0]
20001ce2:	1dbb      	adds	r3, r7, #6
20001ce4:	781b      	ldrb	r3, [r3, #0]
20001ce6:	2b3f      	cmp	r3, #63	; 0x3f
20001ce8:	d9f2      	bls.n	20001cd0 <graphic_clear_screen+0x32>
	for (page = 0; page < 8; page++) {
20001cea:	1dfb      	adds	r3, r7, #7
20001cec:	781a      	ldrb	r2, [r3, #0]
20001cee:	1dfb      	adds	r3, r7, #7
20001cf0:	3201      	adds	r2, #1
20001cf2:	701a      	strb	r2, [r3, #0]
20001cf4:	1dfb      	adds	r3, r7, #7
20001cf6:	781b      	ldrb	r3, [r3, #0]
20001cf8:	2b07      	cmp	r3, #7
20001cfa:	d9d7      	bls.n	20001cac <graphic_clear_screen+0xe>
		}
	}
}
20001cfc:	46c0      	nop			; (mov r8, r8)
20001cfe:	46bd      	mov	sp, r7
20001d00:	b002      	add	sp, #8
20001d02:	bd80      	pop	{r7, pc}

20001d04 <pixel>:

/** Color: 1=light 2=gray 3=black*/
void pixel(int x, int y, int set, int color) {
20001d04:	b580      	push	{r7, lr}
20001d06:	b086      	sub	sp, #24
20001d08:	af00      	add	r7, sp, #0
20001d0a:	60f8      	str	r0, [r7, #12]
20001d0c:	60b9      	str	r1, [r7, #8]
20001d0e:	607a      	str	r2, [r7, #4]
20001d10:	603b      	str	r3, [r7, #0]
	uint8_t mask;
	int index = 0;
20001d12:	2300      	movs	r3, #0
20001d14:	613b      	str	r3, [r7, #16]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) 
20001d16:	68fb      	ldr	r3, [r7, #12]
20001d18:	2b80      	cmp	r3, #128	; 0x80
20001d1a:	dd00      	ble.n	20001d1e <pixel+0x1a>
20001d1c:	e0a6      	b.n	20001e6c <pixel+0x168>
20001d1e:	68fb      	ldr	r3, [r7, #12]
20001d20:	2b00      	cmp	r3, #0
20001d22:	dc00      	bgt.n	20001d26 <pixel+0x22>
20001d24:	e0a2      	b.n	20001e6c <pixel+0x168>
20001d26:	68bb      	ldr	r3, [r7, #8]
20001d28:	2b40      	cmp	r3, #64	; 0x40
20001d2a:	dd00      	ble.n	20001d2e <pixel+0x2a>
20001d2c:	e09e      	b.n	20001e6c <pixel+0x168>
20001d2e:	68bb      	ldr	r3, [r7, #8]
20001d30:	2b00      	cmp	r3, #0
20001d32:	dc00      	bgt.n	20001d36 <pixel+0x32>
20001d34:	e09a      	b.n	20001e6c <pixel+0x168>
		return;
	mask = 1 << ((y-1)%8);
20001d36:	68bb      	ldr	r3, [r7, #8]
20001d38:	3b01      	subs	r3, #1
20001d3a:	4a4e      	ldr	r2, [pc, #312]	; (20001e74 <pixel+0x170>)
20001d3c:	4013      	ands	r3, r2
20001d3e:	d504      	bpl.n	20001d4a <pixel+0x46>
20001d40:	3b01      	subs	r3, #1
20001d42:	2208      	movs	r2, #8
20001d44:	4252      	negs	r2, r2
20001d46:	4313      	orrs	r3, r2
20001d48:	3301      	adds	r3, #1
20001d4a:	001a      	movs	r2, r3
20001d4c:	2301      	movs	r3, #1
20001d4e:	4093      	lsls	r3, r2
20001d50:	001a      	movs	r2, r3
20001d52:	2317      	movs	r3, #23
20001d54:	18fb      	adds	r3, r7, r3
20001d56:	701a      	strb	r2, [r3, #0]
	if(x > 64) {
20001d58:	68fb      	ldr	r3, [r7, #12]
20001d5a:	2b40      	cmp	r3, #64	; 0x40
20001d5c:	dd05      	ble.n	20001d6a <pixel+0x66>
		x -= 65;
20001d5e:	68fb      	ldr	r3, [r7, #12]
20001d60:	3b41      	subs	r3, #65	; 0x41
20001d62:	60fb      	str	r3, [r7, #12]
		index = 512;
20001d64:	2380      	movs	r3, #128	; 0x80
20001d66:	009b      	lsls	r3, r3, #2
20001d68:	613b      	str	r3, [r7, #16]
	}
	index += x + ((y-1)/8)*64;
20001d6a:	68bb      	ldr	r3, [r7, #8]
20001d6c:	3b01      	subs	r3, #1
20001d6e:	2b00      	cmp	r3, #0
20001d70:	da00      	bge.n	20001d74 <pixel+0x70>
20001d72:	3307      	adds	r3, #7
20001d74:	10db      	asrs	r3, r3, #3
20001d76:	019a      	lsls	r2, r3, #6
20001d78:	68fb      	ldr	r3, [r7, #12]
20001d7a:	18d3      	adds	r3, r2, r3
20001d7c:	693a      	ldr	r2, [r7, #16]
20001d7e:	18d3      	adds	r3, r2, r3
20001d80:	613b      	str	r3, [r7, #16]

	if(set == 0)
20001d82:	687b      	ldr	r3, [r7, #4]
20001d84:	2b00      	cmp	r3, #0
20001d86:	d106      	bne.n	20001d96 <pixel+0x92>
		mask = ~mask;
20001d88:	2317      	movs	r3, #23
20001d8a:	18fb      	adds	r3, r7, r3
20001d8c:	2217      	movs	r2, #23
20001d8e:	18ba      	adds	r2, r7, r2
20001d90:	7812      	ldrb	r2, [r2, #0]
20001d92:	43d2      	mvns	r2, r2
20001d94:	701a      	strb	r2, [r3, #0]

	switch (color) {
20001d96:	683b      	ldr	r3, [r7, #0]
20001d98:	2b02      	cmp	r3, #2
20001d9a:	d024      	beq.n	20001de6 <pixel+0xe2>
20001d9c:	2b03      	cmp	r3, #3
20001d9e:	d043      	beq.n	20001e28 <pixel+0x124>
20001da0:	2b01      	cmp	r3, #1
20001da2:	d164      	bne.n	20001e6e <pixel+0x16a>
		case 1:	
			if(set)
20001da4:	687b      	ldr	r3, [r7, #4]
20001da6:	2b00      	cmp	r3, #0
20001da8:	d00e      	beq.n	20001dc8 <pixel+0xc4>
				backBufferLight[index] |= mask;
20001daa:	4a33      	ldr	r2, [pc, #204]	; (20001e78 <pixel+0x174>)
20001dac:	693b      	ldr	r3, [r7, #16]
20001dae:	18d3      	adds	r3, r2, r3
20001db0:	781a      	ldrb	r2, [r3, #0]
20001db2:	2317      	movs	r3, #23
20001db4:	18fb      	adds	r3, r7, r3
20001db6:	781b      	ldrb	r3, [r3, #0]
20001db8:	4313      	orrs	r3, r2
20001dba:	b2d9      	uxtb	r1, r3
20001dbc:	4a2e      	ldr	r2, [pc, #184]	; (20001e78 <pixel+0x174>)
20001dbe:	693b      	ldr	r3, [r7, #16]
20001dc0:	18d3      	adds	r3, r2, r3
20001dc2:	1c0a      	adds	r2, r1, #0
20001dc4:	701a      	strb	r2, [r3, #0]
			else
				backBufferLight[index] &= mask;
			break;
20001dc6:	e052      	b.n	20001e6e <pixel+0x16a>
				backBufferLight[index] &= mask;
20001dc8:	4a2b      	ldr	r2, [pc, #172]	; (20001e78 <pixel+0x174>)
20001dca:	693b      	ldr	r3, [r7, #16]
20001dcc:	18d3      	adds	r3, r2, r3
20001dce:	781b      	ldrb	r3, [r3, #0]
20001dd0:	2217      	movs	r2, #23
20001dd2:	18ba      	adds	r2, r7, r2
20001dd4:	7812      	ldrb	r2, [r2, #0]
20001dd6:	4013      	ands	r3, r2
20001dd8:	b2d9      	uxtb	r1, r3
20001dda:	4a27      	ldr	r2, [pc, #156]	; (20001e78 <pixel+0x174>)
20001ddc:	693b      	ldr	r3, [r7, #16]
20001dde:	18d3      	adds	r3, r2, r3
20001de0:	1c0a      	adds	r2, r1, #0
20001de2:	701a      	strb	r2, [r3, #0]
			break;
20001de4:	e043      	b.n	20001e6e <pixel+0x16a>
		
		case 2:	
			if(set)
20001de6:	687b      	ldr	r3, [r7, #4]
20001de8:	2b00      	cmp	r3, #0
20001dea:	d00e      	beq.n	20001e0a <pixel+0x106>
				backBufferGray[index] |= mask;
20001dec:	4a23      	ldr	r2, [pc, #140]	; (20001e7c <pixel+0x178>)
20001dee:	693b      	ldr	r3, [r7, #16]
20001df0:	18d3      	adds	r3, r2, r3
20001df2:	781a      	ldrb	r2, [r3, #0]
20001df4:	2317      	movs	r3, #23
20001df6:	18fb      	adds	r3, r7, r3
20001df8:	781b      	ldrb	r3, [r3, #0]
20001dfa:	4313      	orrs	r3, r2
20001dfc:	b2d9      	uxtb	r1, r3
20001dfe:	4a1f      	ldr	r2, [pc, #124]	; (20001e7c <pixel+0x178>)
20001e00:	693b      	ldr	r3, [r7, #16]
20001e02:	18d3      	adds	r3, r2, r3
20001e04:	1c0a      	adds	r2, r1, #0
20001e06:	701a      	strb	r2, [r3, #0]
			else
				backBufferGray[index] &= mask;
			break;
20001e08:	e031      	b.n	20001e6e <pixel+0x16a>
				backBufferGray[index] &= mask;
20001e0a:	4a1c      	ldr	r2, [pc, #112]	; (20001e7c <pixel+0x178>)
20001e0c:	693b      	ldr	r3, [r7, #16]
20001e0e:	18d3      	adds	r3, r2, r3
20001e10:	781b      	ldrb	r3, [r3, #0]
20001e12:	2217      	movs	r2, #23
20001e14:	18ba      	adds	r2, r7, r2
20001e16:	7812      	ldrb	r2, [r2, #0]
20001e18:	4013      	ands	r3, r2
20001e1a:	b2d9      	uxtb	r1, r3
20001e1c:	4a17      	ldr	r2, [pc, #92]	; (20001e7c <pixel+0x178>)
20001e1e:	693b      	ldr	r3, [r7, #16]
20001e20:	18d3      	adds	r3, r2, r3
20001e22:	1c0a      	adds	r2, r1, #0
20001e24:	701a      	strb	r2, [r3, #0]
			break;
20001e26:	e022      	b.n	20001e6e <pixel+0x16a>
		
		case 3:	
			if(set)
20001e28:	687b      	ldr	r3, [r7, #4]
20001e2a:	2b00      	cmp	r3, #0
20001e2c:	d00e      	beq.n	20001e4c <pixel+0x148>
				backBuffer[index] |= mask;
20001e2e:	4a14      	ldr	r2, [pc, #80]	; (20001e80 <pixel+0x17c>)
20001e30:	693b      	ldr	r3, [r7, #16]
20001e32:	18d3      	adds	r3, r2, r3
20001e34:	781a      	ldrb	r2, [r3, #0]
20001e36:	2317      	movs	r3, #23
20001e38:	18fb      	adds	r3, r7, r3
20001e3a:	781b      	ldrb	r3, [r3, #0]
20001e3c:	4313      	orrs	r3, r2
20001e3e:	b2d9      	uxtb	r1, r3
20001e40:	4a0f      	ldr	r2, [pc, #60]	; (20001e80 <pixel+0x17c>)
20001e42:	693b      	ldr	r3, [r7, #16]
20001e44:	18d3      	adds	r3, r2, r3
20001e46:	1c0a      	adds	r2, r1, #0
20001e48:	701a      	strb	r2, [r3, #0]
			else
				backBuffer[index] &= mask;
			break;
20001e4a:	e010      	b.n	20001e6e <pixel+0x16a>
				backBuffer[index] &= mask;
20001e4c:	4a0c      	ldr	r2, [pc, #48]	; (20001e80 <pixel+0x17c>)
20001e4e:	693b      	ldr	r3, [r7, #16]
20001e50:	18d3      	adds	r3, r2, r3
20001e52:	781b      	ldrb	r3, [r3, #0]
20001e54:	2217      	movs	r2, #23
20001e56:	18ba      	adds	r2, r7, r2
20001e58:	7812      	ldrb	r2, [r2, #0]
20001e5a:	4013      	ands	r3, r2
20001e5c:	b2d9      	uxtb	r1, r3
20001e5e:	4a08      	ldr	r2, [pc, #32]	; (20001e80 <pixel+0x17c>)
20001e60:	693b      	ldr	r3, [r7, #16]
20001e62:	18d3      	adds	r3, r2, r3
20001e64:	1c0a      	adds	r2, r1, #0
20001e66:	701a      	strb	r2, [r3, #0]
			break;
20001e68:	46c0      	nop			; (mov r8, r8)
20001e6a:	e000      	b.n	20001e6e <pixel+0x16a>
		return;
20001e6c:	46c0      	nop			; (mov r8, r8)
			
	}

}
20001e6e:	46bd      	mov	sp, r7
20001e70:	b006      	add	sp, #24
20001e72:	bd80      	pop	{r7, pc}
20001e74:	80000007 	andhi	r0, r0, r7
20001e78:	20004e70 	andcs	r4, r0, r0, ror lr
20001e7c:	20003670 	andcs	r3, r0, r0, ror r6
20001e80:	20003e70 	andcs	r3, r0, r0, ror lr

20001e84 <pixel2>:


void pixel2(int x, int y, int set) {
20001e84:	b580      	push	{r7, lr}
20001e86:	b088      	sub	sp, #32
20001e88:	af00      	add	r7, sp, #0
20001e8a:	60f8      	str	r0, [r7, #12]
20001e8c:	60b9      	str	r1, [r7, #8]
20001e8e:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20001e90:	68fb      	ldr	r3, [r7, #12]
20001e92:	2b00      	cmp	r3, #0
20001e94:	dc00      	bgt.n	20001e98 <pixel2+0x14>
20001e96:	e0bc      	b.n	20002012 <pixel2+0x18e>
20001e98:	68bb      	ldr	r3, [r7, #8]
20001e9a:	2b00      	cmp	r3, #0
20001e9c:	dc00      	bgt.n	20001ea0 <pixel2+0x1c>
20001e9e:	e0b8      	b.n	20002012 <pixel2+0x18e>
20001ea0:	68fb      	ldr	r3, [r7, #12]
20001ea2:	2b80      	cmp	r3, #128	; 0x80
20001ea4:	dd00      	ble.n	20001ea8 <pixel2+0x24>
20001ea6:	e0b4      	b.n	20002012 <pixel2+0x18e>
20001ea8:	68bb      	ldr	r3, [r7, #8]
20001eaa:	2b40      	cmp	r3, #64	; 0x40
20001eac:	dd00      	ble.n	20001eb0 <pixel2+0x2c>
20001eae:	e0b0      	b.n	20002012 <pixel2+0x18e>
	index = (y-1)/8;
20001eb0:	68bb      	ldr	r3, [r7, #8]
20001eb2:	3b01      	subs	r3, #1
20001eb4:	2b00      	cmp	r3, #0
20001eb6:	da00      	bge.n	20001eba <pixel2+0x36>
20001eb8:	3307      	adds	r3, #7
20001eba:	10db      	asrs	r3, r3, #3
20001ebc:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
20001ebe:	68bb      	ldr	r3, [r7, #8]
20001ec0:	3b01      	subs	r3, #1
20001ec2:	4a56      	ldr	r2, [pc, #344]	; (2000201c <pixel2+0x198>)
20001ec4:	4013      	ands	r3, r2
20001ec6:	d504      	bpl.n	20001ed2 <pixel2+0x4e>
20001ec8:	3b01      	subs	r3, #1
20001eca:	2208      	movs	r2, #8
20001ecc:	4252      	negs	r2, r2
20001ece:	4313      	orrs	r3, r2
20001ed0:	3301      	adds	r3, #1
20001ed2:	2b07      	cmp	r3, #7
20001ed4:	d82c      	bhi.n	20001f30 <pixel2+0xac>
20001ed6:	009a      	lsls	r2, r3, #2
20001ed8:	4b51      	ldr	r3, [pc, #324]	; (20002020 <pixel2+0x19c>)
20001eda:	18d3      	adds	r3, r2, r3
20001edc:	681b      	ldr	r3, [r3, #0]
20001ede:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20001ee0:	231f      	movs	r3, #31
20001ee2:	18fb      	adds	r3, r7, r3
20001ee4:	2201      	movs	r2, #1
20001ee6:	701a      	strb	r2, [r3, #0]
20001ee8:	e022      	b.n	20001f30 <pixel2+0xac>
		case 1: mask = 2; break;
20001eea:	231f      	movs	r3, #31
20001eec:	18fb      	adds	r3, r7, r3
20001eee:	2202      	movs	r2, #2
20001ef0:	701a      	strb	r2, [r3, #0]
20001ef2:	e01d      	b.n	20001f30 <pixel2+0xac>
		case 2: mask = 4; break;
20001ef4:	231f      	movs	r3, #31
20001ef6:	18fb      	adds	r3, r7, r3
20001ef8:	2204      	movs	r2, #4
20001efa:	701a      	strb	r2, [r3, #0]
20001efc:	e018      	b.n	20001f30 <pixel2+0xac>
		case 3: mask = 8; break;
20001efe:	231f      	movs	r3, #31
20001f00:	18fb      	adds	r3, r7, r3
20001f02:	2208      	movs	r2, #8
20001f04:	701a      	strb	r2, [r3, #0]
20001f06:	e013      	b.n	20001f30 <pixel2+0xac>
		case 4: mask = 0x10; break;
20001f08:	231f      	movs	r3, #31
20001f0a:	18fb      	adds	r3, r7, r3
20001f0c:	2210      	movs	r2, #16
20001f0e:	701a      	strb	r2, [r3, #0]
20001f10:	e00e      	b.n	20001f30 <pixel2+0xac>
		case 5: mask = 0x20; break;
20001f12:	231f      	movs	r3, #31
20001f14:	18fb      	adds	r3, r7, r3
20001f16:	2220      	movs	r2, #32
20001f18:	701a      	strb	r2, [r3, #0]
20001f1a:	e009      	b.n	20001f30 <pixel2+0xac>
		case 6: mask = 0x40; break;
20001f1c:	231f      	movs	r3, #31
20001f1e:	18fb      	adds	r3, r7, r3
20001f20:	2240      	movs	r2, #64	; 0x40
20001f22:	701a      	strb	r2, [r3, #0]
20001f24:	e004      	b.n	20001f30 <pixel2+0xac>
		case 7: mask = 0x80; break;
20001f26:	231f      	movs	r3, #31
20001f28:	18fb      	adds	r3, r7, r3
20001f2a:	2280      	movs	r2, #128	; 0x80
20001f2c:	701a      	strb	r2, [r3, #0]
20001f2e:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0)
20001f30:	687b      	ldr	r3, [r7, #4]
20001f32:	2b00      	cmp	r3, #0
20001f34:	d106      	bne.n	20001f44 <pixel2+0xc0>
		mask = ~mask;
20001f36:	231f      	movs	r3, #31
20001f38:	18fb      	adds	r3, r7, r3
20001f3a:	221f      	movs	r2, #31
20001f3c:	18ba      	adds	r2, r7, r2
20001f3e:	7812      	ldrb	r2, [r2, #0]
20001f40:	43d2      	mvns	r2, r2
20001f42:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
20001f44:	68fb      	ldr	r3, [r7, #12]
20001f46:	2b40      	cmp	r3, #64	; 0x40
20001f48:	dd07      	ble.n	20001f5a <pixel2+0xd6>
		controller = B_CS2;
20001f4a:	231e      	movs	r3, #30
20001f4c:	18fb      	adds	r3, r7, r3
20001f4e:	2210      	movs	r2, #16
20001f50:	701a      	strb	r2, [r3, #0]
		x = x - 65;
20001f52:	68fb      	ldr	r3, [r7, #12]
20001f54:	3b41      	subs	r3, #65	; 0x41
20001f56:	60fb      	str	r3, [r7, #12]
20001f58:	e006      	b.n	20001f68 <pixel2+0xe4>
	} else {
		controller = B_CS1;
20001f5a:	231e      	movs	r3, #30
20001f5c:	18fb      	adds	r3, r7, r3
20001f5e:	2208      	movs	r2, #8
20001f60:	701a      	strb	r2, [r3, #0]
		x = x-1;
20001f62:	68fb      	ldr	r3, [r7, #12]
20001f64:	3b01      	subs	r3, #1
20001f66:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller );
20001f68:	68fb      	ldr	r3, [r7, #12]
20001f6a:	b25b      	sxtb	r3, r3
20001f6c:	2240      	movs	r2, #64	; 0x40
20001f6e:	4313      	orrs	r3, r2
20001f70:	b25b      	sxtb	r3, r3
20001f72:	b2da      	uxtb	r2, r3
20001f74:	231e      	movs	r3, #30
20001f76:	18fb      	adds	r3, r7, r3
20001f78:	781b      	ldrb	r3, [r3, #0]
20001f7a:	0019      	movs	r1, r3
20001f7c:	0010      	movs	r0, r2
20001f7e:	f7ff fe11 	bl	20001ba4 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller );
20001f82:	69bb      	ldr	r3, [r7, #24]
20001f84:	b25b      	sxtb	r3, r3
20001f86:	2248      	movs	r2, #72	; 0x48
20001f88:	4252      	negs	r2, r2
20001f8a:	4313      	orrs	r3, r2
20001f8c:	b25b      	sxtb	r3, r3
20001f8e:	b2da      	uxtb	r2, r3
20001f90:	231e      	movs	r3, #30
20001f92:	18fb      	adds	r3, r7, r3
20001f94:	781b      	ldrb	r3, [r3, #0]
20001f96:	0019      	movs	r1, r3
20001f98:	0010      	movs	r0, r2
20001f9a:	f7ff fe03 	bl	20001ba4 <graphic_write_command>
	
	c = graphic_read_data(controller);
20001f9e:	231e      	movs	r3, #30
20001fa0:	18fb      	adds	r3, r7, r3
20001fa2:	781b      	ldrb	r3, [r3, #0]
20001fa4:	0018      	movs	r0, r3
20001fa6:	f7ff fda9 	bl	20001afc <graphic_read_data>
20001faa:	0002      	movs	r2, r0
20001fac:	2317      	movs	r3, #23
20001fae:	18fb      	adds	r3, r7, r3
20001fb0:	701a      	strb	r2, [r3, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20001fb2:	68fb      	ldr	r3, [r7, #12]
20001fb4:	b25b      	sxtb	r3, r3
20001fb6:	2240      	movs	r2, #64	; 0x40
20001fb8:	4313      	orrs	r3, r2
20001fba:	b25b      	sxtb	r3, r3
20001fbc:	b2da      	uxtb	r2, r3
20001fbe:	231e      	movs	r3, #30
20001fc0:	18fb      	adds	r3, r7, r3
20001fc2:	781b      	ldrb	r3, [r3, #0]
20001fc4:	0019      	movs	r1, r3
20001fc6:	0010      	movs	r0, r2
20001fc8:	f7ff fdec 	bl	20001ba4 <graphic_write_command>
	
	if(set)
20001fcc:	687b      	ldr	r3, [r7, #4]
20001fce:	2b00      	cmp	r3, #0
20001fd0:	d00a      	beq.n	20001fe8 <pixel2+0x164>
		mask = mask | c;
20001fd2:	231f      	movs	r3, #31
20001fd4:	18fb      	adds	r3, r7, r3
20001fd6:	221f      	movs	r2, #31
20001fd8:	18b9      	adds	r1, r7, r2
20001fda:	2217      	movs	r2, #23
20001fdc:	18ba      	adds	r2, r7, r2
20001fde:	7809      	ldrb	r1, [r1, #0]
20001fe0:	7812      	ldrb	r2, [r2, #0]
20001fe2:	430a      	orrs	r2, r1
20001fe4:	701a      	strb	r2, [r3, #0]
20001fe6:	e009      	b.n	20001ffc <pixel2+0x178>
	else
		mask = mask & c;
20001fe8:	231f      	movs	r3, #31
20001fea:	18fb      	adds	r3, r7, r3
20001fec:	221f      	movs	r2, #31
20001fee:	18ba      	adds	r2, r7, r2
20001ff0:	2117      	movs	r1, #23
20001ff2:	1879      	adds	r1, r7, r1
20001ff4:	7812      	ldrb	r2, [r2, #0]
20001ff6:	7809      	ldrb	r1, [r1, #0]
20001ff8:	400a      	ands	r2, r1
20001ffa:	701a      	strb	r2, [r3, #0]
	
	graphic_write_data(mask, controller);
20001ffc:	231e      	movs	r3, #30
20001ffe:	18fb      	adds	r3, r7, r3
20002000:	781a      	ldrb	r2, [r3, #0]
20002002:	231f      	movs	r3, #31
20002004:	18fb      	adds	r3, r7, r3
20002006:	781b      	ldrb	r3, [r3, #0]
20002008:	0011      	movs	r1, r2
2000200a:	0018      	movs	r0, r3
2000200c:	f7ff fded 	bl	20001bea <graphic_write_data>
20002010:	e000      	b.n	20002014 <pixel2+0x190>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20002012:	46c0      	nop			; (mov r8, r8)
}
20002014:	46bd      	mov	sp, r7
20002016:	b008      	add	sp, #32
20002018:	bd80      	pop	{r7, pc}
2000201a:	46c0      	nop			; (mov r8, r8)
2000201c:	80000007 	andhi	r0, r0, r7
20002020:	20008c74 	andcs	r8, r0, r4, ror ip

20002024 <graphic_draw_screen>:

void graphic_draw_screen(uint8_t *buffer) {
20002024:	b580      	push	{r7, lr}
20002026:	b086      	sub	sp, #24
20002028:	af00      	add	r7, sp, #0
2000202a:	6078      	str	r0, [r7, #4]
	uint8_t i, j, controller, c;
	unsigned int k = 0;
2000202c:	2300      	movs	r3, #0
2000202e:	613b      	str	r3, [r7, #16]
	for(c = 0; c < 2; c++) {
20002030:	2315      	movs	r3, #21
20002032:	18fb      	adds	r3, r7, r3
20002034:	2200      	movs	r2, #0
20002036:	701a      	strb	r2, [r3, #0]
20002038:	e056      	b.n	200020e8 <graphic_draw_screen+0xc4>
		controller = (c == 0) ? B_CS1 : B_CS2;
2000203a:	2315      	movs	r3, #21
2000203c:	18fb      	adds	r3, r7, r3
2000203e:	781b      	ldrb	r3, [r3, #0]
20002040:	2b00      	cmp	r3, #0
20002042:	d101      	bne.n	20002048 <graphic_draw_screen+0x24>
20002044:	2208      	movs	r2, #8
20002046:	e000      	b.n	2000204a <graphic_draw_screen+0x26>
20002048:	2210      	movs	r2, #16
2000204a:	230f      	movs	r3, #15
2000204c:	18fb      	adds	r3, r7, r3
2000204e:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
20002050:	2316      	movs	r3, #22
20002052:	18fb      	adds	r3, r7, r3
20002054:	2200      	movs	r2, #0
20002056:	701a      	strb	r2, [r3, #0]
20002058:	e03a      	b.n	200020d0 <graphic_draw_screen+0xac>
			graphic_write_command(LCD_SET_PAGE | j, controller);
2000205a:	2316      	movs	r3, #22
2000205c:	18fb      	adds	r3, r7, r3
2000205e:	781b      	ldrb	r3, [r3, #0]
20002060:	2248      	movs	r2, #72	; 0x48
20002062:	4252      	negs	r2, r2
20002064:	4313      	orrs	r3, r2
20002066:	b2da      	uxtb	r2, r3
20002068:	230f      	movs	r3, #15
2000206a:	18fb      	adds	r3, r7, r3
2000206c:	781b      	ldrb	r3, [r3, #0]
2000206e:	0019      	movs	r1, r3
20002070:	0010      	movs	r0, r2
20002072:	f7ff fd97 	bl	20001ba4 <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
20002076:	230f      	movs	r3, #15
20002078:	18fb      	adds	r3, r7, r3
2000207a:	781b      	ldrb	r3, [r3, #0]
2000207c:	0019      	movs	r1, r3
2000207e:	2040      	movs	r0, #64	; 0x40
20002080:	f7ff fd90 	bl	20001ba4 <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
20002084:	2317      	movs	r3, #23
20002086:	18fb      	adds	r3, r7, r3
20002088:	2200      	movs	r2, #0
2000208a:	701a      	strb	r2, [r3, #0]
2000208c:	e014      	b.n	200020b8 <graphic_draw_screen+0x94>
				graphic_write_data(buffer[k], controller);
2000208e:	687a      	ldr	r2, [r7, #4]
20002090:	693b      	ldr	r3, [r7, #16]
20002092:	18d3      	adds	r3, r2, r3
20002094:	781a      	ldrb	r2, [r3, #0]
20002096:	230f      	movs	r3, #15
20002098:	18fb      	adds	r3, r7, r3
2000209a:	781b      	ldrb	r3, [r3, #0]
2000209c:	0019      	movs	r1, r3
2000209e:	0010      	movs	r0, r2
200020a0:	f7ff fda3 	bl	20001bea <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
200020a4:	2317      	movs	r3, #23
200020a6:	18fb      	adds	r3, r7, r3
200020a8:	781a      	ldrb	r2, [r3, #0]
200020aa:	2317      	movs	r3, #23
200020ac:	18fb      	adds	r3, r7, r3
200020ae:	3201      	adds	r2, #1
200020b0:	701a      	strb	r2, [r3, #0]
200020b2:	693b      	ldr	r3, [r7, #16]
200020b4:	3301      	adds	r3, #1
200020b6:	613b      	str	r3, [r7, #16]
200020b8:	2317      	movs	r3, #23
200020ba:	18fb      	adds	r3, r7, r3
200020bc:	781b      	ldrb	r3, [r3, #0]
200020be:	2b3f      	cmp	r3, #63	; 0x3f
200020c0:	d9e5      	bls.n	2000208e <graphic_draw_screen+0x6a>
		for(j = 0; j < 8; j++) {
200020c2:	2316      	movs	r3, #22
200020c4:	18fb      	adds	r3, r7, r3
200020c6:	781a      	ldrb	r2, [r3, #0]
200020c8:	2316      	movs	r3, #22
200020ca:	18fb      	adds	r3, r7, r3
200020cc:	3201      	adds	r2, #1
200020ce:	701a      	strb	r2, [r3, #0]
200020d0:	2316      	movs	r3, #22
200020d2:	18fb      	adds	r3, r7, r3
200020d4:	781b      	ldrb	r3, [r3, #0]
200020d6:	2b07      	cmp	r3, #7
200020d8:	d9bf      	bls.n	2000205a <graphic_draw_screen+0x36>
	for(c = 0; c < 2; c++) {
200020da:	2315      	movs	r3, #21
200020dc:	18fb      	adds	r3, r7, r3
200020de:	781a      	ldrb	r2, [r3, #0]
200020e0:	2315      	movs	r3, #21
200020e2:	18fb      	adds	r3, r7, r3
200020e4:	3201      	adds	r2, #1
200020e6:	701a      	strb	r2, [r3, #0]
200020e8:	2315      	movs	r3, #21
200020ea:	18fb      	adds	r3, r7, r3
200020ec:	781b      	ldrb	r3, [r3, #0]
200020ee:	2b01      	cmp	r3, #1
200020f0:	d9a3      	bls.n	2000203a <graphic_draw_screen+0x16>
			}
		}
	}
}
200020f2:	46c0      	nop			; (mov r8, r8)
200020f4:	46bd      	mov	sp, r7
200020f6:	b006      	add	sp, #24
200020f8:	bd80      	pop	{r7, pc}

200020fa <draw_sprite>:


void grayScaleTest( void );


void draw_sprite(sprite* s, int x, int y, int set, int color) {
200020fa:	b5b0      	push	{r4, r5, r7, lr}
200020fc:	b08a      	sub	sp, #40	; 0x28
200020fe:	af00      	add	r7, sp, #0
20002100:	60f8      	str	r0, [r7, #12]
20002102:	60b9      	str	r1, [r7, #8]
20002104:	607a      	str	r2, [r7, #4]
20002106:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
20002108:	68fb      	ldr	r3, [r7, #12]
2000210a:	681b      	ldr	r3, [r3, #0]
2000210c:	2207      	movs	r2, #7
2000210e:	4013      	ands	r3, r2
20002110:	d104      	bne.n	2000211c <draw_sprite+0x22>
		width_in_bytes = s->width / 8;
20002112:	68fb      	ldr	r3, [r7, #12]
20002114:	681b      	ldr	r3, [r3, #0]
20002116:	08db      	lsrs	r3, r3, #3
20002118:	61bb      	str	r3, [r7, #24]
2000211a:	e004      	b.n	20002126 <draw_sprite+0x2c>
	else
		width_in_bytes = (s->width / 8) + 1;
2000211c:	68fb      	ldr	r3, [r7, #12]
2000211e:	681b      	ldr	r3, [r3, #0]
20002120:	08db      	lsrs	r3, r3, #3
20002122:	3301      	adds	r3, #1
20002124:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++)
20002126:	2300      	movs	r3, #0
20002128:	627b      	str	r3, [r7, #36]	; 0x24
2000212a:	e06a      	b.n	20002202 <draw_sprite+0x108>
		for (j = 0; j < width_in_bytes; j++) {
2000212c:	2300      	movs	r3, #0
2000212e:	623b      	str	r3, [r7, #32]
20002130:	e060      	b.n	200021f4 <draw_sprite+0xfa>
			unsigned char byte = s->data[i * width_in_bytes + j];
20002132:	68fb      	ldr	r3, [r7, #12]
20002134:	689b      	ldr	r3, [r3, #8]
20002136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002138:	69b9      	ldr	r1, [r7, #24]
2000213a:	4351      	muls	r1, r2
2000213c:	6a3a      	ldr	r2, [r7, #32]
2000213e:	188a      	adds	r2, r1, r2
20002140:	189a      	adds	r2, r3, r2
20002142:	2317      	movs	r3, #23
20002144:	18fb      	adds	r3, r7, r3
20002146:	7812      	ldrb	r2, [r2, #0]
20002148:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
2000214a:	2300      	movs	r3, #0
2000214c:	61fb      	str	r3, [r7, #28]
2000214e:	e04b      	b.n	200021e8 <draw_sprite+0xee>
				if (byte & (1 << k)){
20002150:	2317      	movs	r3, #23
20002152:	18fb      	adds	r3, r7, r3
20002154:	781a      	ldrb	r2, [r3, #0]
20002156:	69fb      	ldr	r3, [r7, #28]
20002158:	411a      	asrs	r2, r3
2000215a:	0013      	movs	r3, r2
2000215c:	2201      	movs	r2, #1
2000215e:	4013      	ands	r3, r2
20002160:	d03f      	beq.n	200021e2 <draw_sprite+0xe8>
					pixel(8 * j + k + x + 1, i + y + 1, set, color);
20002162:	6a3b      	ldr	r3, [r7, #32]
20002164:	00da      	lsls	r2, r3, #3
20002166:	69fb      	ldr	r3, [r7, #28]
20002168:	18d2      	adds	r2, r2, r3
2000216a:	68bb      	ldr	r3, [r7, #8]
2000216c:	18d3      	adds	r3, r2, r3
2000216e:	1c58      	adds	r0, r3, #1
20002170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002172:	687b      	ldr	r3, [r7, #4]
20002174:	18d3      	adds	r3, r2, r3
20002176:	1c59      	adds	r1, r3, #1
20002178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000217a:	683a      	ldr	r2, [r7, #0]
2000217c:	f7ff fdc2 	bl	20001d04 <pixel>
					
					if(set) {	//Remove the other colors from this pixel
20002180:	683b      	ldr	r3, [r7, #0]
20002182:	2b00      	cmp	r3, #0
20002184:	d02d      	beq.n	200021e2 <draw_sprite+0xe8>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+1) % 3);
20002186:	6a3b      	ldr	r3, [r7, #32]
20002188:	00da      	lsls	r2, r3, #3
2000218a:	69fb      	ldr	r3, [r7, #28]
2000218c:	18d2      	adds	r2, r2, r3
2000218e:	68bb      	ldr	r3, [r7, #8]
20002190:	18d3      	adds	r3, r2, r3
20002192:	1c5c      	adds	r4, r3, #1
20002194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002196:	687b      	ldr	r3, [r7, #4]
20002198:	18d3      	adds	r3, r2, r3
2000219a:	1c5d      	adds	r5, r3, #1
2000219c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000219e:	3301      	adds	r3, #1
200021a0:	2103      	movs	r1, #3
200021a2:	0018      	movs	r0, r3
200021a4:	f000 ff20 	bl	20002fe8 <__aeabi_idivmod>
200021a8:	000b      	movs	r3, r1
200021aa:	2200      	movs	r2, #0
200021ac:	0029      	movs	r1, r5
200021ae:	0020      	movs	r0, r4
200021b0:	f7ff fda8 	bl	20001d04 <pixel>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+2) % 3);
200021b4:	6a3b      	ldr	r3, [r7, #32]
200021b6:	00da      	lsls	r2, r3, #3
200021b8:	69fb      	ldr	r3, [r7, #28]
200021ba:	18d2      	adds	r2, r2, r3
200021bc:	68bb      	ldr	r3, [r7, #8]
200021be:	18d3      	adds	r3, r2, r3
200021c0:	1c5c      	adds	r4, r3, #1
200021c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200021c4:	687b      	ldr	r3, [r7, #4]
200021c6:	18d3      	adds	r3, r2, r3
200021c8:	1c5d      	adds	r5, r3, #1
200021ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200021cc:	3302      	adds	r3, #2
200021ce:	2103      	movs	r1, #3
200021d0:	0018      	movs	r0, r3
200021d2:	f000 ff09 	bl	20002fe8 <__aeabi_idivmod>
200021d6:	000b      	movs	r3, r1
200021d8:	2200      	movs	r2, #0
200021da:	0029      	movs	r1, r5
200021dc:	0020      	movs	r0, r4
200021de:	f7ff fd91 	bl	20001d04 <pixel>
			for (k =0; k < 8; k++) {
200021e2:	69fb      	ldr	r3, [r7, #28]
200021e4:	3301      	adds	r3, #1
200021e6:	61fb      	str	r3, [r7, #28]
200021e8:	69fb      	ldr	r3, [r7, #28]
200021ea:	2b07      	cmp	r3, #7
200021ec:	ddb0      	ble.n	20002150 <draw_sprite+0x56>
		for (j = 0; j < width_in_bytes; j++) {
200021ee:	6a3b      	ldr	r3, [r7, #32]
200021f0:	3301      	adds	r3, #1
200021f2:	623b      	str	r3, [r7, #32]
200021f4:	6a3a      	ldr	r2, [r7, #32]
200021f6:	69bb      	ldr	r3, [r7, #24]
200021f8:	429a      	cmp	r2, r3
200021fa:	db9a      	blt.n	20002132 <draw_sprite+0x38>
	for (i = 0; i < s->height; i++)
200021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200021fe:	3301      	adds	r3, #1
20002200:	627b      	str	r3, [r7, #36]	; 0x24
20002202:	68fb      	ldr	r3, [r7, #12]
20002204:	685a      	ldr	r2, [r3, #4]
20002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002208:	429a      	cmp	r2, r3
2000220a:	d88f      	bhi.n	2000212c <draw_sprite+0x32>
					}
				}
			}
		}
}
2000220c:	46c0      	nop			; (mov r8, r8)
2000220e:	46bd      	mov	sp, r7
20002210:	b00a      	add	sp, #40	; 0x28
20002212:	bdb0      	pop	{r4, r5, r7, pc}

20002214 <fillRectangle>:

void fillRectangle( int x, int y, int width, int height ){
20002214:	b580      	push	{r7, lr}
20002216:	b086      	sub	sp, #24
20002218:	af00      	add	r7, sp, #0
2000221a:	60f8      	str	r0, [r7, #12]
2000221c:	60b9      	str	r1, [r7, #8]
2000221e:	607a      	str	r2, [r7, #4]
20002220:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20002222:	68fb      	ldr	r3, [r7, #12]
20002224:	617b      	str	r3, [r7, #20]
20002226:	e014      	b.n	20002252 <fillRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20002228:	68bb      	ldr	r3, [r7, #8]
2000222a:	613b      	str	r3, [r7, #16]
2000222c:	e008      	b.n	20002240 <fillRectangle+0x2c>
			pixel(i, j, 1, 3);
2000222e:	6939      	ldr	r1, [r7, #16]
20002230:	6978      	ldr	r0, [r7, #20]
20002232:	2303      	movs	r3, #3
20002234:	2201      	movs	r2, #1
20002236:	f7ff fd65 	bl	20001d04 <pixel>
		for (j = y; j < y + height; j++) {
2000223a:	693b      	ldr	r3, [r7, #16]
2000223c:	3301      	adds	r3, #1
2000223e:	613b      	str	r3, [r7, #16]
20002240:	68ba      	ldr	r2, [r7, #8]
20002242:	683b      	ldr	r3, [r7, #0]
20002244:	18d2      	adds	r2, r2, r3
20002246:	693b      	ldr	r3, [r7, #16]
20002248:	429a      	cmp	r2, r3
2000224a:	dcf0      	bgt.n	2000222e <fillRectangle+0x1a>
	for (i = x; i < x + width; i++) {
2000224c:	697b      	ldr	r3, [r7, #20]
2000224e:	3301      	adds	r3, #1
20002250:	617b      	str	r3, [r7, #20]
20002252:	68fa      	ldr	r2, [r7, #12]
20002254:	687b      	ldr	r3, [r7, #4]
20002256:	18d2      	adds	r2, r2, r3
20002258:	697b      	ldr	r3, [r7, #20]
2000225a:	429a      	cmp	r2, r3
2000225c:	dce4      	bgt.n	20002228 <fillRectangle+0x14>
		}
	}
}
2000225e:	46c0      	nop			; (mov r8, r8)
20002260:	46bd      	mov	sp, r7
20002262:	b006      	add	sp, #24
20002264:	bd80      	pop	{r7, pc}

20002266 <clearRectangle>:

void clearRectangle( int x, int y, int width, int height ){
20002266:	b580      	push	{r7, lr}
20002268:	b086      	sub	sp, #24
2000226a:	af00      	add	r7, sp, #0
2000226c:	60f8      	str	r0, [r7, #12]
2000226e:	60b9      	str	r1, [r7, #8]
20002270:	607a      	str	r2, [r7, #4]
20002272:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20002274:	68fb      	ldr	r3, [r7, #12]
20002276:	617b      	str	r3, [r7, #20]
20002278:	e014      	b.n	200022a4 <clearRectangle+0x3e>
		for (j = y; j < y + height; j++) {
2000227a:	68bb      	ldr	r3, [r7, #8]
2000227c:	613b      	str	r3, [r7, #16]
2000227e:	e008      	b.n	20002292 <clearRectangle+0x2c>
			pixel(i, j, 0, 3);
20002280:	6939      	ldr	r1, [r7, #16]
20002282:	6978      	ldr	r0, [r7, #20]
20002284:	2303      	movs	r3, #3
20002286:	2200      	movs	r2, #0
20002288:	f7ff fd3c 	bl	20001d04 <pixel>
		for (j = y; j < y + height; j++) {
2000228c:	693b      	ldr	r3, [r7, #16]
2000228e:	3301      	adds	r3, #1
20002290:	613b      	str	r3, [r7, #16]
20002292:	68ba      	ldr	r2, [r7, #8]
20002294:	683b      	ldr	r3, [r7, #0]
20002296:	18d2      	adds	r2, r2, r3
20002298:	693b      	ldr	r3, [r7, #16]
2000229a:	429a      	cmp	r2, r3
2000229c:	dcf0      	bgt.n	20002280 <clearRectangle+0x1a>
	for (i = x; i < x + width; i++) {
2000229e:	697b      	ldr	r3, [r7, #20]
200022a0:	3301      	adds	r3, #1
200022a2:	617b      	str	r3, [r7, #20]
200022a4:	68fa      	ldr	r2, [r7, #12]
200022a6:	687b      	ldr	r3, [r7, #4]
200022a8:	18d2      	adds	r2, r2, r3
200022aa:	697b      	ldr	r3, [r7, #20]
200022ac:	429a      	cmp	r2, r3
200022ae:	dce4      	bgt.n	2000227a <clearRectangle+0x14>
		}
	}
}
200022b0:	46c0      	nop			; (mov r8, r8)
200022b2:	46bd      	mov	sp, r7
200022b4:	b006      	add	sp, #24
200022b6:	bd80      	pop	{r7, pc}

200022b8 <grayScaleTest>:


void grayScaleTest( void ) {
200022b8:	b590      	push	{r4, r7, lr}
200022ba:	b087      	sub	sp, #28
200022bc:	af00      	add	r7, sp, #0
	int x = 10;
200022be:	230a      	movs	r3, #10
200022c0:	617b      	str	r3, [r7, #20]
	int y = 10;
200022c2:	230a      	movs	r3, #10
200022c4:	613b      	str	r3, [r7, #16]
	int width = 70;
200022c6:	2346      	movs	r3, #70	; 0x46
200022c8:	60fb      	str	r3, [r7, #12]
	int height = 50;
200022ca:	2332      	movs	r3, #50	; 0x32
200022cc:	60bb      	str	r3, [r7, #8]
	
	int x2 = 50;
200022ce:	2332      	movs	r3, #50	; 0x32
200022d0:	607b      	str	r3, [r7, #4]
	
	fillRectangle(x, y, width, height);
200022d2:	68bb      	ldr	r3, [r7, #8]
200022d4:	68fa      	ldr	r2, [r7, #12]
200022d6:	6939      	ldr	r1, [r7, #16]
200022d8:	6978      	ldr	r0, [r7, #20]
200022da:	f7ff ff9b 	bl	20002214 <fillRectangle>
	
	int i;
	int k = 5;
200022de:	2305      	movs	r3, #5
200022e0:	603b      	str	r3, [r7, #0]
	while(1) {
		clear_backBuffer();
200022e2:	f7ff fadf 	bl	200018a4 <clear_backBuffer>
		fillRectangle(x, y, width, height);
200022e6:	68bb      	ldr	r3, [r7, #8]
200022e8:	68fa      	ldr	r2, [r7, #12]
200022ea:	6939      	ldr	r1, [r7, #16]
200022ec:	6978      	ldr	r0, [r7, #20]
200022ee:	f7ff ff91 	bl	20002214 <fillRectangle>
		clearRectangle(x+2+2, y+1, width-k, height-k); //outer square
200022f2:	697b      	ldr	r3, [r7, #20]
200022f4:	1d18      	adds	r0, r3, #4
200022f6:	693b      	ldr	r3, [r7, #16]
200022f8:	1c59      	adds	r1, r3, #1
200022fa:	68fa      	ldr	r2, [r7, #12]
200022fc:	683b      	ldr	r3, [r7, #0]
200022fe:	1ad4      	subs	r4, r2, r3
20002300:	68ba      	ldr	r2, [r7, #8]
20002302:	683b      	ldr	r3, [r7, #0]
20002304:	1ad3      	subs	r3, r2, r3
20002306:	0022      	movs	r2, r4
20002308:	f7ff ffad 	bl	20002266 <clearRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
2000230c:	697b      	ldr	r3, [r7, #20]
2000230e:	1c9a      	adds	r2, r3, #2
20002310:	683b      	ldr	r3, [r7, #0]
20002312:	18d0      	adds	r0, r2, r3
20002314:	693b      	ldr	r3, [r7, #16]
20002316:	1c99      	adds	r1, r3, #2
20002318:	68fb      	ldr	r3, [r7, #12]
2000231a:	1f1a      	subs	r2, r3, #4
2000231c:	683b      	ldr	r3, [r7, #0]
2000231e:	1ad4      	subs	r4, r2, r3
20002320:	68bb      	ldr	r3, [r7, #8]
20002322:	1f1a      	subs	r2, r3, #4
20002324:	683b      	ldr	r3, [r7, #0]
20002326:	1ad3      	subs	r3, r2, r3
20002328:	0022      	movs	r2, r4
2000232a:	f7ff ff9c 	bl	20002266 <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
2000232e:	4b2d      	ldr	r3, [pc, #180]	; (200023e4 <grayScaleTest+0x12c>)
20002330:	0018      	movs	r0, r3
20002332:	f7ff fe77 	bl	20002024 <graphic_draw_screen>
		clear_backBuffer();
20002336:	f7ff fab5 	bl	200018a4 <clear_backBuffer>
		fillRectangle(x, y, width, height);
2000233a:	68bb      	ldr	r3, [r7, #8]
2000233c:	68fa      	ldr	r2, [r7, #12]
2000233e:	6939      	ldr	r1, [r7, #16]
20002340:	6978      	ldr	r0, [r7, #20]
20002342:	f7ff ff67 	bl	20002214 <fillRectangle>
		
		fillRectangle(x+2+2, y+1, width-k, height-k); //outer white square
20002346:	697b      	ldr	r3, [r7, #20]
20002348:	1d18      	adds	r0, r3, #4
2000234a:	693b      	ldr	r3, [r7, #16]
2000234c:	1c59      	adds	r1, r3, #1
2000234e:	68fa      	ldr	r2, [r7, #12]
20002350:	683b      	ldr	r3, [r7, #0]
20002352:	1ad4      	subs	r4, r2, r3
20002354:	68ba      	ldr	r2, [r7, #8]
20002356:	683b      	ldr	r3, [r7, #0]
20002358:	1ad3      	subs	r3, r2, r3
2000235a:	0022      	movs	r2, r4
2000235c:	f7ff ff5a 	bl	20002214 <fillRectangle>
		fillRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20002360:	697b      	ldr	r3, [r7, #20]
20002362:	1c9a      	adds	r2, r3, #2
20002364:	683b      	ldr	r3, [r7, #0]
20002366:	18d0      	adds	r0, r2, r3
20002368:	693b      	ldr	r3, [r7, #16]
2000236a:	1c99      	adds	r1, r3, #2
2000236c:	68fb      	ldr	r3, [r7, #12]
2000236e:	1f1a      	subs	r2, r3, #4
20002370:	683b      	ldr	r3, [r7, #0]
20002372:	1ad4      	subs	r4, r2, r3
20002374:	68bb      	ldr	r3, [r7, #8]
20002376:	1f1a      	subs	r2, r3, #4
20002378:	683b      	ldr	r3, [r7, #0]
2000237a:	1ad3      	subs	r3, r2, r3
2000237c:	0022      	movs	r2, r4
2000237e:	f7ff ff49 	bl	20002214 <fillRectangle>
		clearRectangle(x+12, y+5, 5, 5);
20002382:	697b      	ldr	r3, [r7, #20]
20002384:	330c      	adds	r3, #12
20002386:	0018      	movs	r0, r3
20002388:	693b      	ldr	r3, [r7, #16]
2000238a:	1d59      	adds	r1, r3, #5
2000238c:	2305      	movs	r3, #5
2000238e:	2205      	movs	r2, #5
20002390:	f7ff ff69 	bl	20002266 <clearRectangle>
		
		graphic_draw_screen(draw_buffer_black);
20002394:	4b13      	ldr	r3, [pc, #76]	; (200023e4 <grayScaleTest+0x12c>)
20002396:	0018      	movs	r0, r3
20002398:	f7ff fe44 	bl	20002024 <graphic_draw_screen>
		delay_milli(20);
2000239c:	2014      	movs	r0, #20
2000239e:	f7ff fa55 	bl	2000184c <delay_milli>
		
		clear_backBuffer();
200023a2:	f7ff fa7f 	bl	200018a4 <clear_backBuffer>
		fillRectangle(x, y, width, height);
200023a6:	68bb      	ldr	r3, [r7, #8]
200023a8:	68fa      	ldr	r2, [r7, #12]
200023aa:	6939      	ldr	r1, [r7, #16]
200023ac:	6978      	ldr	r0, [r7, #20]
200023ae:	f7ff ff31 	bl	20002214 <fillRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
200023b2:	697b      	ldr	r3, [r7, #20]
200023b4:	1c9a      	adds	r2, r3, #2
200023b6:	683b      	ldr	r3, [r7, #0]
200023b8:	18d0      	adds	r0, r2, r3
200023ba:	693b      	ldr	r3, [r7, #16]
200023bc:	1c99      	adds	r1, r3, #2
200023be:	68fb      	ldr	r3, [r7, #12]
200023c0:	1f1a      	subs	r2, r3, #4
200023c2:	683b      	ldr	r3, [r7, #0]
200023c4:	1ad4      	subs	r4, r2, r3
200023c6:	68bb      	ldr	r3, [r7, #8]
200023c8:	1f1a      	subs	r2, r3, #4
200023ca:	683b      	ldr	r3, [r7, #0]
200023cc:	1ad3      	subs	r3, r2, r3
200023ce:	0022      	movs	r2, r4
200023d0:	f7ff ff49 	bl	20002266 <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
200023d4:	4b03      	ldr	r3, [pc, #12]	; (200023e4 <grayScaleTest+0x12c>)
200023d6:	0018      	movs	r0, r3
200023d8:	f7ff fe24 	bl	20002024 <graphic_draw_screen>
		
		delay_milli(20);
200023dc:	2014      	movs	r0, #20
200023de:	f7ff fa35 	bl	2000184c <delay_milli>
		clear_backBuffer();
200023e2:	e77e      	b.n	200022e2 <grayScaleTest+0x2a>
200023e4:	20004670 	andcs	r4, r0, r0, ror r6

200023e8 <set_up_draw_buffers>:
	}
}

/** Should prepare the different drawing buffers, before the drawing of each frame.*/
void set_up_draw_buffers( void ) {
200023e8:	b580      	push	{r7, lr}
200023ea:	b082      	sub	sp, #8
200023ec:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 1024; i++) {
200023ee:	2300      	movs	r3, #0
200023f0:	607b      	str	r3, [r7, #4]
200023f2:	e065      	b.n	200024c0 <set_up_draw_buffers+0xd8>
		draw_buffer_black[i] = backBuffer[i] & (~backBufferGray[i] & ~backBufferLight[i]); //Had to work a bit on these
200023f4:	4a36      	ldr	r2, [pc, #216]	; (200024d0 <set_up_draw_buffers+0xe8>)
200023f6:	687b      	ldr	r3, [r7, #4]
200023f8:	18d3      	adds	r3, r2, r3
200023fa:	781b      	ldrb	r3, [r3, #0]
200023fc:	b25b      	sxtb	r3, r3
200023fe:	4935      	ldr	r1, [pc, #212]	; (200024d4 <set_up_draw_buffers+0xec>)
20002400:	687a      	ldr	r2, [r7, #4]
20002402:	188a      	adds	r2, r1, r2
20002404:	7811      	ldrb	r1, [r2, #0]
20002406:	4834      	ldr	r0, [pc, #208]	; (200024d8 <set_up_draw_buffers+0xf0>)
20002408:	687a      	ldr	r2, [r7, #4]
2000240a:	1882      	adds	r2, r0, r2
2000240c:	7812      	ldrb	r2, [r2, #0]
2000240e:	430a      	orrs	r2, r1
20002410:	b2d2      	uxtb	r2, r2
20002412:	b252      	sxtb	r2, r2
20002414:	43d2      	mvns	r2, r2
20002416:	b252      	sxtb	r2, r2
20002418:	4013      	ands	r3, r2
2000241a:	b25b      	sxtb	r3, r3
2000241c:	b2d9      	uxtb	r1, r3
2000241e:	4a2f      	ldr	r2, [pc, #188]	; (200024dc <set_up_draw_buffers+0xf4>)
20002420:	687b      	ldr	r3, [r7, #4]
20002422:	18d3      	adds	r3, r2, r3
20002424:	1c0a      	adds	r2, r1, #0
20002426:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray[i] = (backBuffer[i] | backBufferGray[i]) & ~backBufferLight[i]; //in order to make it possible
20002428:	4a29      	ldr	r2, [pc, #164]	; (200024d0 <set_up_draw_buffers+0xe8>)
2000242a:	687b      	ldr	r3, [r7, #4]
2000242c:	18d3      	adds	r3, r2, r3
2000242e:	781a      	ldrb	r2, [r3, #0]
20002430:	4928      	ldr	r1, [pc, #160]	; (200024d4 <set_up_draw_buffers+0xec>)
20002432:	687b      	ldr	r3, [r7, #4]
20002434:	18cb      	adds	r3, r1, r3
20002436:	781b      	ldrb	r3, [r3, #0]
20002438:	4313      	orrs	r3, r2
2000243a:	b2db      	uxtb	r3, r3
2000243c:	b25b      	sxtb	r3, r3
2000243e:	4926      	ldr	r1, [pc, #152]	; (200024d8 <set_up_draw_buffers+0xf0>)
20002440:	687a      	ldr	r2, [r7, #4]
20002442:	188a      	adds	r2, r1, r2
20002444:	7812      	ldrb	r2, [r2, #0]
20002446:	b252      	sxtb	r2, r2
20002448:	43d2      	mvns	r2, r2
2000244a:	b252      	sxtb	r2, r2
2000244c:	4013      	ands	r3, r2
2000244e:	b25b      	sxtb	r3, r3
20002450:	b2d9      	uxtb	r1, r3
20002452:	4a23      	ldr	r2, [pc, #140]	; (200024e0 <set_up_draw_buffers+0xf8>)
20002454:	687b      	ldr	r3, [r7, #4]
20002456:	18d3      	adds	r3, r2, r3
20002458:	1c0a      	adds	r2, r1, #0
2000245a:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_light[i] = (backBuffer[i] | backBufferLight[i]) & ~backBufferGray[i]; //to show a lighter sprite
2000245c:	4a1c      	ldr	r2, [pc, #112]	; (200024d0 <set_up_draw_buffers+0xe8>)
2000245e:	687b      	ldr	r3, [r7, #4]
20002460:	18d3      	adds	r3, r2, r3
20002462:	781a      	ldrb	r2, [r3, #0]
20002464:	491c      	ldr	r1, [pc, #112]	; (200024d8 <set_up_draw_buffers+0xf0>)
20002466:	687b      	ldr	r3, [r7, #4]
20002468:	18cb      	adds	r3, r1, r3
2000246a:	781b      	ldrb	r3, [r3, #0]
2000246c:	4313      	orrs	r3, r2
2000246e:	b2db      	uxtb	r3, r3
20002470:	b25b      	sxtb	r3, r3
20002472:	4918      	ldr	r1, [pc, #96]	; (200024d4 <set_up_draw_buffers+0xec>)
20002474:	687a      	ldr	r2, [r7, #4]
20002476:	188a      	adds	r2, r1, r2
20002478:	7812      	ldrb	r2, [r2, #0]
2000247a:	b252      	sxtb	r2, r2
2000247c:	43d2      	mvns	r2, r2
2000247e:	b252      	sxtb	r2, r2
20002480:	4013      	ands	r3, r2
20002482:	b25b      	sxtb	r3, r3
20002484:	b2d9      	uxtb	r1, r3
20002486:	4a17      	ldr	r2, [pc, #92]	; (200024e4 <set_up_draw_buffers+0xfc>)
20002488:	687b      	ldr	r3, [r7, #4]
2000248a:	18d3      	adds	r3, r2, r3
2000248c:	1c0a      	adds	r2, r1, #0
2000248e:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray_light[i] = backBuffer[i] | backBufferGray[i] | backBufferLight[i]; //on top of a darker one.
20002490:	4a0f      	ldr	r2, [pc, #60]	; (200024d0 <set_up_draw_buffers+0xe8>)
20002492:	687b      	ldr	r3, [r7, #4]
20002494:	18d3      	adds	r3, r2, r3
20002496:	781a      	ldrb	r2, [r3, #0]
20002498:	490e      	ldr	r1, [pc, #56]	; (200024d4 <set_up_draw_buffers+0xec>)
2000249a:	687b      	ldr	r3, [r7, #4]
2000249c:	18cb      	adds	r3, r1, r3
2000249e:	781b      	ldrb	r3, [r3, #0]
200024a0:	4313      	orrs	r3, r2
200024a2:	b2da      	uxtb	r2, r3
200024a4:	490c      	ldr	r1, [pc, #48]	; (200024d8 <set_up_draw_buffers+0xf0>)
200024a6:	687b      	ldr	r3, [r7, #4]
200024a8:	18cb      	adds	r3, r1, r3
200024aa:	781b      	ldrb	r3, [r3, #0]
200024ac:	4313      	orrs	r3, r2
200024ae:	b2d9      	uxtb	r1, r3
200024b0:	4a0d      	ldr	r2, [pc, #52]	; (200024e8 <set_up_draw_buffers+0x100>)
200024b2:	687b      	ldr	r3, [r7, #4]
200024b4:	18d3      	adds	r3, r2, r3
200024b6:	1c0a      	adds	r2, r1, #0
200024b8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 1024; i++) {
200024ba:	687b      	ldr	r3, [r7, #4]
200024bc:	3301      	adds	r3, #1
200024be:	607b      	str	r3, [r7, #4]
200024c0:	687b      	ldr	r3, [r7, #4]
200024c2:	4a0a      	ldr	r2, [pc, #40]	; (200024ec <set_up_draw_buffers+0x104>)
200024c4:	4293      	cmp	r3, r2
200024c6:	dd95      	ble.n	200023f4 <set_up_draw_buffers+0xc>
	}
}
200024c8:	46c0      	nop			; (mov r8, r8)
200024ca:	46bd      	mov	sp, r7
200024cc:	b002      	add	sp, #8
200024ce:	bd80      	pop	{r7, pc}
200024d0:	20003e70 	andcs	r3, r0, r0, ror lr
200024d4:	20003670 	andcs	r3, r0, r0, ror r6
200024d8:	20004e70 	andcs	r4, r0, r0, ror lr
200024dc:	20004670 	andcs	r4, r0, r0, ror r6
200024e0:	20003a70 	andcs	r3, r0, r0, ror sl
200024e4:	20004270 	andcs	r4, r0, r0, ror r2
200024e8:	20004a70 	andcs	r4, r0, r0, ror sl
200024ec:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200024f0 <draw_game_object>:

void draw_game_object(GameObject *gObj) {
200024f0:	b580      	push	{r7, lr}
200024f2:	b086      	sub	sp, #24
200024f4:	af02      	add	r7, sp, #8
200024f6:	6078      	str	r0, [r7, #4]
	int frame = gObj->current_frame;
200024f8:	687b      	ldr	r3, [r7, #4]
200024fa:	695b      	ldr	r3, [r3, #20]
200024fc:	60fb      	str	r3, [r7, #12]
	draw_sprite(gObj->images[frame].blackImage, gObj->xPos, gObj->yPos, 1, 3);
200024fe:	687b      	ldr	r3, [r7, #4]
20002500:	6819      	ldr	r1, [r3, #0]
20002502:	68fa      	ldr	r2, [r7, #12]
20002504:	0013      	movs	r3, r2
20002506:	005b      	lsls	r3, r3, #1
20002508:	189b      	adds	r3, r3, r2
2000250a:	009b      	lsls	r3, r3, #2
2000250c:	18cb      	adds	r3, r1, r3
2000250e:	6818      	ldr	r0, [r3, #0]
20002510:	687b      	ldr	r3, [r7, #4]
20002512:	6859      	ldr	r1, [r3, #4]
20002514:	687b      	ldr	r3, [r7, #4]
20002516:	689a      	ldr	r2, [r3, #8]
20002518:	2303      	movs	r3, #3
2000251a:	9300      	str	r3, [sp, #0]
2000251c:	2301      	movs	r3, #1
2000251e:	f7ff fdec 	bl	200020fa <draw_sprite>
	draw_sprite(gObj->images[frame].grayImage, gObj->xPos, gObj->yPos, 1, 2);
20002522:	687b      	ldr	r3, [r7, #4]
20002524:	6819      	ldr	r1, [r3, #0]
20002526:	68fa      	ldr	r2, [r7, #12]
20002528:	0013      	movs	r3, r2
2000252a:	005b      	lsls	r3, r3, #1
2000252c:	189b      	adds	r3, r3, r2
2000252e:	009b      	lsls	r3, r3, #2
20002530:	18cb      	adds	r3, r1, r3
20002532:	6858      	ldr	r0, [r3, #4]
20002534:	687b      	ldr	r3, [r7, #4]
20002536:	6859      	ldr	r1, [r3, #4]
20002538:	687b      	ldr	r3, [r7, #4]
2000253a:	689a      	ldr	r2, [r3, #8]
2000253c:	2302      	movs	r3, #2
2000253e:	9300      	str	r3, [sp, #0]
20002540:	2301      	movs	r3, #1
20002542:	f7ff fdda 	bl	200020fa <draw_sprite>
	draw_sprite(gObj->images[frame].lightImage, gObj->xPos, gObj->yPos, 1, 1);
20002546:	687b      	ldr	r3, [r7, #4]
20002548:	6819      	ldr	r1, [r3, #0]
2000254a:	68fa      	ldr	r2, [r7, #12]
2000254c:	0013      	movs	r3, r2
2000254e:	005b      	lsls	r3, r3, #1
20002550:	189b      	adds	r3, r3, r2
20002552:	009b      	lsls	r3, r3, #2
20002554:	18cb      	adds	r3, r1, r3
20002556:	6898      	ldr	r0, [r3, #8]
20002558:	687b      	ldr	r3, [r7, #4]
2000255a:	6859      	ldr	r1, [r3, #4]
2000255c:	687b      	ldr	r3, [r7, #4]
2000255e:	689a      	ldr	r2, [r3, #8]
20002560:	2301      	movs	r3, #1
20002562:	9300      	str	r3, [sp, #0]
20002564:	2301      	movs	r3, #1
20002566:	f7ff fdc8 	bl	200020fa <draw_sprite>
}
2000256a:	46c0      	nop			; (mov r8, r8)
2000256c:	46bd      	mov	sp, r7
2000256e:	b004      	add	sp, #16
20002570:	bd80      	pop	{r7, pc}

20002572 <show_frame>:


void show_frame(int frame_length) {
20002572:	b580      	push	{r7, lr}
20002574:	b082      	sub	sp, #8
20002576:	af00      	add	r7, sp, #0
20002578:	6078      	str	r0, [r7, #4]
	set_up_draw_buffers();
2000257a:	f7ff ff35 	bl	200023e8 <set_up_draw_buffers>
	
	while(frame_length--) {
2000257e:	e01b      	b.n	200025b8 <show_frame+0x46>
		graphic_draw_screen(draw_buffer_black_gray_light);
20002580:	4b13      	ldr	r3, [pc, #76]	; (200025d0 <show_frame+0x5e>)
20002582:	0018      	movs	r0, r3
20002584:	f7ff fd4e 	bl	20002024 <graphic_draw_screen>
		delay_milli(1);
20002588:	2001      	movs	r0, #1
2000258a:	f7ff f95f 	bl	2000184c <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
2000258e:	4b11      	ldr	r3, [pc, #68]	; (200025d4 <show_frame+0x62>)
20002590:	0018      	movs	r0, r3
20002592:	f7ff fd47 	bl	20002024 <graphic_draw_screen>
		delay_milli(1);
20002596:	2001      	movs	r0, #1
20002598:	f7ff f958 	bl	2000184c <delay_milli>
		
		graphic_draw_screen(draw_buffer_black_gray);
2000259c:	4b0e      	ldr	r3, [pc, #56]	; (200025d8 <show_frame+0x66>)
2000259e:	0018      	movs	r0, r3
200025a0:	f7ff fd40 	bl	20002024 <graphic_draw_screen>
		delay_milli(1);
200025a4:	2001      	movs	r0, #1
200025a6:	f7ff f951 	bl	2000184c <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
200025aa:	4b0a      	ldr	r3, [pc, #40]	; (200025d4 <show_frame+0x62>)
200025ac:	0018      	movs	r0, r3
200025ae:	f7ff fd39 	bl	20002024 <graphic_draw_screen>
		delay_milli(1);
200025b2:	2001      	movs	r0, #1
200025b4:	f7ff f94a 	bl	2000184c <delay_milli>
	while(frame_length--) {
200025b8:	687b      	ldr	r3, [r7, #4]
200025ba:	1e5a      	subs	r2, r3, #1
200025bc:	607a      	str	r2, [r7, #4]
200025be:	2b00      	cmp	r3, #0
200025c0:	d1de      	bne.n	20002580 <show_frame+0xe>
	}
	
	clear_all_backBuffers();	//Maybe we could be more effective by only clearing the necessary stuff,
200025c2:	f7ff f97b 	bl	200018bc <clear_all_backBuffers>
								//but let's keep it like this if it works.
200025c6:	46c0      	nop			; (mov r8, r8)
200025c8:	46bd      	mov	sp, r7
200025ca:	b002      	add	sp, #8
200025cc:	bd80      	pop	{r7, pc}
200025ce:	46c0      	nop			; (mov r8, r8)
200025d0:	20004a70 	andcs	r4, r0, r0, ror sl
200025d4:	20004670 	andcs	r4, r0, r0, ror r6
200025d8:	20003a70 	andcs	r3, r0, r0, ror sl

200025dc <load_image>:
#include "image.h"

void load_image( Image *image, sprite *blackImage, sprite *grayImage, sprite *lightImage ) {
200025dc:	b580      	push	{r7, lr}
200025de:	b084      	sub	sp, #16
200025e0:	af00      	add	r7, sp, #0
200025e2:	60f8      	str	r0, [r7, #12]
200025e4:	60b9      	str	r1, [r7, #8]
200025e6:	607a      	str	r2, [r7, #4]
200025e8:	603b      	str	r3, [r7, #0]
	image->blackImage = blackImage;
200025ea:	68fb      	ldr	r3, [r7, #12]
200025ec:	68ba      	ldr	r2, [r7, #8]
200025ee:	601a      	str	r2, [r3, #0]
	image->grayImage = grayImage;
200025f0:	68fb      	ldr	r3, [r7, #12]
200025f2:	687a      	ldr	r2, [r7, #4]
200025f4:	605a      	str	r2, [r3, #4]
	image->lightImage = lightImage;
200025f6:	68fb      	ldr	r3, [r7, #12]
200025f8:	683a      	ldr	r2, [r7, #0]
200025fa:	609a      	str	r2, [r3, #8]
}
200025fc:	46c0      	nop			; (mov r8, r8)
200025fe:	46bd      	mov	sp, r7
20002600:	b004      	add	sp, #16
20002602:	bd80      	pop	{r7, pc}

20002604 <load_sprite>:
#include "sprite.h"

void load_sprite(sprite* s, unsigned char* data, int width, int height)
{
20002604:	b580      	push	{r7, lr}
20002606:	b084      	sub	sp, #16
20002608:	af00      	add	r7, sp, #0
2000260a:	60f8      	str	r0, [r7, #12]
2000260c:	60b9      	str	r1, [r7, #8]
2000260e:	607a      	str	r2, [r7, #4]
20002610:	603b      	str	r3, [r7, #0]
	s->width = width;
20002612:	687a      	ldr	r2, [r7, #4]
20002614:	68fb      	ldr	r3, [r7, #12]
20002616:	601a      	str	r2, [r3, #0]
	s->height = height;
20002618:	683a      	ldr	r2, [r7, #0]
2000261a:	68fb      	ldr	r3, [r7, #12]
2000261c:	605a      	str	r2, [r3, #4]
	s->data = data;
2000261e:	68fb      	ldr	r3, [r7, #12]
20002620:	68ba      	ldr	r2, [r7, #8]
20002622:	609a      	str	r2, [r3, #8]
}
20002624:	46c0      	nop			; (mov r8, r8)
20002626:	46bd      	mov	sp, r7
20002628:	b004      	add	sp, #16
2000262a:	bd80      	pop	{r7, pc}

2000262c <set_up_DIL>:
#include "gpio.h"

/** Sets up PE0-7 as inports and PE8-15 as outports. */
void set_up_DIL( void ) {
2000262c:	b580      	push	{r7, lr}
2000262e:	af00      	add	r7, sp, #0
	GPIO_D.Moder = 0x55550000;
20002630:	4b02      	ldr	r3, [pc, #8]	; (2000263c <set_up_DIL+0x10>)
20002632:	4a03      	ldr	r2, [pc, #12]	; (20002640 <set_up_DIL+0x14>)
20002634:	601a      	str	r2, [r3, #0]
}
20002636:	46c0      	nop			; (mov r8, r8)
20002638:	46bd      	mov	sp, r7
2000263a:	bd80      	pop	{r7, pc}
2000263c:	40020c00 	andmi	r0, r2, r0, lsl #24
20002640:	55550000 	ldrbpl	r0, [r5, #-0]

20002644 <read_DIL>:

char read_DIL( void ) {
20002644:	b580      	push	{r7, lr}
20002646:	af00      	add	r7, sp, #0
	GPIO_D.odrHigh = GPIO_D.idrLow; //Show on bargraph
20002648:	4b05      	ldr	r3, [pc, #20]	; (20002660 <read_DIL+0x1c>)
2000264a:	4a05      	ldr	r2, [pc, #20]	; (20002660 <read_DIL+0x1c>)
2000264c:	7c12      	ldrb	r2, [r2, #16]
2000264e:	b2d2      	uxtb	r2, r2
20002650:	755a      	strb	r2, [r3, #21]
	return GPIO_D.idrLow;
20002652:	4b03      	ldr	r3, [pc, #12]	; (20002660 <read_DIL+0x1c>)
20002654:	7c1b      	ldrb	r3, [r3, #16]
20002656:	b2db      	uxtb	r3, r3
}
20002658:	0018      	movs	r0, r3
2000265a:	46bd      	mov	sp, r7
2000265c:	bd80      	pop	{r7, pc}
2000265e:	46c0      	nop			; (mov r8, r8)
20002660:	40020c00 	andmi	r0, r2, r0, lsl #24

20002664 <read_DIL_single>:


int read_DIL_single( int bit ) {
20002664:	b590      	push	{r4, r7, lr}
20002666:	b085      	sub	sp, #20
20002668:	af00      	add	r7, sp, #0
2000266a:	6078      	str	r0, [r7, #4]
	char DIL = read_DIL();
2000266c:	230f      	movs	r3, #15
2000266e:	18fc      	adds	r4, r7, r3
20002670:	f7ff ffe8 	bl	20002644 <read_DIL>
20002674:	0003      	movs	r3, r0
20002676:	7023      	strb	r3, [r4, #0]
	if (DIL & (1<<bit)) {
20002678:	230f      	movs	r3, #15
2000267a:	18fb      	adds	r3, r7, r3
2000267c:	781a      	ldrb	r2, [r3, #0]
2000267e:	687b      	ldr	r3, [r7, #4]
20002680:	411a      	asrs	r2, r3
20002682:	0013      	movs	r3, r2
20002684:	2201      	movs	r2, #1
20002686:	4013      	ands	r3, r2
20002688:	d001      	beq.n	2000268e <read_DIL_single+0x2a>
		return 1;
2000268a:	2301      	movs	r3, #1
2000268c:	e000      	b.n	20002690 <read_DIL_single+0x2c>
	} else {
		return 0;
2000268e:	2300      	movs	r3, #0
	}
20002690:	0018      	movs	r0, r3
20002692:	46bd      	mov	sp, r7
20002694:	b005      	add	sp, #20
20002696:	bd90      	pop	{r4, r7, pc}

20002698 <ascii_ctrl_bit_set>:
void ascii_write_data(unsigned char data);
unsigned char ascii_read_status(void);
unsigned char ascii_read_data(void);


void ascii_ctrl_bit_set(unsigned char x){
20002698:	b580      	push	{r7, lr}
2000269a:	b084      	sub	sp, #16
2000269c:	af00      	add	r7, sp, #0
2000269e:	0002      	movs	r2, r0
200026a0:	1dfb      	adds	r3, r7, #7
200026a2:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och ettstÃƒÂ¤ll de bitar som ÃƒÂ¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
200026a4:	4a0c      	ldr	r2, [pc, #48]	; (200026d8 <ascii_ctrl_bit_set+0x40>)
200026a6:	230f      	movs	r3, #15
200026a8:	18fb      	adds	r3, r7, r3
200026aa:	7812      	ldrb	r2, [r2, #0]
200026ac:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
200026ae:	1dfa      	adds	r2, r7, #7
200026b0:	230f      	movs	r3, #15
200026b2:	18fb      	adds	r3, r7, r3
200026b4:	7812      	ldrb	r2, [r2, #0]
200026b6:	781b      	ldrb	r3, [r3, #0]
200026b8:	4313      	orrs	r3, r2
200026ba:	b2da      	uxtb	r2, r3
200026bc:	230f      	movs	r3, #15
200026be:	18fb      	adds	r3, r7, r3
200026c0:	2104      	movs	r1, #4
200026c2:	430a      	orrs	r2, r1
200026c4:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
200026c6:	4a04      	ldr	r2, [pc, #16]	; (200026d8 <ascii_ctrl_bit_set+0x40>)
200026c8:	230f      	movs	r3, #15
200026ca:	18fb      	adds	r3, r7, r3
200026cc:	781b      	ldrb	r3, [r3, #0]
200026ce:	7013      	strb	r3, [r2, #0]
}
200026d0:	46c0      	nop			; (mov r8, r8)
200026d2:	46bd      	mov	sp, r7
200026d4:	b004      	add	sp, #16
200026d6:	bd80      	pop	{r7, pc}
200026d8:	40021014 	andmi	r1, r2, r4, lsl r0

200026dc <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
200026dc:	b580      	push	{r7, lr}
200026de:	b084      	sub	sp, #16
200026e0:	af00      	add	r7, sp, #0
200026e2:	0002      	movs	r2, r0
200026e4:	1dfb      	adds	r3, r7, #7
200026e6:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och nollstÃ¤ll de bitar som Ã¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
200026e8:	4a0f      	ldr	r2, [pc, #60]	; (20002728 <ascii_ctrl_bit_clear+0x4c>)
200026ea:	230f      	movs	r3, #15
200026ec:	18fb      	adds	r3, r7, r3
200026ee:	7812      	ldrb	r2, [r2, #0]
200026f0:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
200026f2:	1dfb      	adds	r3, r7, #7
200026f4:	781b      	ldrb	r3, [r3, #0]
200026f6:	b25b      	sxtb	r3, r3
200026f8:	43db      	mvns	r3, r3
200026fa:	b25b      	sxtb	r3, r3
200026fc:	220f      	movs	r2, #15
200026fe:	18ba      	adds	r2, r7, r2
20002700:	7812      	ldrb	r2, [r2, #0]
20002702:	b252      	sxtb	r2, r2
20002704:	4013      	ands	r3, r2
20002706:	b25b      	sxtb	r3, r3
20002708:	2204      	movs	r2, #4
2000270a:	4313      	orrs	r3, r2
2000270c:	b25a      	sxtb	r2, r3
2000270e:	230f      	movs	r3, #15
20002710:	18fb      	adds	r3, r7, r3
20002712:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20002714:	4a04      	ldr	r2, [pc, #16]	; (20002728 <ascii_ctrl_bit_clear+0x4c>)
20002716:	230f      	movs	r3, #15
20002718:	18fb      	adds	r3, r7, r3
2000271a:	781b      	ldrb	r3, [r3, #0]
2000271c:	7013      	strb	r3, [r2, #0]
}
2000271e:	46c0      	nop			; (mov r8, r8)
20002720:	46bd      	mov	sp, r7
20002722:	b004      	add	sp, #16
20002724:	bd80      	pop	{r7, pc}
20002726:	46c0      	nop			; (mov r8, r8)
20002728:	40021014 	andmi	r1, r2, r4, lsl r0

2000272c <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
2000272c:	b580      	push	{r7, lr}
2000272e:	b082      	sub	sp, #8
20002730:	af00      	add	r7, sp, #0
20002732:	0002      	movs	r2, r0
20002734:	1dfb      	adds	r3, r7, #7
20002736:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20002738:	2001      	movs	r0, #1
2000273a:	f7ff ffcf 	bl	200026dc <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
2000273e:	2002      	movs	r0, #2
20002740:	f7ff ffcc 	bl	200026dc <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20002744:	1dfb      	adds	r3, r7, #7
20002746:	781b      	ldrb	r3, [r3, #0]
20002748:	0018      	movs	r0, r3
2000274a:	f000 f86d 	bl	20002828 <ascii_write_controller>
}
2000274e:	46c0      	nop			; (mov r8, r8)
20002750:	46bd      	mov	sp, r7
20002752:	b002      	add	sp, #8
20002754:	bd80      	pop	{r7, pc}

20002756 <ascii_write_data>:

void ascii_write_data(unsigned char data){
20002756:	b580      	push	{r7, lr}
20002758:	b082      	sub	sp, #8
2000275a:	af00      	add	r7, sp, #0
2000275c:	0002      	movs	r2, r0
2000275e:	1dfb      	adds	r3, r7, #7
20002760:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20002762:	2001      	movs	r0, #1
20002764:	f7ff ff98 	bl	20002698 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20002768:	2002      	movs	r0, #2
2000276a:	f7ff ffb7 	bl	200026dc <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
2000276e:	1dfb      	adds	r3, r7, #7
20002770:	781b      	ldrb	r3, [r3, #0]
20002772:	0018      	movs	r0, r3
20002774:	f000 f858 	bl	20002828 <ascii_write_controller>
}
20002778:	46c0      	nop			; (mov r8, r8)
2000277a:	46bd      	mov	sp, r7
2000277c:	b002      	add	sp, #8
2000277e:	bd80      	pop	{r7, pc}

20002780 <ascii_read_status>:

unsigned char ascii_read_status(void){
20002780:	b590      	push	{r4, r7, lr}
20002782:	b083      	sub	sp, #12
20002784:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20002786:	4b11      	ldr	r3, [pc, #68]	; (200027cc <ascii_read_status+0x4c>)
20002788:	4a10      	ldr	r2, [pc, #64]	; (200027cc <ascii_read_status+0x4c>)
2000278a:	6812      	ldr	r2, [r2, #0]
2000278c:	0412      	lsls	r2, r2, #16
2000278e:	0c12      	lsrs	r2, r2, #16
20002790:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20002792:	2001      	movs	r0, #1
20002794:	f7ff ffa2 	bl	200026dc <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20002798:	2002      	movs	r0, #2
2000279a:	f7ff ff7d 	bl	20002698 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
2000279e:	1dfc      	adds	r4, r7, #7
200027a0:	f000 f85a 	bl	20002858 <ascii_read_controller>
200027a4:	0003      	movs	r3, r0
200027a6:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
200027a8:	4b08      	ldr	r3, [pc, #32]	; (200027cc <ascii_read_status+0x4c>)
200027aa:	4a08      	ldr	r2, [pc, #32]	; (200027cc <ascii_read_status+0x4c>)
200027ac:	6812      	ldr	r2, [r2, #0]
200027ae:	0412      	lsls	r2, r2, #16
200027b0:	0c12      	lsrs	r2, r2, #16
200027b2:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
200027b4:	4b05      	ldr	r3, [pc, #20]	; (200027cc <ascii_read_status+0x4c>)
200027b6:	4a05      	ldr	r2, [pc, #20]	; (200027cc <ascii_read_status+0x4c>)
200027b8:	6812      	ldr	r2, [r2, #0]
200027ba:	4905      	ldr	r1, [pc, #20]	; (200027d0 <ascii_read_status+0x50>)
200027bc:	430a      	orrs	r2, r1
200027be:	601a      	str	r2, [r3, #0]
	return rv;
200027c0:	1dfb      	adds	r3, r7, #7
200027c2:	781b      	ldrb	r3, [r3, #0]
}
200027c4:	0018      	movs	r0, r3
200027c6:	46bd      	mov	sp, r7
200027c8:	b003      	add	sp, #12
200027ca:	bd90      	pop	{r4, r7, pc}
200027cc:	40021000 	andmi	r1, r2, r0
200027d0:	55550000 	ldrbpl	r0, [r5, #-0]

200027d4 <ascii_read_data>:

unsigned char ascii_read_data(void){
200027d4:	b590      	push	{r4, r7, lr}
200027d6:	b083      	sub	sp, #12
200027d8:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
200027da:	4b11      	ldr	r3, [pc, #68]	; (20002820 <ascii_read_data+0x4c>)
200027dc:	4a10      	ldr	r2, [pc, #64]	; (20002820 <ascii_read_data+0x4c>)
200027de:	6812      	ldr	r2, [r2, #0]
200027e0:	0412      	lsls	r2, r2, #16
200027e2:	0c12      	lsrs	r2, r2, #16
200027e4:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200027e6:	2001      	movs	r0, #1
200027e8:	f7ff ff56 	bl	20002698 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
200027ec:	2002      	movs	r0, #2
200027ee:	f7ff ff53 	bl	20002698 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
200027f2:	1dfc      	adds	r4, r7, #7
200027f4:	f000 f830 	bl	20002858 <ascii_read_controller>
200027f8:	0003      	movs	r3, r0
200027fa:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
200027fc:	4b08      	ldr	r3, [pc, #32]	; (20002820 <ascii_read_data+0x4c>)
200027fe:	4a08      	ldr	r2, [pc, #32]	; (20002820 <ascii_read_data+0x4c>)
20002800:	6812      	ldr	r2, [r2, #0]
20002802:	0412      	lsls	r2, r2, #16
20002804:	0c12      	lsrs	r2, r2, #16
20002806:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20002808:	4b05      	ldr	r3, [pc, #20]	; (20002820 <ascii_read_data+0x4c>)
2000280a:	4a05      	ldr	r2, [pc, #20]	; (20002820 <ascii_read_data+0x4c>)
2000280c:	6812      	ldr	r2, [r2, #0]
2000280e:	4905      	ldr	r1, [pc, #20]	; (20002824 <ascii_read_data+0x50>)
20002810:	430a      	orrs	r2, r1
20002812:	601a      	str	r2, [r3, #0]
	return rv;
20002814:	1dfb      	adds	r3, r7, #7
20002816:	781b      	ldrb	r3, [r3, #0]
}
20002818:	0018      	movs	r0, r3
2000281a:	46bd      	mov	sp, r7
2000281c:	b003      	add	sp, #12
2000281e:	bd90      	pop	{r4, r7, pc}
20002820:	40021000 	andmi	r1, r2, r0
20002824:	55550000 	ldrbpl	r0, [r5, #-0]

20002828 <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
20002828:	b580      	push	{r7, lr}
2000282a:	b082      	sub	sp, #8
2000282c:	af00      	add	r7, sp, #0
2000282e:	0002      	movs	r2, r0
20002830:	1dfb      	adds	r3, r7, #7
20002832:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20002834:	2040      	movs	r0, #64	; 0x40
20002836:	f7ff ff2f 	bl	20002698 <ascii_ctrl_bit_set>
	*portOdrHigh = c;
2000283a:	4a06      	ldr	r2, [pc, #24]	; (20002854 <ascii_write_controller+0x2c>)
2000283c:	1dfb      	adds	r3, r7, #7
2000283e:	781b      	ldrb	r3, [r3, #0]
20002840:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20002842:	f7fe ffa9 	bl	20001798 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
20002846:	2040      	movs	r0, #64	; 0x40
20002848:	f7ff ff48 	bl	200026dc <ascii_ctrl_bit_clear>
}
2000284c:	46c0      	nop			; (mov r8, r8)
2000284e:	46bd      	mov	sp, r7
20002850:	b002      	add	sp, #8
20002852:	bd80      	pop	{r7, pc}
20002854:	40021015 	andmi	r1, r2, r5, lsl r0

20002858 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
20002858:	b580      	push	{r7, lr}
2000285a:	b082      	sub	sp, #8
2000285c:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E);
2000285e:	2040      	movs	r0, #64	; 0x40
20002860:	f7ff ff1a 	bl	20002698 <ascii_ctrl_bit_set>
	delay_250ns();
20002864:	f7fe ff98 	bl	20001798 <delay_250ns>
	delay_250ns();
20002868:	f7fe ff96 	bl	20001798 <delay_250ns>
	c = *portIdrHigh;
2000286c:	4a06      	ldr	r2, [pc, #24]	; (20002888 <ascii_read_controller+0x30>)
2000286e:	1dfb      	adds	r3, r7, #7
20002870:	7812      	ldrb	r2, [r2, #0]
20002872:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20002874:	2040      	movs	r0, #64	; 0x40
20002876:	f7ff ff31 	bl	200026dc <ascii_ctrl_bit_clear>
	return c;
2000287a:	1dfb      	adds	r3, r7, #7
2000287c:	781b      	ldrb	r3, [r3, #0]
}
2000287e:	0018      	movs	r0, r3
20002880:	46bd      	mov	sp, r7
20002882:	b002      	add	sp, #8
20002884:	bd80      	pop	{r7, pc}
20002886:	46c0      	nop			; (mov r8, r8)
20002888:	40021011 	andmi	r1, r2, r1, lsl r0

2000288c <ascii_write_char>:

void ascii_write_char(unsigned char c){
2000288c:	b580      	push	{r7, lr}
2000288e:	b082      	sub	sp, #8
20002890:	af00      	add	r7, sp, #0
20002892:	0002      	movs	r2, r0
20002894:	1dfb      	adds	r3, r7, #7
20002896:	701a      	strb	r2, [r3, #0]
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20002898:	46c0      	nop			; (mov r8, r8)
2000289a:	f7ff ff71 	bl	20002780 <ascii_read_status>
2000289e:	0003      	movs	r3, r0
200028a0:	001a      	movs	r2, r3
200028a2:	2380      	movs	r3, #128	; 0x80
200028a4:	4013      	ands	r3, r2
200028a6:	2b80      	cmp	r3, #128	; 0x80
200028a8:	d0f7      	beq.n	2000289a <ascii_write_char+0xe>
		delay_micro(8); //latenstid
200028aa:	2008      	movs	r0, #8
200028ac:	f7fe ffb8 	bl	20001820 <delay_micro>
		ascii_write_data(c);
200028b0:	1dfb      	adds	r3, r7, #7
200028b2:	781b      	ldrb	r3, [r3, #0]
200028b4:	0018      	movs	r0, r3
200028b6:	f7ff ff4e 	bl	20002756 <ascii_write_data>
		delay_micro(50); //istÃƒÂ¤llet fÃƒÂ¶r 43us
200028ba:	2032      	movs	r0, #50	; 0x32
200028bc:	f7fe ffb0 	bl	20001820 <delay_micro>
}
200028c0:	46c0      	nop			; (mov r8, r8)
200028c2:	46bd      	mov	sp, r7
200028c4:	b002      	add	sp, #8
200028c6:	bd80      	pop	{r7, pc}

200028c8 <ascii_goToXY>:

void ascii_goToXY(unsigned char row, unsigned char column){
200028c8:	b580      	push	{r7, lr}
200028ca:	b084      	sub	sp, #16
200028cc:	af00      	add	r7, sp, #0
200028ce:	0002      	movs	r2, r0
200028d0:	1dfb      	adds	r3, r7, #7
200028d2:	701a      	strb	r2, [r3, #0]
200028d4:	1dbb      	adds	r3, r7, #6
200028d6:	1c0a      	adds	r2, r1, #0
200028d8:	701a      	strb	r2, [r3, #0]
	unsigned char address = row-1;
200028da:	230f      	movs	r3, #15
200028dc:	18fb      	adds	r3, r7, r3
200028de:	1dfa      	adds	r2, r7, #7
200028e0:	7812      	ldrb	r2, [r2, #0]
200028e2:	3a01      	subs	r2, #1
200028e4:	701a      	strb	r2, [r3, #0]
	if(column == 2){
200028e6:	1dbb      	adds	r3, r7, #6
200028e8:	781b      	ldrb	r3, [r3, #0]
200028ea:	2b02      	cmp	r3, #2
200028ec:	d106      	bne.n	200028fc <ascii_goToXY+0x34>
		address += 0x40;
200028ee:	230f      	movs	r3, #15
200028f0:	18fb      	adds	r3, r7, r3
200028f2:	220f      	movs	r2, #15
200028f4:	18ba      	adds	r2, r7, r2
200028f6:	7812      	ldrb	r2, [r2, #0]
200028f8:	3240      	adds	r2, #64	; 0x40
200028fa:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
200028fc:	230f      	movs	r3, #15
200028fe:	18fb      	adds	r3, r7, r3
20002900:	781b      	ldrb	r3, [r3, #0]
20002902:	2280      	movs	r2, #128	; 0x80
20002904:	4252      	negs	r2, r2
20002906:	4313      	orrs	r3, r2
20002908:	b2db      	uxtb	r3, r3
2000290a:	0018      	movs	r0, r3
2000290c:	f7ff ff0e 	bl	2000272c <ascii_write_cmd>
}
20002910:	46c0      	nop			; (mov r8, r8)
20002912:	46bd      	mov	sp, r7
20002914:	b004      	add	sp, #16
20002916:	bd80      	pop	{r7, pc}

20002918 <ascii_init>:

void ascii_init(void){
20002918:	b580      	push	{r7, lr}
2000291a:	af00      	add	r7, sp, #0
	//initiera displayen:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃ¤nta tills displayed Ã¤r redo
2000291c:	46c0      	nop			; (mov r8, r8)
2000291e:	f7ff ff2f 	bl	20002780 <ascii_read_status>
20002922:	0003      	movs	r3, r0
20002924:	001a      	movs	r2, r3
20002926:	2380      	movs	r3, #128	; 0x80
20002928:	4013      	ands	r3, r2
2000292a:	2b80      	cmp	r3, #128	; 0x80
2000292c:	d0f7      	beq.n	2000291e <ascii_init+0x6>
		delay_micro(20); //latenstid 
2000292e:	2014      	movs	r0, #20
20002930:	f7fe ff76 	bl	20001820 <delay_micro>
		ascii_write_cmd(0x38); //Function set (39us), 000011NFXX, N = antal rader = 2, F = -->0=5x8<--, 1=5x11
20002934:	2038      	movs	r0, #56	; 0x38
20002936:	f7ff fef9 	bl	2000272c <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
2000293a:	2064      	movs	r0, #100	; 0x64
2000293c:	f7fe ff70 	bl	20001820 <delay_micro>
		
	// clear display
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20002940:	46c0      	nop			; (mov r8, r8)
20002942:	f7ff ff1d 	bl	20002780 <ascii_read_status>
20002946:	0003      	movs	r3, r0
20002948:	001a      	movs	r2, r3
2000294a:	2380      	movs	r3, #128	; 0x80
2000294c:	4013      	ands	r3, r2
2000294e:	2b80      	cmp	r3, #128	; 0x80
20002950:	d0f7      	beq.n	20002942 <ascii_init+0x2a>
		delay_micro(20); //latenstid
20002952:	2014      	movs	r0, #20
20002954:	f7fe ff64 	bl	20001820 <delay_micro>
		ascii_write_cmd(0x01); 
20002958:	2001      	movs	r0, #1
2000295a:	f7ff fee7 	bl	2000272c <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
2000295e:	2064      	movs	r0, #100	; 0x64
20002960:	f7fe ff5e 	bl	20001820 <delay_micro>

	//display control:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20002964:	46c0      	nop			; (mov r8, r8)
20002966:	f7ff ff0b 	bl	20002780 <ascii_read_status>
2000296a:	0003      	movs	r3, r0
2000296c:	001a      	movs	r2, r3
2000296e:	2380      	movs	r3, #128	; 0x80
20002970:	4013      	ands	r3, r2
20002972:	2b80      	cmp	r3, #128	; 0x80
20002974:	d0f7      	beq.n	20002966 <ascii_init+0x4e>
		delay_micro(20); //latenstid
20002976:	2014      	movs	r0, #20
20002978:	f7fe ff52 	bl	20001820 <delay_micro>
		ascii_write_cmd(0x0C); //000001 + XXX. X:ena = 0:av / 1:pÃƒÂ¥ -  SkÃƒÂ¤rm/MarkÃƒÂ¶r/BlinkaMarkÃƒÂ¶ren
2000297c:	200c      	movs	r0, #12
2000297e:	f7ff fed5 	bl	2000272c <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20002982:	2064      	movs	r0, #100	; 0x64
20002984:	f7fe ff4c 	bl	20001820 <delay_micro>
		
	// entry mode set
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20002988:	46c0      	nop			; (mov r8, r8)
2000298a:	f7ff fef9 	bl	20002780 <ascii_read_status>
2000298e:	0003      	movs	r3, r0
20002990:	001a      	movs	r2, r3
20002992:	2380      	movs	r3, #128	; 0x80
20002994:	4013      	ands	r3, r2
20002996:	2b80      	cmp	r3, #128	; 0x80
20002998:	d0f7      	beq.n	2000298a <ascii_init+0x72>
		delay_micro(20); //latenstid
2000299a:	2014      	movs	r0, #20
2000299c:	f7fe ff40 	bl	20001820 <delay_micro>
		ascii_write_cmd(0x06); //00000001 + XY. X=0: markÃƒÂ¶ren vÃƒÂ¤nst. || X=1: marÃƒÂ¶kren hÃƒÂ¶g. - Y=0: skift av || Y=1: skift pÃƒÂ¥
200029a0:	2006      	movs	r0, #6
200029a2:	f7ff fec3 	bl	2000272c <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
200029a6:	2064      	movs	r0, #100	; 0x64
200029a8:	f7fe ff3a 	bl	20001820 <delay_micro>
		
		
}
200029ac:	46c0      	nop			; (mov r8, r8)
200029ae:	46bd      	mov	sp, r7
200029b0:	bd80      	pop	{r7, pc}

200029b2 <init_application>:

void init_application(void){
200029b2:	b580      	push	{r7, lr}
200029b4:	af00      	add	r7, sp, #0
	#ifdef USBDM
		*((unsigned long *) 0x40023830) = 0x18; //startar klockor pÃ¥ port D och E
		//__asm volatile ("LDR R0, =0x08000209\n BLX R0 \n"); //initiera PLL
	#endif
	//"initierar Port E med anvÃƒÂ¤ndning med LCD-modulen, dvs. sÃƒÂ¥vÃƒÂ¤l port E0-7 som E8-15 sÃƒÂ¤tts till utgÃƒÂ¥ngar
	* portModer = 0x55555555;
200029b6:	4b03      	ldr	r3, [pc, #12]	; (200029c4 <init_application+0x12>)
200029b8:	4a03      	ldr	r2, [pc, #12]	; (200029c8 <init_application+0x16>)
200029ba:	601a      	str	r2, [r3, #0]
}
200029bc:	46c0      	nop			; (mov r8, r8)
200029be:	46bd      	mov	sp, r7
200029c0:	bd80      	pop	{r7, pc}
200029c2:	46c0      	nop			; (mov r8, r8)
200029c4:	40021000 	andmi	r1, r2, r0
200029c8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200029cc <set_up_ascii>:

void set_up_ascii( void ) {
200029cc:	b580      	push	{r7, lr}
200029ce:	af00      	add	r7, sp, #0
	init_application();
200029d0:	f7ff ffef 	bl	200029b2 <init_application>
	ascii_init();
200029d4:	f7ff ffa0 	bl	20002918 <ascii_init>
}
200029d8:	46c0      	nop			; (mov r8, r8)
200029da:	46bd      	mov	sp, r7
200029dc:	bd80      	pop	{r7, pc}

200029de <clear_ascii>:

void clear_ascii( void ) {
200029de:	b590      	push	{r4, r7, lr}
200029e0:	b089      	sub	sp, #36	; 0x24
200029e2:	af00      	add	r7, sp, #0
	char *s;
	char clear[] = "                    ";
200029e4:	1d3b      	adds	r3, r7, #4
200029e6:	4a17      	ldr	r2, [pc, #92]	; (20002a44 <clear_ascii+0x66>)
200029e8:	ca13      	ldmia	r2!, {r0, r1, r4}
200029ea:	c313      	stmia	r3!, {r0, r1, r4}
200029ec:	ca03      	ldmia	r2!, {r0, r1}
200029ee:	c303      	stmia	r3!, {r0, r1}
200029f0:	7812      	ldrb	r2, [r2, #0]
200029f2:	701a      	strb	r2, [r3, #0]
	
	s = clear;
200029f4:	1d3b      	adds	r3, r7, #4
200029f6:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,1);
200029f8:	2101      	movs	r1, #1
200029fa:	2001      	movs	r0, #1
200029fc:	f7ff ff64 	bl	200028c8 <ascii_goToXY>
	while(*s){
20002a00:	e006      	b.n	20002a10 <clear_ascii+0x32>
		ascii_write_char(*s++);
20002a02:	69fb      	ldr	r3, [r7, #28]
20002a04:	1c5a      	adds	r2, r3, #1
20002a06:	61fa      	str	r2, [r7, #28]
20002a08:	781b      	ldrb	r3, [r3, #0]
20002a0a:	0018      	movs	r0, r3
20002a0c:	f7ff ff3e 	bl	2000288c <ascii_write_char>
	while(*s){
20002a10:	69fb      	ldr	r3, [r7, #28]
20002a12:	781b      	ldrb	r3, [r3, #0]
20002a14:	2b00      	cmp	r3, #0
20002a16:	d1f4      	bne.n	20002a02 <clear_ascii+0x24>
	}
	s = clear;
20002a18:	1d3b      	adds	r3, r7, #4
20002a1a:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,2);
20002a1c:	2102      	movs	r1, #2
20002a1e:	2001      	movs	r0, #1
20002a20:	f7ff ff52 	bl	200028c8 <ascii_goToXY>
	while(*s){
20002a24:	e006      	b.n	20002a34 <clear_ascii+0x56>
		ascii_write_char(*s++);
20002a26:	69fb      	ldr	r3, [r7, #28]
20002a28:	1c5a      	adds	r2, r3, #1
20002a2a:	61fa      	str	r2, [r7, #28]
20002a2c:	781b      	ldrb	r3, [r3, #0]
20002a2e:	0018      	movs	r0, r3
20002a30:	f7ff ff2c 	bl	2000288c <ascii_write_char>
	while(*s){
20002a34:	69fb      	ldr	r3, [r7, #28]
20002a36:	781b      	ldrb	r3, [r3, #0]
20002a38:	2b00      	cmp	r3, #0
20002a3a:	d1f4      	bne.n	20002a26 <clear_ascii+0x48>
	}
}
20002a3c:	46c0      	nop			; (mov r8, r8)
20002a3e:	46bd      	mov	sp, r7
20002a40:	b009      	add	sp, #36	; 0x24
20002a42:	bd90      	pop	{r4, r7, pc}
20002a44:	20008c94 	mulcs	r0, r4, ip

20002a48 <ascii_write>:

void ascii_write(char *row1, char *row2) {
20002a48:	b580      	push	{r7, lr}
20002a4a:	b082      	sub	sp, #8
20002a4c:	af00      	add	r7, sp, #0
20002a4e:	6078      	str	r0, [r7, #4]
20002a50:	6039      	str	r1, [r7, #0]
	clear_ascii();
20002a52:	f7ff ffc4 	bl	200029de <clear_ascii>
	
	ascii_goToXY(1,1);
20002a56:	2101      	movs	r1, #1
20002a58:	2001      	movs	r0, #1
20002a5a:	f7ff ff35 	bl	200028c8 <ascii_goToXY>
	while(*row1){
20002a5e:	e006      	b.n	20002a6e <ascii_write+0x26>
		ascii_write_char(*row1++);
20002a60:	687b      	ldr	r3, [r7, #4]
20002a62:	1c5a      	adds	r2, r3, #1
20002a64:	607a      	str	r2, [r7, #4]
20002a66:	781b      	ldrb	r3, [r3, #0]
20002a68:	0018      	movs	r0, r3
20002a6a:	f7ff ff0f 	bl	2000288c <ascii_write_char>
	while(*row1){
20002a6e:	687b      	ldr	r3, [r7, #4]
20002a70:	781b      	ldrb	r3, [r3, #0]
20002a72:	2b00      	cmp	r3, #0
20002a74:	d1f4      	bne.n	20002a60 <ascii_write+0x18>
	}	
	ascii_goToXY(1,2);
20002a76:	2102      	movs	r1, #2
20002a78:	2001      	movs	r0, #1
20002a7a:	f7ff ff25 	bl	200028c8 <ascii_goToXY>
	while(*row2){
20002a7e:	e006      	b.n	20002a8e <ascii_write+0x46>
		ascii_write_char(*row2++);
20002a80:	683b      	ldr	r3, [r7, #0]
20002a82:	1c5a      	adds	r2, r3, #1
20002a84:	603a      	str	r2, [r7, #0]
20002a86:	781b      	ldrb	r3, [r3, #0]
20002a88:	0018      	movs	r0, r3
20002a8a:	f7ff feff 	bl	2000288c <ascii_write_char>
	while(*row2){
20002a8e:	683b      	ldr	r3, [r7, #0]
20002a90:	781b      	ldrb	r3, [r3, #0]
20002a92:	2b00      	cmp	r3, #0
20002a94:	d1f4      	bne.n	20002a80 <ascii_write+0x38>
	}
	
	ascii_goToXY(21,1);
20002a96:	2101      	movs	r1, #1
20002a98:	2015      	movs	r0, #21
20002a9a:	f7ff ff15 	bl	200028c8 <ascii_goToXY>
}
20002a9e:	46c0      	nop			; (mov r8, r8)
20002aa0:	46bd      	mov	sp, r7
20002aa2:	b002      	add	sp, #8
20002aa4:	bd80      	pop	{r7, pc}

20002aa6 <ascii_write_part>:

void ascii_write_part(char *row1, char *row2, int limit1, int limit2) {
20002aa6:	b580      	push	{r7, lr}
20002aa8:	b086      	sub	sp, #24
20002aaa:	af00      	add	r7, sp, #0
20002aac:	60f8      	str	r0, [r7, #12]
20002aae:	60b9      	str	r1, [r7, #8]
20002ab0:	607a      	str	r2, [r7, #4]
20002ab2:	603b      	str	r3, [r7, #0]
	clear_ascii();
20002ab4:	f7ff ff93 	bl	200029de <clear_ascii>
	
	ascii_goToXY(1,1);
20002ab8:	2101      	movs	r1, #1
20002aba:	2001      	movs	r0, #1
20002abc:	f7ff ff04 	bl	200028c8 <ascii_goToXY>
	int i = 0;
20002ac0:	2300      	movs	r3, #0
20002ac2:	617b      	str	r3, [r7, #20]
	if(limit1 > 0) {
20002ac4:	687b      	ldr	r3, [r7, #4]
20002ac6:	2b00      	cmp	r3, #0
20002ac8:	dd11      	ble.n	20002aee <ascii_write_part+0x48>
		while(*row1 && (i++ < limit1)){
20002aca:	e006      	b.n	20002ada <ascii_write_part+0x34>
			ascii_write_char(*row1++);
20002acc:	68fb      	ldr	r3, [r7, #12]
20002ace:	1c5a      	adds	r2, r3, #1
20002ad0:	60fa      	str	r2, [r7, #12]
20002ad2:	781b      	ldrb	r3, [r3, #0]
20002ad4:	0018      	movs	r0, r3
20002ad6:	f7ff fed9 	bl	2000288c <ascii_write_char>
		while(*row1 && (i++ < limit1)){
20002ada:	68fb      	ldr	r3, [r7, #12]
20002adc:	781b      	ldrb	r3, [r3, #0]
20002ade:	2b00      	cmp	r3, #0
20002ae0:	d005      	beq.n	20002aee <ascii_write_part+0x48>
20002ae2:	697b      	ldr	r3, [r7, #20]
20002ae4:	1c5a      	adds	r2, r3, #1
20002ae6:	617a      	str	r2, [r7, #20]
20002ae8:	687a      	ldr	r2, [r7, #4]
20002aea:	4293      	cmp	r3, r2
20002aec:	dbee      	blt.n	20002acc <ascii_write_part+0x26>
		}			
	}

	ascii_goToXY(1,2);
20002aee:	2102      	movs	r1, #2
20002af0:	2001      	movs	r0, #1
20002af2:	f7ff fee9 	bl	200028c8 <ascii_goToXY>
	i = 0;
20002af6:	2300      	movs	r3, #0
20002af8:	617b      	str	r3, [r7, #20]
	if(limit2 > 0) {
20002afa:	683b      	ldr	r3, [r7, #0]
20002afc:	2b00      	cmp	r3, #0
20002afe:	dd11      	ble.n	20002b24 <ascii_write_part+0x7e>
		while(*row2 && (i++ < limit2)){
20002b00:	e006      	b.n	20002b10 <ascii_write_part+0x6a>
			ascii_write_char(*row2++);
20002b02:	68bb      	ldr	r3, [r7, #8]
20002b04:	1c5a      	adds	r2, r3, #1
20002b06:	60ba      	str	r2, [r7, #8]
20002b08:	781b      	ldrb	r3, [r3, #0]
20002b0a:	0018      	movs	r0, r3
20002b0c:	f7ff febe 	bl	2000288c <ascii_write_char>
		while(*row2 && (i++ < limit2)){
20002b10:	68bb      	ldr	r3, [r7, #8]
20002b12:	781b      	ldrb	r3, [r3, #0]
20002b14:	2b00      	cmp	r3, #0
20002b16:	d005      	beq.n	20002b24 <ascii_write_part+0x7e>
20002b18:	697b      	ldr	r3, [r7, #20]
20002b1a:	1c5a      	adds	r2, r3, #1
20002b1c:	617a      	str	r2, [r7, #20]
20002b1e:	683a      	ldr	r2, [r7, #0]
20002b20:	4293      	cmp	r3, r2
20002b22:	dbee      	blt.n	20002b02 <ascii_write_part+0x5c>
		}
	}
	
	ascii_goToXY(21,1);
20002b24:	2101      	movs	r1, #1
20002b26:	2015      	movs	r0, #21
20002b28:	f7ff fece 	bl	200028c8 <ascii_goToXY>
}
20002b2c:	46c0      	nop			; (mov r8, r8)
20002b2e:	46bd      	mov	sp, r7
20002b30:	b006      	add	sp, #24
20002b32:	bd80      	pop	{r7, pc}

20002b34 <ascii_test>:



void ascii_test(void) {
20002b34:	b590      	push	{r4, r7, lr}
20002b36:	b08b      	sub	sp, #44	; 0x2c
20002b38:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Alfanumerisk";
20002b3a:	2314      	movs	r3, #20
20002b3c:	18fb      	adds	r3, r7, r3
20002b3e:	4a1c      	ldr	r2, [pc, #112]	; (20002bb0 <ascii_test+0x7c>)
20002b40:	ca13      	ldmia	r2!, {r0, r1, r4}
20002b42:	c313      	stmia	r3!, {r0, r1, r4}
20002b44:	7812      	ldrb	r2, [r2, #0]
20002b46:	701a      	strb	r2, [r3, #0]
	char test2[] = "hardåäöare suger";
20002b48:	003b      	movs	r3, r7
20002b4a:	4a1a      	ldr	r2, [pc, #104]	; (20002bb4 <ascii_test+0x80>)
20002b4c:	ca13      	ldmia	r2!, {r0, r1, r4}
20002b4e:	c313      	stmia	r3!, {r0, r1, r4}
20002b50:	ca03      	ldmia	r2!, {r0, r1}
20002b52:	c303      	stmia	r3!, {r0, r1}
	
	init_application();
20002b54:	f7ff ff2d 	bl	200029b2 <init_application>
	ascii_init();
20002b58:	f7ff fede 	bl	20002918 <ascii_init>
	ascii_goToXY(1,1);
20002b5c:	2101      	movs	r1, #1
20002b5e:	2001      	movs	r0, #1
20002b60:	f7ff feb2 	bl	200028c8 <ascii_goToXY>
	s = test1;
20002b64:	2314      	movs	r3, #20
20002b66:	18fb      	adds	r3, r7, r3
20002b68:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20002b6a:	e006      	b.n	20002b7a <ascii_test+0x46>
		ascii_write_char(*s++);
20002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002b6e:	1c5a      	adds	r2, r3, #1
20002b70:	627a      	str	r2, [r7, #36]	; 0x24
20002b72:	781b      	ldrb	r3, [r3, #0]
20002b74:	0018      	movs	r0, r3
20002b76:	f7ff fe89 	bl	2000288c <ascii_write_char>
	while(*s){
20002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002b7c:	781b      	ldrb	r3, [r3, #0]
20002b7e:	2b00      	cmp	r3, #0
20002b80:	d1f4      	bne.n	20002b6c <ascii_test+0x38>
	}
	ascii_goToXY(1,2);
20002b82:	2102      	movs	r1, #2
20002b84:	2001      	movs	r0, #1
20002b86:	f7ff fe9f 	bl	200028c8 <ascii_goToXY>
	s = test2;
20002b8a:	003b      	movs	r3, r7
20002b8c:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20002b8e:	e006      	b.n	20002b9e <ascii_test+0x6a>
		ascii_write_char(*s++);
20002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002b92:	1c5a      	adds	r2, r3, #1
20002b94:	627a      	str	r2, [r7, #36]	; 0x24
20002b96:	781b      	ldrb	r3, [r3, #0]
20002b98:	0018      	movs	r0, r3
20002b9a:	f7ff fe77 	bl	2000288c <ascii_write_char>
	while(*s){
20002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002ba0:	781b      	ldrb	r3, [r3, #0]
20002ba2:	2b00      	cmp	r3, #0
20002ba4:	d1f4      	bne.n	20002b90 <ascii_test+0x5c>
	}
	return 0;
20002ba6:	46c0      	nop			; (mov r8, r8)
20002ba8:	46bd      	mov	sp, r7
20002baa:	b00b      	add	sp, #44	; 0x2c
20002bac:	bd90      	pop	{r4, r7, pc}
20002bae:	46c0      	nop			; (mov r8, r8)
20002bb0:	20008cac 	andcs	r8, r0, ip, lsr #25
20002bb4:	20008cbc 			; <UNDEFINED> instruction: 0x20008cbc

20002bb8 <display>:
#include "slow_text.h"
#include "ascii_display.h"

void display(SlowText *this, int length_of_row1) {
20002bb8:	b580      	push	{r7, lr}
20002bba:	b084      	sub	sp, #16
20002bbc:	af00      	add	r7, sp, #0
20002bbe:	6078      	str	r0, [r7, #4]
20002bc0:	6039      	str	r1, [r7, #0]
	int limit1 = this->counter / this->speed;
20002bc2:	687b      	ldr	r3, [r7, #4]
20002bc4:	689a      	ldr	r2, [r3, #8]
20002bc6:	687b      	ldr	r3, [r7, #4]
20002bc8:	68db      	ldr	r3, [r3, #12]
20002bca:	0019      	movs	r1, r3
20002bcc:	0010      	movs	r0, r2
20002bce:	f000 f925 	bl	20002e1c <__divsi3>
20002bd2:	0003      	movs	r3, r0
20002bd4:	60fb      	str	r3, [r7, #12]
	int limit2 = this->counter / this->speed - length_of_row1;
20002bd6:	687b      	ldr	r3, [r7, #4]
20002bd8:	689a      	ldr	r2, [r3, #8]
20002bda:	687b      	ldr	r3, [r7, #4]
20002bdc:	68db      	ldr	r3, [r3, #12]
20002bde:	0019      	movs	r1, r3
20002be0:	0010      	movs	r0, r2
20002be2:	f000 f91b 	bl	20002e1c <__divsi3>
20002be6:	0003      	movs	r3, r0
20002be8:	001a      	movs	r2, r3
20002bea:	683b      	ldr	r3, [r7, #0]
20002bec:	1ad3      	subs	r3, r2, r3
20002bee:	60bb      	str	r3, [r7, #8]
	ascii_write_part(this->row1, this->row2, limit1, limit2);
20002bf0:	687b      	ldr	r3, [r7, #4]
20002bf2:	6818      	ldr	r0, [r3, #0]
20002bf4:	687b      	ldr	r3, [r7, #4]
20002bf6:	6859      	ldr	r1, [r3, #4]
20002bf8:	68bb      	ldr	r3, [r7, #8]
20002bfa:	68fa      	ldr	r2, [r7, #12]
20002bfc:	f7ff ff53 	bl	20002aa6 <ascii_write_part>
	
	this->counter++;
20002c00:	687b      	ldr	r3, [r7, #4]
20002c02:	689b      	ldr	r3, [r3, #8]
20002c04:	1c5a      	adds	r2, r3, #1
20002c06:	687b      	ldr	r3, [r7, #4]
20002c08:	609a      	str	r2, [r3, #8]
}
20002c0a:	46c0      	nop			; (mov r8, r8)
20002c0c:	46bd      	mov	sp, r7
20002c0e:	b004      	add	sp, #16
20002c10:	bd80      	pop	{r7, pc}

20002c12 <init_slow_text>:

void init_slow_text(SlowText *obj, char *row1, char *row2, int speed) {
20002c12:	b580      	push	{r7, lr}
20002c14:	b084      	sub	sp, #16
20002c16:	af00      	add	r7, sp, #0
20002c18:	60f8      	str	r0, [r7, #12]
20002c1a:	60b9      	str	r1, [r7, #8]
20002c1c:	607a      	str	r2, [r7, #4]
20002c1e:	603b      	str	r3, [r7, #0]
	obj->row1 = row1;
20002c20:	68fb      	ldr	r3, [r7, #12]
20002c22:	68ba      	ldr	r2, [r7, #8]
20002c24:	601a      	str	r2, [r3, #0]
	obj->row2 = row2;
20002c26:	68fb      	ldr	r3, [r7, #12]
20002c28:	687a      	ldr	r2, [r7, #4]
20002c2a:	605a      	str	r2, [r3, #4]
	obj->speed = speed;
20002c2c:	68fb      	ldr	r3, [r7, #12]
20002c2e:	683a      	ldr	r2, [r7, #0]
20002c30:	60da      	str	r2, [r3, #12]
	obj->counter = 0;
20002c32:	68fb      	ldr	r3, [r7, #12]
20002c34:	2200      	movs	r2, #0
20002c36:	609a      	str	r2, [r3, #8]
	obj->display = display;
20002c38:	68fb      	ldr	r3, [r7, #12]
20002c3a:	4a03      	ldr	r2, [pc, #12]	; (20002c48 <init_slow_text+0x36>)
20002c3c:	611a      	str	r2, [r3, #16]
20002c3e:	46c0      	nop			; (mov r8, r8)
20002c40:	46bd      	mov	sp, r7
20002c42:	b004      	add	sp, #16
20002c44:	bd80      	pop	{r7, pc}
20002c46:	46c0      	nop			; (mov r8, r8)
20002c48:	20002bb9 			; <UNDEFINED> instruction: 0x20002bb9

20002c4c <initSprites>:


GameObject indoorsObj;
Image indoorsImage;
Image indoorsImages[1];
static void initSprites( void ) {	
20002c4c:	b580      	push	{r7, lr}
20002c4e:	b084      	sub	sp, #16
20002c50:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoorsLight;
20002c52:	4b12      	ldr	r3, [pc, #72]	; (20002c9c <initSprites+0x50>)
20002c54:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors_light_bits, indoors_black_width, indoors_black_height);
20002c56:	4912      	ldr	r1, [pc, #72]	; (20002ca0 <initSprites+0x54>)
20002c58:	68f8      	ldr	r0, [r7, #12]
20002c5a:	2340      	movs	r3, #64	; 0x40
20002c5c:	2280      	movs	r2, #128	; 0x80
20002c5e:	f7ff fcd1 	bl	20002604 <load_sprite>
	indoorsLight = pointer11;
20002c62:	4b10      	ldr	r3, [pc, #64]	; (20002ca4 <initSprites+0x58>)
20002c64:	68fa      	ldr	r2, [r7, #12]
20002c66:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoorsGray;
20002c68:	4b0f      	ldr	r3, [pc, #60]	; (20002ca8 <initSprites+0x5c>)
20002c6a:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors_gray_bits, indoors_black_width, indoors_black_height);
20002c6c:	490f      	ldr	r1, [pc, #60]	; (20002cac <initSprites+0x60>)
20002c6e:	68b8      	ldr	r0, [r7, #8]
20002c70:	2340      	movs	r3, #64	; 0x40
20002c72:	2280      	movs	r2, #128	; 0x80
20002c74:	f7ff fcc6 	bl	20002604 <load_sprite>
	indoorsGray = pointer12;
20002c78:	4b0d      	ldr	r3, [pc, #52]	; (20002cb0 <initSprites+0x64>)
20002c7a:	68ba      	ldr	r2, [r7, #8]
20002c7c:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoorsBlack;
20002c7e:	4b0d      	ldr	r3, [pc, #52]	; (20002cb4 <initSprites+0x68>)
20002c80:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors_black_bits, indoors_black_width, indoors_black_height);
20002c82:	490d      	ldr	r1, [pc, #52]	; (20002cb8 <initSprites+0x6c>)
20002c84:	6878      	ldr	r0, [r7, #4]
20002c86:	2340      	movs	r3, #64	; 0x40
20002c88:	2280      	movs	r2, #128	; 0x80
20002c8a:	f7ff fcbb 	bl	20002604 <load_sprite>
	indoorsBlack = pointer13;	
20002c8e:	4b0b      	ldr	r3, [pc, #44]	; (20002cbc <initSprites+0x70>)
20002c90:	687a      	ldr	r2, [r7, #4]
20002c92:	601a      	str	r2, [r3, #0]
	
}
20002c94:	46c0      	nop			; (mov r8, r8)
20002c96:	46bd      	mov	sp, r7
20002c98:	b004      	add	sp, #16
20002c9a:	bd80      	pop	{r7, pc}
20002c9c:	2000527c 	andcs	r5, r0, ip, ror r2
20002ca0:	20007aec 	andcs	r7, r0, ip, ror #21
20002ca4:	200052d8 	ldrdcs	r5, [r0], -r8
20002ca8:	20005270 	andcs	r5, r0, r0, ror r2
20002cac:	200076ec 	andcs	r7, r0, ip, ror #13
20002cb0:	20005294 	mulcs	r0, r4, r2
20002cb4:	20005288 	andcs	r5, r0, r8, lsl #5
20002cb8:	200072ec 	andcs	r7, r0, ip, ror #5
20002cbc:	200052c8 	andcs	r5, r0, r8, asr #5

20002cc0 <init_indoors>:
	
void init_indoors( GameObject *indoorsObj ) {
20002cc0:	b590      	push	{r4, r7, lr}
20002cc2:	b083      	sub	sp, #12
20002cc4:	af00      	add	r7, sp, #0
20002cc6:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20002cc8:	4b14      	ldr	r3, [pc, #80]	; (20002d1c <init_indoors+0x5c>)
20002cca:	681b      	ldr	r3, [r3, #0]
20002ccc:	2b00      	cmp	r3, #0
20002cce:	d011      	beq.n	20002cf4 <init_indoors+0x34>
		initSprites();
20002cd0:	f7ff ffbc 	bl	20002c4c <initSprites>
		firstTime = 0;			
20002cd4:	4b11      	ldr	r3, [pc, #68]	; (20002d1c <init_indoors+0x5c>)
20002cd6:	2200      	movs	r2, #0
20002cd8:	601a      	str	r2, [r3, #0]

		indoorsImages[0] = indoorsImage;
20002cda:	4b11      	ldr	r3, [pc, #68]	; (20002d20 <init_indoors+0x60>)
20002cdc:	4a11      	ldr	r2, [pc, #68]	; (20002d24 <init_indoors+0x64>)
20002cde:	ca13      	ldmia	r2!, {r0, r1, r4}
20002ce0:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoorsImages[0], indoorsBlack, indoorsGray, indoorsLight);
20002ce2:	4b11      	ldr	r3, [pc, #68]	; (20002d28 <init_indoors+0x68>)
20002ce4:	6819      	ldr	r1, [r3, #0]
20002ce6:	4b11      	ldr	r3, [pc, #68]	; (20002d2c <init_indoors+0x6c>)
20002ce8:	681a      	ldr	r2, [r3, #0]
20002cea:	4b11      	ldr	r3, [pc, #68]	; (20002d30 <init_indoors+0x70>)
20002cec:	681b      	ldr	r3, [r3, #0]
20002cee:	480c      	ldr	r0, [pc, #48]	; (20002d20 <init_indoors+0x60>)
20002cf0:	f7ff fc74 	bl	200025dc <load_image>
	}
	
	indoorsObj->images = indoorsImages;
20002cf4:	687b      	ldr	r3, [r7, #4]
20002cf6:	4a0a      	ldr	r2, [pc, #40]	; (20002d20 <init_indoors+0x60>)
20002cf8:	601a      	str	r2, [r3, #0]

	indoorsObj->current_frame = 0;
20002cfa:	687b      	ldr	r3, [r7, #4]
20002cfc:	2200      	movs	r2, #0
20002cfe:	615a      	str	r2, [r3, #20]
	indoorsObj->n_frames = 1;
20002d00:	687b      	ldr	r3, [r7, #4]
20002d02:	2201      	movs	r2, #1
20002d04:	619a      	str	r2, [r3, #24]
	indoorsObj->animation_speed = 1;
20002d06:	687b      	ldr	r3, [r7, #4]
20002d08:	2201      	movs	r2, #1
20002d0a:	61da      	str	r2, [r3, #28]
	indoorsObj->animation_counter = 0;
20002d0c:	687b      	ldr	r3, [r7, #4]
20002d0e:	2200      	movs	r2, #0
20002d10:	621a      	str	r2, [r3, #32]
}
20002d12:	46c0      	nop			; (mov r8, r8)
20002d14:	46bd      	mov	sp, r7
20002d16:	b003      	add	sp, #12
20002d18:	bd90      	pop	{r4, r7, pc}
20002d1a:	46c0      	nop			; (mov r8, r8)
20002d1c:	20007eec 	andcs	r7, r0, ip, ror #29
20002d20:	200052bc 			; <UNDEFINED> instruction: 0x200052bc
20002d24:	200052cc 	andcs	r5, r0, ip, asr #5
20002d28:	200052c8 	andcs	r5, r0, r8, asr #5
20002d2c:	20005294 	mulcs	r0, r4, r2
20002d30:	200052d8 	ldrdcs	r5, [r0], -r8

20002d34 <initSprites>:


GameObject indoors2Obj;
Image indoors2Image;
Image indoors2Images[1];
static void initSprites( void ) {	
20002d34:	b580      	push	{r7, lr}
20002d36:	b084      	sub	sp, #16
20002d38:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoors2Light;
20002d3a:	4b12      	ldr	r3, [pc, #72]	; (20002d84 <initSprites+0x50>)
20002d3c:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors2_light_bits, indoors2_black_width, indoors2_black_height);
20002d3e:	4912      	ldr	r1, [pc, #72]	; (20002d88 <initSprites+0x54>)
20002d40:	68f8      	ldr	r0, [r7, #12]
20002d42:	2340      	movs	r3, #64	; 0x40
20002d44:	2280      	movs	r2, #128	; 0x80
20002d46:	f7ff fc5d 	bl	20002604 <load_sprite>
	indoors2Light = pointer11;
20002d4a:	4b10      	ldr	r3, [pc, #64]	; (20002d8c <initSprites+0x58>)
20002d4c:	68fa      	ldr	r2, [r7, #12]
20002d4e:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoors2Gray;
20002d50:	4b0f      	ldr	r3, [pc, #60]	; (20002d90 <initSprites+0x5c>)
20002d52:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors2_gray_bits, indoors2_black_width, indoors2_black_height);
20002d54:	490f      	ldr	r1, [pc, #60]	; (20002d94 <initSprites+0x60>)
20002d56:	68b8      	ldr	r0, [r7, #8]
20002d58:	2340      	movs	r3, #64	; 0x40
20002d5a:	2280      	movs	r2, #128	; 0x80
20002d5c:	f7ff fc52 	bl	20002604 <load_sprite>
	indoors2Gray = pointer12;
20002d60:	4b0d      	ldr	r3, [pc, #52]	; (20002d98 <initSprites+0x64>)
20002d62:	68ba      	ldr	r2, [r7, #8]
20002d64:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoors2Black;
20002d66:	4b0d      	ldr	r3, [pc, #52]	; (20002d9c <initSprites+0x68>)
20002d68:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors2_black_bits, indoors2_black_width, indoors2_black_height);
20002d6a:	490d      	ldr	r1, [pc, #52]	; (20002da0 <initSprites+0x6c>)
20002d6c:	6878      	ldr	r0, [r7, #4]
20002d6e:	2340      	movs	r3, #64	; 0x40
20002d70:	2280      	movs	r2, #128	; 0x80
20002d72:	f7ff fc47 	bl	20002604 <load_sprite>
	indoors2Black = pointer13;	
20002d76:	4b0b      	ldr	r3, [pc, #44]	; (20002da4 <initSprites+0x70>)
20002d78:	687a      	ldr	r2, [r7, #4]
20002d7a:	601a      	str	r2, [r3, #0]
	
}
20002d7c:	46c0      	nop			; (mov r8, r8)
20002d7e:	46bd      	mov	sp, r7
20002d80:	b004      	add	sp, #16
20002d82:	bd80      	pop	{r7, pc}
20002d84:	20005338 	andcs	r5, r0, r8, lsr r3
20002d88:	200086f0 	strdcs	r8, [r0], -r0
20002d8c:	20005328 	andcs	r5, r0, r8, lsr #6
20002d90:	2000531c 	andcs	r5, r0, ip, lsl r3
20002d94:	200082f0 	strdcs	r8, [r0], -r0
20002d98:	20005300 	andcs	r5, r0, r0, lsl #6
20002d9c:	2000532c 	andcs	r5, r0, ip, lsr #6
20002da0:	20007ef0 	strdcs	r7, [r0], -r0
20002da4:	20005344 	andcs	r5, r0, r4, asr #6

20002da8 <init_indoors2>:
	
void init_indoors2( GameObject *indoors2Obj ) {
20002da8:	b590      	push	{r4, r7, lr}
20002daa:	b083      	sub	sp, #12
20002dac:	af00      	add	r7, sp, #0
20002dae:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20002db0:	4b14      	ldr	r3, [pc, #80]	; (20002e04 <init_indoors2+0x5c>)
20002db2:	681b      	ldr	r3, [r3, #0]
20002db4:	2b00      	cmp	r3, #0
20002db6:	d011      	beq.n	20002ddc <init_indoors2+0x34>
		initSprites();
20002db8:	f7ff ffbc 	bl	20002d34 <initSprites>
		firstTime = 0;			
20002dbc:	4b11      	ldr	r3, [pc, #68]	; (20002e04 <init_indoors2+0x5c>)
20002dbe:	2200      	movs	r2, #0
20002dc0:	601a      	str	r2, [r3, #0]

		indoors2Images[0] = indoors2Image;
20002dc2:	4b11      	ldr	r3, [pc, #68]	; (20002e08 <init_indoors2+0x60>)
20002dc4:	4a11      	ldr	r2, [pc, #68]	; (20002e0c <init_indoors2+0x64>)
20002dc6:	ca13      	ldmia	r2!, {r0, r1, r4}
20002dc8:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoors2Images[0], indoors2Black, indoors2Gray, indoors2Light);
20002dca:	4b11      	ldr	r3, [pc, #68]	; (20002e10 <init_indoors2+0x68>)
20002dcc:	6819      	ldr	r1, [r3, #0]
20002dce:	4b11      	ldr	r3, [pc, #68]	; (20002e14 <init_indoors2+0x6c>)
20002dd0:	681a      	ldr	r2, [r3, #0]
20002dd2:	4b11      	ldr	r3, [pc, #68]	; (20002e18 <init_indoors2+0x70>)
20002dd4:	681b      	ldr	r3, [r3, #0]
20002dd6:	480c      	ldr	r0, [pc, #48]	; (20002e08 <init_indoors2+0x60>)
20002dd8:	f7ff fc00 	bl	200025dc <load_image>
	}
	
	indoors2Obj->images = indoors2Images;
20002ddc:	687b      	ldr	r3, [r7, #4]
20002dde:	4a0a      	ldr	r2, [pc, #40]	; (20002e08 <init_indoors2+0x60>)
20002de0:	601a      	str	r2, [r3, #0]

	indoors2Obj->current_frame = 0;
20002de2:	687b      	ldr	r3, [r7, #4]
20002de4:	2200      	movs	r2, #0
20002de6:	615a      	str	r2, [r3, #20]
	indoors2Obj->n_frames = 1;
20002de8:	687b      	ldr	r3, [r7, #4]
20002dea:	2201      	movs	r2, #1
20002dec:	619a      	str	r2, [r3, #24]
	indoors2Obj->animation_speed = 1;
20002dee:	687b      	ldr	r3, [r7, #4]
20002df0:	2201      	movs	r2, #1
20002df2:	61da      	str	r2, [r3, #28]
	indoors2Obj->animation_counter = 0;
20002df4:	687b      	ldr	r3, [r7, #4]
20002df6:	2200      	movs	r2, #0
20002df8:	621a      	str	r2, [r3, #32]
}
20002dfa:	46c0      	nop			; (mov r8, r8)
20002dfc:	46bd      	mov	sp, r7
20002dfe:	b003      	add	sp, #12
20002e00:	bd90      	pop	{r4, r7, pc}
20002e02:	46c0      	nop			; (mov r8, r8)
20002e04:	20008af0 	strdcs	r8, [r0], -r0
20002e08:	20005304 	andcs	r5, r0, r4, lsl #6
20002e0c:	20005310 	andcs	r5, r0, r0, lsl r3
20002e10:	20005344 	andcs	r5, r0, r4, asr #6
20002e14:	20005300 	andcs	r5, r0, r0, lsl #6
20002e18:	20005328 	andcs	r5, r0, r8, lsr #6

20002e1c <__divsi3>:
20002e1c:	4603      	mov	r3, r0
20002e1e:	430b      	orrs	r3, r1
20002e20:	d47f      	bmi.n	20002f22 <__divsi3+0x106>
20002e22:	2200      	movs	r2, #0
20002e24:	0843      	lsrs	r3, r0, #1
20002e26:	428b      	cmp	r3, r1
20002e28:	d374      	bcc.n	20002f14 <__divsi3+0xf8>
20002e2a:	0903      	lsrs	r3, r0, #4
20002e2c:	428b      	cmp	r3, r1
20002e2e:	d35f      	bcc.n	20002ef0 <__divsi3+0xd4>
20002e30:	0a03      	lsrs	r3, r0, #8
20002e32:	428b      	cmp	r3, r1
20002e34:	d344      	bcc.n	20002ec0 <__divsi3+0xa4>
20002e36:	0b03      	lsrs	r3, r0, #12
20002e38:	428b      	cmp	r3, r1
20002e3a:	d328      	bcc.n	20002e8e <__divsi3+0x72>
20002e3c:	0c03      	lsrs	r3, r0, #16
20002e3e:	428b      	cmp	r3, r1
20002e40:	d30d      	bcc.n	20002e5e <__divsi3+0x42>
20002e42:	22ff      	movs	r2, #255	; 0xff
20002e44:	0209      	lsls	r1, r1, #8
20002e46:	ba12      	rev	r2, r2
20002e48:	0c03      	lsrs	r3, r0, #16
20002e4a:	428b      	cmp	r3, r1
20002e4c:	d302      	bcc.n	20002e54 <__divsi3+0x38>
20002e4e:	1212      	asrs	r2, r2, #8
20002e50:	0209      	lsls	r1, r1, #8
20002e52:	d065      	beq.n	20002f20 <__divsi3+0x104>
20002e54:	0b03      	lsrs	r3, r0, #12
20002e56:	428b      	cmp	r3, r1
20002e58:	d319      	bcc.n	20002e8e <__divsi3+0x72>
20002e5a:	e000      	b.n	20002e5e <__divsi3+0x42>
20002e5c:	0a09      	lsrs	r1, r1, #8
20002e5e:	0bc3      	lsrs	r3, r0, #15
20002e60:	428b      	cmp	r3, r1
20002e62:	d301      	bcc.n	20002e68 <__divsi3+0x4c>
20002e64:	03cb      	lsls	r3, r1, #15
20002e66:	1ac0      	subs	r0, r0, r3
20002e68:	4152      	adcs	r2, r2
20002e6a:	0b83      	lsrs	r3, r0, #14
20002e6c:	428b      	cmp	r3, r1
20002e6e:	d301      	bcc.n	20002e74 <__divsi3+0x58>
20002e70:	038b      	lsls	r3, r1, #14
20002e72:	1ac0      	subs	r0, r0, r3
20002e74:	4152      	adcs	r2, r2
20002e76:	0b43      	lsrs	r3, r0, #13
20002e78:	428b      	cmp	r3, r1
20002e7a:	d301      	bcc.n	20002e80 <__divsi3+0x64>
20002e7c:	034b      	lsls	r3, r1, #13
20002e7e:	1ac0      	subs	r0, r0, r3
20002e80:	4152      	adcs	r2, r2
20002e82:	0b03      	lsrs	r3, r0, #12
20002e84:	428b      	cmp	r3, r1
20002e86:	d301      	bcc.n	20002e8c <__divsi3+0x70>
20002e88:	030b      	lsls	r3, r1, #12
20002e8a:	1ac0      	subs	r0, r0, r3
20002e8c:	4152      	adcs	r2, r2
20002e8e:	0ac3      	lsrs	r3, r0, #11
20002e90:	428b      	cmp	r3, r1
20002e92:	d301      	bcc.n	20002e98 <__divsi3+0x7c>
20002e94:	02cb      	lsls	r3, r1, #11
20002e96:	1ac0      	subs	r0, r0, r3
20002e98:	4152      	adcs	r2, r2
20002e9a:	0a83      	lsrs	r3, r0, #10
20002e9c:	428b      	cmp	r3, r1
20002e9e:	d301      	bcc.n	20002ea4 <__divsi3+0x88>
20002ea0:	028b      	lsls	r3, r1, #10
20002ea2:	1ac0      	subs	r0, r0, r3
20002ea4:	4152      	adcs	r2, r2
20002ea6:	0a43      	lsrs	r3, r0, #9
20002ea8:	428b      	cmp	r3, r1
20002eaa:	d301      	bcc.n	20002eb0 <__divsi3+0x94>
20002eac:	024b      	lsls	r3, r1, #9
20002eae:	1ac0      	subs	r0, r0, r3
20002eb0:	4152      	adcs	r2, r2
20002eb2:	0a03      	lsrs	r3, r0, #8
20002eb4:	428b      	cmp	r3, r1
20002eb6:	d301      	bcc.n	20002ebc <__divsi3+0xa0>
20002eb8:	020b      	lsls	r3, r1, #8
20002eba:	1ac0      	subs	r0, r0, r3
20002ebc:	4152      	adcs	r2, r2
20002ebe:	d2cd      	bcs.n	20002e5c <__divsi3+0x40>
20002ec0:	09c3      	lsrs	r3, r0, #7
20002ec2:	428b      	cmp	r3, r1
20002ec4:	d301      	bcc.n	20002eca <__divsi3+0xae>
20002ec6:	01cb      	lsls	r3, r1, #7
20002ec8:	1ac0      	subs	r0, r0, r3
20002eca:	4152      	adcs	r2, r2
20002ecc:	0983      	lsrs	r3, r0, #6
20002ece:	428b      	cmp	r3, r1
20002ed0:	d301      	bcc.n	20002ed6 <__divsi3+0xba>
20002ed2:	018b      	lsls	r3, r1, #6
20002ed4:	1ac0      	subs	r0, r0, r3
20002ed6:	4152      	adcs	r2, r2
20002ed8:	0943      	lsrs	r3, r0, #5
20002eda:	428b      	cmp	r3, r1
20002edc:	d301      	bcc.n	20002ee2 <__divsi3+0xc6>
20002ede:	014b      	lsls	r3, r1, #5
20002ee0:	1ac0      	subs	r0, r0, r3
20002ee2:	4152      	adcs	r2, r2
20002ee4:	0903      	lsrs	r3, r0, #4
20002ee6:	428b      	cmp	r3, r1
20002ee8:	d301      	bcc.n	20002eee <__divsi3+0xd2>
20002eea:	010b      	lsls	r3, r1, #4
20002eec:	1ac0      	subs	r0, r0, r3
20002eee:	4152      	adcs	r2, r2
20002ef0:	08c3      	lsrs	r3, r0, #3
20002ef2:	428b      	cmp	r3, r1
20002ef4:	d301      	bcc.n	20002efa <__divsi3+0xde>
20002ef6:	00cb      	lsls	r3, r1, #3
20002ef8:	1ac0      	subs	r0, r0, r3
20002efa:	4152      	adcs	r2, r2
20002efc:	0883      	lsrs	r3, r0, #2
20002efe:	428b      	cmp	r3, r1
20002f00:	d301      	bcc.n	20002f06 <__divsi3+0xea>
20002f02:	008b      	lsls	r3, r1, #2
20002f04:	1ac0      	subs	r0, r0, r3
20002f06:	4152      	adcs	r2, r2
20002f08:	0843      	lsrs	r3, r0, #1
20002f0a:	428b      	cmp	r3, r1
20002f0c:	d301      	bcc.n	20002f12 <__divsi3+0xf6>
20002f0e:	004b      	lsls	r3, r1, #1
20002f10:	1ac0      	subs	r0, r0, r3
20002f12:	4152      	adcs	r2, r2
20002f14:	1a41      	subs	r1, r0, r1
20002f16:	d200      	bcs.n	20002f1a <__divsi3+0xfe>
20002f18:	4601      	mov	r1, r0
20002f1a:	4152      	adcs	r2, r2
20002f1c:	4610      	mov	r0, r2
20002f1e:	4770      	bx	lr
20002f20:	e05d      	b.n	20002fde <__divsi3+0x1c2>
20002f22:	0fca      	lsrs	r2, r1, #31
20002f24:	d000      	beq.n	20002f28 <__divsi3+0x10c>
20002f26:	4249      	negs	r1, r1
20002f28:	1003      	asrs	r3, r0, #32
20002f2a:	d300      	bcc.n	20002f2e <__divsi3+0x112>
20002f2c:	4240      	negs	r0, r0
20002f2e:	4053      	eors	r3, r2
20002f30:	2200      	movs	r2, #0
20002f32:	469c      	mov	ip, r3
20002f34:	0903      	lsrs	r3, r0, #4
20002f36:	428b      	cmp	r3, r1
20002f38:	d32d      	bcc.n	20002f96 <__divsi3+0x17a>
20002f3a:	0a03      	lsrs	r3, r0, #8
20002f3c:	428b      	cmp	r3, r1
20002f3e:	d312      	bcc.n	20002f66 <__divsi3+0x14a>
20002f40:	22fc      	movs	r2, #252	; 0xfc
20002f42:	0189      	lsls	r1, r1, #6
20002f44:	ba12      	rev	r2, r2
20002f46:	0a03      	lsrs	r3, r0, #8
20002f48:	428b      	cmp	r3, r1
20002f4a:	d30c      	bcc.n	20002f66 <__divsi3+0x14a>
20002f4c:	0189      	lsls	r1, r1, #6
20002f4e:	1192      	asrs	r2, r2, #6
20002f50:	428b      	cmp	r3, r1
20002f52:	d308      	bcc.n	20002f66 <__divsi3+0x14a>
20002f54:	0189      	lsls	r1, r1, #6
20002f56:	1192      	asrs	r2, r2, #6
20002f58:	428b      	cmp	r3, r1
20002f5a:	d304      	bcc.n	20002f66 <__divsi3+0x14a>
20002f5c:	0189      	lsls	r1, r1, #6
20002f5e:	d03a      	beq.n	20002fd6 <__divsi3+0x1ba>
20002f60:	1192      	asrs	r2, r2, #6
20002f62:	e000      	b.n	20002f66 <__divsi3+0x14a>
20002f64:	0989      	lsrs	r1, r1, #6
20002f66:	09c3      	lsrs	r3, r0, #7
20002f68:	428b      	cmp	r3, r1
20002f6a:	d301      	bcc.n	20002f70 <__divsi3+0x154>
20002f6c:	01cb      	lsls	r3, r1, #7
20002f6e:	1ac0      	subs	r0, r0, r3
20002f70:	4152      	adcs	r2, r2
20002f72:	0983      	lsrs	r3, r0, #6
20002f74:	428b      	cmp	r3, r1
20002f76:	d301      	bcc.n	20002f7c <__divsi3+0x160>
20002f78:	018b      	lsls	r3, r1, #6
20002f7a:	1ac0      	subs	r0, r0, r3
20002f7c:	4152      	adcs	r2, r2
20002f7e:	0943      	lsrs	r3, r0, #5
20002f80:	428b      	cmp	r3, r1
20002f82:	d301      	bcc.n	20002f88 <__divsi3+0x16c>
20002f84:	014b      	lsls	r3, r1, #5
20002f86:	1ac0      	subs	r0, r0, r3
20002f88:	4152      	adcs	r2, r2
20002f8a:	0903      	lsrs	r3, r0, #4
20002f8c:	428b      	cmp	r3, r1
20002f8e:	d301      	bcc.n	20002f94 <__divsi3+0x178>
20002f90:	010b      	lsls	r3, r1, #4
20002f92:	1ac0      	subs	r0, r0, r3
20002f94:	4152      	adcs	r2, r2
20002f96:	08c3      	lsrs	r3, r0, #3
20002f98:	428b      	cmp	r3, r1
20002f9a:	d301      	bcc.n	20002fa0 <__divsi3+0x184>
20002f9c:	00cb      	lsls	r3, r1, #3
20002f9e:	1ac0      	subs	r0, r0, r3
20002fa0:	4152      	adcs	r2, r2
20002fa2:	0883      	lsrs	r3, r0, #2
20002fa4:	428b      	cmp	r3, r1
20002fa6:	d301      	bcc.n	20002fac <__divsi3+0x190>
20002fa8:	008b      	lsls	r3, r1, #2
20002faa:	1ac0      	subs	r0, r0, r3
20002fac:	4152      	adcs	r2, r2
20002fae:	d2d9      	bcs.n	20002f64 <__divsi3+0x148>
20002fb0:	0843      	lsrs	r3, r0, #1
20002fb2:	428b      	cmp	r3, r1
20002fb4:	d301      	bcc.n	20002fba <__divsi3+0x19e>
20002fb6:	004b      	lsls	r3, r1, #1
20002fb8:	1ac0      	subs	r0, r0, r3
20002fba:	4152      	adcs	r2, r2
20002fbc:	1a41      	subs	r1, r0, r1
20002fbe:	d200      	bcs.n	20002fc2 <__divsi3+0x1a6>
20002fc0:	4601      	mov	r1, r0
20002fc2:	4663      	mov	r3, ip
20002fc4:	4152      	adcs	r2, r2
20002fc6:	105b      	asrs	r3, r3, #1
20002fc8:	4610      	mov	r0, r2
20002fca:	d301      	bcc.n	20002fd0 <__divsi3+0x1b4>
20002fcc:	4240      	negs	r0, r0
20002fce:	2b00      	cmp	r3, #0
20002fd0:	d500      	bpl.n	20002fd4 <__divsi3+0x1b8>
20002fd2:	4249      	negs	r1, r1
20002fd4:	4770      	bx	lr
20002fd6:	4663      	mov	r3, ip
20002fd8:	105b      	asrs	r3, r3, #1
20002fda:	d300      	bcc.n	20002fde <__divsi3+0x1c2>
20002fdc:	4240      	negs	r0, r0
20002fde:	b501      	push	{r0, lr}
20002fe0:	2000      	movs	r0, #0
20002fe2:	f000 f805 	bl	20002ff0 <__aeabi_idiv0>
20002fe6:	bd02      	pop	{r1, pc}

20002fe8 <__aeabi_idivmod>:
20002fe8:	2900      	cmp	r1, #0
20002fea:	d0f8      	beq.n	20002fde <__divsi3+0x1c2>
20002fec:	e716      	b.n	20002e1c <__divsi3>
20002fee:	4770      	bx	lr

20002ff0 <__aeabi_idiv0>:
20002ff0:	4770      	bx	lr
20002ff2:	46c0      	nop			; (mov r8, r8)

20002ff4 <counter>:
20002ff4:	00000000 	andeq	r0, r0, r0

20002ff8 <nGameObjects>:
20002ff8:	00000000 	andeq	r0, r0, r0

20002ffc <lastRightValue.4092>:
20002ffc:	00000000 	andeq	r0, r0, r0

20003000 <speed.4094>:
20003000:	00000000 	andeq	r0, r0, r0

20003004 <lastLeftValue.4093>:
20003004:	00000000 	andeq	r0, r0, r0

20003008 <monster>:
20003008:	00000000 	andeq	r0, r0, r0

2000300c <tempCastleBlack>:
	...

20003018 <tempPressGray>:
	...

20003024 <tempTitleGray>:
	...

20003030 <castleBlack>:
20003030:	00000000 	andeq	r0, r0, r0

20003034 <tempMonster>:
	...

20003040 <pressLight>:
20003040:	00000000 	andeq	r0, r0, r0

20003044 <tempTitleBlack>:
	...

20003050 <bg>:
20003050:	00000000 	andeq	r0, r0, r0

20003054 <tempMonsterGray>:
	...

20003060 <tempTitleLight>:
	...

2000306c <castleLight>:
2000306c:	00000000 	andeq	r0, r0, r0

20003070 <tempPressLight>:
	...

2000307c <tempCastleLight>:
	...

20003088 <pressGray>:
20003088:	00000000 	andeq	r0, r0, r0

2000308c <tempMonsterLight>:
	...

20003098 <tempPressBlack>:
	...

200030a4 <titleGray>:
200030a4:	00000000 	andeq	r0, r0, r0

200030a8 <tempCastleGray>:
	...

200030b4 <monsterLight>:
200030b4:	00000000 	andeq	r0, r0, r0

200030b8 <titleLight>:
200030b8:	00000000 	andeq	r0, r0, r0

200030bc <castleGray>:
200030bc:	00000000 	andeq	r0, r0, r0

200030c0 <random_seed>:
200030c0:	00000000 	andeq	r0, r0, r0

200030c4 <pressBlack>:
200030c4:	00000000 	andeq	r0, r0, r0

200030c8 <monsterGray>:
200030c8:	00000000 	andeq	r0, r0, r0

200030cc <tempBg>:
	...

200030d8 <titleBlack>:
200030d8:	00000000 	andeq	r0, r0, r0

200030dc <gameObjects>:
	...

2000326c <fire1Light>:
2000326c:	00000000 	andeq	r0, r0, r0

20003270 <tempFire3Light>:
	...

2000327c <fire3Gray>:
2000327c:	00000000 	andeq	r0, r0, r0

20003280 <tempFire4Gray>:
	...

2000328c <fire2Image>:
	...

20003298 <tempFire2Gray>:
	...

200032a4 <tempFireBlack>:
	...

200032b0 <fire3Image>:
	...

200032bc <tempFire4Light>:
	...

200032c8 <fire1Image>:
	...

200032d4 <fire4Light>:
200032d4:	00000000 	andeq	r0, r0, r0

200032d8 <fireObj>:
	...

200032fc <fire5Image>:
	...

20003308 <fireImages>:
	...

20003344 <tempFire5Gray>:
	...

20003350 <tempFire3Gray>:
	...

2000335c <fire4Image>:
	...

20003368 <fire4Gray>:
20003368:	00000000 	andeq	r0, r0, r0

2000336c <tempFire1Light>:
	...

20003378 <tempFire5Light>:
	...

20003384 <fire5Gray>:
20003384:	00000000 	andeq	r0, r0, r0

20003388 <fire2Light>:
20003388:	00000000 	andeq	r0, r0, r0

2000338c <fire5Light>:
2000338c:	00000000 	andeq	r0, r0, r0

20003390 <tempFire1Gray>:
	...

2000339c <fireBlack>:
2000339c:	00000000 	andeq	r0, r0, r0

200033a0 <tempFire2Light>:
	...

200033ac <fire3Light>:
200033ac:	00000000 	andeq	r0, r0, r0

200033b0 <fire2Gray>:
200033b0:	00000000 	andeq	r0, r0, r0

200033b4 <fire1Gray>:
200033b4:	00000000 	andeq	r0, r0, r0

200033b8 <bird4Light>:
200033b8:	00000000 	andeq	r0, r0, r0

200033bc <bird1Gray>:
200033bc:	00000000 	andeq	r0, r0, r0

200033c0 <bird6Image>:
	...

200033cc <bird5Black>:
200033cc:	00000000 	andeq	r0, r0, r0

200033d0 <tempBird4Black>:
	...

200033dc <bird2Image>:
	...

200033e8 <birdObj>:
	...

2000340c <bird1Image>:
	...

20003418 <bird3Black>:
20003418:	00000000 	andeq	r0, r0, r0

2000341c <bird4Gray>:
2000341c:	00000000 	andeq	r0, r0, r0

20003420 <bird2Black>:
20003420:	00000000 	andeq	r0, r0, r0

20003424 <bird1Black>:
20003424:	00000000 	andeq	r0, r0, r0

20003428 <bird4Image>:
	...

20003434 <tempBirdBlack>:
	...

20003440 <bird3Gray>:
20003440:	00000000 	andeq	r0, r0, r0

20003444 <tempBirdGray>:
	...

20003450 <bird5Gray>:
20003450:	00000000 	andeq	r0, r0, r0

20003454 <tempBird5Light>:
	...

20003460 <tempBird2Gray>:
	...

2000346c <bird3Light>:
2000346c:	00000000 	andeq	r0, r0, r0

20003470 <tempBird5Gray>:
	...

2000347c <tempBird5Black>:
	...

20003488 <bird5Image>:
	...

20003494 <bird5Light>:
20003494:	00000000 	andeq	r0, r0, r0

20003498 <tempBird3Black>:
	...

200034a4 <bird2Gray>:
200034a4:	00000000 	andeq	r0, r0, r0

200034a8 <tempBirdLight>:
	...

200034b4 <bird1Light>:
200034b4:	00000000 	andeq	r0, r0, r0

200034b8 <tempBird2Light>:
	...

200034c4 <bird3Image>:
	...

200034d0 <tempBird4Light>:
	...

200034dc <tempBird3Light>:
	...

200034e8 <tempBird3Gray>:
	...

200034f4 <birdImages>:
	...

2000353c <bird4Black>:
2000353c:	00000000 	andeq	r0, r0, r0

20003540 <tempBird2Black>:
	...

2000354c <tempBird4Gray>:
	...

20003558 <bird2Light>:
20003558:	00000000 	andeq	r0, r0, r0

2000355c <witch1Gray>:
2000355c:	00000000 	andeq	r0, r0, r0

20003560 <witch2Light>:
20003560:	00000000 	andeq	r0, r0, r0

20003564 <witchImages>:
	...

20003594 <witch2Image>:
	...

200035a0 <tempWitch2Black>:
	...

200035ac <tempWitchBlack>:
	...

200035b8 <tempWitch3Light>:
	...

200035c4 <witch4Image>:
	...

200035d0 <witch2Gray>:
200035d0:	00000000 	andeq	r0, r0, r0

200035d4 <tempWitchGray>:
	...

200035e0 <tempWitch3Black>:
	...

200035ec <tempWitch2Gray>:
	...

200035f8 <witch3Black>:
200035f8:	00000000 	andeq	r0, r0, r0

200035fc <witchObj>:
	...

20003620 <witch3Light>:
20003620:	00000000 	andeq	r0, r0, r0

20003624 <tempWitch3Gray>:
	...

20003630 <witch1Black>:
20003630:	00000000 	andeq	r0, r0, r0

20003634 <witch3Gray>:
20003634:	00000000 	andeq	r0, r0, r0

20003638 <witch1Image>:
	...

20003644 <tempWitchLight>:
	...

20003650 <tempWitch2Light>:
	...

2000365c <witch1Light>:
2000365c:	00000000 	andeq	r0, r0, r0

20003660 <witch3Image>:
	...

2000366c <witch2Black>:
2000366c:	00000000 	andeq	r0, r0, r0

20003670 <backBufferGray>:
	...

20003a70 <draw_buffer_black_gray>:
	...

20003e70 <backBuffer>:
	...

20004270 <draw_buffer_black_light>:
	...

20004670 <draw_buffer_black>:
	...

20004a70 <draw_buffer_black_gray_light>:
	...

20004e70 <backBufferLight>:
	...

20005270 <tempIndoorsGray>:
	...

2000527c <tempIndoorsLight>:
	...

20005288 <tempIndoorsBlack>:
	...

20005294 <indoorsGray>:
20005294:	00000000 	andeq	r0, r0, r0

20005298 <indoorsObj>:
	...

200052bc <indoorsImages>:
	...

200052c8 <indoorsBlack>:
200052c8:	00000000 	andeq	r0, r0, r0

200052cc <indoorsImage>:
	...

200052d8 <indoorsLight>:
200052d8:	00000000 	andeq	r0, r0, r0

200052dc <indoors2Obj>:
	...

20005300 <indoors2Gray>:
20005300:	00000000 	andeq	r0, r0, r0

20005304 <indoors2Images>:
	...

20005310 <indoors2Image>:
	...

2000531c <tempIndoors2Gray>:
	...

20005328 <indoors2Light>:
20005328:	00000000 	andeq	r0, r0, r0

2000532c <tempIndoors2Black>:
	...

20005338 <tempIndoors2Light>:
	...

20005344 <indoors2Black>:
20005344:	00000000 	andeq	r0, r0, r0

20005348 <monster_black_bits>:
	...
20005358:	0001c000 	andeq	ip, r1, r0
2000535c:	00023000 	andeq	r3, r2, r0
20005360:	00021000 	andeq	r1, r2, r0
20005364:	00060800 	andeq	r0, r6, r0, lsl #16
20005368:	00040800 	andeq	r0, r4, r0, lsl #16
2000536c:	00040800 	andeq	r0, r4, r0, lsl #16
20005370:	00092800 	andeq	r2, r9, r0, lsl #16
20005374:	00092800 	andeq	r2, r9, r0, lsl #16
20005378:	00100400 	andseq	r0, r0, r0, lsl #8
2000537c:	00100400 	andseq	r0, r0, r0, lsl #8
20005380:	00200200 	eoreq	r0, r0, r0, lsl #4
20005384:	00661b00 	rsbeq	r1, r6, r0, lsl #22
20005388:	0043b100 	subeq	fp, r3, r0, lsl #2
2000538c:	0080e080 	addeq	lr, r0, r0, lsl #1
20005390:	01800080 	orreq	r0, r0, r0, lsl #1
20005394:	01000040 	tsteq	r0, r0, asr #32
20005398:	02000040 	andeq	r0, r0, #64	; 0x40
2000539c:	02000060 	andeq	r0, r0, #96	; 0x60
200053a0:	02000020 	andeq	r0, r0, #32
200053a4:	03ff03e0 	mvnseq	r0, #224, 6	; 0x80000003
200053a8:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...

200053c0 <monster_light_bits>:
	...
200053d4:	00010000 	andeq	r0, r1, r0
200053d8:	00018000 	andeq	r8, r1, r0
200053dc:	0001f000 	andeq	pc, r1, r0
200053e0:	0001f000 	andeq	pc, r1, r0
200053e4:	00009000 	andeq	r9, r0, r0
200053e8:	00009000 	andeq	r9, r0, r0
200053ec:	0000d000 	andeq	sp, r0, r0
200053f0:	0001f800 	andeq	pc, r1, r0, lsl #16
200053f4:	0003f800 	andeq	pc, r3, r0, lsl #16
200053f8:	0003fc00 	andeq	pc, r3, r0, lsl #24
200053fc:	0001e400 	andeq	lr, r1, r0, lsl #8
20005400:	00044c00 	andeq	r4, r4, r0, lsl #24
20005404:	00060c00 	andeq	r0, r6, r0, lsl #24
20005408:	0006ee00 	andeq	lr, r6, r0, lsl #28
2000540c:	000ffe00 	andeq	pc, pc, r0, lsl #28
20005410:	000f3f00 	andeq	r3, pc, r0, lsl #30
20005414:	00000780 	andeq	r0, r0, r0, lsl #15
20005418:	000003c0 	andeq	r0, r0, r0, asr #7
	...

20005438 <monster_gray_bits>:
	...
20005458:	00020000 	andeq	r0, r2, r0
2000545c:	00000000 	andeq	r0, r0, r0
20005460:	00040000 	andeq	r0, r4, r0
20005464:	00060000 	andeq	r0, r6, r0
20005468:	000e0000 	andeq	r0, lr, r0
2000546c:	000c0000 	andeq	r0, ip, r0
20005470:	001c0000 	andseq	r0, ip, r0
20005474:	00180000 	andseq	r0, r8, r0
20005478:	00380000 	eorseq	r0, r8, r0
2000547c:	00780000 	rsbseq	r0, r8, r0
20005480:	00780000 	rsbseq	r0, r8, r0
20005484:	00f00000 	rscseq	r0, r0, r0
20005488:	01f0c000 	mvnseq	ip, r0
2000548c:	01fff800 	mvnseq	pc, r0, lsl #16
20005490:	01fffc00 	mvnseq	pc, r0, lsl #24
20005494:	0000fc00 	andeq	pc, r0, r0, lsl #24
	...

200054b0 <press_black_bits>:
	...
200054e8:	001c0000 	andseq	r0, ip, r0
200054ec:	00000000 	andeq	r0, r0, r0
200054f0:	00240000 	eoreq	r0, r4, r0
200054f4:	00000000 	andeq	r0, r0, r0
200054f8:	00440000 	subeq	r0, r4, r0
200054fc:	00000000 	andeq	r0, r0, r0
20005500:	c5240000 	strgt	r0, [r4, #-0]!
20005504:	00000198 	muleq	r0, r8, r1
20005508:	2b1c0000 	blcs	20705510 <firstTime.4040+0x6fca20>
2000550c:	00000045 	andeq	r0, r0, r5, asr #32
20005510:	e1040000 	mrs	r0, (UNDEF: 4)
20005514:	000000cd 	andeq	r0, r0, sp, asr #1
20005518:	21040000 	mrscs	r0, (UNDEF: 4)
2000551c:	00000110 	andeq	r0, r0, r0, lsl r1
20005520:	c1040000 	mrsgt	r0, (UNDEF: 4)
20005524:	000000cc 	andeq	r0, r0, ip, asr #1
	...
20005554:	00000004 	andeq	r0, r0, r4
20005558:	00000000 	andeq	r0, r0, r0
2000555c:	00000004 	andeq	r0, r0, r4
20005560:	00000000 	andeq	r0, r0, r0
20005564:	00000004 	andeq	r0, r0, r4
20005568:	0494e000 	ldreq	lr, [r4], #0
2000556c:	00009334 	andeq	r9, r0, r4, lsr r3
20005570:	04ac9000 	strteq	r9, [ip], #0
20005574:	00009494 	muleq	r0, r4, r4
20005578:	04a49000 	strteq	r9, [r4], #0
2000557c:	0000978c 	andeq	r9, r0, ip, lsl #15
20005580:	04a49000 	strteq	r9, [r4], #0
20005584:	00009094 	muleq	r0, r4, r0
20005588:	07256000 	streq	r6, [r5, -r0]!
2000558c:	0000e324 	andeq	lr, r0, r4, lsr #6
20005590:	04000000 	streq	r0, [r0], #-0
20005594:	00008000 	andeq	r8, r0, r0
20005598:	04000000 	streq	r0, [r0], #-0
2000559c:	00008000 	andeq	r8, r0, r0
200055a0:	03000000 	movweq	r0, #0
200055a4:	00006000 	andeq	r6, r0, r0
	...

200055c8 <press_light_bits>:
	...
20005608:	00000200 	andeq	r0, r0, r0, lsl #4
2000560c:	00000000 	andeq	r0, r0, r0
20005610:	00000700 	andeq	r0, r0, r0, lsl #14
20005614:	00000000 	andeq	r0, r0, r0
20005618:	00000200 	andeq	r0, r0, r0, lsl #4
	...
2000565c:	00800000 	addeq	r0, r0, r0
20005660:	00000000 	andeq	r0, r0, r0
20005664:	01c00000 	biceq	r0, r0, r0
20005668:	00000000 	andeq	r0, r0, r0
2000566c:	00800000 	addeq	r0, r0, r0
20005670:	00000010 	andeq	r0, r0, r0, lsl r0
20005674:	00000000 	andeq	r0, r0, r0
20005678:	00000038 	andeq	r0, r0, r8, lsr r0
2000567c:	00000000 	andeq	r0, r0, r0
20005680:	00000010 	andeq	r0, r0, r0, lsl r0
	...

200056e0 <press_gray_bits>:
	...
20005720:	00180000 	andseq	r0, r8, r0
20005724:	00000000 	andeq	r0, r0, r0
20005728:	00380000 	eorseq	r0, r8, r0
2000572c:	00000000 	andeq	r0, r0, r0
20005730:	00580000 	subseq	r0, r8, r0
20005734:	00000020 	andeq	r0, r0, r0, lsr #32
20005738:	d4200000 	strtle	r0, [r0], #-0
2000573c:	0000039a 	muleq	r0, sl, r3
20005740:	0a380000 	beq	20e05748 <firstTime.4040+0xdfcc58>
20005744:	00000102 	andeq	r0, r0, r2, lsl #2
20005748:	c2080000 	andgt	r0, r8, #0
2000574c:	00000223 	andeq	r0, r0, r3, lsr #4
20005750:	02080000 	andeq	r0, r8, #0
20005754:	00000311 	andeq	r0, r0, r1, lsl r3
20005758:	c1080000 	mrsgt	r0, (UNDEF: 8)
2000575c:	000001dd 	ldrdeq	r0, [r0], -sp
	...
2000578c:	00000008 	andeq	r0, r0, r8
20005790:	00000000 	andeq	r0, r0, r0
20005794:	00000008 	andeq	r0, r0, r8
20005798:	00000000 	andeq	r0, r0, r0
2000579c:	00000008 	andeq	r0, r0, r8
200057a0:	09116000 	ldmdbeq	r1, {sp, lr}
200057a4:	00012328 	andeq	r2, r1, r8, lsr #6
200057a8:	09596000 	ldmdbeq	r9, {sp, lr}^
200057ac:	00012810 	andeq	r2, r1, r0, lsl r8
200057b0:	0b492000 	bleq	2124d7b8 <firstTime.4040+0x1244cc8>
200057b4:	00012f08 	andeq	r2, r1, r8, lsl #30
200057b8:	08488000 	stmdaeq	r8, {pc}^
200057bc:	00010458 	andeq	r0, r1, r8, asr r4
200057c0:	0b6be000 	bleq	21afd7c8 <firstTime.4040+0x1af4cd8>
200057c4:	00016768 	andeq	r6, r1, r8, ror #14
200057c8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
200057cc:	00010000 	andeq	r0, r1, r0
200057d0:	0c000000 	stceq	0, cr0, [r0], {-0}
200057d4:	00018000 	andeq	r8, r1, r0
200057d8:	06000000 	streq	r0, [r0], -r0
200057dc:	0000c000 	andeq	ip, r0, r0
	...

200057f8 <castle_black_bits>:
200057f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200057fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005800:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005804:	00000000 	andeq	r0, r0, r0
20005808:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000580c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005810:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005814:	00000000 	andeq	r0, r0, r0
20005818:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000581c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005820:	00000001 	andeq	r0, r0, r1
20005824:	00000000 	andeq	r0, r0, r0
20005828:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000582c:	7fffffff 	svcvc	0x00ffffff
	...
20005838:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000583c:	3fffffff 	svccc	0x00ffffff
	...
20005848:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000584c:	1fffffff 	svcne	0x00ffffff
	...
20005858:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000585c:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
	...
20005868:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000586c:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
	...
20005878:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000587c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005983 <castle_black_bits+0x18b>	; <UNPREDICTABLE>
	...
20005888:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000588c:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
	...
20005898:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000589c:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
	...
200058a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200058ac:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200058b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200058bc:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200058c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200058cc:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200058d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200058dc:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
200058e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200058ec:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
200058f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200058fc:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005908:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000590c:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005918:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000591c:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20005928:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000592c:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20005938:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000593c:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20005948:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000594c:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20005958:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000595c:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20005960:	04900000 	ldreq	r0, [r0], #0
20005964:	00000000 	andeq	r0, r0, r0
20005968:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000596c:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20005970:	0b680000 	bleq	21a05978 <firstTime.4040+0x19fce88>
20005974:	00000000 	andeq	r0, r0, r0
20005978:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000597c:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20005980:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20005984:	00000000 	andeq	r0, r0, r0
20005988:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000598c:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20005990:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20005994:	00000092 	muleq	r0, r2, r0
20005998:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000599c:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
200059a0:	04100000 	ldreq	r0, [r0], #-0
200059a4:	0000016d 	andeq	r0, r0, sp, ror #2
200059a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200059ac:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
200059b0:	04101240 	ldreq	r1, [r0], #-576	; 0xfffffdc0
200059b4:	00000101 	andeq	r0, r0, r1, lsl #2
200059b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200059bc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200059c0:	04102da0 	ldreq	r2, [r0], #-3488	; 0xfffff260
200059c4:	00000101 	andeq	r0, r0, r1, lsl #2
200059c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200059cc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200059d0:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
200059d4:	00000101 	andeq	r0, r0, r1, lsl #2
200059d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200059dc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200059e0:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
200059e4:	00000101 	andeq	r0, r0, r1, lsl #2
200059e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200059ec:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200059f0:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200059f4:	00000082 	andeq	r0, r0, r2, lsl #1
200059f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200059fc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20005a00:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005a04:	00000092 	muleq	r0, r2, r0
20005a08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a0c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20005a10:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005a14:	012400a2 	smulwbeq	r4, r2, r0
20005a18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a1c:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20005a20:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005a24:	02da00a2 	sbcseq	r0, sl, #162	; 0xa2
20005a28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a2c:	00004fff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
20005a30:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005a34:	020200a2 	andeq	r0, r2, #162	; 0xa2
20005a38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a3c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005a40:	08081040 	stmdaeq	r8, {r6, ip}
20005a44:	0202009a 	andeq	r0, r2, #154	; 0x9a
20005a48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a4c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005a50:	08082020 	stmdaeq	r8, {r5, sp}
20005a54:	01040082 	smlabbeq	r4, r2, r0, r0
20005a58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a5c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005a60:	48082020 	stmdami	r8, {r5, sp}
20005a64:	01040102 	tsteq	r4, r2, lsl #2
20005a68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a6c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005a70:	b0082020 	andlt	r2, r8, r0, lsr #32
20005a74:	01040101 	tsteq	r4, r1, lsl #2
20005a78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a7c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005a80:	00082220 	andeq	r2, r8, r0, lsr #4
20005a84:	01040100 	mrseq	r0, (UNDEF: 20)
20005a88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a8c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005a90:	00882420 	addeq	r2, r8, r0, lsr #8
20005a94:	01040100 	mrseq	r0, (UNDEF: 20)
20005a98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a9c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005aa0:	01082420 	tsteq	r8, r0, lsr #8
20005aa4:	01045a00 	tsteq	r4, r0, lsl #20
20005aa8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005aac:	0000007f 	andeq	r0, r0, pc, ror r0
20005ab0:	01082420 	tsteq	r8, r0, lsr #8
20005ab4:	0104a400 	tsteq	r4, r0, lsl #8
20005ab8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005abc:	00000001 	andeq	r0, r0, r1
20005ac0:	010b2320 	tsteq	fp, r0, lsr #6
20005ac4:	01030001 	tsteq	r3, r1
20005ac8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005acc:	00000000 	andeq	r0, r0, r0
20005ad0:	00c4c020 	sbceq	ip, r4, r0, lsr #32
20005ad4:	02000002 	andeq	r0, r0, #2
20005ad8:	3fffffff 	svccc	0x00ffffff
20005adc:	00000000 	andeq	r0, r0, r0
20005ae0:	00000020 	andeq	r0, r0, r0, lsr #32
20005ae4:	02200002 	eoreq	r0, r0, #2
20005ae8:	3fffffff 	svccc	0x00ffffff
20005aec:	00000000 	andeq	r0, r0, r0
20005af0:	00000020 	andeq	r0, r0, r0, lsr #32
20005af4:	02400002 	subeq	r0, r0, #2
20005af8:	1fffffff 	svcne	0x00ffffff
20005afc:	00000000 	andeq	r0, r0, r0
20005b00:	80000020 	andhi	r0, r0, r0, lsr #32
20005b04:	02400001 	subeq	r0, r0, #1
20005b08:	1fffffff 	svcne	0x00ffffff
20005b0c:	00000000 	andeq	r0, r0, r0
20005b10:	00000010 	andeq	r0, r0, r0, lsl r0
20005b14:	02400000 	subeq	r0, r0, #0
20005b18:	0fffffff 	svceq	0x00ffffff
20005b1c:	00000000 	andeq	r0, r0, r0
20005b20:	00000010 	andeq	r0, r0, r0, lsl r0
20005b24:	02300000 	eorseq	r0, r0, #0
20005b28:	0fffffff 	svceq	0x00ffffff
20005b2c:	00000000 	andeq	r0, r0, r0
20005b30:	00000010 	andeq	r0, r0, r0, lsl r0
20005b34:	02000000 	andeq	r0, r0, #0
20005b38:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
20005b3c:	00000000 	andeq	r0, r0, r0
20005b40:	00000010 	andeq	r0, r0, r0, lsl r0
20005b44:	04000000 	streq	r0, [r0], #-0
20005b48:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20005b4c:	00000000 	andeq	r0, r0, r0
20005b50:	00000010 	andeq	r0, r0, r0, lsl r0
20005b54:	04000000 	streq	r0, [r0], #-0
20005b58:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005c5f <castle_gray_bits+0x67>	; <UNPREDICTABLE>
20005b5c:	00000000 	andeq	r0, r0, r0
20005b60:	00000008 	andeq	r0, r0, r8
20005b64:	04000000 	streq	r0, [r0], #-0
20005b68:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005c6f <castle_gray_bits+0x77>	; <UNPREDICTABLE>
20005b6c:	00000000 	andeq	r0, r0, r0
20005b70:	00000008 	andeq	r0, r0, r8
20005b74:	04000000 	streq	r0, [r0], #-0
20005b78:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20005b7c:	00000000 	andeq	r0, r0, r0
20005b80:	00000008 	andeq	r0, r0, r8
20005b84:	060001c0 	streq	r0, [r0], -r0, asr #3
20005b88:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20005b8c:	00000000 	andeq	r0, r0, r0
20005b90:	00000008 	andeq	r0, r0, r8
20005b94:	04000220 	streq	r0, [r0], #-544	; 0xfffffde0
20005b98:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20005b9c:	00000000 	andeq	r0, r0, r0
20005ba0:	00000008 	andeq	r0, r0, r8
20005ba4:	04100400 	ldreq	r0, [r0], #-1024	; 0xfffffc00
20005ba8:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
20005bac:	00000000 	andeq	r0, r0, r0
20005bb0:	00000008 	andeq	r0, r0, r8
20005bb4:	04a00400 	strteq	r0, [r0], #1024	; 0x400
20005bb8:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
20005bbc:	00000000 	andeq	r0, r0, r0
20005bc0:	00000008 	andeq	r0, r0, r8
20005bc4:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20005bc8:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
20005bcc:	00000000 	andeq	r0, r0, r0
20005bd0:	00000008 	andeq	r0, r0, r8
20005bd4:	07400400 	strbeq	r0, [r0, -r0, lsl #8]
20005bd8:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20005bdc:	00000000 	andeq	r0, r0, r0
20005be0:	00000008 	andeq	r0, r0, r8
20005be4:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20005be8:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20005bec:	00000000 	andeq	r0, r0, r0
20005bf0:	00000008 	andeq	r0, r0, r8
20005bf4:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00

20005bf8 <castle_gray_bits>:
	...
20005c00:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005c04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20005c10:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20005c14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20005c20:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20005c24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c28:	00000000 	andeq	r0, r0, r0
20005c2c:	80000000 	andhi	r0, r0, r0
20005c30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c38:	00000000 	andeq	r0, r0, r0
20005c3c:	c0000000 	andgt	r0, r0, r0
20005c40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c48:	00000000 	andeq	r0, r0, r0
20005c4c:	e0000000 	and	r0, r0, r0
20005c50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c54:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20005c58:	00000000 	andeq	r0, r0, r0
20005c5c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005c60:	f3ffcfff 			; <UNDEFINED> instruction: 0xf3ffcfff
20005c64:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20005c68:	00000000 	andeq	r0, r0, r0
20005c6c:	fc000000 	stc2	0, cr0, [r0], {-0}
20005c70:	f1ff8fff 			; <UNDEFINED> instruction: 0xf1ff8fff
20005c74:	fff9ff3f 			; <UNDEFINED> instruction: 0xfff9ff3f
20005c78:	00000000 	andeq	r0, r0, r0
20005c7c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20005c80:	f0ff8fef 			; <UNDEFINED> instruction: 0xf0ff8fef
20005c84:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20005c88:	00000000 	andeq	r0, r0, r0
20005c8c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20005c90:	e0ff87ef 	rscs	r8, pc, pc, ror #15
20005c94:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20005c98:	00000000 	andeq	r0, r0, r0
20005c9c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20005ca0:	c07e07e7 	rsbsgt	r0, lr, r7, ror #15
20005ca4:	ffe0fc1f 			; <UNDEFINED> instruction: 0xffe0fc1f
20005ca8:	00000000 	andeq	r0, r0, r0
20005cac:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20005cb0:	001c07e7 	andseq	r0, ip, r7, ror #15
20005cb4:	ffe0380e 	vcmla.f32	d19, d0, d14[0], #170
20005cb8:	00000000 	andeq	r0, r0, r0
20005cbc:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20005cc0:	000003e3 	andeq	r0, r0, r3, ror #7
20005cc4:	f7c00000 			; <UNDEFINED> instruction: 0xf7c00000
20005cc8:	00000000 	andeq	r0, r0, r0
20005ccc:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20005cd0:	000001c3 	andeq	r0, r0, r3, asr #3
20005cd4:	e7800000 	str	r0, [r0, r0]
20005cd8:	00000000 	andeq	r0, r0, r0
20005cdc:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20005ce0:	00000003 	andeq	r0, r0, r3
20005ce4:	c3800000 	orrgt	r0, r0, #0
20005ce8:	00000000 	andeq	r0, r0, r0
20005cec:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20005cf0:	00000001 	andeq	r0, r0, r1
20005cf4:	c0000000 	andgt	r0, r0, r0
20005cf8:	00000000 	andeq	r0, r0, r0
20005cfc:	9ff00000 	svcls	0x00f00000	; IMB
20005d00:	00000001 	andeq	r0, r0, r1
20005d04:	80000000 	andhi	r0, r0, r0
20005d08:	00000000 	andeq	r0, r0, r0
20005d0c:	8ff00000 	svchi	0x00f00000	; IMB
20005d10:	00000000 	andeq	r0, r0, r0
20005d14:	80000000 	andhi	r0, r0, r0
20005d18:	00000000 	andeq	r0, r0, r0
20005d1c:	8ff80000 	svchi	0x00f80000
	...
20005d2c:	0ffc0000 	svceq	0x00fc0000
	...
20005d3c:	0ffc0000 	svceq	0x00fc0000
	...
20005d4c:	0ffc0000 	svceq	0x00fc0000
	...
20005d5c:	0ffc0000 	svceq	0x00fc0000
	...
20005d6c:	0ffc0000 	svceq	0x00fc0000
	...
20005d7c:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20005d8c:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20005d9c:	07fe0000 	ldrbeq	r0, [lr, r0]!
20005da0:	03800000 	orreq	r0, r0, #0
	...
20005dac:	03fe0000 	mvnseq	r0, #0
20005db0:	02000000 	andeq	r0, r0, #0
	...
20005dbc:	03ff0000 	mvnseq	r0, #0
20005dc0:	02000000 	andeq	r0, r0, #0
	...
20005dcc:	03ff0000 	mvnseq	r0, #0
20005dd0:	02000000 	andeq	r0, r0, #0
	...
20005ddc:	03ff0000 	mvnseq	r0, #0
20005de0:	02000000 	andeq	r0, r0, #0
	...
20005dec:	03ff0000 	mvnseq	r0, #0
20005df0:	02800c00 	addeq	r0, r0, #0, 24
20005df4:	00000060 	andeq	r0, r0, r0, rrx
20005df8:	00000000 	andeq	r0, r0, r0
20005dfc:	03ff0000 	mvnseq	r0, #0
20005e00:	03000800 	movweq	r0, #2048	; 0x800
20005e04:	00000040 	andeq	r0, r0, r0, asr #32
20005e08:	00000000 	andeq	r0, r0, r0
20005e0c:	03ff0000 	mvnseq	r0, #0
20005e10:	03000800 	movweq	r0, #2048	; 0x800
20005e14:	00000040 	andeq	r0, r0, r0, asr #32
20005e18:	00000000 	andeq	r0, r0, r0
20005e1c:	03ff8000 	mvnseq	r8, #0
20005e20:	03000a00 	movweq	r0, #2560	; 0xa00
20005e24:	00000040 	andeq	r0, r0, r0, asr #32
20005e28:	00000000 	andeq	r0, r0, r0
20005e2c:	01ffb000 	mvnseq	fp, r0
20005e30:	03000c00 	movweq	r0, #3072	; 0xc00
20005e34:	00000040 	andeq	r0, r0, r0, asr #32
20005e38:	00000000 	andeq	r0, r0, r0
20005e3c:	01fff800 	mvnseq	pc, r0, lsl #16
20005e40:	07800c00 	streq	r0, [r0, r0, lsl #24]
20005e44:	00000060 	andeq	r0, r0, r0, rrx
20005e48:	00000000 	andeq	r0, r0, r0
20005e4c:	01fffc00 	mvnseq	pc, r0, lsl #24
20005e50:	04001800 	streq	r1, [r0], #-2048	; 0xfffff800
20005e54:	00c00058 	sbceq	r0, r0, r8, asr r0
20005e58:	00000000 	andeq	r0, r0, r0
20005e5c:	00fffc00 	rscseq	pc, pc, r0, lsl #24
20005e60:	06001400 	streq	r1, [r0], -r0, lsl #8
20005e64:	00c000c0 	sbceq	r0, r0, r0, asr #1
20005e68:	00000000 	andeq	r0, r0, r0
20005e6c:	007ffc00 	rsbseq	pc, pc, r0, lsl #24
20005e70:	45001000 	strmi	r1, [r0, #-0]
20005e74:	008000a0 	addeq	r0, r0, r0, lsr #1
20005e78:	00000000 	andeq	r0, r0, r0
20005e7c:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
20005e80:	80001000 	andhi	r1, r0, r0
20005e84:	008000c1 	addeq	r0, r0, r1, asr #1
20005e88:	00000000 	andeq	r0, r0, r0
20005e8c:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20005e90:	00001000 	andeq	r1, r0, r0
20005e94:	00a000f0 	strdeq	r0, [r0], r0	; <UNPREDICTABLE>
20005e98:	00000000 	andeq	r0, r0, r0
20005e9c:	003fff00 	eorseq	pc, pc, r0, lsl #30
20005ea0:	00001000 	andeq	r1, r0, r0
20005ea4:	00c000e0 	sbceq	r0, r0, r0, ror #1
20005ea8:	00000000 	andeq	r0, r0, r0
20005eac:	001fff80 	andseq	pc, pc, r0, lsl #31
20005eb0:	02001800 	andeq	r1, r0, #0, 16
20005eb4:	00c000c0 	sbceq	r0, r0, r0, asr #1
20005eb8:	00000000 	andeq	r0, r0, r0
20005ebc:	0019fffe 			; <UNDEFINED> instruction: 0x0019fffe
20005ec0:	02001400 	andeq	r1, r0, #0, 8
20005ec4:	00803000 	addeq	r3, r0, r0
20005ec8:	00000000 	andeq	r0, r0, r0
20005ecc:	0018ffff 			; <UNDEFINED> instruction: 0x0018ffff
20005ed0:	05033f00 	streq	r3, [r3, #-3840]	; 0xfffff100
20005ed4:	01000000 	mrseq	r0, (UNDEF: 0)
20005ed8:	c0000000 	andgt	r0, r0, r0
20005edc:	0008ffff 	strdeq	pc, [r8], -pc	; <UNPREDICTABLE>
20005ee0:	00c0e400 	sbceq	lr, r0, r0, lsl #8
20005ee4:	01000004 	tsteq	r0, r4
20005ee8:	c0000000 	andgt	r0, r0, r0
20005eec:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20005ef0:	00002000 	andeq	r2, r0, r0
20005ef4:	01000008 	tsteq	r0, r8
20005ef8:	e0000000 	and	r0, r0, r0
20005efc:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20005f00:	00001000 	andeq	r1, r0, r0
20005f04:	01000006 	tsteq	r0, r6
20005f08:	e0000000 	and	r0, r0, r0
20005f0c:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20005f10:	80000000 	andhi	r0, r0, r0
20005f14:	01800001 	orreq	r0, r0, r1
20005f18:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005f1c:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20005f20:	00400000 	subeq	r0, r0, r0
20005f24:	01400000 	mrseq	r0, (UNDEF: 64)
20005f28:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005f2c:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20005f30:	03800000 	orreq	r0, r0, #0
20005f34:	01300000 	teqeq	r0, r0
20005f38:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005f3c:	00001bff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20005f40:	10e00000 	rscne	r0, r0, r0
20005f44:	03000000 	movweq	r0, #0
20005f48:	fc000000 	stc2	0, cr0, [r0], {-0}
20005f4c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005f50:	0f800000 	svceq	0x00800000
20005f54:	03900000 	orrseq	r0, r0, #0
20005f58:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20005f5c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005f60:	00000000 	andeq	r0, r0, r0
20005f64:	03e00000 	mvneq	r0, #0
20005f68:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20005f6c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005f70:	00000000 	andeq	r0, r0, r0
20005f74:	03f40000 	mvnseq	r0, #0
20005f78:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20005f7c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005f80:	00002000 	andeq	r2, r0, r0
20005f84:	01f80000 	mvnseq	r0, r0
20005f88:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20005f8c:	0000007f 	andeq	r0, r0, pc, ror r0
20005f90:	0010c000 	andseq	ip, r0, r0
20005f94:	03f80000 	mvnseq	r0, #0
20005f98:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20005f9c:	0000003f 	andeq	r0, r0, pc, lsr r0
20005fa0:	000f0000 	andeq	r0, pc, r0
20005fa4:	03e000e0 	mvneq	r0, #224	; 0xe0
20005fa8:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20005fac:	0000001f 	andeq	r0, r0, pc, lsl r0
20005fb0:	00026000 	andeq	r6, r2, r0
20005fb4:	035001f0 	cmpeq	r0, #240, 2	; 0x3c
20005fb8:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20005fbc:	0000001f 	andeq	r0, r0, pc, lsl r0
20005fc0:	00118000 	andseq	r8, r1, r0
20005fc4:	03ec01f0 	mvneq	r0, #240, 2	; 0x3c
20005fc8:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
20005fcc:	0000000f 	andeq	r0, r0, pc
20005fd0:	200e0000 	andcs	r0, lr, r0
20005fd4:	00a022f0 	strdeq	r2, [r0], r0	; <UNPREDICTABLE>
20005fd8:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20005fdc:	00000007 	andeq	r0, r0, r7
20005fe0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
20005fe4:	03c0c170 	biceq	ip, r0, #112, 2
20005fe8:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20005fec:	00000003 	andeq	r0, r0, r3
20005ff0:	e4000000 	str	r0, [r0], #-0
20005ff4:	03c270f3 	biceq	r7, r2, #243	; 0xf3

20005ff8 <castle_light_bits>:
	...
20006054:	00000040 	andeq	r0, r0, r0, asr #32
	...
20006060:	0c003000 	stceq	0, cr3, [r0], {-0}
20006064:	00000040 	andeq	r0, r0, r0, asr #32
	...
20006070:	0e007000 	cdpeq	0, 0, cr7, cr0, cr0, {0}
20006074:	000600c0 	andeq	r0, r6, r0, asr #1
	...
20006080:	0f007010 	svceq	0x00007010
20006084:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20006090:	1f007810 	svcne	0x00007810
20006094:	000601e0 	andeq	r0, r6, r0, ror #3
	...
200060a0:	3f81f818 	svccc	0x0081f818
200060a4:	001f03e0 	andseq	r0, pc, r0, ror #7
	...
200060b0:	ffe3f818 			; <UNDEFINED> instruction: 0xffe3f818
200060b4:	001fc7f1 			; <UNDEFINED> instruction: 0x001fc7f1
	...
200060c0:	fffffc1c 			; <UNDEFINED> instruction: 0xfffffc1c
200060c4:	083fffff 	ldmdaeq	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
	...
200060d0:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
200060d4:	187fffff 	ldmdane	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
	...
200060e0:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200060e4:	3c7fffff 	ldclcc	15, cr15, [pc], #-1020	; 20005cf0 <castle_gray_bits+0xf8>
	...
200060f0:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
200060f4:	3fffffff 	svccc	0x00ffffff
200060f8:	00000000 	andeq	r0, r0, r0
200060fc:	60000000 	andvs	r0, r0, r0
20006100:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20006104:	7fffffff 	svcvc	0x00ffffff
20006108:	00000000 	andeq	r0, r0, r0
2000610c:	70000000 	andvc	r0, r0, r0
20006110:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006114:	7fffffff 	svcvc	0x00ffffff
20006118:	00000000 	andeq	r0, r0, r0
2000611c:	70000000 	andvc	r0, r0, r0
20006120:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006124:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006128:	00000000 	andeq	r0, r0, r0
2000612c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006130:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006134:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006138:	00000000 	andeq	r0, r0, r0
2000613c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006140:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006144:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006148:	00000000 	andeq	r0, r0, r0
2000614c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006150:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006154:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006158:	00000000 	andeq	r0, r0, r0
2000615c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006160:	fb6fffff 	blx	21c06166 <firstTime.4040+0x1bfd676>
20006164:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006168:	00000000 	andeq	r0, r0, r0
2000616c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006170:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
20006174:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006178:	00000000 	andeq	r0, r0, r0
2000617c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006180:	f407ffff 			; <UNDEFINED> instruction: 0xf407ffff
20006184:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006188:	00000000 	andeq	r0, r0, r0
2000618c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006190:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
20006194:	ffffff6d 			; <UNDEFINED> instruction: 0xffffff6d
20006198:	00000000 	andeq	r0, r0, r0
2000619c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200061a0:	f80fffff 			; <UNDEFINED> instruction: 0xf80fffff
200061a4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200061a8:	00000000 	andeq	r0, r0, r0
200061ac:	fc000000 	stc2	0, cr0, [r0], {-0}
200061b0:	f80fedbf 			; <UNDEFINED> instruction: 0xf80fedbf
200061b4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200061b8:	00000000 	andeq	r0, r0, r0
200061bc:	fc000000 	stc2	0, cr0, [r0], {-0}
200061c0:	f80fc01f 			; <UNDEFINED> instruction: 0xf80fc01f
200061c4:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
200061c8:	00000000 	andeq	r0, r0, r0
200061cc:	fc000000 	stc2	0, cr0, [r0], {-0}
200061d0:	f90fc81f 			; <UNDEFINED> instruction: 0xf90fc81f
200061d4:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
200061d8:	00000000 	andeq	r0, r0, r0
200061dc:	fc000000 	stc2	0, cr0, [r0], {-0}
200061e0:	f90fd41f 			; <UNDEFINED> instruction: 0xf90fd41f
200061e4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200061e8:	00000000 	andeq	r0, r0, r0
200061ec:	fc000000 	stc2	0, cr0, [r0], {-0}
200061f0:	f90fe03f 			; <UNDEFINED> instruction: 0xf90fe03f
200061f4:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
200061f8:	00000000 	andeq	r0, r0, r0
200061fc:	fc000000 	stc2	0, cr0, [r0], {-0}
20006200:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20006204:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20006208:	00000000 	andeq	r0, r0, r0
2000620c:	fc000000 	stc2	0, cr0, [r0], {-0}
20006210:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20006214:	fedbff19 	mrc2	15, 6, pc, cr11, cr9, {0}
20006218:	00000000 	andeq	r0, r0, r0
2000621c:	fc000000 	stc2	0, cr0, [r0], {-0}
20006220:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20006224:	fd01ff11 	stc2	15, cr15, [r1, #-68]	; 0xffffffbc
20006228:	00000000 	andeq	r0, r0, r0
2000622c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20006230:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20006234:	fd01ff19 	stc2	15, cr15, [r1, #-100]	; 0xffffff9c
20006238:	00000000 	andeq	r0, r0, r0
2000623c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20006240:	f007e03f 			; <UNDEFINED> instruction: 0xf007e03f
20006244:	fc01ff01 	stc2	15, cr15, [r1], {1}
20006248:	00000000 	andeq	r0, r0, r0
2000624c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20006250:	f007c01f 			; <UNDEFINED> instruction: 0xf007c01f
20006254:	fe03ff01 	cdp2	15, 0, cr15, cr3, cr1, {0}
20006258:	00000000 	andeq	r0, r0, r0
2000625c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20006260:	b007c01f 	andlt	ip, r7, pc, lsl r0
20006264:	fe03fe01 	cdp2	14, 0, cr15, cr3, cr1, {0}
20006268:	00000000 	andeq	r0, r0, r0
2000626c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20006270:	0007c01f 	andeq	ip, r7, pc, lsl r0
20006274:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20006278:	00000000 	andeq	r0, r0, r0
2000627c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20006280:	0007c01f 	andeq	ip, r7, pc, lsl r0
20006284:	fe03fe10 	mcr2	14, 0, pc, cr3, cr0, {0}	; <UNPREDICTABLE>
20006288:	00000000 	andeq	r0, r0, r0
2000628c:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20006290:	0007c21f 	andeq	ip, r7, pc, lsl r2
20006294:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20006298:	00000000 	andeq	r0, r0, r0
2000629c:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200062a0:	0087c31f 	addeq	ip, r7, pc, lsl r3
200062a4:	fe03a400 	cdp2	4, 0, cr10, cr3, cr0, {0}
200062a8:	00000000 	andeq	r0, r0, r0
200062ac:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200062b0:	00c7c31f 	sbceq	ip, r7, pc, lsl r3
200062b4:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
200062b8:	00000000 	andeq	r0, r0, r0
200062bc:	ffe60000 			; <UNDEFINED> instruction: 0xffe60000
200062c0:	00c4c01f 	sbceq	ip, r4, pc, lsl r0
200062c4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
200062c8:	00000000 	andeq	r0, r0, r0
200062cc:	ffe70000 			; <UNDEFINED> instruction: 0xffe70000
200062d0:	8000001f 	andhi	r0, r0, pc, lsl r0
200062d4:	fc000001 	stc2	0, cr0, [r0], {1}
200062d8:	00000000 	andeq	r0, r0, r0
200062dc:	fff70000 			; <UNDEFINED> instruction: 0xfff70000
200062e0:	8000001f 	andhi	r0, r0, pc, lsl r0
200062e4:	fc000009 	stc2	0, cr0, [r0], {9}
200062e8:	00000000 	andeq	r0, r0, r0
200062ec:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200062f0:	8000001f 	andhi	r0, r0, pc, lsl r0
200062f4:	fc200001 	stc2	0, cr0, [r0], #-4
200062f8:	00000000 	andeq	r0, r0, r0
200062fc:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20006300:	0000001f 	andeq	r0, r0, pc, lsl r0
20006304:	fc300000 	ldc2	0, cr0, [r0], #-0
20006308:	00000000 	andeq	r0, r0, r0
2000630c:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20006310:	0000000f 	andeq	r0, r0, pc
20006314:	fc300000 	ldc2	0, cr0, [r0], #-0
20006318:	00000000 	andeq	r0, r0, r0
2000631c:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20006320:	0000000f 	andeq	r0, r0, pc
20006324:	fc000000 	stc2	0, cr0, [r0], {-0}
20006328:	00000000 	andeq	r0, r0, r0
2000632c:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20006330:	1000000f 	andne	r0, r0, pc
20006334:	fc000000 	stc2	0, cr0, [r0], {-0}
20006338:	00000000 	andeq	r0, r0, r0
2000633c:	ffffe400 			; <UNDEFINED> instruction: 0xffffe400
20006340:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
20006344:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
20006348:	00000000 	andeq	r0, r0, r0
2000634c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006350:	0000000f 	andeq	r0, r0, pc
20006354:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006358:	00000000 	andeq	r0, r0, r0
2000635c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006360:	00000007 	andeq	r0, r0, r7
20006364:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20006368:	00000000 	andeq	r0, r0, r0
2000636c:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20006370:	00000007 	andeq	r0, r0, r7
20006374:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20006378:	00000000 	andeq	r0, r0, r0
2000637c:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20006380:	00100007 	andseq	r0, r0, r7
20006384:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
20006388:	00000000 	andeq	r0, r0, r0
2000638c:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
20006390:	00080007 	andeq	r0, r8, r7
20006394:	f80001c0 			; <UNDEFINED> instruction: 0xf80001c0
20006398:	00000000 	andeq	r0, r0, r0
2000639c:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
200063a0:	00000007 	andeq	r0, r0, r7
200063a4:	f8080300 			; <UNDEFINED> instruction: 0xf8080300
200063a8:	00000000 	andeq	r0, r0, r0
200063ac:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
200063b0:	00200007 	eoreq	r0, r0, r7
200063b4:	f8080200 			; <UNDEFINED> instruction: 0xf8080200
200063b8:	00000000 	andeq	r0, r0, r0
200063bc:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
200063c0:	00000007 	andeq	r0, r0, r7
200063c4:	f8000200 			; <UNDEFINED> instruction: 0xf8000200
200063c8:	00000000 	andeq	r0, r0, r0
200063cc:	fffffff0 			; <UNDEFINED> instruction: 0xfffffff0
200063d0:	00000007 	andeq	r0, r0, r7
200063d4:	f8000100 			; <UNDEFINED> instruction: 0xf8000100
200063d8:	00000000 	andeq	r0, r0, r0
200063dc:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
200063e0:	01000007 	tsteq	r0, r7
200063e4:	f8100280 			; <UNDEFINED> instruction: 0xf8100280
200063e8:	00000000 	andeq	r0, r0, r0
200063ec:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200063f0:	02000007 	andeq	r0, r0, #7
200063f4:	f8000300 			; <UNDEFINED> instruction: 0xf8000300

200063f8 <title_light_bits>:
	...
20006414:	00000400 	andeq	r0, r0, r0, lsl #8
20006418:	30000000 	andcc	r0, r0, r0
2000641c:	f80f9e06 			; <UNDEFINED> instruction: 0xf80f9e06
20006420:	06300000 	ldrteq	r0, [r0], -r0
20006424:	00cb8cba 	strheq	r8, [fp], #202	; 0xca
20006428:	ba033000 	blt	200d2430 <firstTime.4040+0xc9940>
2000642c:	0000eb4f 	andeq	lr, r0, pc, asr #22
20006430:	439ef3f0 	orrsmi	pc, lr, #240, 6	; 0xc0000003
20006434:	f000003a 			; <UNDEFINED> instruction: 0xf000003a
20006438:	5a478e9b 	bpl	211e9eac <firstTime.4040+0x11e13bc>
2000643c:	9b300000 	blls	20c06444 <firstTime.4040+0xbfd954>
20006440:	019bcd36 	orrseq	ip, fp, r6, lsr sp
20006444:	66db3000 	ldrbvs	r3, [fp], r0
20006448:	000319d9 	ldrdeq	r1, [r3], -r9
2000644c:	19667330 	stmdbne	r6!, {r4, r5, r8, r9, ip, sp, lr}^
20006450:	30000310 	andcc	r0, r0, r0, lsl r3
20006454:	00000001 	andeq	r0, r0, r1
20006458:	80000000 	andhi	r0, r0, r0
2000645c:	001d3e7b 	andseq	r3, sp, fp, ror lr
20006460:	0ac00000 	beq	1f006468 <startup-0xff9b98>
20006464:	00000528 	andeq	r0, r0, r8, lsr #10
20006468:	ec3a4000 	ldc	0, cr4, [sl], #-0
2000646c:	0000000d 	andeq	r0, r0, sp
20006470:	05240bc0 	streq	r0, [r4, #-3008]!	; 0xfffff440
20006474:	00f00000 	rscseq	r0, r0, r0
20006478:	001c0000 	andseq	r0, ip, r0
2000647c:	03ebb000 	mvneq	fp, #0
20006480:	00000000 	andeq	r0, r0, r0
20006484:	0c032330 	stceq	3, cr2, [r3], {48}	; 0x30
20006488:	300123e4 	andcc	r2, r1, r4, ror #7
2000648c:	940c1b2a 	strls	r1, [ip], #-2858	; 0xfffff4d6
20006490:	ea300120 	b	20c06918 <firstTime.4040+0xbfde28>
20006494:	ec860c3d 	stc	12, cr0, [r6], {61}	; 0x3d
20006498:	06ea3001 	strbteq	r3, [sl], r1
2000649c:	01e69648 	mvneq	r9, r8, asr #12
200064a0:	4b9e6b30 	blmi	1e7a1168 <startup-0x185ee98>
200064a4:	30012696 	mulcc	r1, r6, r6
200064a8:	92bbb06b 	adcsls	fp, fp, #107	; 0x6b
200064ac:	69f00126 	ldmibvs	r0!, {r1, r2, r5, r8}^
200064b0:	2691b832 			; <UNDEFINED> instruction: 0x2691b832
200064b4:	1e687001 	cdpne	0, 6, cr7, cr8, cr1, {0}
200064b8:	010e9110 	tsteq	lr, r0, lsl r1
	...

200064cc <title_gray_bits>:
	...
200064d4:	40000000 	andmi	r0, r0, r0
200064d8:	0f840000 	svceq	0x00840000
200064dc:	00b0c3fe 	ldrshteq	ip, [r0], lr
200064e0:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200064e4:	001f8f1f 	andseq	r8, pc, pc, lsl pc	; <UNPREDICTABLE>
200064e8:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
200064ec:	c8001fff 	stmdagt	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
200064f0:	07f061f9 			; <UNDEFINED> instruction: 0x07f061f9
200064f4:	f1cc001f 			; <UNDEFINED> instruction: 0xf1cc001f
200064f8:	be347305 	cdplt	3, 3, cr7, cr4, cr5, {0}
200064fc:	05f0ce00 	ldrbeq	ip, [r0, #3584]!	; 0xe00
20006500:	007e1430 	rsbseq	r1, lr, r0, lsr r4
20006504:	2041080f 	subcs	r0, r1, pc, lsl #16
20006508:	0e003e01 	cdpeq	14, 0, cr3, cr0, cr1, {0}
2000650c:	01384060 	teqeq	r8, r0, rrx
20006510:	600c001e 	andvs	r0, ip, lr, lsl r0
20006514:	1c4030c0 	mcrrne	0, 12, r3, r0, cr0
20006518:	10208c00 	eorne	r8, r0, r0, lsl #24
2000651c:	0038c024 	eorseq	ip, r8, r4, lsr #32
20006520:	0411088c 	ldreq	r0, [r1], #-2188	; 0xfffff774
20006524:	c800f8ce 	stmdagt	r0, {r1, r2, r3, r6, r7, fp, ip, sp, lr, pc}
20006528:	ffe6990c 			; <UNDEFINED> instruction: 0xffe6990c
2000652c:	7cfa0178 	ldfvce	f0, [sl], #480	; 0x1e0
20006530:	3fe0c184 	svccc	0x00e0c184
20006534:	013ff400 	teqeq	pc, r0, lsl #8	; <UNPREDICTABLE>
20006538:	001fc0c7 	andseq	ip, pc, r7, asr #1
2000653c:	03c03ff0 	biceq	r3, r0, #240, 30	; 0x3c0
20006540:	fc0007e0 	stc2	7, cr0, [r0], {224}	; 0xe0
20006544:	e003803f 	and	r8, r3, pc, lsr r0
20006548:	7f0c009f 	svcvc	0x000c009f
2000654c:	ffc1fbe4 			; <UNDEFINED> instruction: 0xffc1fbe4
20006550:	fc140c03 	ldc2	12, cr0, [r4], {3}
20006554:	03ffc7ff 	mvnseq	ip, #66846720	; 0x3fc0000
20006558:	f3fc1c0c 	vdup.32	d17, d12[1]
2000655c:	0e02dc1b 	mcreq	12, 0, sp, cr2, cr11, {0}
20006560:	63f3e490 	mvnsvs	lr, #144, 8	; 0x90000000
20006564:	018e0218 	orreq	r0, lr, r8, lsl r2
20006568:	1251e382 	subsne	lr, r1, #134217730	; 0x8000002
2000656c:	88018e02 	stmdahi	r1, {r1, r9, sl, fp, pc}
20006570:	020061a7 	andeq	r6, r0, #-1073741783	; 0xc0000029
20006574:	2460008e 	strbtcs	r0, [r0], #-142	; 0xffffff72
20006578:	8e021041 	cdphi	0, 0, cr1, cr2, cr1, {2}
2000657c:	41000300 	mrsmi	r0, LR_irq
20006580:	000e0290 	muleq	lr, r0, r2
20006584:	9048008d 	subls	r0, r8, sp, lsl #1
20006588:	81040c02 	tsthi	r4, r2, lsl #24
2000658c:	02a04c87 	adceq	r4, r0, #34560	; 0x8700
20006590:	cffffffc 	svcgt	0x00fffffc
20006594:	8203e2fc 	andhi	lr, r3, #252, 4	; 0xc000000f
20006598:	e3f81c07 	mvns	r1, #1792	; 0x700
2000659c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200065a0 <title_black_bits>:
	...
200065c8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
200065cc:	01000040 	tsteq	r0, r0, asr #32
200065d0:	400c0000 	andmi	r0, ip, r0
200065d4:	00010080 	andeq	r0, r1, r0, lsl #1
200065d8:	9c200400 	cfstrsls	mvf0, [r0], #-0
200065dc:	000001c4 	andeq	r0, r0, r4, asr #3
200065e0:	a4803104 	strge	r3, [r0], #260	; 0x104
200065e4:	04c00001 	strbeq	r0, [r0], #1
200065e8:	02240209 	eoreq	r0, r4, #-1879048192	; 0x90000000
200065ec:	89044000 	stmdbhi	r4, {lr}
200065f0:	00042602 	andeq	r2, r4, r2, lsl #12
200065f4:	e2888440 	add	r8, r8, #64, 8	; 0x40000000
200065f8:	00000421 	andeq	r0, r0, r1, lsr #8
200065fc:	001966f2 			; <UNDEFINED> instruction: 0x001966f2
20006600:	03000007 	movweq	r0, #7
20006604:	00020000 	andeq	r0, r2, r0
20006608:	f4000000 	vst4.8	{d0-d3}, [r0], r0
2000660c:	00003a10 	andeq	r3, r0, r0, lsl sl
20006610:	10058000 	andne	r8, r5, r0
20006614:	00000012 	andeq	r0, r0, r2, lsl r0
20006618:	1ad87400 	bne	1f623620 <startup-0x9dc9e0>
2000661c:	80000000 	andhi	r0, r0, r0
20006620:	0022041b 	eoreq	r0, r2, fp, lsl r4
20006624:	00004000 	andeq	r4, r0, r0
20006628:	00003800 	andeq	r3, r0, r0, lsl #16
2000662c:	0000c0c0 	andeq	ip, r0, r0, asr #1
20006630:	c0000000 	andgt	r0, r0, r0
20006634:	08000045 	stmdaeq	r0, {r0, r2, r6}
20006638:	144000c7 	strbne	r0, [r0], #-199	; 0xffffff39
2000663c:	01281040 			; <UNDEFINED> instruction: 0x01281040
20006640:	71144000 	tstvc	r4, r0
20006644:	00190810 	andseq	r0, r9, r0, lsl r8
20006648:	90019440 	andls	r9, r1, r0, asr #8
2000664c:	4000c928 	andmi	ip, r0, r8, lsr #18
20006650:	2c444c94 	mcrrcs	12, 9, r4, r4, cr4
20006654:	96000049 	strls	r0, [r0], -r9, asr #32
20006658:	49264740 	stmdbmi	r6!, {r6, r8, r9, sl, lr}
2000665c:	60938000 	addsvs	r8, r3, r0
20006660:	00512268 	subseq	r2, r1, r8, ror #4
20006664:	30000000 	andcc	r0, r0, r0
20006668:	00001d03 	andeq	r1, r0, r3, lsl #26
	...

20006674 <bg_bits>:
	...
20006684:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
20006688:	0000001f 	andeq	r0, r0, pc, lsl r0
	...
20006694:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20006698:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
200066a4:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
200066a8:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
200066b4:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200066b8:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
200066c4:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200066c8:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
200066d4:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200066d8:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200066e4:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
200066e8:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200067ef <bg_bits+0x17b>	; <UNPREDICTABLE>
200066ec:	0001f000 	andeq	pc, r1, r0
200066f0:	00000000 	andeq	r0, r0, r0
200066f4:	007fe000 	rsbseq	lr, pc, r0
200066f8:	0ffffffe 	svceq	0x00fffffe
200066fc:	0003f800 	andeq	pc, r3, r0, lsl #16
20006700:	00000000 	andeq	r0, r0, r0
20006704:	003fe000 	eorseq	lr, pc, r0
20006708:	7fffffc0 	svcvc	0x00ffffc0
2000670c:	0003f800 	andeq	pc, r3, r0, lsl #16
20006710:	001f8000 	andseq	r8, pc, r0
20006714:	001fe000 	andseq	lr, pc, r0
20006718:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
2000671c:	0003f801 	andeq	pc, r3, r1, lsl #16
20006720:	003fc000 	eorseq	ip, pc, r0
20006724:	003fe000 	eorseq	lr, pc, r0
20006728:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
2000672c:	3f83f807 	svccc	0x0083f807
20006730:	003fe000 	eorseq	lr, pc, r0
20006734:	01ffe000 	mvnseq	lr, r0
20006738:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
2000673c:	7fc3f80f 	svcvc	0x00c3f80f
20006740:	003fe7f8 	ldrshteq	lr, [pc], -r8
20006744:	07ffe000 	ldrbeq	lr, [pc, r0]!
20006748:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
2000674c:	7fe1f01f 	svcvc	0x00e1f01f
20006750:	003ffffc 	ldrshteq	pc, [pc], -ip	; <UNPREDICTABLE>
20006754:	3fffc000 	svccc	0x00ffc000
20006758:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
2000675c:	7ff0003f 	svcvc	0x00f0003f
20006760:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
20006764:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20006768:	ff000000 			; <UNDEFINED> instruction: 0xff000000
2000676c:	7ff8007f 	svcvc	0x00f8007f
20006770:	3ffffffc 	svccc	0x00fffffc
20006774:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20006778:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
2000677c:	7ffc00ff 	svcvc	0x00fc00ff
20006780:	7ffffffc 	svcvc	0x00fffffc
20006784:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20006788:	e000000f 	and	r0, r0, pc
2000678c:	7ffe01ff 	svcvc	0x00fe01ff
20006790:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20006794:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
20006798:	8000001f 	andhi	r0, r0, pc, lsl r0
2000679c:	7fff01ff 	svcvc	0x00ff01ff
200067a0:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200067a4:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200067a8:	0000007f 	andeq	r0, r0, pc, ror r0
200067ac:	7fff83ff 	svcvc	0x00ff83ff
200067b0:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
200067b4:	ff800000 			; <UNDEFINED> instruction: 0xff800000
200067b8:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200067bc:	7fffc3fe 	svcvc	0x00ffc3fe
200067c0:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
200067c4:	fc7ffff0 	ldc2l	15, cr15, [pc], #-960	; 2000640c <title_light_bits+0x14>
200067c8:	07c001ff 			; <UNDEFINED> instruction: 0x07c001ff
200067cc:	7fffe7fc 	svcvc	0x00ffe7fc
200067d0:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
200067d4:	f0fffffe 			; <UNDEFINED> instruction: 0xf0fffffe
200067d8:	0fe007ff 	svceq	0x00e007ff
200067dc:	7ffff7fc 	svcvc	0x00fff7fc
200067e0:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
200067e4:	c0ffffff 	ldrshtgt	pc, [pc], #255	; <UNPREDICTABLE>
200067e8:	0fe00fff 	svceq	0x00e00fff
200067ec:	7ffffff8 	svcvc	0x00fffff8
200067f0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
200067f4:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200068fb <bg_bits+0x287>	; <UNPREDICTABLE>
200067f8:	0fe01fff 	svceq	0x00e01fff
200067fc:	7ffffff8 	svcvc	0x00fffff8
20006800:	7ffffc00 	svcvc	0x00fffc00
20006804:	01ffffff 	ldrsheq	pc, [pc, #255]	; 2000690b <bg_bits+0x297>	; <UNPREDICTABLE>
20006808:	0fe03ffe 	svceq	0x00e03ffe
2000680c:	3fdffff0 	svccc	0x00dffff0
20006810:	3ffffe00 	svccc	0x00fffe00
20006814:	01ffffff 	ldrsheq	pc, [pc, #255]	; 2000691b <bg_bits+0x2a7>	; <UNPREDICTABLE>
20006818:	0fe03ff8 	svceq	0x00e03ff8
2000681c:	3fe7fff0 	svccc	0x00e7fff0
20006820:	07fffe00 	ldrbeq	pc, [pc, r0, lsl #28]!	; <UNPREDICTABLE>
20006824:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20006828:	07c07ff0 			; <UNDEFINED> instruction: 0x07c07ff0
2000682c:	1fe7fff0 	svcne	0x00e7fff0
20006830:	0ffffe00 	svceq	0x00fffe00
20006834:	03fc00ff 	mvnseq	r0, #255	; 0xff
20006838:	0000ffe0 	andeq	pc, r0, r0, ror #31
2000683c:	1ff3ffe0 	svcne	0x00f3ffe0
20006840:	1ffffe00 	svcne	0x00fffe00
20006844:	03fc001f 	mvnseq	r0, #31
20006848:	0001ff80 	andeq	pc, r1, r0, lsl #31
2000684c:	1ff9ffe0 	svcne	0x00f9ffe0
20006850:	3ffffe00 	svccc	0x00fffe00
20006854:	03fc0007 	mvnseq	r0, #7
20006858:	0001ff80 	andeq	pc, r1, r0, lsl #31
2000685c:	0ffcffe0 	svceq	0x00fcffe0
20006860:	3ffdfe00 	svccc	0x00fdfe00
20006864:	07f80007 	ldrbeq	r0, [r8, r7]!
20006868:	0003ff00 	andeq	pc, r3, r0, lsl #30
2000686c:	0ffe7ff0 	svceq	0x00fe7ff0
20006870:	3ffcfe00 	svccc	0x00fcfe00
20006874:	07f80003 	ldrbeq	r0, [r8, r3]!
20006878:	0007fe00 	andeq	pc, r7, r0, lsl #28
2000687c:	07fe7ff8 			; <UNDEFINED> instruction: 0x07fe7ff8
20006880:	3ff8fe00 	svccc	0x00f8fe00
20006884:	0ff80003 	svceq	0x00f80003
20006888:	0007fc00 	andeq	pc, r7, r0, lsl #24
2000688c:	03fffffc 	mvnseq	pc, #252, 30	; 0x3f0
20006890:	3ff87c00 	svccc	0x00f87c00
20006894:	0ff80003 	svceq	0x00f80003
20006898:	0007fc00 	andeq	pc, r7, r0, lsl #24
2000689c:	01fffffe 	ldrsheq	pc, [pc, #254]	; 200069a2 <bg_bits+0x32e>	; <UNPREDICTABLE>
200068a0:	1ff00000 	svcne	0x00f00000	; IMB
200068a4:	0ff00007 	svceq	0x00f00007
200068a8:	000ff800 	andeq	pc, pc, r0, lsl #16
200068ac:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200069b3 <bg_bits+0x33f>	; <UNPREDICTABLE>
200068b0:	07f0003e 			; <UNDEFINED> instruction: 0x07f0003e
200068b4:	0ff00007 	svceq	0x00f00007
200068b8:	800ff000 	andhi	pc, pc, r0
200068bc:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200068c0:	03e0007f 	mvneq	r0, #127	; 0x7f
200068c4:	0fe00007 	svceq	0x00e00007
200068c8:	c00ff000 	andgt	pc, pc, r0
200068cc:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
200068d0:	0000007f 	andeq	r0, r0, pc, ror r0
200068d4:	0fe00007 	svceq	0x00e00007
200068d8:	e00ff000 	and	pc, pc, r0
200068dc:	007ffeff 	ldrshteq	pc, [pc], #-239	; <UNPREDICTABLE>
200068e0:	0000007f 	andeq	r0, r0, pc, ror r0
200068e4:	0fe00007 	svceq	0x00e00007
200068e8:	f00ff000 			; <UNDEFINED> instruction: 0xf00ff000
200068ec:	003ffe7f 	eorseq	pc, pc, pc, ror lr	; <UNPREDICTABLE>
200068f0:	0000007f 	andeq	r0, r0, pc, ror r0
200068f4:	0fe00007 	svceq	0x00e00007
200068f8:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
200068fc:	001ffc3f 	andseq	pc, pc, pc, lsr ip	; <UNPREDICTABLE>
20006900:	0000007f 	andeq	r0, r0, pc, ror r0
20006904:	1fe0000f 	svcne	0x00e0000f
20006908:	fc0ff000 	stc2	0, cr15, [pc], {-0}
2000690c:	000ff81f 	andeq	pc, pc, pc, lsl r8	; <UNPREDICTABLE>
20006910:	0000003e 	andeq	r0, r0, lr, lsr r0
20006914:	1fe0000f 	svcne	0x00e0000f
20006918:	fc07f000 	stc2	0, cr15, [r7], {-0}
2000691c:	0007f00f 	andeq	pc, r7, pc
20006920:	00000000 	andeq	r0, r0, r0
20006924:	1fe0000f 	svcne	0x00e0000f
20006928:	fc07f000 	stc2	0, cr15, [r7], {-0}
2000692c:	00000007 	andeq	r0, r0, r7
20006930:	00000000 	andeq	r0, r0, r0
20006934:	1fe0000f 	svcne	0x00e0000f
20006938:	fc07f800 	stc2	8, cr15, [r7], {-0}
2000693c:	00000003 	andeq	r0, r0, r3
20006940:	000ff800 	andeq	pc, pc, r0, lsl #16
20006944:	1fc0001f 	svcne	0x00c0001f
20006948:	fc07fc00 	stc2	12, cr15, [r7], {-0}
2000694c:	00000001 	andeq	r0, r0, r1
20006950:	001ffc00 	andseq	pc, pc, r0, lsl #24
20006954:	1fc0003f 	svcne	0x00c0003f
20006958:	fc07ff80 	stc2	15, cr15, [r7], {128}	; 0x80
2000695c:	00000001 	andeq	r0, r0, r1
20006960:	003fff00 	eorseq	pc, pc, r0, lsl #30
20006964:	3fc0003f 	svccc	0x00c0003f
20006968:	fc07fffc 	stc2	15, cr15, [r7], {252}	; 0xfc
2000696c:	00000001 	andeq	r0, r0, r1
20006970:	007fff80 	rsbseq	pc, pc, r0, lsl #31
20006974:	ffc0003f 			; <UNDEFINED> instruction: 0xffc0003f
20006978:	fc03ffff 	stc2	15, cr15, [r3], {255}	; 0xff
2000697c:	00000001 	andeq	r0, r0, r1
20006980:	00ffffe0 	rscseq	pc, pc, r0, ror #31
20006984:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20006988:	fc01ffff 	stc2	15, cr15, [r1], {255}	; 0xff
2000698c:	00000007 	andeq	r0, r0, r7
20006990:	03fffff0 	mvnseq	pc, #240, 30	; 0x3c0
20006994:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20006998:	fc00ffff 	stc2	15, cr15, [r0], {255}	; 0xff
2000699c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200069a0:	07fffff8 			; <UNDEFINED> instruction: 0x07fffff8
200069a4:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
200069a8:	fc007fff 	stc2	15, cr7, [r0], {255}	; 0xff
200069ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200069b0:	07ff7ffd 			; <UNDEFINED> instruction: 0x07ff7ffd
200069b4:	ff80007f 			; <UNDEFINED> instruction: 0xff80007f
200069b8:	fc003fff 	stc2	15, cr3, [r0], {255}	; 0xff
200069bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200069c0:	0ffe3fff 	svceq	0x00fe3fff
200069c4:	ff1f007f 			; <UNDEFINED> instruction: 0xff1f007f
200069c8:	f80007ff 			; <UNDEFINED> instruction: 0xf80007ff
200069cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200069d0:	1ffc3fff 	svcne	0x00fc3fff
200069d4:	fc3f807f 	ldc2	0, cr8, [pc], #-508	; 200067e0 <bg_bits+0x16c>
200069d8:	f800003f 			; <UNDEFINED> instruction: 0xf800003f
200069dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200069e0:	1ff83fff 	svcne	0x00f83fff
200069e4:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
200069e8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200069ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200069f0:	3ff03fff 	svccc	0x00f03fff
200069f4:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
200069f8:	c0000000 	andgt	r0, r0, r0
200069fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006a00:	7fe03fff 	svcvc	0x00e03fff
20006a04:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20006a08:	00000000 	andeq	r0, r0, r0
20006a0c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006a10:	7fc03fff 	svcvc	0x00c03fff
20006a14:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20006a18:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20006a1c:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
20006a20:	ffc01fff 			; <UNDEFINED> instruction: 0xffc01fff
20006a24:	001f003f 	andseq	r0, pc, pc, lsr r0	; <UNPREDICTABLE>
20006a28:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006a2c:	f8007fff 			; <UNDEFINED> instruction: 0xf8007fff
20006a30:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20006a34:	0000003f 	andeq	r0, r0, pc, lsr r0
20006a38:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006a3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006a40:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20006a44:	0000003f 	andeq	r0, r0, pc, lsr r0
20006a48:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006a4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006a50:	ff001fff 			; <UNDEFINED> instruction: 0xff001fff
20006a54:	0000003f 	andeq	r0, r0, pc, lsr r0
20006a58:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006a5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006a60:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}
20006a64:	0000003f 	andeq	r0, r0, pc, lsr r0
20006a68:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006a6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006a70:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}

20006a74 <current_screen>:
20006a74:	00000001 	andeq	r0, r0, r1

20006a78 <delay_until_text.4283>:
20006a78:	00000082 	andeq	r0, r0, r2, lsl #1

20006a7c <long_text.4281>:
20006a7c:	00000028 	andeq	r0, r0, r8, lsr #32

20006a80 <short_text.4282>:
20006a80:	00000014 	andeq	r0, r0, r4, lsl r0

20006a84 <last_climb_value.4285>:
20006a84:	00000064 	andeq	r0, r0, r4, rrx

20006a88 <fire_black_2_bits>:
	...
20006a90:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>

20006a94 <fire1_gray_bits>:
20006a94:	00000000 	andeq	r0, r0, r0
20006a98:	06000804 	streq	r0, [r0], -r4, lsl #16
20006a9c:	02494204 	subeq	r4, r9, #4, 4	; 0x40000000

20006aa0 <fire1_light_bits>:
20006aa0:	00002000 	andeq	r2, r0, r0
20006aa4:	48000010 	stmdami	r0, {r4}
20006aa8:	2c243020 	stccs	0, cr3, [r4], #-128	; 0xffffff80

20006aac <fire2_gray_bits>:
20006aac:	00000000 	andeq	r0, r0, r0
20006ab0:	10220000 	eorne	r0, r2, r0
20006ab4:	00420444 	subeq	r0, r2, r4, asr #8

20006ab8 <fire2_light_bits>:
20006ab8:	04200000 	strteq	r0, [r0], #-0
20006abc:	240c0010 	strcs	r0, [ip], #-16
20006ac0:	123c6008 	eorsne	r6, ip, #8

20006ac4 <fire3_gray_bits>:
20006ac4:	00000000 	andeq	r0, r0, r0
20006ac8:	24100802 	ldrcs	r0, [r0], #-2050	; 0xfffff7fe
20006acc:	00020260 	andeq	r0, r2, r0, ror #4

20006ad0 <fire3_light_bits>:
20006ad0:	10200000 	eorne	r0, r0, r0
20006ad4:	18040400 	stmdane	r4, {sl}
20006ad8:	143c5812 	ldrtne	r5, [ip], #-2066	; 0xfffff7ee

20006adc <fire4_gray_bits>:
20006adc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20006ae0:	10320000 	eorsne	r0, r2, r0
20006ae4:	02400012 	subeq	r0, r0, #18

20006ae8 <fire4_light_bits>:
20006ae8:	00001000 	andeq	r1, r0, r0
20006aec:	04082000 	streq	r2, [r8], #-0
20006af0:	24283a0c 	strtcs	r3, [r8], #-2572	; 0xfffff5f4

20006af4 <fire5_gray_bits>:
20006af4:	00000000 	andeq	r0, r0, r0
20006af8:	22001020 	andcs	r1, r0, #32
20006afc:	04044206 	streq	r4, [r4], #-518	; 0xfffffdfa

20006b00 <fire5_light_bits>:
20006b00:	00040000 	andeq	r0, r4, r0
20006b04:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
20006b08:	502a1810 	eorpl	r1, sl, r0, lsl r8

20006b0c <firstTime.4076>:
20006b0c:	00000001 	andeq	r0, r0, r1

20006b10 <bird1_black_bits>:
	...
20006b20:	00010040 	andeq	r0, r1, r0, asr #32
20006b24:	00118060 	andseq	r8, r1, r0, rrx
20006b28:	00118060 	andseq	r8, r1, r0, rrx
20006b2c:	001b80ec 	andseq	r8, fp, ip, ror #1
20006b30:	003f81fc 	ldrshteq	r8, [pc], -ip
20006b34:	007fe1f8 	ldrshteq	lr, [pc], #-24
20006b38:	007ff3f8 	ldrshteq	pc, [pc], #-56	; <UNPREDICTABLE>
20006b3c:	003ffff8 	ldrshteq	pc, [pc], -r8	; <UNPREDICTABLE>
20006b40:	003fedf8 	ldrshteq	lr, [pc], -r8
20006b44:	001ff1f0 			; <UNDEFINED> instruction: 0x001ff1f0
20006b48:	000ff0e0 	andeq	pc, pc, r0, ror #1
20006b4c:	0007ff80 	andeq	pc, r7, r0, lsl #31
20006b50:	00007c00 	andeq	r7, r0, r0, lsl #24
20006b54:	00008800 	andeq	r8, r0, r0, lsl #16
20006b58:	00033000 	andeq	r3, r3, r0
20006b5c:	00011000 	andeq	r1, r1, r0
	...

20006b74 <bird1_gray_bits>:
	...
20006ba8:	00000e00 	andeq	r0, r0, r0, lsl #28
20006bac:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20006bd8 <bird1_light_bits>:
	...
20006c08:	00001200 	andeq	r1, r0, r0, lsl #4
	...

20006c3c <bird2_black_bits>:
	...
20006c54:	000b0000 	andeq	r0, fp, r0
20006c58:	001e0028 	andseq	r0, lr, r8, lsr #32
20006c5c:	003e0068 	eorseq	r0, lr, r8, rrx
20006c60:	003e007c 	eorseq	r0, lr, ip, ror r0
20006c64:	003e007c 	eorseq	r0, lr, ip, ror r0
20006c68:	007e007c 	rsbseq	r0, lr, ip, ror r0
20006c6c:	007e7cfc 	ldrshteq	r7, [lr], #-204	; 0xffffff34
20006c70:	007ffff8 	ldrshteq	pc, [pc], #-248	; <UNPREDICTABLE>
20006c74:	003fd7f0 	ldrshteq	sp, [pc], -r0
20006c78:	003fc3c0 	eorseq	ip, pc, r0, asr #7
20006c7c:	000fc100 	andeq	ip, pc, r0, lsl #2
20006c80:	00007000 	andeq	r7, r0, r0
20006c84:	0000a000 	andeq	sl, r0, r0
20006c88:	0001e000 	andeq	lr, r1, r0
20006c8c:	0000a000 	andeq	sl, r0, r0
20006c90:	00008000 	andeq	r8, r0, r0
	...

20006ca0 <bird2_gray_bits>:
	...
20006cdc:	00003c00 	andeq	r3, r0, r0, lsl #24
20006ce0:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20006d04 <bird2_light_bits>:
	...
20006d3c:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20006d68 <bird3_black_bits>:
	...
20006d88:	00280000 	eoreq	r0, r8, r0
20006d8c:	00680020 	rsbeq	r0, r8, r0, lsr #32
20006d90:	00f80038 	rscseq	r0, r8, r8, lsr r0
20006d94:	00fc0038 	rscseq	r0, ip, r8, lsr r0
20006d98:	00fc007c 	rscseq	r0, ip, ip, ror r0
20006d9c:	00fe3dfe 	ldrshteq	r3, [lr], #222	; 0xde
20006da0:	00fffffe 	ldrshteq	pc, [pc], #254	; <UNPREDICTABLE>
20006da4:	007febfc 	ldrshteq	lr, [pc], #-188
20006da8:	003ff1f0 	ldrshteq	pc, [pc], -r0	; <UNPREDICTABLE>
20006dac:	001ff0c0 	andseq	pc, pc, r0, asr #1
20006db0:	0001e800 	andeq	lr, r1, r0, lsl #16
20006db4:	00005000 	andeq	r5, r0, r0
20006db8:	0000f000 	andeq	pc, r0, r0
20006dbc:	00009000 	andeq	r9, r0, r0
	...

20006dcc <bird3_gray_bits>:
	...
20006e0c:	00000e00 	andeq	r0, r0, r0, lsl #28
20006e10:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20006e30 <bird3_light_bits>:
	...
20006e6c:	00001400 	andeq	r1, r0, r0, lsl #8
	...

20006e94 <bird4_black_bits>:
	...
20006ec8:	00007800 	andeq	r7, r0, r0, lsl #16
20006ecc:	0000ff80 	andeq	pc, r0, r0, lsl #31
20006ed0:	0003d7f4 	strdeq	sp, [r3], -r4
20006ed4:	008fe3fc 	strdeq	lr, [pc], ip
20006ed8:	01ffc1fc 	ldrsheq	ip, [pc, #28]	; 20006efc <bird4_gray_bits+0x4>
20006edc:	00ffd9f8 	ldrshteq	sp, [pc], #152
20006ee0:	007fb0f0 	ldrshteq	fp, [pc], #-0
20006ee4:	007ea000 	rsbseq	sl, lr, r0
20006ee8:	00792000 	rsbseq	r2, r9, r0
20006eec:	00300000 	eorseq	r0, r0, r0
	...

20006ef8 <bird4_gray_bits>:
	...
20006f38:	00001c00 	andeq	r1, r0, r0, lsl #24
20006f3c:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20006f5c <bird4_light_bits>:
	...
20006f98:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20006fc0 <bird5_black_bits>:
	...
20006fec:	00001c00 	andeq	r1, r0, r0, lsl #24
20006ff0:	0000ff00 	andeq	pc, r0, r0, lsl #30
20006ff4:	0003eb00 	andeq	lr, r3, r0, lsl #22
20006ff8:	0007f180 	andeq	pc, r7, r0, lsl #3
20006ffc:	000ff080 	andeq	pc, pc, r0, lsl #1
20007000:	000fff80 	andeq	pc, pc, r0, lsl #31
20007004:	001fd3c0 	andseq	sp, pc, r0, asr #7
20007008:	003fa3c0 	eorseq	sl, pc, r0, asr #7
2000700c:	003fa3c0 	eorseq	sl, pc, r0, asr #7
20007010:	003fd3c0 	eorseq	sp, pc, r0, asr #7
20007014:	003e8380 	eorseq	r8, lr, r0, lsl #7
20007018:	00778580 	rsbseq	r8, r7, r0, lsl #11
2000701c:	00610000 	rsbeq	r0, r1, r0
20007020:	00000000 	andeq	r0, r0, r0

20007024 <bird5_gray_bits>:
	...
2000705c:	00000e00 	andeq	r0, r0, r0, lsl #28
20007060:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20007088 <bird5_light_bits>:
	...
200070bc:	00001400 	andeq	r1, r0, r0, lsl #8
	...

200070ec <firstTime.4093>:
200070ec:	00000001 	andeq	r0, r0, r1

200070f0 <witch1_black_bits>:
200070f0:	200001f8 	strdcs	r0, [r0], -r8
200070f4:	03400001 	movteq	r0, #1
200070f8:	00074000 	andeq	r4, r7, r0
200070fc:	20000720 	andcs	r0, r0, r0, lsr #14
20007100:	3ff80066 	svccc	0x00f80066
20007104:	00044000 	andeq	r4, r4, r0
20007108:	40000440 	andmi	r0, r0, r0, asr #8
2000710c:	03800004 	orreq	r0, r0, #4
20007110:	00064000 	andeq	r4, r6, r0
20007114:	20000640 	andcs	r0, r0, r0, asr #12
20007118:	0e200006 	cdpeq	0, 2, cr0, cr0, cr6, {0}
2000711c:	000e1000 	andeq	r1, lr, r0
20007120:	f8000c10 			; <UNDEFINED> instruction: 0xf8000c10
20007124:	0000001f 	andeq	r0, r0, pc, lsl r0

20007128 <witch1_gray_bits>:
20007128:	c0000000 	andgt	r0, r0, r0
2000712c:	00800000 	addeq	r0, r0, r0
20007130:	00008000 	andeq	r8, r0, r0
20007134:	c00000c0 	andgt	r0, r0, r0, asr #1
20007138:	00000001 	andeq	r0, r0, r1
	...
20007148:	00018000 	andeq	r8, r1, r0
2000714c:	c0000180 	andgt	r0, r0, r0, lsl #3
20007150:	01c00001 	biceq	r0, r0, r1
20007154:	0001e000 	andeq	lr, r1, r0
20007158:	000003e0 	andeq	r0, r0, r0, ror #7
2000715c:	00000000 	andeq	r0, r0, r0

20007160 <witch1_light_bits>:
	...
20007174:	00038000 	andeq	r8, r3, r0
20007178:	80000380 	andhi	r0, r0, r0, lsl #7
2000717c:	00000003 	andeq	r0, r0, r3
	...

20007198 <witch2_black_bits>:
20007198:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000719c:	01200001 			; <UNDEFINED> instruction: 0x01200001
200071a0:	00034000 	andeq	r4, r3, r0
200071a4:	20000740 	andcs	r0, r0, r0, asr #14
200071a8:	66200007 	strtvs	r0, [r0], -r7
200071ac:	003ff800 	eorseq	pc, pc, r0, lsl #16
200071b0:	40000440 	andmi	r0, r0, r0, asr #8
200071b4:	04400004 	strbeq	r0, [r0], #-4
200071b8:	00038000 	andeq	r8, r3, r0
200071bc:	20000660 	andcs	r0, r0, r0, ror #12
200071c0:	0e100006 	cdpeq	0, 1, cr0, cr0, cr6, {0}
200071c4:	001c0800 	andseq	r0, ip, r0, lsl #16
200071c8:	fc001c08 	stc2	12, cr1, [r0], {8}
200071cc:	0000003f 	andeq	r0, r0, pc, lsr r0

200071d0 <witch2_gray_bits>:
200071d0:	00000000 	andeq	r0, r0, r0
200071d4:	00c00000 	sbceq	r0, r0, r0
200071d8:	00008000 	andeq	r8, r0, r0
200071dc:	c0000080 	andgt	r0, r0, r0, lsl #1
200071e0:	01c00000 	biceq	r0, r0, r0
	...
200071f4:	c0000180 	andgt	r0, r0, r0, lsl #3
200071f8:	01e00001 	mvneq	r0, r1
200071fc:	0003f000 	andeq	pc, r3, r0
20007200:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
20007204:	00000000 	andeq	r0, r0, r0

20007208 <witch2_light_bits>:
	...
20007220:	80000380 	andhi	r0, r0, r0, lsl #7
20007224:	03800003 	orreq	r0, r0, #3
	...

20007240 <witch3_black_bits>:
20007240:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007244:	01200001 			; <UNDEFINED> instruction: 0x01200001
20007248:	00034000 	andeq	r4, r3, r0
2000724c:	20000740 	andcs	r0, r0, r0, asr #14
20007250:	66200007 	strtvs	r0, [r0], -r7
20007254:	003ff800 	eorseq	pc, pc, r0, lsl #16
20007258:	40000440 	andmi	r0, r0, r0, asr #8
2000725c:	04400004 	strbeq	r0, [r0], #-4
20007260:	00038000 	andeq	r8, r3, r0
20007264:	10000660 	andne	r0, r0, r0, ror #12
20007268:	1c08000e 	stcne	0, cr0, [r8], {14}
2000726c:	00380800 	eorseq	r0, r8, r0, lsl #16
20007270:	fe003804 	vcmla.f16	d3, d0, d4[0], #0
20007274:	0000007f 	andeq	r0, r0, pc, ror r0

20007278 <witch3_gray_bits>:
20007278:	00000000 	andeq	r0, r0, r0
2000727c:	00c00000 	sbceq	r0, r0, r0
20007280:	00008000 	andeq	r8, r0, r0
20007284:	c0000080 	andgt	r0, r0, r0, lsl #1
20007288:	01c00000 	biceq	r0, r0, r0
	...
2000729c:	e0000180 	and	r0, r0, r0, lsl #3
200072a0:	03f00001 	mvnseq	r0, #1
200072a4:	0007f000 	andeq	pc, r7, r0
200072a8:	000007f8 	strdeq	r0, [r0], -r8
200072ac:	00000000 	andeq	r0, r0, r0

200072b0 <witch3_light_bits>:
	...
200072c8:	80000380 	andhi	r0, r0, r0, lsl #7
200072cc:	03800003 	orreq	r0, r0, #3
	...

200072e8 <firstTime.4067>:
200072e8:	00000001 	andeq	r0, r0, r1

200072ec <indoors_black_bits>:
200072ec:	00000100 	andeq	r0, r0, r0, lsl #2
	...
200072fc:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000730c:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000731c:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000732c:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000733c:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000734c:	00000280 	andeq	r0, r0, r0, lsl #5
	...
2000735c:	00000440 	andeq	r0, r0, r0, asr #8
	...
2000736c:	00002aa8 	andeq	r2, r0, r8, lsr #21
	...
2000737c:	00001290 	muleq	r0, r0, r2
	...
2000738c:	00002c68 	andeq	r2, r0, r8, ror #24
	...
2000739c:	00002008 	andeq	r2, r0, r8
	...
200073ac:	000027c8 	andeq	r2, r0, r8, asr #15
	...
200073bc:	00001ff0 	strdeq	r1, [r0], -r0
	...
200073cc:	00000d60 	andeq	r0, r0, r0, ror #26
	...
2000743c:	f7fbfe00 			; <UNDEFINED> instruction: 0xf7fbfe00
20007440:	7fbfdfef 	svcvc	0x00bfdfef
20007444:	fbfdfeff 	blx	1ff8704a <startup-0x78fb6>
20007448:	00ff703f 	rscseq	r7, pc, pc, lsr r0	; <UNPREDICTABLE>
2000744c:	0c060200 	sfmeq	f0, 4, [r6], {-0}
20007450:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20007454:	06030180 	streq	r0, [r3], -r0, lsl #3
20007458:	0080d02c 	addeq	sp, r0, ip, lsr #32
2000745c:	0c060200 	sfmeq	f0, 4, [r6], {-0}
20007460:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20007464:	06030180 	streq	r0, [r3], -r0, lsl #3
20007468:	0080d02c 	addeq	sp, r0, ip, lsr #32
2000746c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20007470:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007474:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007478:	00ffdfef 	rscseq	sp, pc, pc, ror #31
	...
20007488:	000050e8 	andeq	r5, r0, r8, ror #1
	...
20007498:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
200074a8:	00005028 	andeq	r5, r0, r8, lsr #32
	...
200074b8:	00005028 	andeq	r5, r0, r8, lsr #32
	...
200074c8:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
200074d8:	03f050e8 	mvnseq	r5, #232	; 0xe8
	...
200074e8:	0c0c5fe8 	stceq	15, cr5, [ip], {232}	; 0xe8
	...
200074f8:	10025028 	andne	r5, r2, r8, lsr #32
	...
20007508:	13fa5028 	mvnsne	r5, #40	; 0x28
	...
20007518:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
20007528:	100a50e8 	andne	r5, sl, r8, ror #1
	...
20007538:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
20007548:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20007558:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20007568:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
20007578:	100a50e8 	andne	r5, sl, r8, ror #1
	...
20007588:	100a5ee8 	andne	r5, sl, r8, ror #29
	...
20007598:	100a5028 	andne	r5, sl, r8, lsr #32
	...
200075a8:	100a5028 	andne	r5, sl, r8, lsr #32
	...
200075b8:	10025fe8 	andne	r5, r2, r8, ror #31
	...
200075c8:	0ffc50e8 	svceq	0x00fc50e8
	...
200075d8:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
200075e8:	00005028 	andeq	r5, r0, r8, lsr #32
	...
200075f8:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20007608:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20007618:	000050e8 	andeq	r5, r0, r8, ror #1
	...
20007628:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20007638:	00007028 	andeq	r7, r0, r8, lsr #32
	...
20007648:	00007028 	andeq	r7, r0, r8, lsr #32
	...
20007658:	00007038 	andeq	r7, r0, r8, lsr r0
2000765c:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
20007660:	7fbfdfef 	svcvc	0x00bfdfef
20007664:	fbfdfeff 	blx	1ff8726a <startup-0x78d96>
20007668:	bfbfeff7 	svclt	0x00bfeff7
2000766c:	0c060301 	stceq	3, cr0, [r6], {1}
20007670:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20007674:	06030180 	streq	r0, [r3], -r0, lsl #3
20007678:	6030180c 	eorsvs	r1, r0, ip, lsl #16
2000767c:	0c060301 	stceq	3, cr0, [r6], {1}
20007680:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20007684:	06030180 	streq	r0, [r3], -r0, lsl #3
20007688:	6030180c 	eorsvs	r1, r0, ip, lsl #16
2000768c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007690:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007694:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007698:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000769c:	c0603018 	rsbgt	r3, r0, r8, lsl r0
200076a0:	06030180 	streq	r0, [r3], -r0, lsl #3
200076a4:	6030180c 	eorsvs	r1, r0, ip, lsl #16
200076a8:	030180c0 	movweq	r8, #4288	; 0x10c0
200076ac:	c0603018 	rsbgt	r3, r0, r8, lsl r0
200076b0:	06030180 	streq	r0, [r3], -r0, lsl #3
200076b4:	6030180c 	eorsvs	r1, r0, ip, lsl #16
200076b8:	030180c0 	movweq	r8, #4288	; 0x10c0
200076bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200076c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200076c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200076c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200076cc:	030180c0 	movweq	r8, #4288	; 0x10c0
200076d0:	30180c06 	andscc	r0, r8, r6, lsl #24
200076d4:	0180c060 	orreq	ip, r0, r0, rrx
200076d8:	180c0603 	stmdane	ip, {r0, r1, r9, sl}
200076dc:	030180c0 	movweq	r8, #4288	; 0x10c0
200076e0:	30180c06 	andscc	r0, r8, r6, lsl #24
200076e4:	0180c060 	orreq	ip, r0, r0, rrx
200076e8:	180c0603 	stmdane	ip, {r0, r1, r9, sl}

200076ec <indoors_gray_bits>:
	...
2000774c:	00001110 	andeq	r1, r0, r0, lsl r1
	...
2000775c:	00001090 	muleq	r0, r0, r0
	...
2000778c:	00000390 	muleq	r0, r0, r3
	...
2000779c:	00001340 	andeq	r1, r0, r0, asr #6
	...
200077ac:	00000830 	andeq	r0, r0, r0, lsr r8
	...
2000783c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
20007840:	80402010 	subhi	r2, r0, r0, lsl r0
20007844:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
20007848:	00008000 	andeq	r8, r0, r0
2000784c:	b0582c00 	subslt	r2, r8, r0, lsl #24
20007850:	0582c160 	streq	ip, [r2, #352]	; 0x160
20007854:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
20007858:	010b0000 	mrseq	r0, (UNDEF: 11)
2000785c:	71b8dc00 			; <UNDEFINED> instruction: 0x71b8dc00
20007860:	1b8dc6e3 	blne	1e3793f4 <startup-0x1c86c0c>
20007864:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
20007868:	01370001 	teqeq	r7, r1
	...
20007878:	01000000 	mrseq	r0, (UNDEF: 0)
2000787c:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20007880:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007884:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007888:	01ff8007 	mvnseq	r8, r7
	...
20007898:	00008000 	andeq	r8, r0, r0
	...
200078a8:	00008180 	andeq	r8, r0, r0, lsl #3
	...
200078b8:	00008180 	andeq	r8, r0, r0, lsl #3
	...
200078c8:	00008000 	andeq	r8, r0, r0
	...
200078d8:	00008000 	andeq	r8, r0, r0
	...
200078e8:	00008000 	andeq	r8, r0, r0
	...
200078f8:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20007908:	20008180 	andcs	r8, r0, r0, lsl #3
	...
20007918:	20808000 	addcs	r8, r0, r0
	...
20007928:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
20007938:	21e08000 	mvncs	r8, r0
	...
20007948:	2bf08180 	blcs	1fc27f50 <startup-0x3d80b0>
	...
20007958:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
20007968:	29e08000 	stmibcs	r0!, {pc}^
	...
20007978:	2bc08100 	blcs	1f027d80 <startup-0xfd8280>
	...
20007988:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
20007998:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
200079a8:	2bf08180 	blcs	1fc27fb0 <startup-0x3d8050>
	...
200079b8:	28008000 	stmdacs	r0, {pc}
	...
200079c8:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
200079d8:	1fc0a000 	svcne	0x00c0a000
	...
200079e8:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
200079f8:	00008190 	muleq	r0, r0, r1
	...
20007a08:	00008010 	andeq	r8, r0, r0, lsl r0
	...
20007a18:	00008110 	andeq	r8, r0, r0, lsl r1
	...
20007a28:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
20007a38:	00008190 	muleq	r0, r0, r1
	...
20007a48:	00008190 	muleq	r0, r0, r1
	...
20007a58:	00008180 	andeq	r8, r0, r0, lsl #3
20007a5c:	08040201 	stmdaeq	r4, {r0, r9}
20007a60:	80402010 	subhi	r2, r0, r0, lsl r0
20007a64:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
20007a68:	40401008 	submi	r1, r0, r8
20007a6c:	b0582c16 	subslt	r2, r8, r6, lsl ip
20007a70:	0582c160 	streq	ip, [r2, #352]	; 0x160
20007a74:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
20007a78:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
20007a7c:	71b8dc6e 			; <UNDEFINED> instruction: 0x71b8dc6e
20007a80:	1b8dc6e3 	blne	1e379614 <startup-0x1c869ec>
20007a84:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
20007a88:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
	...
20007a9c:	0582c160 	streq	ip, [r2, #352]	; 0x160
20007aa0:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
20007aa4:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
20007aa8:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
20007aac:	1b8dc6e3 	blne	1e379640 <startup-0x1c869c0>
20007ab0:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
20007ab4:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
20007ab8:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
	...
20007acc:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
20007ad0:	c160b058 	qdsubgt	fp, r8, r0
20007ad4:	160b0582 	strne	r0, [fp], -r2, lsl #11
20007ad8:	60b0582c 	adcsvs	r5, r0, ip, lsr #16
20007adc:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
20007ae0:	c6e371b8 			; <UNDEFINED> instruction: 0xc6e371b8
20007ae4:	6e371b8d 	vaddvs.f64	d1, d23, d13
20007ae8:	e371b8dc 	cmn	r1, #220, 16	; 0xdc0000

20007aec <indoors_light_bits>:
	...
20007b2c:	00001010 	andeq	r1, r0, r0, lsl r0
	...
20007b5c:	00000300 	andeq	r0, r0, r0, lsl #6
	...
20007b6c:	00001110 	andeq	r1, r0, r0, lsl r1
	...
20007b7c:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007b8c:	00001000 	andeq	r1, r0, r0
	...
20007b9c:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
20007bac:	00001000 	andeq	r1, r0, r0
	...
20007c4c:	43a1d000 			; <UNDEFINED> instruction: 0x43a1d000
20007c50:	3a1d0e87 	bcc	2074b674 <firstTime.4040+0x742b84>
20007c54:	a1d0e874 	bicsge	lr, r0, r4, ror r8
20007c58:	00742013 	rsbseq	r2, r4, r3, lsl r0
20007c5c:	82412000 	subhi	r2, r1, #0
20007c60:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
20007c64:	41209048 			; <UNDEFINED> instruction: 0x41209048
20007c68:	00482012 	subeq	r2, r8, r2, lsl r0
	...
20007c78:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007c88:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
20007c98:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007ca8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007cb8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007cc8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007cd8:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
20007ce8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007cf8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007d08:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007d18:	03702010 	cmneq	r0, #16
	...
20007d28:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
20007d38:	02102010 	andseq	r2, r0, #16
	...
20007d48:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007d58:	02302010 	eorseq	r2, r0, #16
	...
20007d68:	02102010 	andseq	r2, r0, #16
	...
20007d78:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
20007d88:	03302000 	teqeq	r0, #0
	...
20007d98:	03100000 	tsteq	r0, #0
	...
20007da8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007db8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007dc8:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
20007dd8:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20007de8:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20007df8:	00002000 	andeq	r2, r0, r0
	...
20007e08:	00002000 	andeq	r2, r0, r0
	...
20007e18:	00002e00 	andeq	r2, r0, r0, lsl #28
	...
20007e6c:	43a1d0e8 			; <UNDEFINED> instruction: 0x43a1d0e8
20007e70:	3a1d0e87 	bcc	2074b894 <firstTime.4040+0x742da4>
20007e74:	a1d0e874 	bicsge	lr, r0, r4, ror r8
20007e78:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
20007e7c:	82412090 	subhi	r2, r1, #144	; 0x90
20007e80:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
20007e84:	41209048 			; <UNDEFINED> instruction: 0x41209048
20007e88:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
	...
20007e9c:	3a1d0e87 	bcc	2074b8c0 <firstTime.4040+0x742dd0>
20007ea0:	a1d0e874 	bicsge	lr, r0, r4, ror r8
20007ea4:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
20007ea8:	d0e8743a 	rscle	r7, r8, sl, lsr r4
20007eac:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
20007eb0:	41209048 			; <UNDEFINED> instruction: 0x41209048
20007eb4:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
20007eb8:	20904824 	addscs	r4, r0, r4, lsr #16
	...
20007ecc:	d0e8743a 	rscle	r7, r8, sl, lsr r4
20007ed0:	0e8743a1 	cdpeq	3, 8, cr4, cr7, cr1, {5}
20007ed4:	e8743a1d 	ldmda	r4!, {r0, r2, r3, r4, r9, fp, ip, sp}^
20007ed8:	8743a1d0 			; <UNDEFINED> instruction: 0x8743a1d0
20007edc:	20904824 	addscs	r4, r0, r4, lsr #16
20007ee0:	09048241 	stmdbeq	r4, {r0, r6, r9, pc}
20007ee4:	90482412 	subls	r2, r8, r2, lsl r4
20007ee8:	04824120 	streq	r4, [r2], #288	; 0x120

20007eec <firstTime.4040>:
20007eec:	00000001 	andeq	r0, r0, r1

20007ef0 <indoors2_black_bits>:
20007ef0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ef4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ef8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007efc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f50:	ffffeeef 			; <UNDEFINED> instruction: 0xffffeeef
20007f54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f60:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
20007f64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f70:	ffffeaaf 			; <UNDEFINED> instruction: 0xffffeaaf
20007f74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f80:	fffff29f 			; <UNDEFINED> instruction: 0xfffff29f
20007f84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f90:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
20007f94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fa0:	ffffe00f 			; <UNDEFINED> instruction: 0xffffe00f
20007fa4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fa8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fb0:	ffffe7cf 			; <UNDEFINED> instruction: 0xffffe7cf
20007fb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fd8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fe0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fe4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fe8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008004:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008008:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000800c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008010:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008014:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008018:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000801c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008020:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008024:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008028:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000802c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008030:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008034:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008038:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000803c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008040:	f7fbffff 			; <UNDEFINED> instruction: 0xf7fbffff
20008044:	7fbfdfef 	svcvc	0x00bfdfef
20008048:	fbfdfeff 	blx	1ff87c4e <startup-0x783b2>
2000804c:	ffff7fff 			; <UNDEFINED> instruction: 0xffff7fff
20008050:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008054:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008058:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000805c:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
20008060:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008064:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008068:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000806c:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
20008070:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008074:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008078:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000807c:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
20008080:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000808c:	fe0050e8 	cdp2	0, 0, cr5, cr0, cr8, {7}
20008090:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008094:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008098:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000809c:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
200080a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080ac:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
200080b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080bc:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
200080c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080cc:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
200080d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080dc:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
200080e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080ec:	ec0d5fef 	stc	15, cr5, [sp], {239}	; 0xef
200080f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080fc:	f003502f 			; <UNDEFINED> instruction: 0xf003502f
20008100:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008104:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000810c:	d3fb502f 	mvnsle	r5, #47	; 0x2f
20008110:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008114:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008118:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000811c:	d00b5fef 	andle	r5, fp, pc, ror #31
20008120:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008124:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008128:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000812c:	d00b50ef 	andle	r5, fp, pc, ror #1
20008130:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008134:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008138:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000813c:	d00b5fef 	andle	r5, fp, pc, ror #31
20008140:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008144:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008148:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000814c:	d00b502f 	andle	r5, fp, pc, lsr #32
20008150:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008154:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008158:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000815c:	d00b502f 	andle	r5, fp, pc, lsr #32
20008160:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008164:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008168:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000816c:	d00b5fef 	andle	r5, fp, pc, ror #31
20008170:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008174:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008178:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000817c:	d00b50ef 	andle	r5, fp, pc, ror #1
20008180:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008184:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008188:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000818c:	d00b5eef 	andle	r5, fp, pc, ror #29
20008190:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008194:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008198:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000819c:	d00b502f 	andle	r5, fp, pc, lsr #32
200081a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081ac:	d00b502f 	andle	r5, fp, pc, lsr #32
200081b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081bc:	d0035fef 	andle	r5, r3, pc, ror #31
200081c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081cc:	cffd50ef 	svcgt	0x00fd50ef
200081d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081dc:	e03f5fef 	eors	r5, pc, pc, ror #31
200081e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081ec:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
200081f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081fc:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20008200:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008204:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008208:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000820c:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20008210:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008214:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008218:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000821c:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
20008220:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008224:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008228:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000822c:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20008230:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008234:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008238:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000823c:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
20008240:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008244:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008248:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000824c:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
20008250:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008254:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008258:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000825c:	ffff7e7f 			; <UNDEFINED> instruction: 0xffff7e7f
20008260:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
20008264:	7fbfdfef 	svcvc	0x00bfdfef
20008268:	fbfdfeff 	blx	1ff87e6e <startup-0x78192>
2000826c:	bfbfeff7 	svclt	0x00bfeff7
20008270:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008274:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008278:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000827c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008280:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008284:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008288:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000828c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008290:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008294:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008298:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000829c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

200082f0 <indoors2_gray_bits>:
	...
20008350:	00001110 	andeq	r1, r0, r0, lsl r1
	...
20008360:	00001090 	muleq	r0, r0, r0
	...
20008390:	00000390 	muleq	r0, r0, r3
	...
200083a0:	00001340 	andeq	r1, r0, r0, asr #6
	...
200083b0:	00000830 	andeq	r0, r0, r0, lsr r8
	...
20008440:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
20008444:	80402010 	subhi	r2, r0, r0, lsl r0
20008448:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
2000844c:	00008000 	andeq	r8, r0, r0
	...
2000845c:	01000000 	mrseq	r0, (UNDEF: 0)
	...
2000846c:	01000000 	mrseq	r0, (UNDEF: 0)
	...
2000847c:	01000000 	mrseq	r0, (UNDEF: 0)
20008480:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20008484:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008488:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000848c:	01ff8007 	mvnseq	r8, r7
	...
2000849c:	00008000 	andeq	r8, r0, r0
	...
200084ac:	00008180 	andeq	r8, r0, r0, lsl #3
	...
200084bc:	00008180 	andeq	r8, r0, r0, lsl #3
	...
200084cc:	00008000 	andeq	r8, r0, r0
	...
200084dc:	00008000 	andeq	r8, r0, r0
	...
200084ec:	00008000 	andeq	r8, r0, r0
	...
200084fc:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000850c:	20008180 	andcs	r8, r0, r0, lsl #3
	...
2000851c:	20808000 	addcs	r8, r0, r0
	...
2000852c:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
2000853c:	21e08000 	mvncs	r8, r0
	...
2000854c:	2bf08180 	blcs	1fc28b54 <startup-0x3d74ac>
	...
2000855c:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
2000856c:	29e08000 	stmibcs	r0!, {pc}^
	...
2000857c:	2bc08100 	blcs	1f028984 <startup-0xfd767c>
	...
2000858c:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
2000859c:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
200085ac:	2bf08180 	blcs	1fc28bb4 <startup-0x3d744c>
	...
200085bc:	28008000 	stmdacs	r0, {pc}
	...
200085cc:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
200085dc:	1fc0a000 	svcne	0x00c0a000
	...
200085ec:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
200085fc:	00008190 	muleq	r0, r0, r1
	...
2000860c:	00008010 	andeq	r8, r0, r0, lsl r0
	...
2000861c:	00008110 	andeq	r8, r0, r0, lsl r1
	...
2000862c:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
2000863c:	00008190 	muleq	r0, r0, r1
	...
2000864c:	00008190 	muleq	r0, r0, r1
	...
2000865c:	00008180 	andeq	r8, r0, r0, lsl #3
20008660:	08040201 	stmdaeq	r4, {r0, r9}
20008664:	80402010 	subhi	r2, r0, r0, lsl r0
20008668:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
2000866c:	40401008 	submi	r1, r0, r8
	...

200086f0 <indoors2_light_bits>:
	...
20008760:	00000300 	andeq	r0, r0, r0, lsl #6
	...
20008770:	00001110 	andeq	r1, r0, r0, lsl r1
	...
20008780:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20008790:	00001000 	andeq	r1, r0, r0
	...
200087a0:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
200087b0:	00001000 	andeq	r1, r0, r0
	...
2000885c:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000886c:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000887c:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000888c:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
2000889c:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200088ac:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200088bc:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200088cc:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200088dc:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
200088ec:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200088fc:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000890c:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000891c:	03702010 	cmneq	r0, #16
	...
2000892c:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
2000893c:	02102010 	andseq	r2, r0, #16
	...
2000894c:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000895c:	02302010 	eorseq	r2, r0, #16
	...
2000896c:	02102010 	andseq	r2, r0, #16
	...
2000897c:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
2000898c:	03302000 	teqeq	r0, #0
	...
2000899c:	03100000 	tsteq	r0, #0
	...
200089ac:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200089bc:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200089cc:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
200089dc:	00000010 	andeq	r0, r0, r0, lsl r0
	...
200089ec:	00000010 	andeq	r0, r0, r0, lsl r0
	...
200089fc:	00002000 	andeq	r2, r0, r0
	...
20008a0c:	00002000 	andeq	r2, r0, r0
	...
20008a1c:	00002e00 	andeq	r2, r0, r0, lsl #28
	...

20008af0 <firstTime.4040>:
20008af0:	00000001 	andeq	r0, r0, r1
20008af4:	00202020 	eoreq	r2, r0, r0, lsr #32
20008af8:	41524b2a 	cmpmi	r2, sl, lsr #22
20008afc:	2a202a21 	bcs	20813388 <firstTime.4040+0x80a898>
20008b00:	2141524b 	cmpcs	r1, fp, asr #4
20008b04:	0000002a 	andeq	r0, r0, sl, lsr #32
20008b08:	734c4944 	movtvc	r4, #51524	; 0xc944
20008b0c:	7469772d 	strbtvc	r7, [r9], #-1837	; 0xfffff8d3
20008b10:	73656863 	cmnvc	r5, #6488064	; 0x630000
20008b14:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
20008b18:	00000065 	andeq	r0, r0, r5, rrx
20008b1c:	20726f46 	rsbscs	r6, r2, r6, asr #30
20008b20:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
20008b24:	65697275 	strbvs	r7, [r9, #-629]!	; 0xfffffd8b
20008b28:	68742073 	ldmdavs	r4!, {r0, r1, r4, r5, r6, sp}^
20008b2c:	00000065 	andeq	r0, r0, r5, rrx
20008b30:	20202020 	eorcs	r2, r0, r0, lsr #32
20008b34:	00000000 	andeq	r0, r0, r0
20008b38:	6c696f63 	stclvs	15, cr6, [r9], #-396	; 0xfffffe74
20008b3c:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
20008b40:	6566206e 	strbvs	r2, [r6, #-110]!	; 0xffffff92
20008b44:	002c7261 	eoreq	r7, ip, r1, ror #4
20008b48:	74616874 	strbtvc	r6, [r1], #-2164	; 0xfffff78c
20008b4c:	44206120 	strtmi	r6, [r0], #-288	; 0xfffffee0
20008b50:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
20008b54:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
20008b58:	00000068 	andeq	r0, r0, r8, rrx
20008b5c:	6e656877 	mcrvs	8, 3, r6, cr5, cr7, {3}
20008b60:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
20008b64:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
20008b68:	65682079 	strbvs	r2, [r8, #-121]!	; 0xffffff87
20008b6c:	00007261 	andeq	r7, r0, r1, ror #4
20008b70:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
20008b74:	2e726165 	rpwcssz	f6, f2, f5
20008b78:	00000000 	andeq	r0, r0, r0
20008b7c:	70727573 	rsbsvc	r7, r2, r3, ror r5
20008b80:	69736972 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, fp, sp, lr}^
20008b84:	202c676e 	eorcs	r6, ip, lr, ror #14
20008b88:	646e6966 	strbtvs	r6, [lr], #-2406	; 0xfffff69a
20008b8c:	00676e69 	rsbeq	r6, r7, r9, ror #28
20008b90:	69206f53 	stmdbvs	r0!, {r0, r1, r4, r6, r8, r9, sl, fp, sp, lr}
20008b94:	73692074 	cmnvc	r9, #116	; 0x74
20008b98:	69757120 	ldmdbvs	r5!, {r5, r8, ip, sp, lr}^
20008b9c:	00006574 	andeq	r6, r0, r4, ror r5
20008ba0:	20756f79 	rsbscs	r6, r5, r9, ror pc
20008ba4:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
20008ba8:	0000002c 	andeq	r0, r0, ip, lsr #32
20008bac:	72696568 	rsbvc	r6, r9, #104, 10	; 0x1a000000
20008bb0:	206f7420 	rsbcs	r7, pc, r0, lsr #8
20008bb4:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
20008bb8:	61654c20 	cmnvs	r5, r0, lsr #24
20008bbc:	00002e72 	andeq	r2, r0, r2, ror lr
20008bc0:	65657571 	strbvs	r7, [r5, #-1393]!	; 0xfffffa8f
20008bc4:	6144206e 	cmpvs	r4, lr, rrx
20008bc8:	206f6666 	rsbcs	r6, pc, r6, ror #12
20008bcc:	4420666f 	strtmi	r6, [r0], #-1647	; 0xfffff991
20008bd0:	2c734c49 	ldclcs	12, cr4, [r3], #-292	; 0xfffffedc
20008bd4:	00000000 	andeq	r0, r0, r0
20008bd8:	706d6574 	rsbvc	r6, sp, r4, ror r5
20008bdc:	2c646574 	cfstr64cs	mvdx6, [r4], #-464	; 0xfffffe30
20008be0:	206f7420 	rsbcs	r7, pc, r0, lsr #8
20008be4:	746f6f6c 	strbtvc	r6, [pc], #-3948	; 20008bec <firstTime.4040+0xfc>
20008be8:	00000000 	andeq	r0, r0, r0
20008bec:	20747542 	rsbscs	r7, r4, r2, asr #10
20008bf0:	6279616d 	rsbsvs	r6, r9, #1073741851	; 0x4000001b
20008bf4:	6f792065 	svcvs	0x00792065
20008bf8:	65722775 	ldrbvs	r2, [r2, #-1909]!	; 0xfffff88b
20008bfc:	00000000 	andeq	r0, r0, r0
20008c00:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 20008a70 <indoors2_light_bits+0x380>
20008c04:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
20008c08:	63697220 	cmnvs	r9, #32, 4
20008c0c:	2c736568 	cfldr64cs	mvdx6, [r3], #-416	; 0xfffffe60
20008c10:	00000000 	andeq	r0, r0, r0
20008c14:	6b636977 	blvs	218e31f8 <firstTime.4040+0x18da708>
20008c18:	44206465 	strtmi	r6, [r0], #-1125	; 0xfffffb9b
20008c1c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
20008c20:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
20008c24:	2e736568 	cdpcs	5, 7, cr6, cr3, cr8, {3}
20008c28:	00000000 	andeq	r0, r0, r0
20008c2c:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
20008c30:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
20008c34:	00000000 	andeq	r0, r0, r0
20008c38:	67206f73 			; <UNDEFINED> instruction: 0x67206f73
20008c3c:	70706972 	rsbsvc	r6, r0, r2, ror r9
20008c40:	20796c69 	rsbscs	r6, r9, r9, ror #24
20008c44:	61657274 	smcvs	22308	; 0x5724
20008c48:	0000002d 	andeq	r0, r0, sp, lsr #32
20008c4c:	6572202d 	ldrbvs	r2, [r2, #-45]!	; 0xffffffd3
20008c50:	20746573 	rsbscs	r6, r4, r3, ror r5
20008c54:	20656874 	rsbcs	r6, r5, r4, ror r8
20008c58:	74697773 	strbtvc	r7, [r9], #-1907	; 0xfffff88d
20008c5c:	00216863 	eoreq	r6, r1, r3, ror #16
20008c60:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
20008c64:	62202c72 	eorvs	r2, r0, #29184	; 0x7200
20008c68:	65766172 	ldrbvs	r6, [r6, #-370]!	; 0xfffffe8e
20008c6c:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
20008c70:	002c6863 	eoreq	r6, ip, r3, ror #16
20008c74:	20001ee0 	andcs	r1, r0, r0, ror #29
20008c78:	20001eea 	andcs	r1, r0, sl, ror #29
20008c7c:	20001ef4 	strdcs	r1, [r0], -r4
20008c80:	20001efe 	strdcs	r1, [r0], -lr
20008c84:	20001f08 	andcs	r1, r0, r8, lsl #30
20008c88:	20001f12 	andcs	r1, r0, r2, lsl pc
20008c8c:	20001f1c 	andcs	r1, r0, ip, lsl pc
20008c90:	20001f26 	andcs	r1, r0, r6, lsr #30
20008c94:	20202020 	eorcs	r2, r0, r0, lsr #32
20008c98:	20202020 	eorcs	r2, r0, r0, lsr #32
20008c9c:	20202020 	eorcs	r2, r0, r0, lsr #32
20008ca0:	20202020 	eorcs	r2, r0, r0, lsr #32
20008ca4:	20202020 	eorcs	r2, r0, r0, lsr #32
20008ca8:	00000000 	andeq	r0, r0, r0
20008cac:	61666c41 	cmnvs	r6, r1, asr #24
20008cb0:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
20008cb4:	6b736972 	blvs	21ce3284 <firstTime.4040+0x1cda794>
20008cb8:	00000000 	andeq	r0, r0, r0
20008cbc:	64726168 	ldrbtvs	r6, [r2], #-360	; 0xfffffe98
20008cc0:	a4c3a5c3 	strbge	sl, [r3], #1475	; 0x5c3
20008cc4:	7261b6c3 	rsbvc	fp, r1, #204472320	; 0xc300000
20008cc8:	75732065 	ldrbvc	r2, [r3, #-101]!	; 0xffffff9b
20008ccc:	00726567 	rsbseq	r6, r2, r7, ror #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000008dc 	ldrdeq	r0, [r0], -ip
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000077 	andeq	r0, r0, r7, ror r0
      10:	00048a0c 	andeq	r8, r4, ip, lsl #20
	...
      20:	020c0200 	andeq	r0, ip, #0, 4
      24:	00004e05 	andeq	r4, r0, r5, lsl #28
      28:	02fc0300 	rscseq	r0, ip, #0, 6
      2c:	07020000 	streq	r0, [r2, -r0]
      30:	0000004e 	andeq	r0, r0, lr, asr #32
      34:	06300300 	ldrteq	r0, [r0], -r0, lsl #6
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	103a0304 	eorsne	r0, sl, r4, lsl #6
      44:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
      48:	00000055 	andeq	r0, r0, r5, asr r0
      4c:	04040008 	streq	r0, [r4], #-8
      50:	00032007 	andeq	r2, r3, r7
      54:	5b040500 	blpl	10145c <startup-0x1fefeba4>
      58:	04000000 	streq	r0, [r0], #-0
      5c:	04370801 	ldrteq	r0, [r7], #-2049	; 0xfffff7ff
      60:	8c060000 	stchi	0, cr0, [r6], {-0}
      64:	02000011 	andeq	r0, r0, #17
      68:	0000210a 	andeq	r2, r0, sl, lsl #2
      6c:	00160700 	andseq	r0, r6, r0, lsl #14
      70:	030c0000 	movweq	r0, #49152	; 0xc000
      74:	00009e06 	andeq	r9, r0, r6, lsl #28
      78:	050d0300 	streq	r0, [sp, #-768]	; 0xfffffd00
      7c:	07030000 	streq	r0, [r3, -r0]
      80:	0000009e 	muleq	r0, lr, r0
      84:	001d0300 	andseq	r0, sp, r0, lsl #6
      88:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      8c:	0000009e 	muleq	r0, lr, r0
      90:	00120304 	andseq	r0, r2, r4, lsl #6
      94:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
      98:	0000009e 	muleq	r0, lr, r0
      9c:	04050008 	streq	r0, [r5], #-8
      a0:	00000062 	andeq	r0, r0, r2, rrx
      a4:	000c5f06 	andeq	r5, ip, r6, lsl #30
      a8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
      ac:	07000000 	streq	r0, [r0, -r0]
      b0:	00000605 	andeq	r0, r0, r5, lsl #12
      b4:	28060424 	stmdacs	r6, {r2, r5, sl}
      b8:	03000001 	movweq	r0, #1
      bc:	000003d4 	ldrdeq	r0, [r0], -r4
      c0:	01280704 			; <UNDEFINED> instruction: 0x01280704
      c4:	03000000 	movweq	r0, #0
      c8:	00000611 	andeq	r0, r0, r1, lsl r6
      cc:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
      d0:	03040000 	movweq	r0, #16384	; 0x4000
      d4:	00000578 	andeq	r0, r0, r8, ror r5
      d8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
      dc:	03080000 	movweq	r0, #32768	; 0x8000
      e0:	000005a4 	andeq	r0, r0, r4, lsr #11
      e4:	01460c04 	cmpeq	r6, r4, lsl #24
      e8:	030c0000 	movweq	r0, #49152	; 0xc000
      ec:	000002f5 	strdeq	r0, [r0], -r5
      f0:	01460d04 	cmpeq	r6, r4, lsl #26
      f4:	03100000 	tsteq	r0, #0
      f8:	000003e6 	andeq	r0, r0, r6, ror #7
      fc:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     100:	03140000 	tsteq	r4, #0
     104:	00000048 	andeq	r0, r0, r8, asr #32
     108:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     10c:	03180000 	tsteq	r8, #0
     110:	00000365 	andeq	r0, r0, r5, ror #6
     114:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     118:	031c0000 	tsteq	ip, #0
     11c:	00000375 	andeq	r0, r0, r5, ror r3
     120:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     124:	00200000 	eoreq	r0, r0, r0
     128:	00a40405 	adceq	r0, r4, r5, lsl #8
     12c:	04080000 	streq	r0, [r8], #-0
     130:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     134:	01400900 	cmpeq	r0, r0, lsl #18
     138:	400a0000 	andmi	r0, sl, r0
     13c:	00000001 	andeq	r0, r0, r1
     140:	00af0405 	adceq	r0, pc, r5, lsl #8
     144:	04050000 	streq	r0, [r5], #-0
     148:	00000135 	andeq	r0, r0, r5, lsr r1
     14c:	00060606 	andeq	r0, r6, r6, lsl #12
     150:	af150400 	svcge	0x00150400
     154:	0b000000 	bleq	15c <startup-0x1ffffea4>
     158:	00000162 	andeq	r0, r0, r2, ror #2
     15c:	00000162 	andeq	r0, r0, r2, ror #2
     160:	0405000c 	streq	r0, [r5], #-12
     164:	0000014c 	andeq	r0, r0, ip, asr #2
     168:	0004ba0d 	andeq	fp, r4, sp, lsl #20
     16c:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
     170:	0d000001 	stceq	0, cr0, [r0, #-4]
     174:	000003ab 	andeq	r0, r0, fp, lsr #7
     178:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
     17c:	cf060000 	svcgt	0x00060000
     180:	05000005 	streq	r0, [r0, #-5]
     184:	00005b24 	andeq	r5, r0, r4, lsr #22
     188:	017e0b00 	cmneq	lr, r0, lsl #22
     18c:	019a0000 	orrseq	r0, sl, r0
     190:	9a0e0000 	bls	380198 <startup-0x1fc7fe68>
     194:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     198:	04040003 	streq	r0, [r4], #-3
     19c:	00039207 	andeq	r9, r3, r7, lsl #4
     1a0:	0f700d00 	svceq	0x00700d00
     1a4:	2b050000 	blcs	1401ac <startup-0x1febfe54>
     1a8:	00000189 	andeq	r0, r0, r9, lsl #3
     1ac:	0002180d 	andeq	r1, r2, sp, lsl #16
     1b0:	892c0500 	stmdbhi	ip!, {r8, sl}
     1b4:	0d000001 	stceq	0, cr0, [r0, #-4]
     1b8:	00000445 	andeq	r0, r0, r5, asr #8
     1bc:	01892d05 	orreq	r2, r9, r5, lsl #26
     1c0:	020d0000 	andeq	r0, sp, #0
     1c4:	05000003 	streq	r0, [r0, #-3]
     1c8:	0001892e 	andeq	r8, r1, lr, lsr #18
     1cc:	02920d00 	addseq	r0, r2, #0, 26
     1d0:	2f050000 	svccs	0x00050000
     1d4:	00000189 	andeq	r0, r0, r9, lsl #3
     1d8:	0005e70d 	andeq	lr, r5, sp, lsl #14
     1dc:	89300500 	ldmdbhi	r0!, {r8, sl}
     1e0:	0d000001 	stceq	0, cr0, [r0, #-4]
     1e4:	000005d7 	ldrdeq	r0, [r0], -r7
     1e8:	01893105 	orreq	r3, r9, r5, lsl #2
     1ec:	5b0b0000 	blpl	2c01f4 <startup-0x1fd3fe0c>
     1f0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     1f4:	0f000001 	svceq	0x00000001
     1f8:	0000019a 	muleq	r0, sl, r1
     1fc:	63100077 	tstvs	r0, #119	; 0x77
     200:	06000002 	streq	r0, [r0], -r2
     204:	0001ee03 	andeq	lr, r1, r3, lsl #28
     208:	48030500 	stmdami	r3, {r8, sl}
     20c:	11200053 	qsubne	r0, r3, r0
     210:	0000045c 	andeq	r0, r0, ip, asr r4
     214:	01ee0307 	mvneq	r0, r7, lsl #6
     218:	03050000 	movweq	r0, #20480	; 0x5000
     21c:	200053c0 	andcs	r5, r0, r0, asr #7
     220:	00051811 	andeq	r1, r5, r1, lsl r8
     224:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     228:	05000001 	streq	r0, [r0, #-1]
     22c:	00543803 	subseq	r3, r4, r3, lsl #16
     230:	005b0b20 	subseq	r0, fp, r0, lsr #22
     234:	02420000 	subeq	r0, r2, #0
     238:	9a0e0000 	bls	380240 <startup-0x1fc7fdc0>
     23c:	17000001 	strne	r0, [r0, -r1]
     240:	3c110001 	ldccc	0, cr0, [r1], {1}
     244:	09000001 	stmdbeq	r0, {r0}
     248:	00023103 	andeq	r3, r2, r3, lsl #2
     24c:	b0030500 	andlt	r0, r3, r0, lsl #10
     250:	11200054 	qsubne	r0, r4, r0
     254:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
     258:	0231030a 	eorseq	r0, r1, #671088640	; 0x28000000
     25c:	03050000 	movweq	r0, #20480	; 0x5000
     260:	200055c8 	andcs	r5, r0, r8, asr #11
     264:	00035511 	andeq	r5, r3, r1, lsl r5
     268:	31030b00 	tstcc	r3, r0, lsl #22
     26c:	05000002 	streq	r0, [r0, #-2]
     270:	0056e003 	subseq	lr, r6, r3
     274:	005b0b20 	subseq	r0, fp, r0, lsr #22
     278:	02860000 	addeq	r0, r6, #0
     27c:	9a0e0000 	bls	380284 <startup-0x1fc7fd7c>
     280:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     284:	6f110003 	svcvs	0x00110003
     288:	0c000004 	stceq	0, cr0, [r0], {4}
     28c:	00027503 	andeq	r7, r2, r3, lsl #10
     290:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
     294:	11200057 	qsubne	r0, r7, r0
     298:	00000027 	andeq	r0, r0, r7, lsr #32
     29c:	0275030d 	rsbseq	r0, r5, #872415232	; 0x34000000
     2a0:	03050000 	movweq	r0, #20480	; 0x5000
     2a4:	20005bf8 	strdcs	r5, [r0], -r8
     2a8:	00000011 	andeq	r0, r0, r1, lsl r0
     2ac:	75030e00 	strvc	r0, [r3, #-3584]	; 0xfffff200
     2b0:	05000002 	streq	r0, [r0, #-2]
     2b4:	005ff803 	subseq	pc, pc, r3, lsl #16
     2b8:	005b0b20 	subseq	r0, fp, r0, lsr #22
     2bc:	02c90000 	sbceq	r0, r9, #0
     2c0:	9a0f0000 	bls	3c02c8 <startup-0x1fc3fd38>
     2c4:	d1000001 	tstle	r0, r1
     2c8:	018e1100 	orreq	r1, lr, r0, lsl #2
     2cc:	030f0000 	movweq	r0, #61440	; 0xf000
     2d0:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     2d4:	63f80305 	mvnsvs	r0, #335544320	; 0x14000000
     2d8:	9b112000 	blls	4482e0 <startup-0x1fbb7d20>
     2dc:	10000003 	andne	r0, r0, r3
     2e0:	0002b903 	andeq	fp, r2, r3, lsl #18
     2e4:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
     2e8:	11200064 			; <UNDEFINED> instruction: 0x11200064
     2ec:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     2f0:	02b90311 	adcseq	r0, r9, #1140850688	; 0x44000000
     2f4:	03050000 	movweq	r0, #20480	; 0x5000
     2f8:	200065a0 	andcs	r6, r0, r0, lsr #11
     2fc:	0005c507 	andeq	ip, r5, r7, lsl #10
     300:	04121400 	ldreq	r1, [r2], #-1024	; 0xfffffc00
     304:	00000345 	andeq	r0, r0, r5, asr #6
     308:	0013ff03 	andseq	pc, r3, r3, lsl #30
     30c:	45051200 	strmi	r1, [r5, #-512]	; 0xfffffe00
     310:	00000003 	andeq	r0, r0, r3
     314:	00025603 	andeq	r5, r2, r3, lsl #12
     318:	45061200 	strmi	r1, [r6, #-512]	; 0xfffffe00
     31c:	04000003 	streq	r0, [r0], #-3
     320:	00037f03 	andeq	r7, r3, r3, lsl #30
     324:	2e081200 	cdpcs	2, 0, cr1, cr8, cr0, {0}
     328:	08000001 	stmdaeq	r0, {r0}
     32c:	00036f03 	andeq	r6, r3, r3, lsl #30
     330:	2e091200 	cdpcs	2, 0, cr1, cr9, cr0, {0}
     334:	0c000001 	stceq	0, cr0, [r0], {1}
     338:	00025b03 	andeq	r5, r2, r3, lsl #22
     33c:	680c1200 	stmdavs	ip, {r9, ip}
     340:	10000003 	andne	r0, r0, r3
     344:	4b040500 	blmi	10174c <startup-0x1fefe8b4>
     348:	04000003 	streq	r0, [r0], #-3
     34c:	04400801 	strbeq	r0, [r0], #-2049	; 0xfffff7ff
     350:	62090000 	andvs	r0, r9, #0
     354:	0a000003 	beq	368 <startup-0x1ffffc98>
     358:	00000362 	andeq	r0, r0, r2, ror #6
     35c:	00012e0a 	andeq	r2, r1, sl, lsl #28
     360:	04050000 	streq	r0, [r5], #-0
     364:	000002fc 	strdeq	r0, [r0], -ip
     368:	03520405 	cmpeq	r2, #83886080	; 0x5000000
     36c:	c6060000 	strgt	r0, [r6], -r0
     370:	12000005 	andne	r0, r0, #5
     374:	0002fc0d 	andeq	pc, r2, sp, lsl #24
     378:	05051100 	streq	r1, [r5, #-256]	; 0xffffff00
     37c:	03130000 	tsteq	r3, #0
     380:	00000275 	andeq	r0, r0, r5, ror r2
     384:	66740305 	ldrbtvs	r0, [r4], -r5, lsl #6
     388:	02042000 	andeq	r2, r4, #0
     38c:	00031a07 	andeq	r1, r3, r7, lsl #20
     390:	05421000 	strbeq	r1, [r2, #-0]
     394:	24010000 	strcs	r0, [r1], #-0
     398:	0000012e 	andeq	r0, r0, lr, lsr #2
     39c:	30c00305 	sbccc	r0, r0, r5, lsl #6
     3a0:	0f102000 	svceq	0x00102000
     3a4:	01000001 	tsteq	r0, r1
     3a8:	00009e3c 	andeq	r9, r0, ip, lsr lr
     3ac:	08030500 	stmdaeq	r3, {r8, sl}
     3b0:	10200030 	eorne	r0, r0, r0, lsr r0
     3b4:	00000181 	andeq	r0, r0, r1, lsl #3
     3b8:	009e3d01 	addseq	r3, lr, r1, lsl #26
     3bc:	03050000 	movweq	r0, #20480	; 0x5000
     3c0:	200030b4 	strhcs	r3, [r0], -r4
     3c4:	0004d110 	andeq	sp, r4, r0, lsl r1
     3c8:	9e3e0100 	rsflse	f0, f6, f0
     3cc:	05000000 	streq	r0, [r0, #-0]
     3d0:	0030c803 	eorseq	ip, r0, r3, lsl #16
     3d4:	67621220 	strbvs	r1, [r2, -r0, lsr #4]!
     3d8:	9e3f0100 	rsflse	f0, f7, f0
     3dc:	05000000 	streq	r0, [r0, #-0]
     3e0:	00305003 	eorseq	r5, r0, r3
     3e4:	06161020 	ldreq	r1, [r6], -r0, lsr #32
     3e8:	42010000 	andmi	r0, r1, #0
     3ec:	0000009e 	muleq	r0, lr, r0
     3f0:	30300305 	eorscc	r0, r0, r5, lsl #6
     3f4:	c6102000 	ldrgt	r2, [r0], -r0
     3f8:	01000004 	tsteq	r0, r4
     3fc:	00009e43 	andeq	r9, r0, r3, asr #28
     400:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
     404:	10200030 	eorne	r0, r0, r0, lsr r0
     408:	00000051 	andeq	r0, r0, r1, asr r0
     40c:	009e4401 	addseq	r4, lr, r1, lsl #8
     410:	03050000 	movweq	r0, #20480	; 0x5000
     414:	2000306c 	andcs	r3, r0, ip, rrx
     418:	00034a10 	andeq	r4, r3, r0, lsl sl
     41c:	9e450100 	dvflss	f0, f5, f0
     420:	05000000 	streq	r0, [r0, #-0]
     424:	0030d803 	eorseq	sp, r0, r3, lsl #16
     428:	04dd1020 	ldrbeq	r1, [sp], #32
     42c:	46010000 	strmi	r0, [r1], -r0
     430:	0000009e 	muleq	r0, lr, r0
     434:	30a40305 	adccc	r0, r4, r5, lsl #6
     438:	f4102000 			; <UNDEFINED> instruction: 0xf4102000
     43c:	01000003 	tsteq	r0, r3
     440:	00009e47 	andeq	r9, r0, r7, asr #28
     444:	b8030500 	stmdalt	r3, {r8, sl}
     448:	10200030 	eorne	r0, r0, r0, lsr r0
     44c:	00000560 	andeq	r0, r0, r0, ror #10
     450:	009e4801 	addseq	r4, lr, r1, lsl #16
     454:	03050000 	movweq	r0, #20480	; 0x5000
     458:	200030c4 	andcs	r3, r0, r4, asr #1
     45c:	0001b510 	andeq	fp, r1, r0, lsl r5
     460:	9e490100 	dvflse	f0, f1, f0
     464:	05000000 	streq	r0, [r0, #-0]
     468:	00308803 	eorseq	r8, r0, r3, lsl #16
     46c:	063c1020 	ldrteq	r1, [ip], -r0, lsr #32
     470:	4a010000 	bmi	40478 <startup-0x1ffbfb88>
     474:	0000009e 	muleq	r0, lr, r0
     478:	30400305 	subcc	r0, r0, r5, lsl #6
     47c:	3e102000 	cdpcc	0, 1, cr2, cr0, cr0, {0}
     480:	01000003 	tsteq	r0, r3
     484:	0000624c 	andeq	r6, r0, ip, asr #4
     488:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
     48c:	10200030 	eorne	r0, r0, r0, lsr r0
     490:	00000201 	andeq	r0, r0, r1, lsl #4
     494:	00624d01 	rsbeq	r4, r2, r1, lsl #26
     498:	03050000 	movweq	r0, #20480	; 0x5000
     49c:	2000308c 	andcs	r3, r0, ip, lsl #1
     4a0:	00019f10 	andeq	r9, r1, r0, lsl pc
     4a4:	624e0100 	subvs	r0, lr, #0, 2
     4a8:	05000000 	streq	r0, [r0, #-0]
     4ac:	00305403 	eorseq	r5, r0, r3, lsl #8
     4b0:	01e31020 	mvneq	r1, r0, lsr #32
     4b4:	50010000 	andpl	r0, r1, r0
     4b8:	00000062 	andeq	r0, r0, r2, rrx
     4bc:	30cc0305 	sbccc	r0, ip, r5, lsl #6
     4c0:	67102000 	ldrvs	r2, [r0, -r0]
     4c4:	01000000 	mrseq	r0, (UNDEF: 0)
     4c8:	00006252 	andeq	r6, r0, r2, asr r2
     4cc:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
     4d0:	10200030 	eorne	r0, r0, r0, lsr r0
     4d4:	00000419 	andeq	r0, r0, r9, lsl r4
     4d8:	00625301 	rsbeq	r5, r2, r1, lsl #6
     4dc:	03050000 	movweq	r0, #20480	; 0x5000
     4e0:	200030a8 	andcs	r3, r0, r8, lsr #1
     4e4:	0002e510 	andeq	lr, r2, r0, lsl r5
     4e8:	62540100 	subsvs	r0, r4, #0, 2
     4ec:	05000000 	streq	r0, [r0, #-0]
     4f0:	00307c03 	eorseq	r7, r0, r3, lsl #24
     4f4:	04281020 	strteq	r1, [r8], #-32	; 0xffffffe0
     4f8:	55010000 	strpl	r0, [r1, #-0]
     4fc:	00000062 	andeq	r0, r0, r2, rrx
     500:	30440305 	subcc	r0, r4, r5, lsl #6
     504:	b7102000 	ldrlt	r2, [r0, -r0]
     508:	01000005 	tsteq	r0, r5
     50c:	00006256 	andeq	r6, r0, r6, asr r2
     510:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
     514:	10200030 	eorne	r0, r0, r0, lsr r0
     518:	00000595 	muleq	r0, r5, r5
     51c:	00625701 	rsbeq	r5, r2, r1, lsl #14
     520:	03050000 	movweq	r0, #20480	; 0x5000
     524:	20003060 	andcs	r3, r0, r0, rrx
     528:	0004f610 	andeq	pc, r4, r0, lsl r6	; <UNPREDICTABLE>
     52c:	62580100 	subsvs	r0, r8, #0, 2
     530:	05000000 	streq	r0, [r0, #-0]
     534:	00309803 	eorseq	r9, r0, r3, lsl #16
     538:	03ff1020 	mvnseq	r1, #32
     53c:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
     540:	00000062 	andeq	r0, r0, r2, rrx
     544:	30180305 	andscc	r0, r8, r5, lsl #6
     548:	f6102000 			; <UNDEFINED> instruction: 0xf6102000
     54c:	01000005 	tsteq	r0, r5
     550:	0000625a 	andeq	r6, r0, sl, asr r2
     554:	70030500 	andvc	r0, r3, r0, lsl #10
     558:	10200030 	eorne	r0, r0, r0, lsr r0
     55c:	0000037f 	andeq	r0, r0, pc, ror r3
     560:	012e9001 			; <UNDEFINED> instruction: 0x012e9001
     564:	03050000 	movweq	r0, #20480	; 0x5000
     568:	20002ff4 	strdcs	r2, [r0], -r4
     56c:	0004e710 	andeq	lr, r4, r0, lsl r7
     570:	2e910100 	fmlcss	f0, f1, f0
     574:	05000001 	streq	r0, [r0, #-1]
     578:	006a7403 	rsbeq	r7, sl, r3, lsl #8
     57c:	06371320 	ldrteq	r1, [r7], -r0, lsr #6
     580:	92010000 	andls	r0, r1, #0
     584:	200001fc 	strdcs	r0, [r0], -ip
     588:	00000c04 	andeq	r0, r0, r4, lsl #24
     58c:	080b9c01 	stmdaeq	fp, {r0, sl, fp, ip, pc}
     590:	87110000 	ldrhi	r0, [r1, -r0]
     594:	01000003 	tsteq	r0, r3
     598:	00014ca0 	andeq	r4, r1, r0, lsr #25
     59c:	44910200 	ldrmi	r0, [r1], #512	; 0x200
     5a0:	00056b11 	andeq	r6, r5, r1, lsl fp
     5a4:	a4a10100 	strtge	r0, [r1], #256	; 0x100
     5a8:	03000000 	movweq	r0, #0
     5ac:	117fb891 			; <UNDEFINED> instruction: 0x117fb891
     5b0:	00000647 	andeq	r0, r0, r7, asr #12
     5b4:	080ba201 	stmdaeq	fp, {r0, r9, sp, pc}
     5b8:	91030000 	mrsls	r0, (UNDEF: 3)
     5bc:	81117fac 	tsthi	r1, ip, lsr #31
     5c0:	01000004 	tsteq	r0, r4
     5c4:	00014caa 	andeq	r4, r1, sl, lsr #25
     5c8:	88910300 	ldmhi	r1, {r8, r9}
     5cc:	0168117f 	smceq	33055	; 0x811f
     5d0:	ab010000 	blge	405d8 <startup-0x1ffbfa28>
     5d4:	000000a4 	andeq	r0, r0, r4, lsr #1
     5d8:	7efc9103 	nrmvce	f1, f3
     5dc:	00053611 	andeq	r3, r5, r1, lsl r6
     5e0:	0bac0100 	bleq	feb009e8 <firstTime.4040+0xdeaf7ef8>
     5e4:	03000008 	movweq	r0, #8
     5e8:	117ef091 			; <UNDEFINED> instruction: 0x117ef091
     5ec:	00000289 	andeq	r0, r0, r9, lsl #5
     5f0:	014cb301 	cmpeq	ip, r1, lsl #6
     5f4:	91030000 	mrsls	r0, (UNDEF: 3)
     5f8:	c9117ecc 	ldmdbgt	r1, {r2, r3, r6, r7, r9, sl, fp, ip, sp, lr}
     5fc:	01000003 	tsteq	r0, r3
     600:	0000a4b4 			; <UNDEFINED> instruction: 0x0000a4b4
     604:	c0910300 	addsgt	r0, r1, r0, lsl #6
     608:	05ab117e 	streq	r1, [fp, #382]!	; 0x17e
     60c:	b5010000 	strlt	r0, [r1, #-0]
     610:	0000080b 	andeq	r0, r0, fp, lsl #16
     614:	7eb49103 	asnvcs	f1, f3
     618:	00012311 	andeq	r2, r1, r1, lsl r3
     61c:	4cbc0100 	ldfmis	f0, [ip]
     620:	03000001 	movweq	r0, #1
     624:	117e9091 			; <UNDEFINED> instruction: 0x117e9091
     628:	0000052a 	andeq	r0, r0, sl, lsr #10
     62c:	00a4bd01 	adceq	fp, r4, r1, lsl #26
     630:	91030000 	mrsls	r0, (UNDEF: 3)
     634:	5b117e84 	blpl	46004c <startup-0x1fb9ffb4>
     638:	01000001 	tsteq	r0, r1
     63c:	00080bbe 			; <UNDEFINED> instruction: 0x00080bbe
     640:	f8910300 			; <UNDEFINED> instruction: 0xf8910300
     644:	0153117d 	cmpeq	r3, sp, ror r1
     648:	c5010000 	strgt	r0, [r1, #-0]
     64c:	0000014c 	andeq	r0, r0, ip, asr #2
     650:	7dd49103 	ldfvcp	f1, [r4, #12]
     654:	0015ce11 	andseq	ip, r5, r1, lsl lr
     658:	4cca0100 	stfmie	f0, [sl], {0}
     65c:	03000001 	movweq	r0, #1
     660:	117db091 			; <UNDEFINED> instruction: 0x117db091
     664:	00000c15 	andeq	r0, r0, r5, lsl ip
     668:	014ccf01 	cmpeq	ip, r1, lsl #30
     66c:	91030000 	mrsls	r0, (UNDEF: 3)
     670:	38117d8c 	ldmdacc	r1, {r2, r3, r7, r8, sl, fp, ip, sp, lr}
     674:	01000000 	mrseq	r0, (UNDEF: 0)
     678:	00014cd5 	ldrdeq	r4, [r1], -r5
     67c:	e8910300 	ldm	r1, {r8, r9}
     680:	054e117c 	strbeq	r1, [lr, #-380]	; 0xfffffe84
     684:	db010000 	blle	4068c <startup-0x1ffbf974>
     688:	0000014c 	andeq	r0, r0, ip, asr #2
     68c:	7cc49103 	stfvcp	f1, [r4], {3}
     690:	00055411 	andeq	r5, r5, r1, lsl r4
     694:	4cdd0100 	ldfmie	f0, [sp], {0}
     698:	03000001 	movweq	r0, #1
     69c:	117ca091 			; <UNDEFINED> instruction: 0x117ca091
     6a0:	0000055a 	andeq	r0, r0, sl, asr r5
     6a4:	014cdf01 	cmpeq	ip, r1, lsl #30
     6a8:	91030000 	mrsls	r0, (UNDEF: 3)
     6ac:	d1117bfc 			; <UNDEFINED> instruction: 0xd1117bfc
     6b0:	01000001 	tsteq	r0, r1
     6b4:	00014ce1 	andeq	r4, r1, r1, ror #25
     6b8:	d8910300 	ldmle	r1, {r8, r9}
     6bc:	014d117b 	hvceq	53531	; 0xd11b
     6c0:	e3010000 	movw	r0, #4096	; 0x1000
     6c4:	0000014c 	andeq	r0, r0, ip, asr #2
     6c8:	7bb49103 	blvc	fed24adc <firstTime.4040+0xded1bfec>
     6cc:	00003f11 	andeq	r3, r0, r1, lsl pc
     6d0:	6efe0100 	cdpvs	1, 15, cr0, cr14, cr0, {0}
     6d4:	03000003 	movweq	r0, #3
     6d8:	117ba091 			; <UNDEFINED> instruction: 0x117ba091
     6dc:	0000017b 	andeq	r0, r0, fp, ror r1
     6e0:	036eff01 	msreq	SPSR_fsx, #1, 30
     6e4:	91030000 	mrsls	r0, (UNDEF: 3)
     6e8:	af147b8c 	svcge	0x00147b8c
     6ec:	01000001 	tsteq	r0, r1
     6f0:	036e0100 	cmneq	lr, #0, 2
     6f4:	91030000 	mrsls	r0, (UNDEF: 3)
     6f8:	c5147af8 	ldrgt	r7, [r4, #-2808]	; 0xfffff508
     6fc:	01000001 	tsteq	r0, r1
     700:	036e0101 	cmneq	lr, #1073741824	; 0x40000000
     704:	91030000 	mrsls	r0, (UNDEF: 3)
     708:	bf147ae4 	svclt	0x00147ae4
     70c:	01000001 	tsteq	r0, r1
     710:	036e0102 	cmneq	lr, #-2147483648	; 0x80000000
     714:	91030000 	mrsls	r0, (UNDEF: 3)
     718:	cb147ad0 	blgt	51f260 <startup-0x1fae0da0>
     71c:	01000001 	tsteq	r0, r1
     720:	036e0103 	cmneq	lr, #-1073741824	; 0xc0000000
     724:	91030000 	mrsls	r0, (UNDEF: 3)
     728:	2a147abc 	bcs	51f220 <startup-0x1fae0de0>
     72c:	01000002 	tsteq	r0, r2
     730:	036e0104 	cmneq	lr, #4, 2
     734:	91030000 	mrsls	r0, (UNDEF: 3)
     738:	12147aa8 	andsne	r7, r4, #168, 20	; 0xa8000
     73c:	01000002 	tsteq	r0, r2
     740:	036e0105 	cmneq	lr, #1073741825	; 0x40000001
     744:	91030000 	mrsls	r0, (UNDEF: 3)
     748:	ea147a94 	b	51f1a0 <startup-0x1fae0e60>
     74c:	01000001 	tsteq	r0, r1
     750:	036e0106 	cmneq	lr, #-2147483647	; 0x80000001
     754:	91030000 	mrsls	r0, (UNDEF: 3)
     758:	30147a80 	andscc	r7, r4, r0, lsl #21
     75c:	01000002 	tsteq	r0, r2
     760:	036e0107 	cmneq	lr, #-1073741823	; 0xc0000001
     764:	91030000 	mrsls	r0, (UNDEF: 3)
     768:	221479ec 	andscs	r7, r4, #236, 18	; 0x3b0000
     76c:	01000006 	tsteq	r0, r6
     770:	036e0108 	cmneq	lr, #8, 2
     774:	91030000 	mrsls	r0, (UNDEF: 3)
     778:	291479d8 	ldmdbcs	r4, {r3, r4, r6, r7, r8, fp, ip, sp, lr}
     77c:	01000006 	tsteq	r0, r6
     780:	036e0109 	cmneq	lr, #1073741826	; 0x40000002
     784:	91030000 	mrsls	r0, (UNDEF: 3)
     788:	8e1479c4 	vnmlahi.f16	s14, s9, s8	; <UNPREDICTABLE>
     78c:	01000005 	tsteq	r0, r5
     790:	036e010a 	cmneq	lr, #-2147483646	; 0x80000002
     794:	91030000 	mrsls	r0, (UNDEF: 3)
     798:	171479b0 			; <UNDEFINED> instruction: 0x171479b0
     79c:	01000001 	tsteq	r0, r1
     7a0:	012e0121 			; <UNDEFINED> instruction: 0x012e0121
     7a4:	91020000 	mrsls	r0, (UNDEF: 2)
     7a8:	01d7146c 	bicseq	r1, r7, ip, ror #8
     7ac:	22010000 	andcs	r0, r1, #0
     7b0:	00012e01 	andeq	r2, r1, r1, lsl #28
     7b4:	68910200 	ldmvs	r1, {r9}
     7b8:	00072415 	andeq	r2, r7, r5, lsl r4
     7bc:	00069220 	andeq	r9, r6, r0, lsr #4
     7c0:	027f1400 	rsbseq	r1, pc, #0, 8
     7c4:	46010000 	strmi	r0, [r1], -r0
     7c8:	00012e01 	andeq	r2, r1, r1, lsl #28
     7cc:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
     7d0:	1420006a 	strtne	r0, [r0], #-106	; 0xffffff96
     7d4:	000003db 	ldrdeq	r0, [r0], -fp
     7d8:	2e014701 	cdpcs	7, 0, cr4, cr1, cr1, {0}
     7dc:	05000001 	streq	r0, [r0, #-1]
     7e0:	006a8003 	rsbeq	r8, sl, r3
     7e4:	032d1420 			; <UNDEFINED> instruction: 0x032d1420
     7e8:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
     7ec:	00012e01 	andeq	r2, r1, r1, lsl #28
     7f0:	78030500 	stmdavc	r3, {r8, sl}
     7f4:	1420006a 	strtne	r0, [r0], #-106	; 0xffffff96
     7f8:	0000057d 	andeq	r0, r0, sp, ror r5
     7fc:	2e019201 	cdpcs	2, 0, cr9, cr1, cr1, {0}
     800:	05000001 	streq	r0, [r0, #-1]
     804:	006a8403 	rsbeq	r8, sl, r3, lsl #8
     808:	0b000020 	bleq	890 <startup-0x1ffff770>
     80c:	000000a4 	andeq	r0, r0, r4, lsr #1
     810:	0000081b 	andeq	r0, r0, fp, lsl r8
     814:	00019a0f 	andeq	r9, r1, pc, lsl #20
     818:	13000000 	movwne	r0, #0
     81c:	0000040d 	andeq	r0, r0, sp, lsl #8
     820:	00345c01 	eorseq	r5, r4, r1, lsl #24
     824:	01c82000 	biceq	r2, r8, r0
     828:	9c010000 	stcls	0, cr0, [r1], {-0}
     82c:	000008bd 			; <UNDEFINED> instruction: 0x000008bd
     830:	00012d11 	andeq	r2, r1, r1, lsl sp
     834:	9e5d0100 	rdflse	f0, f5, f0
     838:	02000000 	andeq	r0, r0, #0
     83c:	36117491 			; <UNDEFINED> instruction: 0x36117491
     840:	01000002 	tsteq	r0, r2
     844:	00009e61 	andeq	r9, r0, r1, ror #28
     848:	70910200 	addsvc	r0, r1, r0, lsl #4
     84c:	00024611 	andeq	r4, r2, r1, lsl r6
     850:	9e650100 	powlss	f0, f5, f0
     854:	02000000 	andeq	r0, r0, #0
     858:	af116c91 	svcge	0x00116c91
     85c:	01000002 	tsteq	r0, r2
     860:	00009e69 	andeq	r9, r0, r9, ror #28
     864:	68910200 	ldmvs	r1, {r9}
     868:	0002b811 	andeq	fp, r2, r1, lsl r8
     86c:	9e6d0100 	powlse	f0, f5, f0
     870:	02000000 	andeq	r0, r0, #0
     874:	c1116491 			; <UNDEFINED> instruction: 0xc1116491
     878:	01000002 	tsteq	r0, r2
     87c:	00009e71 	andeq	r9, r0, r1, ror lr
     880:	60910200 	addsvs	r0, r1, r0, lsl #4
     884:	0002ca11 	andeq	ip, r2, r1, lsl sl
     888:	9e750100 	rpwlss	f0, f5, f0
     88c:	02000000 	andeq	r0, r0, #0
     890:	d3115c91 	tstle	r1, #37120	; 0x9100
     894:	01000002 	tsteq	r0, r2
     898:	00009e79 	andeq	r9, r0, r9, ror lr
     89c:	58910200 	ldmpl	r1, {r9}
     8a0:	0002dc11 	andeq	sp, r2, r1, lsl ip
     8a4:	9e7c0100 	rpwlse	f0, f4, f0
     8a8:	02000000 	andeq	r0, r0, #0
     8ac:	5d115491 	cfldrspl	mvf5, [r1, #-580]	; 0xfffffdbc
     8b0:	01000000 	mrseq	r0, (UNDEF: 0)
     8b4:	00009e7f 	andeq	r9, r0, pc, ror lr
     8b8:	50910200 	addspl	r0, r1, r0, lsl #4
     8bc:	02761600 	rsbseq	r1, r6, #0, 12
     8c0:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
     8c4:	20000010 	andcs	r0, r0, r0, lsl r0
     8c8:	00000024 	andeq	r0, r0, r4, lsr #32
     8cc:	73179c01 	tstvc	r7, #256	; 0x100
     8d0:	01000001 	tsteq	r0, r1
     8d4:	00000032 	andeq	r0, r0, r2, lsr r0
     8d8:	00000c20 	andeq	r0, r0, r0, lsr #24
     8dc:	009c0100 	addseq	r0, ip, r0, lsl #2
     8e0:	000001e0 	andeq	r0, r0, r0, ror #3
     8e4:	013d0004 	teqeq	sp, r4
     8e8:	01040000 	mrseq	r0, (UNDEF: 4)
     8ec:	00000077 	andeq	r0, r0, r7, ror r0
     8f0:	0006660c 	andeq	r6, r6, ip, lsl #12
     8f4:	000e0000 	andeq	r0, lr, r0
     8f8:	00005620 	andeq	r5, r0, r0, lsr #12
     8fc:	0002ba00 	andeq	fp, r2, r0, lsl #20
     900:	020c0200 	andeq	r0, ip, #0, 4
     904:	00004e05 	andeq	r4, r0, r5, lsl #28
     908:	02fc0300 	rscseq	r0, ip, #0, 6
     90c:	07020000 	streq	r0, [r2, -r0]
     910:	0000004e 	andeq	r0, r0, lr, asr #32
     914:	06300300 	ldrteq	r0, [r0], -r0, lsl #6
     918:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     91c:	0000004e 	andeq	r0, r0, lr, asr #32
     920:	103a0304 	eorsne	r0, sl, r4, lsl #6
     924:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     928:	00000055 	andeq	r0, r0, r5, asr r0
     92c:	04040008 	streq	r0, [r4], #-8
     930:	00032007 	andeq	r2, r3, r7
     934:	5b040500 	blpl	101d3c <startup-0x1fefe2c4>
     938:	04000000 	streq	r0, [r0], #-0
     93c:	04370801 	ldrteq	r0, [r7], #-2049	; 0xfffff7ff
     940:	8c060000 	stchi	0, cr0, [r6], {-0}
     944:	02000011 	andeq	r0, r0, #17
     948:	0000210a 	andeq	r2, r0, sl, lsl #2
     94c:	00160700 	andseq	r0, r6, r0, lsl #14
     950:	030c0000 	movweq	r0, #49152	; 0xc000
     954:	00009e06 	andeq	r9, r0, r6, lsl #28
     958:	050d0300 	streq	r0, [sp, #-768]	; 0xfffffd00
     95c:	07030000 	streq	r0, [r3, -r0]
     960:	0000009e 	muleq	r0, lr, r0
     964:	001d0300 	andseq	r0, sp, r0, lsl #6
     968:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     96c:	0000009e 	muleq	r0, lr, r0
     970:	00120304 	andseq	r0, r2, r4, lsl #6
     974:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
     978:	0000009e 	muleq	r0, lr, r0
     97c:	04050008 	streq	r0, [r5], #-8
     980:	00000062 	andeq	r0, r0, r2, rrx
     984:	000c5f06 	andeq	r5, ip, r6, lsl #30
     988:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
     98c:	07000000 	streq	r0, [r0, -r0]
     990:	00000605 	andeq	r0, r0, r5, lsl #12
     994:	28060424 	stmdacs	r6, {r2, r5, sl}
     998:	03000001 	movweq	r0, #1
     99c:	000003d4 	ldrdeq	r0, [r0], -r4
     9a0:	01280704 			; <UNDEFINED> instruction: 0x01280704
     9a4:	03000000 	movweq	r0, #0
     9a8:	00000611 	andeq	r0, r0, r1, lsl r6
     9ac:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
     9b0:	03040000 	movweq	r0, #16384	; 0x4000
     9b4:	00000578 	andeq	r0, r0, r8, ror r5
     9b8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
     9bc:	03080000 	movweq	r0, #32768	; 0x8000
     9c0:	000005a4 	andeq	r0, r0, r4, lsr #11
     9c4:	01460c04 	cmpeq	r6, r4, lsl #24
     9c8:	030c0000 	movweq	r0, #49152	; 0xc000
     9cc:	000002f5 	strdeq	r0, [r0], -r5
     9d0:	01460d04 	cmpeq	r6, r4, lsl #26
     9d4:	03100000 	tsteq	r0, #0
     9d8:	000003e6 	andeq	r0, r0, r6, ror #7
     9dc:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     9e0:	03140000 	tsteq	r4, #0
     9e4:	00000048 	andeq	r0, r0, r8, asr #32
     9e8:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     9ec:	03180000 	tsteq	r8, #0
     9f0:	00000365 	andeq	r0, r0, r5, ror #6
     9f4:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     9f8:	031c0000 	tsteq	ip, #0
     9fc:	00000375 	andeq	r0, r0, r5, ror r3
     a00:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     a04:	00200000 	eoreq	r0, r0, r0
     a08:	00a40405 	adceq	r0, r4, r5, lsl #8
     a0c:	04080000 	streq	r0, [r8], #-0
     a10:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     a14:	01400900 	cmpeq	r0, r0, lsl #18
     a18:	400a0000 	andmi	r0, sl, r0
     a1c:	00000001 	andeq	r0, r0, r1
     a20:	00af0405 	adceq	r0, pc, r5, lsl #8
     a24:	04050000 	streq	r0, [r5], #-0
     a28:	00000135 	andeq	r0, r0, r5, lsr r1
     a2c:	00060606 	andeq	r0, r6, r6, lsl #12
     a30:	af150400 	svcge	0x00150400
     a34:	0b000000 	bleq	a3c <startup-0x1ffff5c4>
     a38:	00000162 	andeq	r0, r0, r2, ror #2
     a3c:	00000162 	andeq	r0, r0, r2, ror #2
     a40:	0405000c 	streq	r0, [r5], #-12
     a44:	0000014c 	andeq	r0, r0, ip, asr #2
     a48:	0004ba0d 	andeq	fp, r4, sp, lsl #20
     a4c:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
     a50:	0d000001 	stceq	0, cr0, [r0, #-4]
     a54:	000003ab 	andeq	r0, r0, fp, lsr #7
     a58:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
     a5c:	04040000 	streq	r0, [r4], #-0
     a60:	00039207 	andeq	r9, r3, r7, lsl #4
     a64:	01680e00 	cmneq	r8, r0, lsl #28
     a68:	03010000 	movweq	r0, #4096	; 0x1000
     a6c:	30dc0305 	sbcscc	r0, ip, r5, lsl #6
     a70:	730e2000 	movwvc	r2, #57344	; 0xe000
     a74:	01000001 	tsteq	r0, r1
     a78:	f8030504 			; <UNDEFINED> instruction: 0xf8030504
     a7c:	0f20002f 	svceq	0x0020002f
     a80:	00000655 	andeq	r0, r0, r5, asr r6
     a84:	0e100c01 	cdpeq	12, 1, cr0, cr0, cr1, {0}
     a88:	00462000 	subeq	r2, r6, r0
     a8c:	9c010000 	stcls	0, cr0, [r1], {-0}
     a90:	000001c3 	andeq	r0, r0, r3, asr #3
     a94:	00069910 	andeq	r9, r6, r0, lsl r9
     a98:	620c0100 	andvs	r0, ip, #0, 2
     a9c:	02000001 	andeq	r0, r0, #1
     aa0:	11007491 			; <UNDEFINED> instruction: 0x11007491
     aa4:	000002f5 	strdeq	r0, [r0], -r5
     aa8:	0e000701 	cdpeq	7, 0, cr0, cr0, cr1, {0}
     aac:	00102000 	andseq	r2, r0, r0
     ab0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ab4:	00069910 	andeq	r9, r6, r0, lsl r9
     ab8:	62070100 	andvs	r0, r7, #0, 2
     abc:	02000001 	andeq	r0, r0, #1
     ac0:	00007491 	muleq	r0, r1, r4
     ac4:	0000052b 	andeq	r0, r0, fp, lsr #10
     ac8:	02230004 	eoreq	r0, r3, #4
     acc:	01040000 	mrseq	r0, (UNDEF: 4)
     ad0:	00000077 	andeq	r0, r0, r7, ror r0
     ad4:	0008d90c 	andeq	sp, r8, ip, lsl #18
     ad8:	000e5800 	andeq	r5, lr, r0, lsl #16
     adc:	0002a820 	andeq	sl, r2, r0, lsr #16
     ae0:	00034800 	andeq	r4, r3, r0, lsl #16
     ae4:	020c0200 	andeq	r0, ip, #0, 4
     ae8:	00004e05 	andeq	r4, r0, r5, lsl #28
     aec:	02fc0300 	rscseq	r0, ip, #0, 6
     af0:	07020000 	streq	r0, [r2, -r0]
     af4:	0000004e 	andeq	r0, r0, lr, asr #32
     af8:	06300300 	ldrteq	r0, [r0], -r0, lsl #6
     afc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     b00:	0000004e 	andeq	r0, r0, lr, asr #32
     b04:	103a0304 	eorsne	r0, sl, r4, lsl #6
     b08:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     b0c:	00000055 	andeq	r0, r0, r5, asr r0
     b10:	04040008 	streq	r0, [r4], #-8
     b14:	00032007 	andeq	r2, r3, r7
     b18:	5b040500 	blpl	101f20 <startup-0x1fefe0e0>
     b1c:	04000000 	streq	r0, [r0], #-0
     b20:	04370801 	ldrteq	r0, [r7], #-2049	; 0xfffff7ff
     b24:	8c060000 	stchi	0, cr0, [r6], {-0}
     b28:	02000011 	andeq	r0, r0, #17
     b2c:	0000210a 	andeq	r2, r0, sl, lsl #2
     b30:	00160700 	andseq	r0, r6, r0, lsl #14
     b34:	030c0000 	movweq	r0, #49152	; 0xc000
     b38:	00009e06 	andeq	r9, r0, r6, lsl #28
     b3c:	050d0300 	streq	r0, [sp, #-768]	; 0xfffffd00
     b40:	07030000 	streq	r0, [r3, -r0]
     b44:	0000009e 	muleq	r0, lr, r0
     b48:	001d0300 	andseq	r0, sp, r0, lsl #6
     b4c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     b50:	0000009e 	muleq	r0, lr, r0
     b54:	00120304 	andseq	r0, r2, r4, lsl #6
     b58:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
     b5c:	0000009e 	muleq	r0, lr, r0
     b60:	04050008 	streq	r0, [r5], #-8
     b64:	00000062 	andeq	r0, r0, r2, rrx
     b68:	000c5f06 	andeq	r5, ip, r6, lsl #30
     b6c:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
     b70:	07000000 	streq	r0, [r0, -r0]
     b74:	00000605 	andeq	r0, r0, r5, lsl #12
     b78:	28060424 	stmdacs	r6, {r2, r5, sl}
     b7c:	03000001 	movweq	r0, #1
     b80:	000003d4 	ldrdeq	r0, [r0], -r4
     b84:	01280704 			; <UNDEFINED> instruction: 0x01280704
     b88:	03000000 	movweq	r0, #0
     b8c:	00000611 	andeq	r0, r0, r1, lsl r6
     b90:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
     b94:	03040000 	movweq	r0, #16384	; 0x4000
     b98:	00000578 	andeq	r0, r0, r8, ror r5
     b9c:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
     ba0:	03080000 	movweq	r0, #32768	; 0x8000
     ba4:	000005a4 	andeq	r0, r0, r4, lsr #11
     ba8:	01460c04 	cmpeq	r6, r4, lsl #24
     bac:	030c0000 	movweq	r0, #49152	; 0xc000
     bb0:	000002f5 	strdeq	r0, [r0], -r5
     bb4:	01460d04 	cmpeq	r6, r4, lsl #26
     bb8:	03100000 	tsteq	r0, #0
     bbc:	000003e6 	andeq	r0, r0, r6, ror #7
     bc0:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     bc4:	03140000 	tsteq	r4, #0
     bc8:	00000048 	andeq	r0, r0, r8, asr #32
     bcc:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     bd0:	03180000 	tsteq	r8, #0
     bd4:	00000365 	andeq	r0, r0, r5, ror #6
     bd8:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     bdc:	031c0000 	tsteq	ip, #0
     be0:	00000375 	andeq	r0, r0, r5, ror r3
     be4:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     be8:	00200000 	eoreq	r0, r0, r0
     bec:	00a40405 	adceq	r0, r4, r5, lsl #8
     bf0:	04080000 	streq	r0, [r8], #-0
     bf4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     bf8:	01400900 	cmpeq	r0, r0, lsl #18
     bfc:	400a0000 	andmi	r0, sl, r0
     c00:	00000001 	andeq	r0, r0, r1
     c04:	00af0405 	adceq	r0, pc, r5, lsl #8
     c08:	04050000 	streq	r0, [r5], #-0
     c0c:	00000135 	andeq	r0, r0, r5, lsr r1
     c10:	00060606 	andeq	r0, r6, r6, lsl #12
     c14:	af150400 	svcge	0x00150400
     c18:	0b000000 	bleq	c20 <startup-0x1ffff3e0>
     c1c:	00000162 	andeq	r0, r0, r2, ror #2
     c20:	00000162 	andeq	r0, r0, r2, ror #2
     c24:	0405000c 	streq	r0, [r5], #-12
     c28:	0000014c 	andeq	r0, r0, ip, asr #2
     c2c:	0004ba0d 	andeq	fp, r4, sp, lsl #20
     c30:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
     c34:	0d000001 	stceq	0, cr0, [r0, #-4]
     c38:	000003ab 	andeq	r0, r0, fp, lsr #7
     c3c:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
     c40:	5b0b0000 	blpl	2c0c48 <startup-0x1fd3f3b8>
     c44:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
     c48:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     c4c:	0000018e 	andeq	r0, r0, lr, lsl #3
     c50:	0404000b 	streq	r0, [r4], #-11
     c54:	00039207 	andeq	r9, r3, r7, lsl #4
     c58:	089e0f00 	ldmeq	lr, {r8, r9, sl, fp}
     c5c:	03050000 	movweq	r0, #20480	; 0x5000
     c60:	0000017e 	andeq	r0, r0, lr, ror r1
     c64:	6a880305 	bvs	fe201880 <firstTime.4040+0xde1f8d90>
     c68:	980f2000 	stmdals	pc, {sp}	; <UNPREDICTABLE>
     c6c:	06000007 	streq	r0, [r0], -r7
     c70:	00017e03 	andeq	r7, r1, r3, lsl #28
     c74:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
     c78:	0f20006a 	svceq	0x0020006a
     c7c:	000007b3 			; <UNDEFINED> instruction: 0x000007b3
     c80:	017e0307 	cmneq	lr, r7, lsl #6
     c84:	03050000 	movweq	r0, #20480	; 0x5000
     c88:	20006aa0 	andcs	r6, r0, r0, lsr #21
     c8c:	0007140f 	andeq	r1, r7, pc, lsl #8
     c90:	7e030800 	cdpvc	8, 0, cr0, cr3, cr0, {0}
     c94:	05000001 	streq	r0, [r0, #-1]
     c98:	006aac03 	rsbeq	sl, sl, r3, lsl #24
     c9c:	07c40f20 	strbeq	r0, [r4, r0, lsr #30]
     ca0:	03090000 	movweq	r0, #36864	; 0x9000
     ca4:	0000017e 	andeq	r0, r0, lr, ror r1
     ca8:	6ab80305 	bvs	fee018c4 <firstTime.4040+0xdedf8dd4>
     cac:	060f2000 	streq	r2, [pc], -r0
     cb0:	0a000009 	beq	cdc <startup-0x1ffff324>
     cb4:	00017e03 	andeq	r7, r1, r3, lsl #28
     cb8:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
     cbc:	0f20006a 	svceq	0x0020006a
     cc0:	00000882 	andeq	r0, r0, r2, lsl #17
     cc4:	017e030b 	cmneq	lr, fp, lsl #6
     cc8:	03050000 	movweq	r0, #20480	; 0x5000
     ccc:	20006ad0 	ldrdcs	r6, [r0], -r0
     cd0:	0007e70f 	andeq	lr, r7, pc, lsl #14
     cd4:	7e030c00 	cdpvc	12, 0, cr0, cr3, cr0, {0}
     cd8:	05000001 	streq	r0, [r0, #-1]
     cdc:	006adc03 	rsbeq	sp, sl, r3, lsl #24
     ce0:	07240f20 	streq	r0, [r4, -r0, lsr #30]!
     ce4:	030d0000 	movweq	r0, #53248	; 0xd000
     ce8:	0000017e 	andeq	r0, r0, lr, ror r1
     cec:	6ae80305 	bvs	ffa01908 <firstTime.4040+0xdf9f8e18>
     cf0:	520f2000 	andpl	r2, pc, #0
     cf4:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
     cf8:	00017e03 	andeq	r7, r1, r3, lsl #28
     cfc:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
     d00:	0f20006a 	svceq	0x0020006a
     d04:	00000834 	andeq	r0, r0, r4, lsr r8
     d08:	017e030f 	cmneq	lr, pc, lsl #6
     d0c:	03050000 	movweq	r0, #20480	; 0x5000
     d10:	20006b00 	andcs	r6, r0, r0, lsl #22
     d14:	0006d810 	andeq	sp, r6, r0, lsl r8
     d18:	9e110100 	muflss	f0, f1, f0
     d1c:	05000000 	streq	r0, [r0, #-0]
     d20:	00339c03 	eorseq	r9, r3, r3, lsl #24
     d24:	06a81020 	strteq	r1, [r8], r0, lsr #32
     d28:	12010000 	andne	r0, r1, #0
     d2c:	0000009e 	muleq	r0, lr, r0
     d30:	33b40305 			; <UNDEFINED> instruction: 0x33b40305
     d34:	fe102000 	cdp2	0, 1, cr2, cr0, cr0, {0}
     d38:	01000006 	tsteq	r0, r6
     d3c:	00009e13 	andeq	r9, r0, r3, lsl lr
     d40:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
     d44:	10200032 	eorne	r0, r0, r2, lsr r0
     d48:	000007dd 	ldrdeq	r0, [r0], -sp
     d4c:	009e1401 	addseq	r1, lr, r1, lsl #8
     d50:	03050000 	movweq	r0, #20480	; 0x5000
     d54:	200033b0 			; <UNDEFINED> instruction: 0x200033b0
     d58:	0007a810 	andeq	sl, r7, r0, lsl r8
     d5c:	9e150100 	muflss	f0, f5, f0
     d60:	05000000 	streq	r0, [r0, #-0]
     d64:	00338803 	eorseq	r8, r3, r3, lsl #16
     d68:	06c01020 	strbeq	r1, [r0], r0, lsr #32
     d6c:	16010000 	strne	r0, [r1], -r0
     d70:	0000009e 	muleq	r0, lr, r0
     d74:	327c0305 	rsbscc	r0, ip, #335544320	; 0x14000000
     d78:	35102000 	ldrcc	r2, [r0, #-0]
     d7c:	01000007 	tsteq	r0, r7
     d80:	00009e17 	andeq	r9, r0, r7, lsl lr
     d84:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
     d88:	10200033 	eorne	r0, r0, r3, lsr r0
     d8c:	0000085b 	andeq	r0, r0, fp, asr r8
     d90:	009e1801 	addseq	r1, lr, r1, lsl #16
     d94:	03050000 	movweq	r0, #20480	; 0x5000
     d98:	20003368 	andcs	r3, r0, r8, ror #6
     d9c:	00070910 	andeq	r0, r7, r0, lsl r9
     da0:	9e190100 	muflse	f0, f1, f0
     da4:	05000000 	streq	r0, [r0, #-0]
     da8:	0032d403 	eorseq	sp, r2, r3, lsl #8
     dac:	069e1020 	ldreq	r1, [lr], r0, lsr #32
     db0:	1a010000 	bne	40db8 <startup-0x1ffbf248>
     db4:	0000009e 	muleq	r0, lr, r0
     db8:	33840305 	orrcc	r0, r4, #335544320	; 0x14000000
     dbc:	76102000 	ldrvc	r2, [r0], -r0
     dc0:	01000007 	tsteq	r0, r7
     dc4:	00009e1b 	andeq	r9, r0, fp, lsl lr
     dc8:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
     dcc:	10200033 	eorne	r0, r0, r3, lsr r0
     dd0:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     dd4:	00621d01 	rsbeq	r1, r2, r1, lsl #26
     dd8:	03050000 	movweq	r0, #20480	; 0x5000
     ddc:	200032a4 	andcs	r3, r0, r4, lsr #5
     de0:	00086510 	andeq	r6, r8, r0, lsl r5
     de4:	621e0100 	andsvs	r0, lr, #0, 2
     de8:	05000000 	streq	r0, [r0, #-0]
     dec:	00339003 	eorseq	r9, r3, r3
     df0:	08111020 	ldmdaeq	r1, {r5, ip}
     df4:	1f010000 	svcne	0x00010000
     df8:	00000062 	andeq	r0, r0, r2, rrx
     dfc:	336c0305 	cmncc	ip, #335544320	; 0x14000000
     e00:	b2102000 	andslt	r2, r0, #0
     e04:	01000006 	tsteq	r0, r6
     e08:	00006220 	andeq	r6, r0, r0, lsr #4
     e0c:	98030500 	stmdals	r3, {r8, sl}
     e10:	10200032 	eorne	r0, r0, r2, lsr r0
     e14:	000008b0 			; <UNDEFINED> instruction: 0x000008b0
     e18:	00622101 	rsbeq	r2, r2, r1, lsl #2
     e1c:	03050000 	movweq	r0, #20480	; 0x5000
     e20:	200033a0 	andcs	r3, r0, r0, lsr #7
     e24:	0006e210 	andeq	lr, r6, r0, lsl r2
     e28:	62220100 	eorvs	r0, r2, #0, 2
     e2c:	05000000 	streq	r0, [r0, #-0]
     e30:	00335003 	eorseq	r5, r3, r3
     e34:	07f71020 	ldrbeq	r1, [r7, r0, lsr #32]!
     e38:	23010000 	movwcs	r0, #4096	; 0x1000
     e3c:	00000062 	andeq	r0, r0, r2, rrx
     e40:	32700305 	rsbscc	r0, r0, #335544320	; 0x14000000
     e44:	ca102000 	bgt	408e4c <startup-0x1fbf71b4>
     e48:	01000006 	tsteq	r0, r6
     e4c:	00006224 	andeq	r6, r0, r4, lsr #4
     e50:	80030500 	andhi	r0, r3, r0, lsl #10
     e54:	10200032 	eorne	r0, r0, r2, lsr r0
     e58:	00000873 	andeq	r0, r0, r3, ror r8
     e5c:	00622501 	rsbeq	r2, r2, r1, lsl #10
     e60:	03050000 	movweq	r0, #20480	; 0x5000
     e64:	200032bc 			; <UNDEFINED> instruction: 0x200032bc
     e68:	00078a10 	andeq	r8, r7, r0, lsl sl
     e6c:	62260100 	eorvs	r0, r6, #0, 2
     e70:	05000000 	streq	r0, [r0, #-0]
     e74:	00334403 	eorseq	r4, r3, r3, lsl #8
     e78:	08ca1020 	stmiaeq	sl, {r5, ip}^
     e7c:	27010000 	strcs	r0, [r1, -r0]
     e80:	00000062 	andeq	r0, r0, r2, rrx
     e84:	33780305 	cmncc	r8, #335544320	; 0x14000000
     e88:	d5102000 	ldrle	r2, [r0, #-0]
     e8c:	01000007 	tsteq	r0, r7
     e90:	00014c2a 	andeq	r4, r1, sl, lsr #24
     e94:	d8030500 	stmdale	r3, {r8, sl}
     e98:	10200032 	eorne	r0, r0, r2, lsr r0
     e9c:	00000850 	andeq	r0, r0, r0, asr r8
     ea0:	00a42b01 	adceq	r2, r4, r1, lsl #22
     ea4:	03050000 	movweq	r0, #20480	; 0x5000
     ea8:	200032c8 	andcs	r3, r0, r8, asr #5
     eac:	0008bf10 	andeq	fp, r8, r0, lsl pc
     eb0:	a42c0100 	strtge	r0, [ip], #-256	; 0xffffff00
     eb4:	05000000 	streq	r0, [r0, #-0]
     eb8:	00328c03 	eorseq	r8, r2, r3, lsl #24
     ebc:	07621020 	strbeq	r1, [r2, -r0, lsr #32]!
     ec0:	2d010000 	stccs	0, cr0, [r1, #-0]
     ec4:	000000a4 	andeq	r0, r0, r4, lsr #1
     ec8:	32b00305 	adcscc	r0, r0, #335544320	; 0x14000000
     ecc:	06102000 	ldreq	r2, [r0], -r0
     ed0:	01000008 	tsteq	r0, r8
     ed4:	0000a42e 	andeq	sl, r0, lr, lsr #8
     ed8:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
     edc:	10200033 	eorne	r0, r0, r3, lsr r0
     ee0:	00000893 	muleq	r0, r3, r8
     ee4:	00a42f01 	adceq	r2, r4, r1, lsl #30
     ee8:	03050000 	movweq	r0, #20480	; 0x5000
     eec:	200032fc 	strdcs	r3, [r0], -ip
     ef0:	0000a40b 	andeq	sl, r0, fp, lsl #8
     ef4:	00043c00 	andeq	r3, r4, r0, lsl #24
     ef8:	018e0e00 	orreq	r0, lr, r0, lsl #28
     efc:	00040000 	andeq	r0, r4, r0
     f00:	00084510 	andeq	r4, r8, r0, lsl r5
     f04:	2c300100 	ldfcss	f0, [r0], #-0
     f08:	05000004 	streq	r0, [r0, #-4]
     f0c:	00330803 	eorseq	r0, r3, r3, lsl #16
     f10:	082a1120 	stmdaeq	sl!, {r5, r8, ip}
     f14:	5f010000 	svcpl	0x00010000
     f18:	20000fdc 	ldrdcs	r0, [r0], -ip
     f1c:	00000124 	andeq	r0, r0, r4, lsr #2
     f20:	04829c01 	streq	r9, [r2], #3073	; 0xc01
     f24:	d5120000 	ldrle	r0, [r2, #-0]
     f28:	01000007 	tsteq	r0, r7
     f2c:	0001625f 	andeq	r6, r1, pc, asr r2
     f30:	6c910200 	lfmvs	f0, 4, [r1], {0}
     f34:	0008200f 	andeq	r2, r8, pc
     f38:	2e600100 	powcss	f0, f0, f0
     f3c:	05000001 	streq	r0, [r0, #-1]
     f40:	006b0c03 	rsbeq	r0, fp, r3, lsl #24
     f44:	0d130020 	ldceq	0, cr0, [r3, #-128]	; 0xffffff80
     f48:	01000004 	tsteq	r0, r4
     f4c:	000e5831 	andeq	r5, lr, r1, lsr r8
     f50:	00018420 	andeq	r8, r1, r0, lsr #8
     f54:	0f9c0100 	svceq	0x009c0100
     f58:	0000076d 	andeq	r0, r0, sp, ror #14
     f5c:	009e3201 	addseq	r3, lr, r1, lsl #4
     f60:	91020000 	mrsls	r0, (UNDEF: 2)
     f64:	07400f74 	smlsldxeq	r0, r0, r4, pc	; <UNPREDICTABLE>
     f68:	36010000 	strcc	r0, [r1], -r0
     f6c:	0000009e 	muleq	r0, lr, r0
     f70:	0f709102 	svceq	0x00709102
     f74:	00000781 	andeq	r0, r0, r1, lsl #15
     f78:	009e3a01 	addseq	r3, lr, r1, lsl #20
     f7c:	91020000 	mrsls	r0, (UNDEF: 2)
     f80:	07490f6c 	strbeq	r0, [r9, -ip, ror #30]
     f84:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
     f88:	0000009e 	muleq	r0, lr, r0
     f8c:	0f689102 	svceq	0x00689102
     f90:	000002af 	andeq	r0, r0, pc, lsr #5
     f94:	009e4201 	addseq	r4, lr, r1, lsl #4
     f98:	91020000 	mrsls	r0, (UNDEF: 2)
     f9c:	02b80f64 	adcseq	r0, r8, #100, 30	; 0x190
     fa0:	46010000 	strmi	r0, [r1], -r0
     fa4:	0000009e 	muleq	r0, lr, r0
     fa8:	0f609102 	svceq	0x00609102
     fac:	000002c1 	andeq	r0, r0, r1, asr #5
     fb0:	009e4a01 	addseq	r4, lr, r1, lsl #20
     fb4:	91020000 	mrsls	r0, (UNDEF: 2)
     fb8:	02ca0f5c 	sbceq	r0, sl, #92, 30	; 0x170
     fbc:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
     fc0:	0000009e 	muleq	r0, lr, r0
     fc4:	0f589102 	svceq	0x00589102
     fc8:	000002d3 	ldrdeq	r0, [r0], -r3
     fcc:	009e5201 	addseq	r5, lr, r1, lsl #4
     fd0:	91020000 	mrsls	r0, (UNDEF: 2)
     fd4:	02dc0f54 	sbcseq	r0, ip, #84, 30	; 0x150
     fd8:	56010000 	strpl	r0, [r1], -r0
     fdc:	0000009e 	muleq	r0, lr, r0
     fe0:	0f509102 	svceq	0x00509102
     fe4:	0000005d 	andeq	r0, r0, sp, asr r0
     fe8:	009e5a01 	addseq	r5, lr, r1, lsl #20
     fec:	91020000 	mrsls	r0, (UNDEF: 2)
     ff0:	d500004c 	strle	r0, [r0, #-76]	; 0xffffffb4
     ff4:	04000001 	streq	r0, [r0], #-1
     ff8:	00032300 	andeq	r2, r3, r0, lsl #6
     ffc:	77010400 	strvc	r0, [r1, -r0, lsl #8]
    1000:	0c000000 	stceq	0, cr0, [r0], {-0}
    1004:	00000933 	andeq	r0, r0, r3, lsr r9
    1008:	20001100 	andcs	r1, r0, r0, lsl #2
    100c:	000000fc 	strdeq	r0, [r0], -ip
    1010:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1014:	20070402 	andcs	r0, r7, r2, lsl #8
    1018:	02000003 	andeq	r0, r0, #3
    101c:	031a0702 	tsteq	sl, #524288	; 0x80000
    1020:	01020000 	mrseq	r0, (UNDEF: 2)
    1024:	00043708 	andeq	r3, r4, r8, lsl #14
    1028:	020c0300 	andeq	r0, ip, #0, 6
    102c:	00006305 	andeq	r6, r0, r5, lsl #6
    1030:	02fc0400 	rscseq	r0, ip, #0, 8
    1034:	07020000 	streq	r0, [r2, -r0]
    1038:	00000021 	andeq	r0, r0, r1, lsr #32
    103c:	06300400 	ldrteq	r0, [r0], -r0, lsl #8
    1040:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1044:	00000021 	andeq	r0, r0, r1, lsr #32
    1048:	103a0404 	eorsne	r0, sl, r4, lsl #8
    104c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1050:	00000063 	andeq	r0, r0, r3, rrx
    1054:	04050008 	streq	r0, [r5], #-8
    1058:	0000002f 	andeq	r0, r0, pc, lsr #32
    105c:	00118c06 	andseq	r8, r1, r6, lsl #24
    1060:	360a0200 	strcc	r0, [sl], -r0, lsl #4
    1064:	07000000 	streq	r0, [r0, -r0]
    1068:	00000016 	andeq	r0, r0, r6, lsl r0
    106c:	a506030c 	strge	r0, [r6, #-780]	; 0xfffffcf4
    1070:	04000000 	streq	r0, [r0], #-0
    1074:	0000050d 	andeq	r0, r0, sp, lsl #10
    1078:	00a50703 	adceq	r0, r5, r3, lsl #14
    107c:	04000000 	streq	r0, [r0], #-0
    1080:	0000001d 	andeq	r0, r0, sp, lsl r0
    1084:	00a50803 	adceq	r0, r5, r3, lsl #16
    1088:	04040000 	streq	r0, [r4], #-0
    108c:	00000012 	andeq	r0, r0, r2, lsl r0
    1090:	00a50903 	adceq	r0, r5, r3, lsl #18
    1094:	00080000 	andeq	r0, r8, r0
    1098:	00690405 	rsbeq	r0, r9, r5, lsl #8
    109c:	5f060000 	svcpl	0x00060000
    10a0:	0300000c 	movweq	r0, #12
    10a4:	0000740a 	andeq	r7, r0, sl, lsl #8
    10a8:	06050700 	streq	r0, [r5], -r0, lsl #14
    10ac:	04240000 	strteq	r0, [r4], #-0
    10b0:	00012f06 	andeq	r2, r1, r6, lsl #30
    10b4:	03d40400 	bicseq	r0, r4, #0, 8
    10b8:	07040000 	streq	r0, [r4, -r0]
    10bc:	0000012f 	andeq	r0, r0, pc, lsr #2
    10c0:	06110400 	ldreq	r0, [r1], -r0, lsl #8
    10c4:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    10c8:	00000135 	andeq	r0, r0, r5, lsr r1
    10cc:	05780404 	ldrbeq	r0, [r8, #-1028]!	; 0xfffffbfc
    10d0:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    10d4:	00000135 	andeq	r0, r0, r5, lsr r1
    10d8:	05a40408 	streq	r0, [r4, #1032]!	; 0x408
    10dc:	0c040000 	stceq	0, cr0, [r4], {-0}
    10e0:	0000014d 	andeq	r0, r0, sp, asr #2
    10e4:	02f5040c 	rscseq	r0, r5, #12, 8	; 0xc000000
    10e8:	0d040000 	stceq	0, cr0, [r4, #-0]
    10ec:	0000014d 	andeq	r0, r0, sp, asr #2
    10f0:	03e60410 	mvneq	r0, #16, 8	; 0x10000000
    10f4:	10040000 	andne	r0, r4, r0
    10f8:	00000135 	andeq	r0, r0, r5, lsr r1
    10fc:	00480414 	subeq	r0, r8, r4, lsl r4
    1100:	11040000 	mrsne	r0, (UNDEF: 4)
    1104:	00000135 	andeq	r0, r0, r5, lsr r1
    1108:	03650418 	cmneq	r5, #24, 8	; 0x18000000
    110c:	12040000 	andne	r0, r4, #0
    1110:	00000135 	andeq	r0, r0, r5, lsr r1
    1114:	0375041c 	cmneq	r5, #28, 8	; 0x1c000000
    1118:	13040000 	movwne	r0, #16384	; 0x4000
    111c:	00000135 	andeq	r0, r0, r5, lsr r1
    1120:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    1124:	000000ab 	andeq	r0, r0, fp, lsr #1
    1128:	69050408 	stmdbvs	r5, {r3, sl}
    112c:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1130:	00000147 	andeq	r0, r0, r7, asr #2
    1134:	0001470a 	andeq	r4, r1, sl, lsl #14
    1138:	04050000 	streq	r0, [r5], #-0
    113c:	000000b6 	strheq	r0, [r0], -r6
    1140:	013c0405 	teqeq	ip, r5, lsl #8
    1144:	06060000 	streq	r0, [r6], -r0
    1148:	04000006 	streq	r0, [r0], #-6
    114c:	0000b615 	andeq	fp, r0, r5, lsl r6
    1150:	01690b00 	cmneq	r9, r0, lsl #22
    1154:	01690000 	cmneq	r9, r0
    1158:	000c0000 	andeq	r0, ip, r0
    115c:	01530405 	cmpeq	r3, r5, lsl #8
    1160:	ba0d0000 	blt	341168 <startup-0x1fcbee98>
    1164:	04000004 	streq	r0, [r0], #-4
    1168:	00015e1c 	andeq	r5, r1, ip, lsl lr
    116c:	03ab0d00 			; <UNDEFINED> instruction: 0x03ab0d00
    1170:	1d040000 	stcne	0, cr0, [r4, #-0]
    1174:	00000135 	andeq	r0, r0, r5, lsr r1
    1178:	0009620e 	andeq	r6, r9, lr, lsl #4
    117c:	00060100 	andeq	r0, r6, r0, lsl #2
    1180:	fc200011 	stc2	0, cr0, [r0], #-68	; 0xffffffbc
    1184:	01000000 	mrseq	r0, (UNDEF: 0)
    1188:	06990f9c 			; <UNDEFINED> instruction: 0x06990f9c
    118c:	06010000 	streq	r0, [r1], -r0
    1190:	00000169 	andeq	r0, r0, r9, ror #2
    1194:	10749102 	rsbsne	r9, r4, r2, lsl #2
    1198:	00000916 	andeq	r0, r0, r6, lsl r9
    119c:	01350d01 	teqeq	r5, r1, lsl #26
    11a0:	03050000 	movweq	r0, #20480	; 0x5000
    11a4:	20002ffc 	strdcs	r2, [r0], -ip
    11a8:	00092510 	andeq	r2, r9, r0, lsl r5
    11ac:	350e0100 	strcc	r0, [lr, #-256]	; 0xffffff00
    11b0:	05000001 	streq	r0, [r0, #-1]
    11b4:	00300403 	eorseq	r0, r0, r3, lsl #8
    11b8:	036f1020 	cmneq	pc, #32
    11bc:	0f010000 	svceq	0x00010000
    11c0:	00000135 	andeq	r0, r0, r5, lsr r1
    11c4:	30000305 	andcc	r0, r0, r5, lsl #6
    11c8:	00002000 	andeq	r2, r0, r0
    11cc:	00000641 	andeq	r0, r0, r1, asr #12
    11d0:	03f10004 	mvnseq	r0, #4
    11d4:	01040000 	mrseq	r0, (UNDEF: 4)
    11d8:	00000077 	andeq	r0, r0, r7, ror r0
    11dc:	000be30c 	andeq	lr, fp, ip, lsl #6
    11e0:	0011fc00 	andseq	pc, r1, r0, lsl #24
    11e4:	00036420 	andeq	r6, r3, r0, lsr #8
    11e8:	00057a00 	andeq	r7, r5, r0, lsl #20
    11ec:	020c0200 	andeq	r0, ip, #0, 4
    11f0:	00004e05 	andeq	r4, r0, r5, lsl #28
    11f4:	02fc0300 	rscseq	r0, ip, #0, 6
    11f8:	07020000 	streq	r0, [r2, -r0]
    11fc:	0000004e 	andeq	r0, r0, lr, asr #32
    1200:	06300300 	ldrteq	r0, [r0], -r0, lsl #6
    1204:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1208:	0000004e 	andeq	r0, r0, lr, asr #32
    120c:	103a0304 	eorsne	r0, sl, r4, lsl #6
    1210:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1214:	00000055 	andeq	r0, r0, r5, asr r0
    1218:	04040008 	streq	r0, [r4], #-8
    121c:	00032007 	andeq	r2, r3, r7
    1220:	5b040500 	blpl	102628 <startup-0x1fefd9d8>
    1224:	04000000 	streq	r0, [r0], #-0
    1228:	04370801 	ldrteq	r0, [r7], #-2049	; 0xfffff7ff
    122c:	8c060000 	stchi	0, cr0, [r6], {-0}
    1230:	02000011 	andeq	r0, r0, #17
    1234:	0000210a 	andeq	r2, r0, sl, lsl #2
    1238:	00160700 	andseq	r0, r6, r0, lsl #14
    123c:	030c0000 	movweq	r0, #49152	; 0xc000
    1240:	00009e06 	andeq	r9, r0, r6, lsl #28
    1244:	050d0300 	streq	r0, [sp, #-768]	; 0xfffffd00
    1248:	07030000 	streq	r0, [r3, -r0]
    124c:	0000009e 	muleq	r0, lr, r0
    1250:	001d0300 	andseq	r0, sp, r0, lsl #6
    1254:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1258:	0000009e 	muleq	r0, lr, r0
    125c:	00120304 	andseq	r0, r2, r4, lsl #6
    1260:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    1264:	0000009e 	muleq	r0, lr, r0
    1268:	04050008 	streq	r0, [r5], #-8
    126c:	00000062 	andeq	r0, r0, r2, rrx
    1270:	000c5f06 	andeq	r5, ip, r6, lsl #30
    1274:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    1278:	07000000 	streq	r0, [r0, -r0]
    127c:	00000605 	andeq	r0, r0, r5, lsl #12
    1280:	28060424 	stmdacs	r6, {r2, r5, sl}
    1284:	03000001 	movweq	r0, #1
    1288:	000003d4 	ldrdeq	r0, [r0], -r4
    128c:	01280704 			; <UNDEFINED> instruction: 0x01280704
    1290:	03000000 	movweq	r0, #0
    1294:	00000611 	andeq	r0, r0, r1, lsl r6
    1298:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    129c:	03040000 	movweq	r0, #16384	; 0x4000
    12a0:	00000578 	andeq	r0, r0, r8, ror r5
    12a4:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    12a8:	03080000 	movweq	r0, #32768	; 0x8000
    12ac:	000005a4 	andeq	r0, r0, r4, lsr #11
    12b0:	01460c04 	cmpeq	r6, r4, lsl #24
    12b4:	030c0000 	movweq	r0, #49152	; 0xc000
    12b8:	000002f5 	strdeq	r0, [r0], -r5
    12bc:	01460d04 	cmpeq	r6, r4, lsl #26
    12c0:	03100000 	tsteq	r0, #0
    12c4:	000003e6 	andeq	r0, r0, r6, ror #7
    12c8:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    12cc:	03140000 	tsteq	r4, #0
    12d0:	00000048 	andeq	r0, r0, r8, asr #32
    12d4:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    12d8:	03180000 	tsteq	r8, #0
    12dc:	00000365 	andeq	r0, r0, r5, ror #6
    12e0:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    12e4:	031c0000 	tsteq	ip, #0
    12e8:	00000375 	andeq	r0, r0, r5, ror r3
    12ec:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    12f0:	00200000 	eoreq	r0, r0, r0
    12f4:	00a40405 	adceq	r0, r4, r5, lsl #8
    12f8:	04080000 	streq	r0, [r8], #-0
    12fc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1300:	01400900 	cmpeq	r0, r0, lsl #18
    1304:	400a0000 	andmi	r0, sl, r0
    1308:	00000001 	andeq	r0, r0, r1
    130c:	00af0405 	adceq	r0, pc, r5, lsl #8
    1310:	04050000 	streq	r0, [r5], #-0
    1314:	00000135 	andeq	r0, r0, r5, lsr r1
    1318:	00060606 	andeq	r0, r6, r6, lsl #12
    131c:	af150400 	svcge	0x00150400
    1320:	0b000000 	bleq	1328 <startup-0x1fffecd8>
    1324:	00000162 	andeq	r0, r0, r2, ror #2
    1328:	00000162 	andeq	r0, r0, r2, ror #2
    132c:	0405000c 	streq	r0, [r5], #-12
    1330:	0000014c 	andeq	r0, r0, ip, asr #2
    1334:	0004ba0d 	andeq	fp, r4, sp, lsl #20
    1338:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    133c:	0d000001 	stceq	0, cr0, [r0, #-4]
    1340:	000003ab 	andeq	r0, r0, fp, lsr #7
    1344:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    1348:	5b0b0000 	blpl	2c1350 <startup-0x1fd3ecb0>
    134c:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    1350:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1354:	0000018e 	andeq	r0, r0, lr, lsl #3
    1358:	04040063 	streq	r0, [r4], #-99	; 0xffffff9d
    135c:	00039207 	andeq	r9, r3, r7, lsl #4
    1360:	0c490f00 	mcrreq	15, 0, r0, r9, cr0
    1364:	03050000 	movweq	r0, #20480	; 0x5000
    1368:	0000017e 	andeq	r0, r0, lr, ror r1
    136c:	6b100305 	blvs	401f88 <startup-0x1fbfe078>
    1370:	b40f2000 	strlt	r2, [pc], #-0	; 1378 <startup-0x1fffec88>
    1374:	0600000a 	streq	r0, [r0], -sl
    1378:	00017e03 	andeq	r7, r1, r3, lsl #28
    137c:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
    1380:	0f20006b 	svceq	0x0020006b
    1384:	00000afc 	strdeq	r0, [r0], -ip
    1388:	017e0307 	cmneq	lr, r7, lsl #6
    138c:	03050000 	movweq	r0, #20480	; 0x5000
    1390:	20006bd8 	ldrdcs	r6, [r0], -r8
    1394:	000aa30f 	andeq	sl, sl, pc, lsl #6
    1398:	7e030800 	cdpvc	8, 0, cr0, cr3, cr0, {0}
    139c:	05000001 	streq	r0, [r0, #-1]
    13a0:	006c3c03 	rsbeq	r3, ip, r3, lsl #24
    13a4:	0c220f20 	stceq	15, cr0, [r2], #-128	; 0xffffff80
    13a8:	03090000 	movweq	r0, #36864	; 0x9000
    13ac:	0000017e 	andeq	r0, r0, lr, ror r1
    13b0:	6ca00305 	stcvs	3, cr0, [r0], #20
    13b4:	f60f2000 			; <UNDEFINED> instruction: 0xf60f2000
    13b8:	0a00000c 	beq	13f0 <startup-0x1fffec10>
    13bc:	00017e03 	andeq	r7, r1, r3, lsl #28
    13c0:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
    13c4:	0f20006d 	svceq	0x0020006d
    13c8:	00000acf 	andeq	r0, r0, pc, asr #21
    13cc:	017e030b 	cmneq	lr, fp, lsl #6
    13d0:	03050000 	movweq	r0, #20480	; 0x5000
    13d4:	20006d68 	andcs	r6, r0, r8, ror #26
    13d8:	000bbd0f 	andeq	fp, fp, pc, lsl #26
    13dc:	7e030c00 	cdpvc	12, 0, cr0, cr3, cr0, {0}
    13e0:	05000001 	streq	r0, [r0, #-1]
    13e4:	006dcc03 	rsbeq	ip, sp, r3, lsl #24
    13e8:	097e0f20 	ldmdbeq	lr!, {r5, r8, r9, sl, fp}^
    13ec:	030d0000 	movweq	r0, #53248	; 0xd000
    13f0:	0000017e 	andeq	r0, r0, lr, ror r1
    13f4:	6e300305 	cdpvs	3, 3, cr0, cr0, cr5, {0}
    13f8:	e00f2000 	and	r2, pc, r0
    13fc:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    1400:	00017e03 	andeq	r7, r1, r3, lsl #28
    1404:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
    1408:	0f20006e 	svceq	0x0020006e
    140c:	00000b64 	andeq	r0, r0, r4, ror #22
    1410:	017e030f 	cmneq	lr, pc, lsl #6
    1414:	03050000 	movweq	r0, #20480	; 0x5000
    1418:	20006ef8 	strdcs	r6, [r0], -r8
    141c:	00099a0f 	andeq	r9, r9, pc, lsl #20
    1420:	7e031000 	cdpvc	0, 0, cr1, cr3, cr0, {0}
    1424:	05000001 	streq	r0, [r0, #-1]
    1428:	006f5c03 	rsbeq	r5, pc, r3, lsl #24
    142c:	0b0d0f20 	bleq	3450b4 <startup-0x1fcbaf4c>
    1430:	03110000 	tsteq	r1, #0
    1434:	0000017e 	andeq	r0, r0, lr, ror r1
    1438:	6fc00305 	svcvs	0x00c00305
    143c:	2d0f2000 	stccs	0, cr2, [pc, #-0]	; 1444 <startup-0x1fffebbc>
    1440:	1200000b 	andne	r0, r0, #11
    1444:	00017e03 	andeq	r7, r1, r3, lsl #28
    1448:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
    144c:	0f200070 	svceq	0x00200070
    1450:	000009c4 	andeq	r0, r0, r4, asr #19
    1454:	017e0313 	cmneq	lr, r3, lsl r3
    1458:	03050000 	movweq	r0, #20480	; 0x5000
    145c:	20007088 	andcs	r7, r0, r8, lsl #1
    1460:	000bcd10 	andeq	ip, fp, r0, lsl sp
    1464:	9e150100 	muflss	f0, f5, f0
    1468:	05000000 	streq	r0, [r0, #-0]
    146c:	00342403 	eorseq	r2, r4, r3, lsl #8
    1470:	0a001020 	beq	54f8 <startup-0x1fffab08>
    1474:	16010000 	strne	r0, [r1], -r0
    1478:	0000009e 	muleq	r0, lr, r0
    147c:	33bc0305 			; <UNDEFINED> instruction: 0x33bc0305
    1480:	ea102000 	b	409488 <startup-0x1fbf6b78>
    1484:	01000009 	tsteq	r0, r9
    1488:	00009e17 	andeq	r9, r0, r7, lsl lr
    148c:	b4030500 	strlt	r0, [r3], #-1280	; 0xfffffb00
    1490:	10200034 	eorne	r0, r0, r4, lsr r0
    1494:	00000a42 	andeq	r0, r0, r2, asr #20
    1498:	009e1801 	addseq	r1, lr, r1, lsl #16
    149c:	03050000 	movweq	r0, #20480	; 0x5000
    14a0:	20003420 	andcs	r3, r0, r0, lsr #8
    14a4:	000b3d10 	andeq	r3, fp, r0, lsl sp
    14a8:	9e190100 	muflse	f0, f1, f0
    14ac:	05000000 	streq	r0, [r0, #-0]
    14b0:	0034a403 	eorseq	sl, r4, r3, lsl #8
    14b4:	0bd81020 	bleq	ff60553c <firstTime.4040+0xdf5fca4c>
    14b8:	1a010000 	bne	414c0 <startup-0x1ffbeb40>
    14bc:	0000009e 	muleq	r0, lr, r0
    14c0:	35580305 	ldrbcc	r0, [r8, #-773]	; 0xfffffcfb
    14c4:	f5102000 			; <UNDEFINED> instruction: 0xf5102000
    14c8:	01000009 	tsteq	r0, r9
    14cc:	00009e1b 	andeq	r9, r0, fp, lsl lr
    14d0:	18030500 	stmdane	r3, {r8, sl}
    14d4:	10200034 	eorne	r0, r0, r4, lsr r0
    14d8:	00000c65 	andeq	r0, r0, r5, ror #24
    14dc:	009e1c01 	addseq	r1, lr, r1, lsl #24
    14e0:	03050000 	movweq	r0, #20480	; 0x5000
    14e4:	20003440 	andcs	r3, r0, r0, asr #8
    14e8:	0009d510 	andeq	sp, r9, r0, lsl r5
    14ec:	9e1d0100 	muflse	f0, f5, f0
    14f0:	05000000 	streq	r0, [r0, #-0]
    14f4:	00346c03 	eorseq	r6, r4, r3, lsl #24
    14f8:	0ba31020 	bleq	fe8c5580 <firstTime.4040+0xde8bca90>
    14fc:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    1500:	0000009e 	muleq	r0, lr, r0
    1504:	353c0305 	ldrcc	r0, [ip, #-773]!	; 0xfffffcfb
    1508:	38102000 	ldmdacc	r0, {sp}
    150c:	0100000a 	tsteq	r0, sl
    1510:	00009e1f 	andeq	r9, r0, pc, lsl lr
    1514:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    1518:	10200034 	eorne	r0, r0, r4, lsr r0
    151c:	00000cad 	andeq	r0, r0, sp, lsr #25
    1520:	009e2001 	addseq	r2, lr, r1
    1524:	03050000 	movweq	r0, #20480	; 0x5000
    1528:	200033b8 			; <UNDEFINED> instruction: 0x200033b8
    152c:	000a1910 	andeq	r1, sl, r0, lsl r9
    1530:	9e210100 	suflss	f0, f1, f0
    1534:	05000000 	streq	r0, [r0, #-0]
    1538:	0033cc03 	eorseq	ip, r3, r3, lsl #24
    153c:	0c3f1020 	ldceq	0, cr1, [pc], #-128	; 14c4 <startup-0x1fffeb3c>
    1540:	22010000 	andcs	r0, r1, #0
    1544:	0000009e 	muleq	r0, lr, r0
    1548:	34500305 	ldrbcc	r0, [r0], #-773	; 0xfffffcfb
    154c:	7e102000 	cdpvc	0, 1, cr2, cr0, cr0, {0}
    1550:	0100000b 	tsteq	r0, fp
    1554:	00009e23 	andeq	r9, r0, r3, lsr #28
    1558:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
    155c:	10200034 	eorne	r0, r0, r4, lsr r0
    1560:	00000c7c 	andeq	r0, r0, ip, ror ip
    1564:	00622501 	rsbeq	r2, r2, r1, lsl #10
    1568:	03050000 	movweq	r0, #20480	; 0x5000
    156c:	20003434 	andcs	r3, r0, r4, lsr r4
    1570:	000a7d10 	andeq	r7, sl, r0, lsl sp
    1574:	62260100 	eorvs	r0, r6, #0, 2
    1578:	05000000 	streq	r0, [r0, #-0]
    157c:	0034a803 	eorseq	sl, r4, r3, lsl #16
    1580:	0c321020 	ldceq	0, cr1, [r2], #-128	; 0xffffff80
    1584:	27010000 	strcs	r0, [r1, -r0]
    1588:	00000062 	andeq	r0, r0, r2, rrx
    158c:	34440305 	strbcc	r0, [r4], #-773	; 0xfffffcfb
    1590:	ae102000 	cdpge	0, 1, cr2, cr0, cr0, {0}
    1594:	0100000b 	tsteq	r0, fp
    1598:	00006228 	andeq	r6, r0, r8, lsr #4
    159c:	40030500 	andmi	r0, r3, r0, lsl #10
    15a0:	10200035 	eorne	r0, r0, r5, lsr r0
    15a4:	0000096f 	andeq	r0, r0, pc, ror #18
    15a8:	00622901 	rsbeq	r2, r2, r1, lsl #18
    15ac:	03050000 	movweq	r0, #20480	; 0x5000
    15b0:	200034b8 			; <UNDEFINED> instruction: 0x200034b8
    15b4:	000a6110 	andeq	r6, sl, r0, lsl r1
    15b8:	622a0100 	eorvs	r0, sl, #0, 2
    15bc:	05000000 	streq	r0, [r0, #-0]
    15c0:	00346003 	eorseq	r6, r4, r3
    15c4:	0c8a1020 	stceq	0, cr1, [sl], {32}
    15c8:	2b010000 	blcs	415d0 <startup-0x1ffbea30>
    15cc:	00000062 	andeq	r0, r0, r2, rrx
    15d0:	34980305 	ldrcc	r0, [r8], #773	; 0x305
    15d4:	1e102000 	cdpne	0, 1, cr2, cr0, cr0, {0}
    15d8:	0100000b 	tsteq	r0, fp
    15dc:	0000622c 	andeq	r6, r0, ip, lsr #4
    15e0:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
    15e4:	10200034 	eorne	r0, r0, r4, lsr r0
    15e8:	00000b56 	andeq	r0, r0, r6, asr fp
    15ec:	00622d01 	rsbeq	r2, r2, r1, lsl #26
    15f0:	03050000 	movweq	r0, #20480	; 0x5000
    15f4:	200034e8 	andcs	r3, r0, r8, ror #9
    15f8:	000a0a10 	andeq	r0, sl, r0, lsl sl
    15fc:	622e0100 	eorvs	r0, lr, #0, 2
    1600:	05000000 	streq	r0, [r0, #-0]
    1604:	0033d003 	eorseq	sp, r3, r3
    1608:	0b471020 	bleq	11c5690 <startup-0x1ee3a970>
    160c:	2f010000 	svccs	0x00010000
    1610:	00000062 	andeq	r0, r0, r2, rrx
    1614:	34d00305 	ldrbcc	r0, [r0], #773	; 0x305
    1618:	6f102000 	svcvs	0x00102000
    161c:	0100000a 	tsteq	r0, sl
    1620:	00006230 	andeq	r6, r0, r0, lsr r2
    1624:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    1628:	10200035 	eorne	r0, r0, r5, lsr r0
    162c:	00000b94 	muleq	r0, r4, fp
    1630:	00623101 	rsbeq	r3, r2, r1, lsl #2
    1634:	03050000 	movweq	r0, #20480	; 0x5000
    1638:	2000347c 	andcs	r3, r0, ip, ror r4
    163c:	0009ab10 	andeq	sl, r9, r0, lsl fp
    1640:	62320100 	eorsvs	r0, r2, #0, 2
    1644:	05000000 	streq	r0, [r0, #-0]
    1648:	00345403 	eorseq	r5, r4, r3, lsl #8
    164c:	0a8b1020 	beq	fe2c56d4 <firstTime.4040+0xde2bcbe4>
    1650:	33010000 	movwcc	r0, #4096	; 0x1000
    1654:	00000062 	andeq	r0, r0, r2, rrx
    1658:	34700305 	ldrbtcc	r0, [r0], #-773	; 0xfffffcfb
    165c:	1a102000 	bne	409664 <startup-0x1fbf699c>
    1660:	0100000c 	tsteq	r0, ip
    1664:	00014c36 	andeq	r4, r1, r6, lsr ip
    1668:	e8030500 	stmda	r3, {r8, sl}
    166c:	10200033 	eorne	r0, r0, r3, lsr r0
    1670:	00000c5a 	andeq	r0, r0, sl, asr ip
    1674:	00a43701 	adceq	r3, r4, r1, lsl #14
    1678:	03050000 	movweq	r0, #20480	; 0x5000
    167c:	2000340c 	andcs	r3, r0, ip, lsl #8
    1680:	000ce110 	andeq	lr, ip, r0, lsl r1
    1684:	a4380100 	ldrtge	r0, [r8], #-256	; 0xffffff00
    1688:	05000000 	streq	r0, [r0, #-0]
    168c:	0033dc03 	eorseq	sp, r3, r3, lsl #24
    1690:	0af11020 	beq	ffc45718 <firstTime.4040+0xdfc3cc28>
    1694:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    1698:	000000a4 	andeq	r0, r0, r4, lsr #1
    169c:	34c40305 	strbcc	r0, [r4], #773	; 0x305
    16a0:	8f102000 	svchi	0x00102000
    16a4:	01000009 	tsteq	r0, r9
    16a8:	0000a43a 	andeq	sl, r0, sl, lsr r4
    16ac:	28030500 	stmdacs	r3, {r8, sl}
    16b0:	10200034 	eorne	r0, r0, r4, lsr r0
    16b4:	00000cb8 			; <UNDEFINED> instruction: 0x00000cb8
    16b8:	00a43b01 	adceq	r3, r4, r1, lsl #22
    16bc:	03050000 	movweq	r0, #20480	; 0x5000
    16c0:	20003488 	andcs	r3, r0, r8, lsl #9
    16c4:	000ac410 	andeq	ip, sl, r0, lsl r4
    16c8:	a43c0100 	ldrtge	r0, [ip], #-256	; 0xffffff00
    16cc:	05000000 	streq	r0, [r0, #-0]
    16d0:	0033c003 	eorseq	ip, r3, r3
    16d4:	00a40b20 	adceq	r0, r4, r0, lsr #22
    16d8:	05190000 	ldreq	r0, [r9, #-0]
    16dc:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    16e0:	05000001 	streq	r0, [r0, #-1]
    16e4:	0b891000 	bleq	fe2456ec <firstTime.4040+0xde23cbfc>
    16e8:	3f010000 	svccc	0x00010000
    16ec:	00000509 	andeq	r0, r0, r9, lsl #10
    16f0:	34f40305 	ldrbtcc	r0, [r4], #773	; 0x305
    16f4:	10112000 	andsne	r2, r1, r0
    16f8:	0100000c 	tsteq	r0, ip
    16fc:	00140876 	andseq	r0, r4, r6, ror r8
    1700:	00015820 	andeq	r5, r1, r0, lsr #16
    1704:	5f9c0100 	svcpl	0x009c0100
    1708:	12000005 	andne	r0, r0, #5
    170c:	00000c1a 	andeq	r0, r0, sl, lsl ip
    1710:	01627601 	cmneq	r2, r1, lsl #12
    1714:	91020000 	mrsls	r0, (UNDEF: 2)
    1718:	08200f6c 	stmdaeq	r0!, {r2, r3, r5, r6, r8, r9, sl, fp}
    171c:	77010000 	strvc	r0, [r1, -r0]
    1720:	0000012e 	andeq	r0, r0, lr, lsr #2
    1724:	70ec0305 	rscvc	r0, ip, r5, lsl #6
    1728:	13002000 	movwne	r2, #0
    172c:	0000040d 	andeq	r0, r0, sp, lsl #8
    1730:	11fc4001 	mvnsne	r4, r1
    1734:	020c2000 	andeq	r2, ip, #0
    1738:	9c010000 	stcls	0, cr0, [r1], {-0}
    173c:	000c990f 	andeq	r9, ip, pc, lsl #18
    1740:	9e420100 	dvflss	f0, f2, f0
    1744:	02000000 	andeq	r0, r0, #0
    1748:	a30f7491 	movwge	r7, #62609	; 0xf491
    174c:	0100000c 	tsteq	r0, ip
    1750:	00009e45 	andeq	r9, r0, r5, asr #28
    1754:	70910200 	addsvc	r0, r1, r0, lsl #4
    1758:	000a990f 	andeq	r9, sl, pc, lsl #18
    175c:	9e480100 	dvflse	f0, f0, f0
    1760:	02000000 	andeq	r0, r0, #0
    1764:	ba0f6c91 	blt	3dc9b0 <startup-0x1fc23650>
    1768:	01000009 	tsteq	r0, r9
    176c:	00009e4c 	andeq	r9, r0, ip, asr #28
    1770:	68910200 	ldmvs	r1, {r9}
    1774:	000cc30f 	andeq	ip, ip, pc, lsl #6
    1778:	9e4f0100 	dvflse	f0, f7, f0
    177c:	02000000 	andeq	r0, r0, #0
    1780:	570f6491 			; <UNDEFINED> instruction: 0x570f6491
    1784:	0100000a 	tsteq	r0, sl
    1788:	00009e52 	andeq	r9, r0, r2, asr lr
    178c:	60910200 	addsvs	r0, r1, r0, lsl #4
    1790:	000c6f0f 	andeq	r6, ip, pc, lsl #30
    1794:	9e570100 	rdflss	f0, f7, f0
    1798:	02000000 	andeq	r0, r0, #0
    179c:	cd0f5c91 	stcgt	12, cr5, [pc, #-580]	; 1560 <startup-0x1fffeaa0>
    17a0:	0100000c 	tsteq	r0, ip
    17a4:	00009e5a 	andeq	r9, r0, sl, asr lr
    17a8:	58910200 	ldmpl	r1, {r9}
    17ac:	000cd70f 	andeq	sp, ip, pc, lsl #14
    17b0:	9e5d0100 	rdflse	f0, f5, f0
    17b4:	02000000 	andeq	r0, r0, #0
    17b8:	e00f5491 	mul	pc, r1, r4	; <UNPREDICTABLE>
    17bc:	01000009 	tsteq	r0, r9
    17c0:	00009e61 	andeq	r9, r0, r1, ror #28
    17c4:	50910200 	addspl	r0, r1, r0, lsl #4
    17c8:	000a240f 	andeq	r2, sl, pc, lsl #8
    17cc:	9e640100 	powlss	f0, f4, f0
    17d0:	02000000 	andeq	r0, r0, #0
    17d4:	2e0f4c91 	mcrcs	12, 0, r4, cr15, cr1, {4}
    17d8:	0100000a 	tsteq	r0, sl
    17dc:	00009e67 	andeq	r9, r0, r7, ror #28
    17e0:	48910200 	ldmmi	r1, {r9}
    17e4:	000cec0f 	andeq	lr, ip, pc, lsl #24
    17e8:	9e6b0100 	powlse	f0, f3, f0
    17ec:	02000000 	andeq	r0, r0, #0
    17f0:	740f4491 	strvc	r4, [pc], #-1169	; 17f8 <startup-0x1fffe808>
    17f4:	0100000b 	tsteq	r0, fp
    17f8:	00009e6e 	andeq	r9, r0, lr, ror #28
    17fc:	40910200 	addsmi	r0, r1, r0, lsl #4
    1800:	000a4d0f 	andeq	r4, sl, pc, lsl #26
    1804:	9e710100 	rpwlss	f0, f1, f0
    1808:	03000000 	movweq	r0, #0
    180c:	007fbc91 			; <UNDEFINED> instruction: 0x007fbc91
    1810:	00049800 	andeq	r9, r4, r0, lsl #16
    1814:	f1000400 			; <UNDEFINED> instruction: 0xf1000400
    1818:	04000004 	streq	r0, [r0], #-4
    181c:	00007701 	andeq	r7, r0, r1, lsl #14
    1820:	0eba0c00 	cdpeq	12, 11, cr0, cr10, cr0, {0}
    1824:	15600000 	strbne	r0, [r0, #-0]!
    1828:	02382000 	eorseq	r2, r8, #0
    182c:	075b0000 	ldrbeq	r0, [fp, -r0]
    1830:	0c020000 	stceq	0, cr0, [r2], {-0}
    1834:	004e0502 	subeq	r0, lr, r2, lsl #10
    1838:	fc030000 	stc2	0, cr0, [r3], {-0}
    183c:	02000002 	andeq	r0, r0, #2
    1840:	00004e07 	andeq	r4, r0, r7, lsl #28
    1844:	30030000 	andcc	r0, r3, r0
    1848:	02000006 	andeq	r0, r0, #6
    184c:	00004e08 	andeq	r4, r0, r8, lsl #28
    1850:	3a030400 	bcc	c2858 <startup-0x1ff3d7a8>
    1854:	02000010 	andeq	r0, r0, #16
    1858:	00005509 	andeq	r5, r0, r9, lsl #10
    185c:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    1860:	03200704 			; <UNDEFINED> instruction: 0x03200704
    1864:	04050000 	streq	r0, [r5], #-0
    1868:	0000005b 	andeq	r0, r0, fp, asr r0
    186c:	37080104 	strcc	r0, [r8, -r4, lsl #2]
    1870:	06000004 	streq	r0, [r0], -r4
    1874:	0000118c 	andeq	r1, r0, ip, lsl #3
    1878:	00210a02 	eoreq	r0, r1, r2, lsl #20
    187c:	16070000 	strne	r0, [r7], -r0
    1880:	0c000000 	stceq	0, cr0, [r0], {-0}
    1884:	009e0603 	addseq	r0, lr, r3, lsl #12
    1888:	0d030000 	stceq	0, cr0, [r3, #-0]
    188c:	03000005 	movweq	r0, #5
    1890:	00009e07 	andeq	r9, r0, r7, lsl #28
    1894:	1d030000 	stcne	0, cr0, [r3, #-0]
    1898:	03000000 	movweq	r0, #0
    189c:	00009e08 	andeq	r9, r0, r8, lsl #28
    18a0:	12030400 	andne	r0, r3, #0, 8
    18a4:	03000000 	movweq	r0, #0
    18a8:	00009e09 	andeq	r9, r0, r9, lsl #28
    18ac:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    18b0:	00006204 	andeq	r6, r0, r4, lsl #4
    18b4:	0c5f0600 	mrrceq	6, 0, r0, pc, cr0	; <UNPREDICTABLE>
    18b8:	0a030000 	beq	c18c0 <startup-0x1ff3e740>
    18bc:	0000006d 	andeq	r0, r0, sp, rrx
    18c0:	00060507 	andeq	r0, r6, r7, lsl #10
    18c4:	06042400 	streq	r2, [r4], -r0, lsl #8
    18c8:	00000128 	andeq	r0, r0, r8, lsr #2
    18cc:	0003d403 	andeq	sp, r3, r3, lsl #8
    18d0:	28070400 	stmdacs	r7, {sl}
    18d4:	00000001 	andeq	r0, r0, r1
    18d8:	00061103 	andeq	r1, r6, r3, lsl #2
    18dc:	2e080400 	cfcpyscs	mvf0, mvf8
    18e0:	04000001 	streq	r0, [r0], #-1
    18e4:	00057803 	andeq	r7, r5, r3, lsl #16
    18e8:	2e090400 	cfcpyscs	mvf0, mvf9
    18ec:	08000001 	stmdaeq	r0, {r0}
    18f0:	0005a403 	andeq	sl, r5, r3, lsl #8
    18f4:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    18f8:	0c000001 	stceq	0, cr0, [r0], {1}
    18fc:	0002f503 	andeq	pc, r2, r3, lsl #10
    1900:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    1904:	10000001 	andne	r0, r0, r1
    1908:	0003e603 	andeq	lr, r3, r3, lsl #12
    190c:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    1910:	14000001 	strne	r0, [r0], #-1
    1914:	00004803 	andeq	r4, r0, r3, lsl #16
    1918:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    191c:	18000001 	stmdane	r0, {r0}
    1920:	00036503 	andeq	r6, r3, r3, lsl #10
    1924:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    1928:	1c000001 	stcne	0, cr0, [r0], {1}
    192c:	00037503 	andeq	r7, r3, r3, lsl #10
    1930:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    1934:	20000001 	andcs	r0, r0, r1
    1938:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    193c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1940:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1944:	40090074 	andmi	r0, r9, r4, ror r0
    1948:	0a000001 	beq	1954 <startup-0x1fffe6ac>
    194c:	00000140 	andeq	r0, r0, r0, asr #2
    1950:	af040500 	svcge	0x00040500
    1954:	05000000 	streq	r0, [r0, #-0]
    1958:	00013504 	andeq	r3, r1, r4, lsl #10
    195c:	06060600 	streq	r0, [r6], -r0, lsl #12
    1960:	15040000 	strne	r0, [r4, #-0]
    1964:	000000af 	andeq	r0, r0, pc, lsr #1
    1968:	0001620b 	andeq	r6, r1, fp, lsl #4
    196c:	00016200 	andeq	r6, r1, r0, lsl #4
    1970:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    1974:	00014c04 	andeq	r4, r1, r4, lsl #24
    1978:	04ba0d00 	ldrteq	r0, [sl], #3328	; 0xd00
    197c:	1c040000 	stcne	0, cr0, [r4], {-0}
    1980:	00000157 	andeq	r0, r0, r7, asr r1
    1984:	0003ab0d 	andeq	sl, r3, sp, lsl #22
    1988:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    198c:	0b000001 	bleq	1998 <startup-0x1fffe668>
    1990:	0000005b 	andeq	r0, r0, fp, asr r0
    1994:	0000018e 	andeq	r0, r0, lr, lsl #3
    1998:	00018e0e 	andeq	r8, r1, lr, lsl #28
    199c:	04003500 	streq	r3, [r0], #-1280	; 0xfffffb00
    19a0:	03920704 	orrseq	r0, r2, #4, 14	; 0x100000
    19a4:	360f0000 	strcc	r0, [pc], -r0
    19a8:	0500000d 	streq	r0, [r0, #-13]
    19ac:	00017e03 	andeq	r7, r1, r3, lsl #28
    19b0:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
    19b4:	0f200070 	svceq	0x00200070
    19b8:	00000ee8 	andeq	r0, r0, r8, ror #29
    19bc:	017e0306 	cmneq	lr, r6, lsl #6
    19c0:	03050000 	movweq	r0, #20480	; 0x5000
    19c4:	20007128 	andcs	r7, r0, r8, lsr #2
    19c8:	000e400f 	andeq	r4, lr, pc
    19cc:	7e030700 	cdpvc	7, 0, cr0, cr3, cr0, {0}
    19d0:	05000001 	streq	r0, [r0, #-1]
    19d4:	00716003 	rsbseq	r6, r1, r3
    19d8:	0dd90f20 	ldcleq	15, cr0, [r9, #128]	; 0x80
    19dc:	03080000 	movweq	r0, #32768	; 0x8000
    19e0:	0000017e 	andeq	r0, r0, lr, ror r1
    19e4:	71980305 	orrsvc	r0, r8, r5, lsl #6
    19e8:	520f2000 	andpl	r2, pc, #0
    19ec:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    19f0:	00017e03 	andeq	r7, r1, r3, lsl #28
    19f4:	d0030500 	andle	r0, r3, r0, lsl #10
    19f8:	0f200071 	svceq	0x00200071
    19fc:	00000d84 	andeq	r0, r0, r4, lsl #27
    1a00:	017e030a 	cmneq	lr, sl, lsl #6
    1a04:	03050000 	movweq	r0, #20480	; 0x5000
    1a08:	20007208 	andcs	r7, r0, r8, lsl #4
    1a0c:	000ef90f 	andeq	pc, lr, pc, lsl #18
    1a10:	7e030b00 	vmlavc.f64	d0, d3, d0
    1a14:	05000001 	streq	r0, [r0, #-1]
    1a18:	00724003 	rsbseq	r4, r2, r3
    1a1c:	0dae0f20 	stceq	15, cr0, [lr, #128]!	; 0x80
    1a20:	030c0000 	movweq	r0, #49152	; 0xc000
    1a24:	0000017e 	andeq	r0, r0, lr, ror r1
    1a28:	72780305 	rsbsvc	r0, r8, #335544320	; 0x14000000
    1a2c:	eb0f2000 	bl	3c9a34 <startup-0x1fc365cc>
    1a30:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    1a34:	00017e03 	andeq	r7, r1, r3, lsl #28
    1a38:	b0030500 	andlt	r0, r3, r0, lsl #10
    1a3c:	10200072 	eorne	r0, r0, r2, ror r0
    1a40:	00000e87 	andeq	r0, r0, r7, lsl #29
    1a44:	009e0e01 	addseq	r0, lr, r1, lsl #28
    1a48:	03050000 	movweq	r0, #20480	; 0x5000
    1a4c:	20003630 	andcs	r3, r0, r0, lsr r6
    1a50:	000d1310 	andeq	r1, sp, r0, lsl r3
    1a54:	9e0f0100 	adflse	f0, f7, f0
    1a58:	05000000 	streq	r0, [r0, #-0]
    1a5c:	00355c03 	eorseq	r5, r5, r3, lsl #24
    1a60:	0d681020 	stcleq	0, cr1, [r8, #-128]!	; 0xffffff80
    1a64:	10010000 	andne	r0, r1, r0
    1a68:	0000009e 	muleq	r0, lr, r0
    1a6c:	365c0305 	ldrbcc	r0, [ip], -r5, lsl #6
    1a70:	07102000 	ldreq	r2, [r0, -r0]
    1a74:	0100000d 	tsteq	r0, sp
    1a78:	00009e11 	andeq	r9, r0, r1, lsl lr
    1a7c:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
    1a80:	10200036 	eorne	r0, r0, r6, lsr r0
    1a84:	00000e08 	andeq	r0, r0, r8, lsl #28
    1a88:	009e1201 	addseq	r1, lr, r1, lsl #4
    1a8c:	03050000 	movweq	r0, #20480	; 0x5000
    1a90:	200035d0 	ldrdcs	r3, [r0], -r0
    1a94:	000e6f10 	andeq	r6, lr, r0, lsl pc
    1a98:	9e130100 	muflss	f0, f3, f0
    1a9c:	05000000 	streq	r0, [r0, #-0]
    1aa0:	00356003 	eorseq	r6, r5, r3
    1aa4:	0da21020 	stceq	0, cr1, [r2, #128]!	; 0x80
    1aa8:	14010000 	strne	r0, [r1], #-0
    1aac:	0000009e 	muleq	r0, lr, r0
    1ab0:	35f80305 	ldrbcc	r0, [r8, #773]!	; 0x305
    1ab4:	fd102000 	ldc2	0, cr2, [r0, #-0]
    1ab8:	0100000d 	tsteq	r0, sp
    1abc:	00009e15 	andeq	r9, r0, r5, lsl lr
    1ac0:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    1ac4:	10200036 	eorne	r0, r0, r6, lsr r0
    1ac8:	00000e93 	muleq	r0, r3, lr
    1acc:	009e1601 	addseq	r1, lr, r1, lsl #12
    1ad0:	03050000 	movweq	r0, #20480	; 0x5000
    1ad4:	20003620 	andcs	r3, r0, r0, lsr #12
    1ad8:	000dca10 	andeq	ip, sp, r0, lsl sl
    1adc:	62180100 	andsvs	r0, r8, #0, 2
    1ae0:	05000000 	streq	r0, [r0, #-0]
    1ae4:	0035ac03 	eorseq	sl, r5, r3, lsl #24
    1ae8:	0d1e1020 	ldceq	0, cr1, [lr, #-128]	; 0xffffff80
    1aec:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    1af0:	00000062 	andeq	r0, r0, r2, rrx
    1af4:	36440305 	strbcc	r0, [r4], -r5, lsl #6
    1af8:	13102000 	tstne	r0, #0
    1afc:	0100000e 	tsteq	r0, lr
    1b00:	0000621a 	andeq	r6, r0, sl, lsl r2
    1b04:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
    1b08:	10200035 	eorne	r0, r0, r5, lsr r0
    1b0c:	00000d74 	andeq	r0, r0, r4, ror sp
    1b10:	00621b01 	rsbeq	r1, r2, r1, lsl #22
    1b14:	03050000 	movweq	r0, #20480	; 0x5000
    1b18:	200035a0 	andcs	r3, r0, r0, lsr #11
    1b1c:	000d5810 	andeq	r5, sp, r0, lsl r8
    1b20:	621c0100 	andsvs	r0, ip, #0, 2
    1b24:	05000000 	streq	r0, [r0, #-0]
    1b28:	00365003 	eorseq	r5, r6, r3
    1b2c:	0e211020 	cdpeq	0, 2, cr1, cr1, cr0, {1}
    1b30:	1d010000 	stcne	0, cr0, [r1, #-0]
    1b34:	00000062 	andeq	r0, r0, r2, rrx
    1b38:	35ec0305 	strbcc	r0, [ip, #773]!	; 0x305
    1b3c:	30102000 	andscc	r2, r0, r0
    1b40:	0100000e 	tsteq	r0, lr
    1b44:	0000621e 	andeq	r6, r0, lr, lsl r2
    1b48:	e0030500 	and	r0, r3, r0, lsl #10
    1b4c:	10200035 	eorne	r0, r0, r5, lsr r0
    1b50:	00000d48 	andeq	r0, r0, r8, asr #26
    1b54:	00621f01 	rsbeq	r1, r2, r1, lsl #30
    1b58:	03050000 	movweq	r0, #20480	; 0x5000
    1b5c:	200035b8 			; <UNDEFINED> instruction: 0x200035b8
    1b60:	000eab10 	andeq	sl, lr, r0, lsl fp
    1b64:	62200100 	eorvs	r0, r0, #0, 2
    1b68:	05000000 	streq	r0, [r0, #-0]
    1b6c:	00362403 	eorseq	r2, r6, r3, lsl #8
    1b70:	0d2d1020 	stceq	0, cr1, [sp, #-128]!	; 0xffffff80
    1b74:	23010000 	movwcs	r0, #4096	; 0x1000
    1b78:	0000014c 	andeq	r0, r0, ip, asr #2
    1b7c:	35fc0305 	ldrbcc	r0, [ip, #773]!	; 0x305
    1b80:	7b102000 	blvc	409b88 <startup-0x1fbf6478>
    1b84:	0100000e 	tsteq	r0, lr
    1b88:	0000a424 	andeq	sl, r0, r4, lsr #8
    1b8c:	38030500 	stmdacc	r3, {r8, sl}
    1b90:	10200036 	eorne	r0, r0, r6, lsr r0
    1b94:	00000f0b 	andeq	r0, r0, fp, lsl #30
    1b98:	00a42501 	adceq	r2, r4, r1, lsl #10
    1b9c:	03050000 	movweq	r0, #20480	; 0x5000
    1ba0:	20003594 	mulcs	r0, r4, r5
    1ba4:	000d9610 	andeq	r9, sp, r0, lsl r6
    1ba8:	a4260100 	strtge	r0, [r6], #-256	; 0xffffff00
    1bac:	05000000 	streq	r0, [r0, #-0]
    1bb0:	00366003 	eorseq	r6, r6, r3
    1bb4:	0e631020 	cdpeq	0, 6, cr1, cr3, cr0, {1}
    1bb8:	27010000 	strcs	r0, [r1, -r0]
    1bbc:	000000a4 	andeq	r0, r0, r4, lsr #1
    1bc0:	35c40305 	strbcc	r0, [r4, #773]	; 0x305
    1bc4:	a40b2000 	strge	r2, [fp], #-0
    1bc8:	c5000000 	strgt	r0, [r0, #-0]
    1bcc:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    1bd0:	0000018e 	andeq	r0, r0, lr, lsl #3
    1bd4:	9f100003 	svcls	0x00100003
    1bd8:	0100000e 	tsteq	r0, lr
    1bdc:	0003b528 	andeq	fp, r3, r8, lsr #10
    1be0:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
    1be4:	11200035 			; <UNDEFINED> instruction: 0x11200035
    1be8:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    1bec:	16a04c01 	strtne	r4, [r0], r1, lsl #24
    1bf0:	00f82000 	rscseq	r2, r8, r0
    1bf4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bf8:	0000040b 	andeq	r0, r0, fp, lsl #8
    1bfc:	000d2d12 	andeq	r2, sp, r2, lsl sp
    1c00:	624c0100 	subvs	r0, ip, #0, 2
    1c04:	02000001 	andeq	r0, r0, #1
    1c08:	200f6c91 	mulcs	pc, r1, ip	; <UNPREDICTABLE>
    1c0c:	01000008 	tsteq	r0, r8
    1c10:	00012e4d 	andeq	r2, r1, sp, asr #28
    1c14:	e8030500 	stmda	r3, {r8, sl}
    1c18:	00200072 	eoreq	r0, r0, r2, ror r0
    1c1c:	00040d13 	andeq	r0, r4, r3, lsl sp
    1c20:	60290100 	eorvs	r0, r9, r0, lsl #2
    1c24:	40200015 	eormi	r0, r0, r5, lsl r0
    1c28:	01000001 	tsteq	r0, r1
    1c2c:	0c990f9c 	ldceq	15, cr0, [r9], {156}	; 0x9c
    1c30:	2b010000 	blcs	41c38 <startup-0x1ffbe3c8>
    1c34:	0000009e 	muleq	r0, lr, r0
    1c38:	0f749102 	svceq	0x00749102
    1c3c:	00000ca3 	andeq	r0, r0, r3, lsr #25
    1c40:	009e2e01 	addseq	r2, lr, r1, lsl #28
    1c44:	91020000 	mrsls	r0, (UNDEF: 2)
    1c48:	0a990f70 	beq	fe645a10 <firstTime.4040+0xde63cf20>
    1c4c:	31010000 	mrscc	r0, (UNDEF: 1)
    1c50:	0000009e 	muleq	r0, lr, r0
    1c54:	0f6c9102 	svceq	0x006c9102
    1c58:	000009ba 			; <UNDEFINED> instruction: 0x000009ba
    1c5c:	009e3501 	addseq	r3, lr, r1, lsl #10
    1c60:	91020000 	mrsls	r0, (UNDEF: 2)
    1c64:	0cc30f68 	stcleq	15, cr0, [r3], {104}	; 0x68
    1c68:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    1c6c:	0000009e 	muleq	r0, lr, r0
    1c70:	0f649102 	svceq	0x00649102
    1c74:	00000a57 	andeq	r0, r0, r7, asr sl
    1c78:	009e3b01 	addseq	r3, lr, r1, lsl #22
    1c7c:	91020000 	mrsls	r0, (UNDEF: 2)
    1c80:	0c6f0f60 	stcleq	15, cr0, [pc], #-384	; 1b08 <startup-0x1fffe4f8>
    1c84:	40010000 	andmi	r0, r1, r0
    1c88:	0000009e 	muleq	r0, lr, r0
    1c8c:	0f5c9102 	svceq	0x005c9102
    1c90:	00000ccd 	andeq	r0, r0, sp, asr #25
    1c94:	009e4301 	addseq	r4, lr, r1, lsl #6
    1c98:	91020000 	mrsls	r0, (UNDEF: 2)
    1c9c:	0cd70f58 	ldcleq	15, cr0, [r7], {88}	; 0x58
    1ca0:	46010000 	strmi	r0, [r1], -r0
    1ca4:	0000009e 	muleq	r0, lr, r0
    1ca8:	00549102 	subseq	r9, r4, r2, lsl #2
    1cac:	00089f00 	andeq	r9, r8, r0, lsl #30
    1cb0:	f1000400 			; <UNDEFINED> instruction: 0xf1000400
    1cb4:	04000005 	streq	r0, [r0], #-5
    1cb8:	00007701 	andeq	r7, r0, r1, lsl #14
    1cbc:	0ffc0c00 	svceq	0x00fc0c00
    1cc0:	17980000 	ldrne	r0, [r8, r0]
    1cc4:	0e442000 	cdpeq	0, 4, cr2, cr4, cr0, {0}
    1cc8:	08c00000 	stmiaeq	r0, {}^	; <UNPREDICTABLE>
    1ccc:	0c020000 	stceq	0, cr0, [r2], {-0}
    1cd0:	004e0502 	subeq	r0, lr, r2, lsl #10
    1cd4:	fc030000 	stc2	0, cr0, [r3], {-0}
    1cd8:	02000002 	andeq	r0, r0, #2
    1cdc:	00004e07 	andeq	r4, r0, r7, lsl #28
    1ce0:	30030000 	andcc	r0, r3, r0
    1ce4:	02000006 	andeq	r0, r0, #6
    1ce8:	00004e08 	andeq	r4, r0, r8, lsl #28
    1cec:	3a030400 	bcc	c2cf4 <startup-0x1ff3d30c>
    1cf0:	02000010 	andeq	r0, r0, #16
    1cf4:	00005509 	andeq	r5, r0, r9, lsl #10
    1cf8:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    1cfc:	03200704 			; <UNDEFINED> instruction: 0x03200704
    1d00:	04050000 	streq	r0, [r5], #-0
    1d04:	0000005b 	andeq	r0, r0, fp, asr r0
    1d08:	37080104 	strcc	r0, [r8, -r4, lsl #2]
    1d0c:	06000004 	streq	r0, [r0], -r4
    1d10:	0000118c 	andeq	r1, r0, ip, lsl #3
    1d14:	00210a02 	eoreq	r0, r1, r2, lsl #20
    1d18:	16070000 	strne	r0, [r7], -r0
    1d1c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1d20:	009e0603 	addseq	r0, lr, r3, lsl #12
    1d24:	0d030000 	stceq	0, cr0, [r3, #-0]
    1d28:	03000005 	movweq	r0, #5
    1d2c:	00009e07 	andeq	r9, r0, r7, lsl #28
    1d30:	1d030000 	stcne	0, cr0, [r3, #-0]
    1d34:	03000000 	movweq	r0, #0
    1d38:	00009e08 	andeq	r9, r0, r8, lsl #28
    1d3c:	12030400 	andne	r0, r3, #0, 8
    1d40:	03000000 	movweq	r0, #0
    1d44:	00009e09 	andeq	r9, r0, r9, lsl #28
    1d48:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    1d4c:	00006204 	andeq	r6, r0, r4, lsl #4
    1d50:	0c5f0600 	mrrceq	6, 0, r0, pc, cr0	; <UNPREDICTABLE>
    1d54:	0a030000 	beq	c1d5c <startup-0x1ff3e2a4>
    1d58:	0000006d 	andeq	r0, r0, sp, rrx
    1d5c:	00060507 	andeq	r0, r6, r7, lsl #10
    1d60:	06042400 	streq	r2, [r4], -r0, lsl #8
    1d64:	00000128 	andeq	r0, r0, r8, lsr #2
    1d68:	0003d403 	andeq	sp, r3, r3, lsl #8
    1d6c:	28070400 	stmdacs	r7, {sl}
    1d70:	00000001 	andeq	r0, r0, r1
    1d74:	00061103 	andeq	r1, r6, r3, lsl #2
    1d78:	2e080400 	cfcpyscs	mvf0, mvf8
    1d7c:	04000001 	streq	r0, [r0], #-1
    1d80:	00057803 	andeq	r7, r5, r3, lsl #16
    1d84:	2e090400 	cfcpyscs	mvf0, mvf9
    1d88:	08000001 	stmdaeq	r0, {r0}
    1d8c:	0005a403 	andeq	sl, r5, r3, lsl #8
    1d90:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    1d94:	0c000001 	stceq	0, cr0, [r0], {1}
    1d98:	0002f503 	andeq	pc, r2, r3, lsl #10
    1d9c:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    1da0:	10000001 	andne	r0, r0, r1
    1da4:	0003e603 	andeq	lr, r3, r3, lsl #12
    1da8:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    1dac:	14000001 	strne	r0, [r0], #-1
    1db0:	00004803 	andeq	r4, r0, r3, lsl #16
    1db4:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    1db8:	18000001 	stmdane	r0, {r0}
    1dbc:	00036503 	andeq	r6, r3, r3, lsl #10
    1dc0:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    1dc4:	1c000001 	stcne	0, cr0, [r0], {1}
    1dc8:	00037503 	andeq	r7, r3, r3, lsl #10
    1dcc:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    1dd0:	20000001 	andcs	r0, r0, r1
    1dd4:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    1dd8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1ddc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1de0:	40090074 	andmi	r0, r9, r4, ror r0
    1de4:	0a000001 	beq	1df0 <startup-0x1fffe210>
    1de8:	00000140 	andeq	r0, r0, r0, asr #2
    1dec:	af040500 	svcge	0x00040500
    1df0:	05000000 	streq	r0, [r0, #-0]
    1df4:	00013504 	andeq	r3, r1, r4, lsl #10
    1df8:	06060600 	streq	r0, [r6], -r0, lsl #12
    1dfc:	15040000 	strne	r0, [r4, #-0]
    1e00:	000000af 	andeq	r0, r0, pc, lsr #1
    1e04:	0001620b 	andeq	r6, r1, fp, lsl #4
    1e08:	00016200 	andeq	r6, r1, r0, lsl #4
    1e0c:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    1e10:	00014c04 	andeq	r4, r1, r4, lsl #24
    1e14:	04ba0d00 	ldrteq	r0, [sl], #3328	; 0xd00
    1e18:	1c040000 	stcne	0, cr0, [r4], {-0}
    1e1c:	00000157 	andeq	r0, r0, r7, asr r1
    1e20:	0003ab0d 	andeq	sl, r3, sp, lsl #22
    1e24:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    1e28:	06000001 	streq	r0, [r0], -r1
    1e2c:	000005cf 	andeq	r0, r0, pc, asr #11
    1e30:	005b2405 	subseq	r2, fp, r5, lsl #8
    1e34:	7e0b0000 	cdpvc	0, 0, cr0, cr11, cr0, {0}
    1e38:	9a000001 	bls	1e44 <startup-0x1fffe1bc>
    1e3c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1e40:	0000019a 	muleq	r0, sl, r1
    1e44:	040003ff 	streq	r0, [r0], #-1023	; 0xfffffc01
    1e48:	03920704 	orrseq	r0, r2, #4, 14	; 0x100000
    1e4c:	700d0000 	andvc	r0, sp, r0
    1e50:	0500000f 	streq	r0, [r0, #-15]
    1e54:	0001892b 	andeq	r8, r1, fp, lsr #18
    1e58:	02180d00 	andseq	r0, r8, #0, 26
    1e5c:	2c050000 	stccs	0, cr0, [r5], {-0}
    1e60:	00000189 	andeq	r0, r0, r9, lsl #3
    1e64:	0004450d 	andeq	r4, r4, sp, lsl #10
    1e68:	892d0500 	pushhi	{r8, sl}
    1e6c:	0d000001 	stceq	0, cr0, [r0, #-4]
    1e70:	00000302 	andeq	r0, r0, r2, lsl #6
    1e74:	01892e05 	orreq	r2, r9, r5, lsl #28
    1e78:	920d0000 	andls	r0, sp, #0
    1e7c:	05000002 	streq	r0, [r0, #-2]
    1e80:	0001892f 	andeq	r8, r1, pc, lsr #18
    1e84:	05e70d00 	strbeq	r0, [r7, #3328]!	; 0xd00
    1e88:	30050000 	andcc	r0, r5, r0
    1e8c:	00000189 	andeq	r0, r0, r9, lsl #3
    1e90:	0005d70d 	andeq	sp, r5, sp, lsl #14
    1e94:	89310500 	ldmdbhi	r1!, {r8, sl}
    1e98:	0f000001 	svceq	0x00000001
    1e9c:	000001ac 	andeq	r0, r0, ip, lsr #3
    1ea0:	03052b01 	movweq	r2, #23297	; 0x5b01
    1ea4:	20004670 	andcs	r4, r0, r0, ror r6
    1ea8:	0001b70f 	andeq	fp, r1, pc, lsl #14
    1eac:	052c0100 	streq	r0, [ip, #-256]!	; 0xffffff00
    1eb0:	003a7003 	eorseq	r7, sl, r3
    1eb4:	01c20f20 	biceq	r0, r2, r0, lsr #30
    1eb8:	2d010000 	stccs	0, cr0, [r1, #-0]
    1ebc:	42700305 	rsbsmi	r0, r0, #335544320	; 0x14000000
    1ec0:	cd0f2000 	stcgt	0, cr2, [pc, #-0]	; 1ec8 <startup-0x1fffe138>
    1ec4:	01000001 	tsteq	r0, r1
    1ec8:	7003052e 	andvc	r0, r3, lr, lsr #10
    1ecc:	0f20004a 	svceq	0x0020004a
    1ed0:	000001a1 	andeq	r0, r0, r1, lsr #3
    1ed4:	03052f01 	movweq	r2, #24321	; 0x5f01
    1ed8:	20003e70 	andcs	r3, r0, r0, ror lr
    1edc:	0001d810 	andeq	sp, r1, r0, lsl r8
    1ee0:	03050100 	movweq	r0, #20736	; 0x5100
    1ee4:	20003670 	andcs	r3, r0, r0, ror r6
    1ee8:	0001e310 	andeq	lr, r1, r0, lsl r3
    1eec:	03050100 	movweq	r0, #20736	; 0x5100
    1ef0:	20004e70 	andcs	r4, r0, r0, ror lr
    1ef4:	000fa611 	andeq	sl, pc, r1, lsl r6	; <UNPREDICTABLE>
    1ef8:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    1efc:	20002572 	andcs	r2, r0, r2, ror r5
    1f00:	0000006a 	andeq	r0, r0, sl, rrx
    1f04:	026d9c01 	rsbeq	r9, sp, #256	; 0x100
    1f08:	8d120000 	ldchi	0, cr0, [r2, #-0]
    1f0c:	01000010 	tsteq	r0, r0, lsl r0
    1f10:	012e01a8 	smulwbeq	lr, r8, r1
    1f14:	91020000 	mrsls	r0, (UNDEF: 2)
    1f18:	37110074 			; <UNDEFINED> instruction: 0x37110074
    1f1c:	0100000f 	tsteq	r0, pc
    1f20:	24f001a0 	ldrbtcs	r0, [r0], #416	; 0x1a0
    1f24:	00822000 	addeq	r2, r2, r0
    1f28:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f2c:	000002a2 	andeq	r0, r0, r2, lsr #5
    1f30:	000f8112 	andeq	r8, pc, r2, lsl r1	; <UNPREDICTABLE>
    1f34:	01a00100 	lsleq	r0, r0, #2
    1f38:	00000162 	andeq	r0, r0, r2, ror #2
    1f3c:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    1f40:	000003ee 	andeq	r0, r0, lr, ror #7
    1f44:	2e01a101 	mvfcss	f2, f1
    1f48:	02000001 	andeq	r0, r0, #1
    1f4c:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    1f50:	00001045 	andeq	r1, r0, r5, asr #32
    1f54:	e8019601 	stmda	r1, {r0, r9, sl, ip, pc}
    1f58:	08200023 	stmdaeq	r0!, {r0, r1, r5}
    1f5c:	01000001 	tsteq	r0, r1
    1f60:	0002c69c 	muleq	r2, ip, r6
    1f64:	00691500 	rsbeq	r1, r9, r0, lsl #10
    1f68:	2e019701 	cdpcs	7, 0, cr9, cr1, cr1, {0}
    1f6c:	02000001 	andeq	r0, r0, #1
    1f70:	11007491 			; <UNDEFINED> instruction: 0x11007491
    1f74:	00000fd7 	ldrdeq	r0, [r0], -r7
    1f78:	b8017001 	stmdalt	r1, {r0, ip, sp, lr}
    1f7c:	30200022 	eorcc	r0, r0, r2, lsr #32
    1f80:	01000001 	tsteq	r0, r1
    1f84:	00033a9c 	muleq	r3, ip, sl
    1f88:	00781500 	rsbseq	r1, r8, r0, lsl #10
    1f8c:	2e017101 	adfcss	f7, f1, f1
    1f90:	02000001 	andeq	r0, r0, #1
    1f94:	79156c91 	ldmdbvc	r5, {r0, r4, r7, sl, fp, sp, lr}
    1f98:	01720100 	cmneq	r2, r0, lsl #2
    1f9c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1fa0:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
    1fa4:	000002fc 	strdeq	r0, [r0], -ip
    1fa8:	2e017301 	cdpcs	3, 0, cr7, cr1, cr1, {0}
    1fac:	02000001 	andeq	r0, r0, #1
    1fb0:	30136491 	mulscc	r3, r1, r4
    1fb4:	01000006 	tsteq	r0, r6
    1fb8:	012e0174 			; <UNDEFINED> instruction: 0x012e0174
    1fbc:	91020000 	mrsls	r0, (UNDEF: 2)
    1fc0:	32781560 	rsbscc	r1, r8, #96, 10	; 0x18000000
    1fc4:	01760100 	cmneq	r6, r0, lsl #2
    1fc8:	0000012e 	andeq	r0, r0, lr, lsr #2
    1fcc:	165c9102 	ldrbne	r9, [ip], -r2, lsl #2
    1fd0:	7a010069 	bvc	4217c <startup-0x1ffbde84>
    1fd4:	00012e01 	andeq	r2, r1, r1, lsl #28
    1fd8:	006b1500 	rsbeq	r1, fp, r0, lsl #10
    1fdc:	2e017b01 	vmlacs.f64	d7, d1, d1
    1fe0:	02000001 	andeq	r0, r0, #1
    1fe4:	11005891 			; <UNDEFINED> instruction: 0x11005891
    1fe8:	000010d7 	ldrdeq	r1, [r0], -r7
    1fec:	66016501 	strvs	r6, [r1], -r1, lsl #10
    1ff0:	52200022 	eorpl	r0, r0, #34	; 0x22
    1ff4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ff8:	0003a39c 	muleq	r3, ip, r3
    1ffc:	00781700 	rsbseq	r1, r8, r0, lsl #14
    2000:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
    2004:	02000001 	andeq	r0, r0, #1
    2008:	79176c91 	ldmdbvc	r7, {r0, r4, r7, sl, fp, sp, lr}
    200c:	01650100 	cmneq	r5, r0, lsl #2
    2010:	0000012e 	andeq	r0, r0, lr, lsr #2
    2014:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    2018:	000002fc 	strdeq	r0, [r0], -ip
    201c:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
    2020:	02000001 	andeq	r0, r0, #1
    2024:	30126491 	mulscc	r2, r1, r4
    2028:	01000006 	tsteq	r0, r6
    202c:	012e0165 			; <UNDEFINED> instruction: 0x012e0165
    2030:	91020000 	mrsls	r0, (UNDEF: 2)
    2034:	00691560 	rsbeq	r1, r9, r0, ror #10
    2038:	2e016601 	cfmadd32cs	mvax0, mvfx6, mvfx1, mvfx1
    203c:	02000001 	andeq	r0, r0, #1
    2040:	6a157491 	bvs	55f28c <startup-0x1faa0d74>
    2044:	01670100 	cmneq	r7, r0, lsl #2
    2048:	0000012e 	andeq	r0, r0, lr, lsr #2
    204c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2050:	00107a11 	andseq	r7, r0, r1, lsl sl
    2054:	015b0100 	cmpeq	fp, r0, lsl #2
    2058:	20002214 	andcs	r2, r0, r4, lsl r2
    205c:	00000052 	andeq	r0, r0, r2, asr r0
    2060:	040c9c01 	streq	r9, [ip], #-3073	; 0xfffff3ff
    2064:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
    2068:	015b0100 	cmpeq	fp, r0, lsl #2
    206c:	0000012e 	andeq	r0, r0, lr, lsr #2
    2070:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    2074:	5b010079 	blpl	42260 <startup-0x1ffbdda0>
    2078:	00012e01 	andeq	r2, r1, r1, lsl #28
    207c:	68910200 	ldmvs	r1, {r9}
    2080:	0002fc12 	andeq	pc, r2, r2, lsl ip	; <UNPREDICTABLE>
    2084:	015b0100 	cmpeq	fp, r0, lsl #2
    2088:	0000012e 	andeq	r0, r0, lr, lsr #2
    208c:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    2090:	00000630 	andeq	r0, r0, r0, lsr r6
    2094:	2e015b01 	vmlacs.f64	d5, d1, d1
    2098:	02000001 	andeq	r0, r0, #1
    209c:	69156091 	ldmdbvs	r5, {r0, r4, r7, sp, lr}
    20a0:	015c0100 	cmpeq	ip, r0, lsl #2
    20a4:	0000012e 	andeq	r0, r0, lr, lsr #2
    20a8:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    20ac:	5d01006a 	stcpl	0, cr0, [r1, #-424]	; 0xfffffe58
    20b0:	00012e01 	andeq	r2, r1, r1, lsl #28
    20b4:	70910200 	addsvc	r0, r1, r0, lsl #4
    20b8:	0fb11100 	svceq	0x00b11100
    20bc:	45010000 	strmi	r0, [r1, #-0]
    20c0:	0020fa01 	eoreq	pc, r0, r1, lsl #20
    20c4:	00011a20 	andeq	r1, r1, r0, lsr #20
    20c8:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    20cc:	17000004 	strne	r0, [r0, -r4]
    20d0:	45010073 	strmi	r0, [r1, #-115]	; 0xffffff8d
    20d4:	00009e01 	andeq	r9, r0, r1, lsl #28
    20d8:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    20dc:	01007817 	tsteq	r0, r7, lsl r8
    20e0:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
    20e4:	91020000 	mrsls	r0, (UNDEF: 2)
    20e8:	00791750 	rsbseq	r1, r9, r0, asr r7
    20ec:	2e014501 	cfsh32cs	mvfx4, mvfx1, #1
    20f0:	02000001 	andeq	r0, r0, #1
    20f4:	73174c91 	tstvc	r7, #37120	; 0x9100
    20f8:	01007465 	tsteq	r0, r5, ror #8
    20fc:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
    2100:	91020000 	mrsls	r0, (UNDEF: 2)
    2104:	103f1248 	eorsne	r1, pc, r8, asr #4
    2108:	45010000 	strmi	r0, [r1, #-0]
    210c:	00012e01 	andeq	r2, r1, r1, lsl #28
    2110:	00910200 	addseq	r0, r1, r0, lsl #4
    2114:	01006915 	tsteq	r0, r5, lsl r9
    2118:	012e0146 			; <UNDEFINED> instruction: 0x012e0146
    211c:	91020000 	mrsls	r0, (UNDEF: 2)
    2120:	006a156c 	rsbeq	r1, sl, ip, ror #10
    2124:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
    2128:	02000001 	andeq	r0, r0, #1
    212c:	6b156891 	blvs	55c378 <startup-0x1faa3c88>
    2130:	01460100 	mrseq	r0, (UNDEF: 86)
    2134:	0000012e 	andeq	r0, r0, lr, lsr #2
    2138:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
    213c:	000010b2 	strheq	r1, [r0], -r2
    2140:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
    2144:	02000001 	andeq	r0, r0, #1
    2148:	32186091 	andscc	r6, r8, #145	; 0x91
    214c:	bc200021 	stclt	0, cr0, [r0], #-132	; 0xffffff7c
    2150:	13000000 	movwne	r0, #0
    2154:	000010ad 	andeq	r1, r0, sp, lsr #1
    2158:	5b014d01 	blpl	55564 <startup-0x1ffaaa9c>
    215c:	02000000 	andeq	r0, r0, #0
    2160:	00005f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    2164:	000f8611 	andeq	r8, pc, r1, lsl r6	; <UNPREDICTABLE>
    2168:	01300100 	teqeq	r0, r0, lsl #2
    216c:	20002024 	andcs	r2, r0, r4, lsr #32
    2170:	000000d6 	ldrdeq	r0, [r0], -r6
    2174:	05209c01 	streq	r9, [r0, #-3073]!	; 0xfffff3ff
    2178:	29120000 	ldmdbcs	r2, {}	; <UNPREDICTABLE>
    217c:	0100000f 	tsteq	r0, pc
    2180:	05200130 	streq	r0, [r0, #-304]!	; 0xfffffed0
    2184:	91020000 	mrsls	r0, (UNDEF: 2)
    2188:	00691564 	rsbeq	r1, r9, r4, ror #10
    218c:	7e013101 	adfvcs	f3, f1, f1
    2190:	02000001 	andeq	r0, r0, #1
    2194:	6a157791 	bvs	55ffe0 <startup-0x1faa0020>
    2198:	01310100 	teqeq	r1, r0, lsl #2
    219c:	0000017e 	andeq	r0, r0, lr, ror r1
    21a0:	13769102 	cmnne	r6, #-2147483648	; 0x80000000
    21a4:	000012e3 	andeq	r1, r0, r3, ror #5
    21a8:	7e013101 	adfvcs	f3, f1, f1
    21ac:	02000001 	andeq	r0, r0, #1
    21b0:	63156f91 	tstvs	r5, #580	; 0x244
    21b4:	01310100 	teqeq	r1, r0, lsl #2
    21b8:	0000017e 	andeq	r0, r0, lr, ror r1
    21bc:	15759102 	ldrbne	r9, [r5, #-258]!	; 0xfffffefe
    21c0:	3201006b 	andcc	r0, r1, #107	; 0x6b
    21c4:	00004e01 	andeq	r4, r0, r1, lsl #28
    21c8:	70910200 	addsvc	r0, r1, r0, lsl #4
    21cc:	7e040500 	cfsh32vc	mvfx0, mvfx4, #0
    21d0:	11000001 	tstne	r0, r1
    21d4:	00000f30 	andeq	r0, r0, r0, lsr pc
    21d8:	84010801 	strhi	r0, [r1], #-2049	; 0xfffff7ff
    21dc:	a020001e 	eorge	r0, r0, lr, lsl r0
    21e0:	01000001 	tsteq	r0, r1
    21e4:	0005a09c 	muleq	r5, ip, r0
    21e8:	00781700 	rsbseq	r1, r8, r0, lsl #14
    21ec:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
    21f0:	02000001 	andeq	r0, r0, #1
    21f4:	79176491 	ldmdbvc	r7, {r0, r4, r7, sl, sp, lr}
    21f8:	01080100 	mrseq	r0, (UNDEF: 24)
    21fc:	0000012e 	andeq	r0, r0, lr, lsr #2
    2200:	17609102 	strbne	r9, [r0, -r2, lsl #2]!
    2204:	00746573 	rsbseq	r6, r4, r3, ror r5
    2208:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
    220c:	02000001 	andeq	r0, r0, #1
    2210:	88135c91 	ldmdahi	r3, {r0, r4, r7, sl, fp, ip, lr}
    2214:	01000010 	tsteq	r0, r0, lsl r0
    2218:	017e0109 	cmneq	lr, r9, lsl #2
    221c:	91020000 	mrsls	r0, (UNDEF: 2)
    2220:	00631577 	rsbeq	r1, r3, r7, ror r5
    2224:	7e010901 	vmlavc.f16	s0, s2, s2	; <UNPREDICTABLE>
    2228:	02000001 	andeq	r0, r0, #1
    222c:	e3136f91 	tst	r3, #580	; 0x244
    2230:	01000012 	tsteq	r0, r2, lsl r0
    2234:	017e0109 	cmneq	lr, r9, lsl #2
    2238:	91020000 	mrsls	r0, (UNDEF: 2)
    223c:	10e61376 	rscne	r1, r6, r6, ror r3
    2240:	0a010000 	beq	42248 <startup-0x1ffbddb8>
    2244:	00012e01 	andeq	r2, r1, r1, lsl #28
    2248:	70910200 	addsvc	r0, r1, r0, lsl #4
    224c:	0f7b1900 	svceq	0x007b1900
    2250:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    2254:	20001d04 	andcs	r1, r0, r4, lsl #26
    2258:	00000180 	andeq	r0, r0, r0, lsl #3
    225c:	06069c01 	streq	r9, [r6], -r1, lsl #24
    2260:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
    2264:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    2268:	02000001 	andeq	r0, r0, #1
    226c:	791a6c91 	ldmdbvc	sl, {r0, r4, r7, sl, fp, sp, lr}
    2270:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    2274:	02000001 	andeq	r0, r0, #1
    2278:	731a6891 	tstvc	sl, #9502720	; 0x910000
    227c:	01007465 	tsteq	r0, r5, ror #8
    2280:	00012ede 	ldrdeq	r2, [r1], -lr
    2284:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2288:	00103f1b 	andseq	r3, r0, fp, lsl pc
    228c:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    2290:	02000001 	andeq	r0, r0, #1
    2294:	881c6091 	ldmdahi	ip, {r0, r4, r7, sp, lr}
    2298:	01000010 	tsteq	r0, r0, lsl r0
    229c:	00017edf 	ldrdeq	r7, [r1], -pc	; <UNPREDICTABLE>
    22a0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    22a4:	0010e61c 	andseq	lr, r0, ip, lsl r6
    22a8:	2ee00100 	cdpcs	1, 14, cr0, cr0, cr0, {0}
    22ac:	02000001 	andeq	r0, r0, #1
    22b0:	1d007091 	stcne	0, cr7, [r0, #-580]	; 0xfffffdbc
    22b4:	00001139 	andeq	r1, r0, r9, lsr r1
    22b8:	1c9ed101 	ldfned	f5, [lr], {1}
    22bc:	00662000 	rsbeq	r2, r6, r0
    22c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    22c4:	00000642 	andeq	r0, r0, r2, asr #12
    22c8:	000f171c 	andeq	r1, pc, ip, lsl r7	; <UNPREDICTABLE>
    22cc:	7ed20100 	cdpvc	1, 13, cr0, cr2, cr0, {0}
    22d0:	02000001 	andeq	r0, r0, #1
    22d4:	ac187791 	ldcge	7, cr7, [r8], {145}	; 0x91
    22d8:	3e20001c 	miacc	acc0, ip, r0
    22dc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    22e0:	00646461 	rsbeq	r6, r4, r1, ror #8
    22e4:	017ed601 	cmneq	lr, r1, lsl #12
    22e8:	91020000 	mrsls	r0, (UNDEF: 2)
    22ec:	1f000076 	svcne	0x00000076
    22f0:	00001126 	andeq	r1, r0, r6, lsr #2
    22f4:	1c30bd01 	ldcne	13, cr11, [r0], #-4
    22f8:	006e2000 	rsbeq	r2, lr, r0
    22fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2300:	00109a1d 	andseq	r9, r0, sp, lsl sl
    2304:	eab50100 	b	fed4270c <firstTime.4040+0xded39c1c>
    2308:	4620001b 			; <UNDEFINED> instruction: 0x4620001b
    230c:	01000000 	mrseq	r0, (UNDEF: 0)
    2310:	0006859c 	muleq	r6, ip, r5
    2314:	0f621b00 	svceq	0x00621b00
    2318:	b5010000 	strlt	r0, [r1, #-0]
    231c:	0000017e 	andeq	r0, r0, lr, ror r1
    2320:	1b779102 	blne	1de6730 <startup-0x1e2198d0>
    2324:	000012e3 	andeq	r1, r0, r3, ror #5
    2328:	017eb501 	cmneq	lr, r1, lsl #10
    232c:	91020000 	mrsls	r0, (UNDEF: 2)
    2330:	541d0076 	ldrpl	r0, [sp], #-118	; 0xffffff8a
    2334:	0100000f 	tsteq	r0, pc
    2338:	001ba4ae 	andseq	sl, fp, lr, lsr #9
    233c:	00004620 	andeq	r4, r0, r0, lsr #12
    2340:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    2344:	1b000006 	blne	2364 <startup-0x1fffdc9c>
    2348:	00000f62 	andeq	r0, r0, r2, ror #30
    234c:	017eae01 	cmneq	lr, r1, lsl #28
    2350:	91020000 	mrsls	r0, (UNDEF: 2)
    2354:	12e31b77 	rscne	r1, r3, #121856	; 0x1dc00
    2358:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    235c:	0000017e 	andeq	r0, r0, lr, ror r1
    2360:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2364:	000fc91d 	andeq	ip, pc, sp, lsl r9	; <UNPREDICTABLE>
    2368:	26990100 	ldrcs	r0, [r9], r0, lsl #2
    236c:	7e20001b 	miavc	acc0, fp, r0
    2370:	01000000 	mrseq	r0, (UNDEF: 0)
    2374:	0006e99c 	muleq	r6, ip, r9
    2378:	05881b00 	streq	r1, [r8, #2816]	; 0xb00
    237c:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    2380:	0000017e 	andeq	r0, r0, lr, ror r1
    2384:	1b779102 	blne	1de6794 <startup-0x1e21986c>
    2388:	000012e3 	andeq	r1, r0, r3, ror #5
    238c:	017e9901 	cmneq	lr, r1, lsl #18
    2390:	91020000 	mrsls	r0, (UNDEF: 2)
    2394:	2d200076 	stccs	0, cr0, [r0, #-472]!	; 0xfffffe28
    2398:	01000010 	tsteq	r0, r0, lsl r0
    239c:	00012e94 	muleq	r1, r4, lr
    23a0:	001afc00 	andseq	pc, sl, r0, lsl #24
    23a4:	00002a20 	andeq	r2, r0, r0, lsr #20
    23a8:	119c0100 	orrsne	r0, ip, r0, lsl #2
    23ac:	1b000007 	blne	23d0 <startup-0x1fffdc30>
    23b0:	000012e3 	andeq	r1, r0, r3, ror #5
    23b4:	017e9401 	cmneq	lr, r1, lsl #8
    23b8:	91020000 	mrsls	r0, (UNDEF: 2)
    23bc:	1c210077 	stcne	0, cr0, [r1], #-476	; 0xfffffe24
    23c0:	0100000f 	tsteq	r0, pc
    23c4:	00017e7b 	andeq	r7, r1, fp, ror lr
    23c8:	001a6800 	andseq	r6, sl, r0, lsl #16
    23cc:	00009420 	andeq	r9, r0, r0, lsr #8
    23d0:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
    23d4:	1b000007 	blne	23f8 <startup-0x1fffdc08>
    23d8:	000012e3 	andeq	r1, r0, r3, ror #5
    23dc:	017e7b01 	cmneq	lr, r1, lsl #22
    23e0:	91020000 	mrsls	r0, (UNDEF: 2)
    23e4:	76721e6f 	ldrbtvc	r1, [r2], -pc, ror #28
    23e8:	5b840100 	blpl	fe1027f0 <firstTime.4040+0xde0f9d00>
    23ec:	02000000 	andeq	r0, r0, #0
    23f0:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
    23f4:	000010fe 	strdeq	r1, [r0], -lr
    23f8:	19fa6501 	ldmibne	sl!, {r0, r8, sl, sp, lr}^
    23fc:	006e2000 	rsbeq	r2, lr, r0
    2400:	9c010000 	stcls	0, cr0, [r1], {-0}
    2404:	00000768 	andeq	r0, r0, r8, ror #14
    2408:	0100631e 	tsteq	r0, lr, lsl r3
    240c:	00017e66 	andeq	r7, r1, r6, ror #28
    2410:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2414:	10ec1d00 	rscne	r1, ip, r0, lsl #26
    2418:	50010000 	andpl	r0, r1, r0
    241c:	20001994 	mulcs	r0, r4, r9
    2420:	00000066 	andeq	r0, r0, r6, rrx
    2424:	078c9c01 	streq	r9, [ip, r1, lsl #24]
    2428:	e31b0000 	tst	fp, #0
    242c:	01000012 	tsteq	r0, r2, lsl r0
    2430:	00017e50 	andeq	r7, r1, r0, asr lr
    2434:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2438:	0fe52200 	svceq	0x00e52200
    243c:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    2440:	2000193c 	andcs	r1, r0, ip, lsr r9
    2444:	00000058 	andeq	r0, r0, r8, asr r0
    2448:	07ba9c01 	ldreq	r9, [sl, r1, lsl #24]!
    244c:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
    2450:	7e490100 	dvfvce	f0, f1, f0
    2454:	02000001 	andeq	r0, r0, #1
    2458:	631e6f91 	tstvs	lr, #580	; 0x244
    245c:	7e4a0100 	dvfvce	f0, f2, f0
    2460:	02000001 	andeq	r0, r0, #1
    2464:	22007791 	andcs	r7, r0, #38010880	; 0x2440000
    2468:	00001059 	andeq	r1, r0, r9, asr r0
    246c:	18ec4101 	stmiane	ip!, {r0, r8, lr}^
    2470:	00502000 	subseq	r2, r0, r0
    2474:	9c010000 	stcls	0, cr0, [r1], {-0}
    2478:	000007e8 	andeq	r0, r0, r8, ror #15
    247c:	0100781a 	tsteq	r0, sl, lsl r8
    2480:	00017e41 	andeq	r7, r1, r1, asr #28
    2484:	6f910200 	svcvs	0x00910200
    2488:	0100631e 	tsteq	r0, lr, lsl r3
    248c:	00017e42 	andeq	r7, r1, r2, asr #28
    2490:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2494:	10c11f00 	sbcne	r1, r1, r0, lsl #30
    2498:	3a010000 	bcc	424a0 <startup-0x1ffbdb60>
    249c:	200018bc 			; <UNDEFINED> instruction: 0x200018bc
    24a0:	00000030 	andeq	r0, r0, r0, lsr r0
    24a4:	6a1f9c01 	bvs	7e94b0 <startup-0x1f816b50>
    24a8:	0100000f 	tsteq	r0, pc
    24ac:	0018a437 	andseq	sl, r8, r7, lsr r4
    24b0:	00001820 	andeq	r1, r0, r0, lsr #16
    24b4:	199c0100 	ldmibne	ip, {r8}
    24b8:	00001111 	andeq	r1, r0, r1, lsl r1
    24bc:	18723201 	ldmdane	r2!, {r0, r9, ip, sp}^
    24c0:	00322000 	eorseq	r2, r2, r0
    24c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    24c8:	0000083a 	andeq	r0, r0, sl, lsr r8
    24cc:	000f291b 	andeq	r2, pc, fp, lsl r9	; <UNPREDICTABLE>
    24d0:	20320100 	eorscs	r0, r2, r0, lsl #2
    24d4:	02000005 	andeq	r0, r0, #5
    24d8:	691e6c91 	ldmdbvs	lr, {r0, r4, r7, sl, fp, sp, lr}
    24dc:	2e330100 	rsfcss	f0, f3, f0
    24e0:	02000001 	andeq	r0, r0, #1
    24e4:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    24e8:	00000f9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
    24ec:	184c2101 	stmdane	ip, {r0, r8, sp}^
    24f0:	00262000 	eoreq	r2, r6, r0
    24f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    24f8:	0000085d 	andeq	r0, r0, sp, asr r8
    24fc:	00736d1a 	rsbseq	r6, r3, sl, lsl sp
    2500:	004e2101 	subeq	r2, lr, r1, lsl #2
    2504:	91020000 	mrsls	r0, (UNDEF: 2)
    2508:	481d0074 	ldmdami	sp, {r2, r4, r5, r6}
    250c:	0100000f 	tsteq	r0, pc
    2510:	00182018 	andseq	r2, r8, r8, lsl r0
    2514:	00002c20 	andeq	r2, r0, r0, lsr #24
    2518:	809c0100 	addshi	r0, ip, r0, lsl #2
    251c:	1a000008 	bne	2544 <startup-0x1fffdabc>
    2520:	01007375 	tsteq	r0, r5, ror r3
    2524:	00004e18 	andeq	r4, r0, r8, lsl lr
    2528:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    252c:	0fbd2300 	svceq	0x00bd2300
    2530:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    2534:	200017dc 	ldrdcs	r1, [r0], -ip
    2538:	00000044 	andeq	r0, r0, r4, asr #32
    253c:	6e239c01 	cdpvs	12, 2, cr9, cr3, cr1, {0}
    2540:	01000010 	tsteq	r0, r0, lsl r0
    2544:	00179804 	andseq	r9, r7, r4, lsl #16
    2548:	00004420 	andeq	r4, r0, r0, lsr #8
    254c:	009c0100 	addseq	r0, ip, r0, lsl #2
    2550:	00000100 	andeq	r0, r0, r0, lsl #2
    2554:	081e0004 	ldmdaeq	lr, {r2}
    2558:	01040000 	mrseq	r0, (UNDEF: 4)
    255c:	00000077 	andeq	r0, r0, r7, ror r0
    2560:	0011590c 	andseq	r5, r1, ip, lsl #18
    2564:	0025dc00 	eoreq	sp, r5, r0, lsl #24
    2568:	00002820 	andeq	r2, r0, r0, lsr #16
    256c:	000c1200 	andeq	r1, ip, r0, lsl #4
    2570:	020c0200 	andeq	r0, ip, #0, 4
    2574:	00004e05 	andeq	r4, r0, r5, lsl #28
    2578:	02fc0300 	rscseq	r0, ip, #0, 6
    257c:	07020000 	streq	r0, [r2, -r0]
    2580:	0000004e 	andeq	r0, r0, lr, asr #32
    2584:	06300300 	ldrteq	r0, [r0], -r0, lsl #6
    2588:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    258c:	0000004e 	andeq	r0, r0, lr, asr #32
    2590:	103a0304 	eorsne	r0, sl, r4, lsl #6
    2594:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    2598:	00000055 	andeq	r0, r0, r5, asr r0
    259c:	04040008 	streq	r0, [r4], #-8
    25a0:	00032007 	andeq	r2, r3, r7
    25a4:	5b040500 	blpl	1039ac <startup-0x1fefc654>
    25a8:	04000000 	streq	r0, [r0], #-0
    25ac:	04370801 	ldrteq	r0, [r7], #-2049	; 0xfffff7ff
    25b0:	8c060000 	stchi	0, cr0, [r6], {-0}
    25b4:	02000011 	andeq	r0, r0, #17
    25b8:	0000210a 	andeq	r2, r0, sl, lsl #2
    25bc:	00160700 	andseq	r0, r6, r0, lsl #14
    25c0:	030c0000 	movweq	r0, #49152	; 0xc000
    25c4:	00009e06 	andeq	r9, r0, r6, lsl #28
    25c8:	050d0300 	streq	r0, [sp, #-768]	; 0xfffffd00
    25cc:	07030000 	streq	r0, [r3, -r0]
    25d0:	0000009e 	muleq	r0, lr, r0
    25d4:	001d0300 	andseq	r0, sp, r0, lsl #6
    25d8:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    25dc:	0000009e 	muleq	r0, lr, r0
    25e0:	00120304 	andseq	r0, r2, r4, lsl #6
    25e4:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    25e8:	0000009e 	muleq	r0, lr, r0
    25ec:	04050008 	streq	r0, [r5], #-8
    25f0:	00000062 	andeq	r0, r0, r2, rrx
    25f4:	000c5f06 	andeq	r5, ip, r6, lsl #30
    25f8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    25fc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2600:	0000114e 	andeq	r1, r0, lr, asr #2
    2604:	25dc0301 	ldrbcs	r0, [ip, #769]	; 0x301
    2608:	00282000 	eoreq	r2, r8, r0
    260c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2610:	000000fd 	strdeq	r0, [r0], -sp
    2614:	00115309 	andseq	r5, r1, r9, lsl #6
    2618:	fd030100 	stc2	1, cr0, [r3, #-0]
    261c:	02000000 	andeq	r0, r0, #0
    2620:	0d097491 	cfstrseq	mvf7, [r9, #-580]	; 0xfffffdbc
    2624:	01000005 	tsteq	r0, r5
    2628:	00009e03 	andeq	r9, r0, r3, lsl #28
    262c:	70910200 	addsvc	r0, r1, r0, lsl #4
    2630:	00001d09 	andeq	r1, r0, r9, lsl #26
    2634:	9e030100 	adflss	f0, f3, f0
    2638:	02000000 	andeq	r0, r0, #0
    263c:	12096c91 	andne	r6, r9, #37120	; 0x9100
    2640:	01000000 	mrseq	r0, (UNDEF: 0)
    2644:	00009e03 	andeq	r9, r0, r3, lsl #28
    2648:	68910200 	ldmvs	r1, {r9}
    264c:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    2650:	00000000 	andeq	r0, r0, r0
    2654:	000000c3 	andeq	r0, r0, r3, asr #1
    2658:	08a50004 	stmiaeq	r5!, {r2}
    265c:	01040000 	mrseq	r0, (UNDEF: 4)
    2660:	00000077 	andeq	r0, r0, r7, ror r0
    2664:	0011930c 	andseq	r9, r1, ip, lsl #6
    2668:	00260400 	eoreq	r0, r6, r0, lsl #8
    266c:	00002820 	andeq	r2, r0, r0, lsr #16
    2670:	000c8800 	andeq	r8, ip, r0, lsl #16
    2674:	020c0200 	andeq	r0, ip, #0, 4
    2678:	00004e05 	andeq	r4, r0, r5, lsl #28
    267c:	02fc0300 	rscseq	r0, ip, #0, 6
    2680:	07020000 	streq	r0, [r2, -r0]
    2684:	0000004e 	andeq	r0, r0, lr, asr #32
    2688:	06300300 	ldrteq	r0, [r0], -r0, lsl #6
    268c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2690:	0000004e 	andeq	r0, r0, lr, asr #32
    2694:	103a0304 	eorsne	r0, sl, r4, lsl #6
    2698:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    269c:	00000055 	andeq	r0, r0, r5, asr r0
    26a0:	04040008 	streq	r0, [r4], #-8
    26a4:	00032007 	andeq	r2, r3, r7
    26a8:	5b040500 	blpl	103ab0 <startup-0x1fefc550>
    26ac:	04000000 	streq	r0, [r0], #-0
    26b0:	04370801 	ldrteq	r0, [r7], #-2049	; 0xfffff7ff
    26b4:	8c060000 	stchi	0, cr0, [r6], {-0}
    26b8:	02000011 	andeq	r0, r0, #17
    26bc:	0000210a 	andeq	r2, r0, sl, lsl #2
    26c0:	11870700 	orrne	r0, r7, r0, lsl #14
    26c4:	03010000 	movweq	r0, #4096	; 0x1000
    26c8:	20002604 	andcs	r2, r0, r4, lsl #12
    26cc:	00000028 	andeq	r0, r0, r8, lsr #32
    26d0:	00b99c01 	adcseq	r9, r9, r1, lsl #24
    26d4:	73080000 	movwvc	r0, #32768	; 0x8000
    26d8:	b9030100 	stmdblt	r3, {r8}
    26dc:	02000000 	andeq	r0, r0, #0
    26e0:	3a097491 	bcc	25f92c <startup-0x1fda06d4>
    26e4:	01000010 	tsteq	r0, r0, lsl r0
    26e8:	00005503 	andeq	r5, r0, r3, lsl #10
    26ec:	70910200 	addsvc	r0, r1, r0, lsl #4
    26f0:	0002fc09 	andeq	pc, r2, r9, lsl #24
    26f4:	bf030100 	svclt	0x00030100
    26f8:	02000000 	andeq	r0, r0, #0
    26fc:	30096c91 	mulcc	r9, r1, ip
    2700:	01000006 	tsteq	r0, r6
    2704:	0000bf03 	andeq	fp, r0, r3, lsl #30
    2708:	68910200 	ldmvs	r1, {r9}
    270c:	62040500 	andvs	r0, r4, #0, 10
    2710:	0a000000 	beq	2718 <startup-0x1fffd8e8>
    2714:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2718:	35000074 	strcc	r0, [r0, #-116]	; 0xffffff8c
    271c:	04000001 	streq	r0, [r0], #-1
    2720:	00093700 	andeq	r3, r9, r0, lsl #14
    2724:	77010400 	strvc	r0, [r1, -r0, lsl #8]
    2728:	0c000000 	stceq	0, cr0, [r0], {-0}
    272c:	000011f9 	strdeq	r1, [r0], -r9
    2730:	2000262c 	andcs	r2, r0, ip, lsr #12
    2734:	0000006c 	andeq	r0, r0, ip, rrx
    2738:	00000cf4 	strdeq	r0, [r0], -r4
    273c:	13021802 	movwne	r1, #10242	; 0x2802
    2740:	000000ae 	andeq	r0, r0, lr, lsr #1
    2744:	0011c203 	andseq	ip, r1, r3, lsl #4
    2748:	ae140200 	cdpge	2, 1, cr0, cr4, cr0, {0}
    274c:	00000000 	andeq	r0, r0, r0
    2750:	0011db03 	andseq	sp, r1, r3, lsl #22
    2754:	b5150200 	ldrlt	r0, [r5, #-512]	; 0xfffffe00
    2758:	04000000 	streq	r0, [r0], #-0
    275c:	00122603 	andseq	r2, r2, r3, lsl #12
    2760:	b5160200 	ldrlt	r0, [r6, #-512]	; 0xfffffe00
    2764:	06000000 	streq	r0, [r0], -r0
    2768:	00124803 	andseq	r4, r2, r3, lsl #16
    276c:	ae170200 	cdpge	2, 1, cr0, cr7, cr0, {0}
    2770:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2774:	0011e703 	andseq	lr, r1, r3, lsl #14
    2778:	ae180200 	cdpge	2, 1, cr0, cr8, cr0, {0}
    277c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2780:	00125803 	andseq	r5, r2, r3, lsl #16
    2784:	bc190200 	lfmlt	f0, 4, [r9], {-0}
    2788:	10000000 	andne	r0, r0, r0
    278c:	00125003 	andseq	r5, r2, r3
    2790:	bc1a0200 	lfmlt	f0, 4, [sl], {-0}
    2794:	11000000 	mrsne	r0, (UNDEF: 0)
    2798:	0011ed03 	andseq	lr, r1, r3, lsl #26
    279c:	b51b0200 	ldrlt	r0, [fp, #-512]	; 0xfffffe00
    27a0:	12000000 	andne	r0, r0, #0
    27a4:	00124103 	andseq	r4, r2, r3, lsl #2
    27a8:	bc1c0200 	lfmlt	f0, 4, [ip], {-0}
    27ac:	14000000 	strne	r0, [r0], #-0
    27b0:	0011d303 	andseq	sp, r1, r3, lsl #6
    27b4:	bc1d0200 	lfmlt	f0, 4, [sp], {-0}
    27b8:	15000000 	strne	r0, [r0, #-0]
    27bc:	00125f03 	andseq	r5, r2, r3, lsl #30
    27c0:	b51e0200 	ldrlt	r0, [lr, #-512]	; 0xfffffe00
    27c4:	16000000 	strne	r0, [r0], -r0
    27c8:	07040400 	streq	r0, [r4, -r0, lsl #8]
    27cc:	00000320 	andeq	r0, r0, r0, lsr #6
    27d0:	1a070204 	bne	1c2fe8 <startup-0x1fe3d018>
    27d4:	04000003 	streq	r0, [r0], #-3
    27d8:	04370801 	ldrteq	r0, [r7], #-2049	; 0xfffff7ff
    27dc:	e2050000 	and	r0, r5, #0
    27e0:	02000011 	andeq	r0, r0, #17
    27e4:	0000211f 	andeq	r2, r0, pc, lsl r1
    27e8:	12310600 	eorsne	r0, r1, #0, 12
    27ec:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    27f0:	00000104 	andeq	r0, r0, r4, lsl #2
    27f4:	20002664 	andcs	r2, r0, r4, ror #12
    27f8:	00000034 	andeq	r0, r0, r4, lsr r0
    27fc:	01049c01 	tsteq	r4, r1, lsl #24
    2800:	62070000 	andvs	r0, r7, #0
    2804:	01007469 	tsteq	r0, r9, ror #8
    2808:	0001040e 	andeq	r0, r1, lr, lsl #8
    280c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2810:	4c494408 	cfstrdmi	mvd4, [r9], {8}
    2814:	0b0f0100 	bleq	3c2c1c <startup-0x1fc3d3e4>
    2818:	02000001 	andeq	r0, r0, #1
    281c:	09006f91 	stmdbeq	r0, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    2820:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2824:	01040074 	tsteq	r4, r4, ror r0
    2828:	00044008 	andeq	r4, r4, r8
    282c:	126b0a00 	rsbne	r0, fp, #0, 20
    2830:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    2834:	0000010b 	andeq	r0, r0, fp, lsl #2
    2838:	20002644 	andcs	r2, r0, r4, asr #12
    283c:	00000020 	andeq	r0, r0, r0, lsr #32
    2840:	c80b9c01 	stmdagt	fp, {r0, sl, fp, ip, pc}
    2844:	01000011 	tsteq	r0, r1, lsl r0
    2848:	00262c04 	eoreq	r2, r6, r4, lsl #24
    284c:	00001820 	andeq	r1, r0, r0, lsr #16
    2850:	009c0100 	addseq	r0, ip, r0, lsl #2
    2854:	000004ed 	andeq	r0, r0, sp, ror #9
    2858:	09f40004 	ldmibeq	r4!, {r2}^
    285c:	01040000 	mrseq	r0, (UNDEF: 4)
    2860:	00000077 	andeq	r0, r0, r7, ror r0
    2864:	0013b00c 	andseq	fp, r3, ip
    2868:	00269800 	eoreq	r9, r6, r0, lsl #16
    286c:	00052020 	andeq	r2, r5, r0, lsr #32
    2870:	000d6400 	andeq	r6, sp, r0, lsl #8
    2874:	020c0200 	andeq	r0, ip, #0, 4
    2878:	00004e05 	andeq	r4, r0, r5, lsl #28
    287c:	02fc0300 	rscseq	r0, ip, #0, 6
    2880:	07020000 	streq	r0, [r2, -r0]
    2884:	0000004e 	andeq	r0, r0, lr, asr #32
    2888:	06300300 	ldrteq	r0, [r0], -r0, lsl #6
    288c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2890:	0000004e 	andeq	r0, r0, lr, asr #32
    2894:	103a0304 	eorsne	r0, sl, r4, lsl #6
    2898:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    289c:	00000055 	andeq	r0, r0, r5, asr r0
    28a0:	04040008 	streq	r0, [r4], #-8
    28a4:	00032007 	andeq	r2, r3, r7
    28a8:	5b040500 	blpl	103cb0 <startup-0x1fefc350>
    28ac:	04000000 	streq	r0, [r0], #-0
    28b0:	04370801 	ldrteq	r0, [r7], #-2049	; 0xfffff7ff
    28b4:	8c060000 	stchi	0, cr0, [r6], {-0}
    28b8:	02000011 	andeq	r0, r0, #17
    28bc:	0000210a 	andeq	r2, r0, sl, lsl #2
    28c0:	00160700 	andseq	r0, r6, r0, lsl #14
    28c4:	030c0000 	movweq	r0, #49152	; 0xc000
    28c8:	00009e06 	andeq	r9, r0, r6, lsl #28
    28cc:	050d0300 	streq	r0, [sp, #-768]	; 0xfffffd00
    28d0:	07030000 	streq	r0, [r3, -r0]
    28d4:	0000009e 	muleq	r0, lr, r0
    28d8:	001d0300 	andseq	r0, sp, r0, lsl #6
    28dc:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    28e0:	0000009e 	muleq	r0, lr, r0
    28e4:	00120304 	andseq	r0, r2, r4, lsl #6
    28e8:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    28ec:	0000009e 	muleq	r0, lr, r0
    28f0:	04050008 	streq	r0, [r5], #-8
    28f4:	00000062 	andeq	r0, r0, r2, rrx
    28f8:	000c5f06 	andeq	r5, ip, r6, lsl #30
    28fc:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    2900:	07000000 	streq	r0, [r0, -r0]
    2904:	00000605 	andeq	r0, r0, r5, lsl #12
    2908:	28060424 	stmdacs	r6, {r2, r5, sl}
    290c:	03000001 	movweq	r0, #1
    2910:	000003d4 	ldrdeq	r0, [r0], -r4
    2914:	01280704 			; <UNDEFINED> instruction: 0x01280704
    2918:	03000000 	movweq	r0, #0
    291c:	00000611 	andeq	r0, r0, r1, lsl r6
    2920:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    2924:	03040000 	movweq	r0, #16384	; 0x4000
    2928:	00000578 	andeq	r0, r0, r8, ror r5
    292c:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    2930:	03080000 	movweq	r0, #32768	; 0x8000
    2934:	000005a4 	andeq	r0, r0, r4, lsr #11
    2938:	01460c04 	cmpeq	r6, r4, lsl #24
    293c:	030c0000 	movweq	r0, #49152	; 0xc000
    2940:	000002f5 	strdeq	r0, [r0], -r5
    2944:	01460d04 	cmpeq	r6, r4, lsl #26
    2948:	03100000 	tsteq	r0, #0
    294c:	000003e6 	andeq	r0, r0, r6, ror #7
    2950:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    2954:	03140000 	tsteq	r4, #0
    2958:	00000048 	andeq	r0, r0, r8, asr #32
    295c:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    2960:	03180000 	tsteq	r8, #0
    2964:	00000365 	andeq	r0, r0, r5, ror #6
    2968:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    296c:	031c0000 	tsteq	ip, #0
    2970:	00000375 	andeq	r0, r0, r5, ror r3
    2974:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    2978:	00200000 	eoreq	r0, r0, r0
    297c:	00a40405 	adceq	r0, r4, r5, lsl #8
    2980:	04080000 	streq	r0, [r8], #-0
    2984:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2988:	01400900 	cmpeq	r0, r0, lsl #18
    298c:	400a0000 	andmi	r0, sl, r0
    2990:	00000001 	andeq	r0, r0, r1
    2994:	00af0405 	adceq	r0, pc, r5, lsl #8
    2998:	04050000 	streq	r0, [r5], #-0
    299c:	00000135 	andeq	r0, r0, r5, lsr r1
    29a0:	00060606 	andeq	r0, r6, r6, lsl #12
    29a4:	af150400 	svcge	0x00150400
    29a8:	0b000000 	bleq	29b0 <startup-0x1fffd650>
    29ac:	00000162 	andeq	r0, r0, r2, ror #2
    29b0:	00000162 	andeq	r0, r0, r2, ror #2
    29b4:	0405000c 	streq	r0, [r5], #-12
    29b8:	0000014c 	andeq	r0, r0, ip, asr #2
    29bc:	0004ba0d 	andeq	fp, r4, sp, lsl #20
    29c0:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    29c4:	0d000001 	stceq	0, cr0, [r0, #-4]
    29c8:	000003ab 	andeq	r0, r0, fp, lsr #7
    29cc:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    29d0:	cf060000 	svcgt	0x00060000
    29d4:	05000005 	streq	r0, [r0, #-5]
    29d8:	00005b24 	andeq	r5, r0, r4, lsr #22
    29dc:	017e0b00 	cmneq	lr, r0, lsl #22
    29e0:	019a0000 	orrseq	r0, sl, r0
    29e4:	9a0e0000 	bls	3829ec <startup-0x1fc7d614>
    29e8:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    29ec:	04040003 	streq	r0, [r4], #-3
    29f0:	00039207 	andeq	r9, r3, r7, lsl #4
    29f4:	0f700d00 	svceq	0x00700d00
    29f8:	2b050000 	blcs	142a00 <startup-0x1febd600>
    29fc:	00000189 	andeq	r0, r0, r9, lsl #3
    2a00:	0002180d 	andeq	r1, r2, sp, lsl #16
    2a04:	892c0500 	stmdbhi	ip!, {r8, sl}
    2a08:	0d000001 	stceq	0, cr0, [r0, #-4]
    2a0c:	00000445 	andeq	r0, r0, r5, asr #8
    2a10:	01892d05 	orreq	r2, r9, r5, lsl #26
    2a14:	020d0000 	andeq	r0, sp, #0
    2a18:	05000003 	streq	r0, [r0, #-3]
    2a1c:	0001892e 	andeq	r8, r1, lr, lsr #18
    2a20:	02920d00 	addseq	r0, r2, #0, 26
    2a24:	2f050000 	svccs	0x00050000
    2a28:	00000189 	andeq	r0, r0, r9, lsl #3
    2a2c:	0005e70d 	andeq	lr, r5, sp, lsl #14
    2a30:	89300500 	ldmdbhi	r0!, {r8, sl}
    2a34:	0d000001 	stceq	0, cr0, [r0, #-4]
    2a38:	000005d7 	ldrdeq	r0, [r0], -r7
    2a3c:	01893105 	orreq	r3, r9, r5, lsl #2
    2a40:	360f0000 	strcc	r0, [pc], -r0
    2a44:	01000013 	tsteq	r0, r3, lsl r0
    2a48:	002b34e4 	eoreq	r3, fp, r4, ror #9
    2a4c:	00008420 	andeq	r8, r0, r0, lsr #8
    2a50:	2c9c0100 	ldfcss	f0, [ip], {0}
    2a54:	10000002 	andne	r0, r0, r2
    2a58:	e5010073 	str	r0, [r1, #-115]	; 0xffffff8d
    2a5c:	0000022c 	andeq	r0, r0, ip, lsr #4
    2a60:	116c9102 	cmnne	ip, r2, lsl #2
    2a64:	00001311 	andeq	r1, r0, r1, lsl r3
    2a68:	0239e601 	eorseq	lr, r9, #1048576	; 0x100000
    2a6c:	91020000 	mrsls	r0, (UNDEF: 2)
    2a70:	1317115c 	tstne	r7, #92, 2
    2a74:	e7010000 	str	r0, [r1, -r0]
    2a78:	00000249 	andeq	r0, r0, r9, asr #4
    2a7c:	00489102 	subeq	r9, r8, r2, lsl #2
    2a80:	02320405 	eorseq	r0, r2, #83886080	; 0x5000000
    2a84:	01040000 	mrseq	r0, (UNDEF: 4)
    2a88:	00044008 	andeq	r4, r4, r8
    2a8c:	02320b00 	eorseq	r0, r2, #0, 22
    2a90:	02490000 	subeq	r0, r9, #0
    2a94:	9a120000 	bls	482a9c <startup-0x1fb7d564>
    2a98:	0c000001 	stceq	0, cr0, [r0], {1}
    2a9c:	02320b00 	eorseq	r0, r2, #0, 22
    2aa0:	02590000 	subseq	r0, r9, #0
    2aa4:	9a120000 	bls	482aac <startup-0x1fb7d554>
    2aa8:	13000001 	movwne	r0, #1
    2aac:	12c70f00 	sbcne	r0, r7, #0, 30
    2ab0:	cc010000 	stcgt	0, cr0, [r1], {-0}
    2ab4:	20002aa6 	andcs	r2, r0, r6, lsr #21
    2ab8:	0000008e 	andeq	r0, r0, lr, lsl #1
    2abc:	02b39c01 	adcseq	r9, r3, #256	; 0x100
    2ac0:	ff130000 			; <UNDEFINED> instruction: 0xff130000
    2ac4:	01000013 	tsteq	r0, r3, lsl r0
    2ac8:	00022ccc 	andeq	r2, r2, ip, asr #25
    2acc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2ad0:	00025613 	andeq	r5, r2, r3, lsl r6
    2ad4:	2ccc0100 	stfcse	f0, [ip], {0}
    2ad8:	02000002 	andeq	r0, r0, #2
    2adc:	a9136891 	ldmdbge	r3, {r0, r4, r7, fp, sp, lr}
    2ae0:	01000013 	tsteq	r0, r3, lsl r0
    2ae4:	00012ecc 	andeq	r2, r1, ip, asr #29
    2ae8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2aec:	00128513 	andseq	r8, r2, r3, lsl r5
    2af0:	2ecc0100 	polcse	f0, f4, f0
    2af4:	02000001 	andeq	r0, r0, #1
    2af8:	69106091 	ldmdbvs	r0, {r0, r4, r7, sp, lr}
    2afc:	2ed00100 	cdpcs	1, 13, cr0, cr0, cr0, {0}
    2b00:	02000001 	andeq	r0, r0, #1
    2b04:	0f007491 	svceq	0x00007491
    2b08:	00001368 	andeq	r1, r0, r8, ror #6
    2b0c:	2a48bd01 	bcs	1231f18 <startup-0x1edce0e8>
    2b10:	005e2000 	subseq	r2, lr, r0
    2b14:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b18:	000002e5 	andeq	r0, r0, r5, ror #5
    2b1c:	0013ff13 	andseq	pc, r3, r3, lsl pc	; <UNPREDICTABLE>
    2b20:	2cbd0100 	ldfcss	f0, [sp]
    2b24:	02000002 	andeq	r0, r0, #2
    2b28:	56137491 			; <UNDEFINED> instruction: 0x56137491
    2b2c:	01000002 	tsteq	r0, r2
    2b30:	00022cbd 			; <UNDEFINED> instruction: 0x00022cbd
    2b34:	70910200 	addsvc	r0, r1, r0, lsl #4
    2b38:	12bb0f00 	adcsne	r0, fp, #0, 30
    2b3c:	ad010000 	stcge	0, cr0, [r1, #-0]
    2b40:	200029de 	ldrdcs	r2, [r0], -lr
    2b44:	0000006a 	andeq	r0, r0, sl, rrx
    2b48:	03159c01 	tsteq	r5, #256	; 0x100
    2b4c:	73100000 	tstvc	r0, #0
    2b50:	2cae0100 	stfcss	f0, [lr]
    2b54:	02000002 	andeq	r0, r0, #2
    2b58:	f6116c91 			; <UNDEFINED> instruction: 0xf6116c91
    2b5c:	0100000f 	tsteq	r0, pc
    2b60:	000315af 	andeq	r1, r3, pc, lsr #11
    2b64:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    2b68:	02320b00 	eorseq	r0, r2, #0, 22
    2b6c:	03250000 			; <UNDEFINED> instruction: 0x03250000
    2b70:	9a120000 	bls	482b78 <startup-0x1fb7d488>
    2b74:	14000001 	strne	r0, [r0], #-1
    2b78:	129c1400 	addsne	r1, ip, #0, 8
    2b7c:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    2b80:	200029cc 	andcs	r2, r0, ip, asr #19
    2b84:	00000012 	andeq	r0, r0, r2, lsl r0
    2b88:	74159c01 	ldrvc	r9, [r5], #-3073	; 0xfffff3ff
    2b8c:	01000012 	tsteq	r0, r2, lsl r0
    2b90:	0029b29f 	mlaeq	r9, pc, r2, fp	; <UNPREDICTABLE>
    2b94:	00001a20 	andeq	r1, r0, r0, lsr #20
    2b98:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    2b9c:	000012a9 	andeq	r1, r0, r9, lsr #5
    2ba0:	29188301 	ldmdbcs	r8, {r0, r8, r9, pc}
    2ba4:	009a2000 	addseq	r2, sl, r0
    2ba8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bac:	0013740f 	andseq	r7, r3, pc, lsl #8
    2bb0:	c87b0100 	ldmdagt	fp!, {r8}^
    2bb4:	50200028 	eorpl	r0, r0, r8, lsr #32
    2bb8:	01000000 	mrseq	r0, (UNDEF: 0)
    2bbc:	0003989c 	muleq	r3, ip, r8
    2bc0:	6f721600 	svcvs	0x00721600
    2bc4:	7b010077 	blvc	42da8 <startup-0x1ffbd258>
    2bc8:	0000005b 	andeq	r0, r0, fp, asr r0
    2bcc:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
    2bd0:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
    2bd4:	005b7b01 	subseq	r7, fp, r1, lsl #22
    2bd8:	91020000 	mrsls	r0, (UNDEF: 2)
    2bdc:	131d116e 	tstne	sp, #-2147483621	; 0x8000001b
    2be0:	7c010000 	stcvc	0, cr0, [r1], {-0}
    2be4:	0000005b 	andeq	r0, r0, fp, asr r0
    2be8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2bec:	0013980f 	andseq	r9, r3, pc, lsl #16
    2bf0:	8c740100 	ldfhie	f0, [r4], #-0
    2bf4:	3c200028 	stccc	0, cr0, [r0], #-160	; 0xffffff60
    2bf8:	01000000 	mrseq	r0, (UNDEF: 0)
    2bfc:	0003ba9c 	muleq	r3, ip, sl
    2c00:	00631600 	rsbeq	r1, r3, r0, lsl #12
    2c04:	005b7401 	subseq	r7, fp, r1, lsl #8
    2c08:	91020000 	mrsls	r0, (UNDEF: 2)
    2c0c:	d8170077 	ldmdale	r7, {r0, r1, r2, r4, r5, r6}
    2c10:	01000012 	tsteq	r0, r2, lsl r0
    2c14:	00005b6a 	andeq	r5, r0, sl, ror #22
    2c18:	00285800 	eoreq	r5, r8, r0, lsl #16
    2c1c:	00003420 	andeq	r3, r0, r0, lsr #8
    2c20:	e09c0100 	adds	r0, ip, r0, lsl #2
    2c24:	10000003 	andne	r0, r0, r3
    2c28:	6b010063 	blvs	42dbc <startup-0x1ffbd244>
    2c2c:	0000005b 	andeq	r0, r0, fp, asr r0
    2c30:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2c34:	0013810f 	andseq	r8, r3, pc, lsl #2
    2c38:	28630100 	stmdacs	r3!, {r8}^
    2c3c:	30200028 	eorcc	r0, r0, r8, lsr #32
    2c40:	01000000 	mrseq	r0, (UNDEF: 0)
    2c44:	0004029c 	muleq	r4, ip, r2
    2c48:	00631600 	rsbeq	r1, r3, r0, lsl #12
    2c4c:	005b6301 	subseq	r6, fp, r1, lsl #6
    2c50:	91020000 	mrsls	r0, (UNDEF: 2)
    2c54:	8c170077 	ldchi	0, cr0, [r7], {119}	; 0x77
    2c58:	01000012 	tsteq	r0, r2, lsl r0
    2c5c:	00005b57 	andeq	r5, r0, r7, asr fp
    2c60:	0027d400 	eoreq	sp, r7, r0, lsl #8
    2c64:	00005420 	andeq	r5, r0, r0, lsr #8
    2c68:	299c0100 	ldmibcs	ip, {r8}
    2c6c:	10000004 	andne	r0, r0, r4
    2c70:	01007672 	tsteq	r0, r2, ror r6
    2c74:	00005b5c 	andeq	r5, r0, ip, asr fp
    2c78:	6f910200 	svcvs	0x00910200
    2c7c:	13411700 	movtne	r1, #5888	; 0x1700
    2c80:	4b010000 	blmi	42c88 <startup-0x1ffbd378>
    2c84:	0000005b 	andeq	r0, r0, fp, asr r0
    2c88:	20002780 	andcs	r2, r0, r0, lsl #15
    2c8c:	00000054 	andeq	r0, r0, r4, asr r0
    2c90:	04509c01 	ldrbeq	r9, [r0], #-3073	; 0xfffff3ff
    2c94:	72100000 	andsvc	r0, r0, #0
    2c98:	50010076 	andpl	r0, r1, r6, ror r0
    2c9c:	0000005b 	andeq	r0, r0, fp, asr r0
    2ca0:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    2ca4:	0013250f 	andseq	r2, r3, pc, lsl #10
    2ca8:	56450100 	strbpl	r0, [r5], -r0, lsl #2
    2cac:	2a200027 	bcs	802d50 <startup-0x1f7fd2b0>
    2cb0:	01000000 	mrseq	r0, (UNDEF: 0)
    2cb4:	0004749c 	muleq	r4, ip, r4
    2cb8:	103a1300 	eorsne	r1, sl, r0, lsl #6
    2cbc:	45010000 	strmi	r0, [r1, #-0]
    2cc0:	0000005b 	andeq	r0, r0, fp, asr r0
    2cc4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2cc8:	0013010f 	andseq	r0, r3, pc, lsl #2
    2ccc:	2c3f0100 	ldfcss	f0, [pc], #-0	; 2cd4 <startup-0x1fffd32c>
    2cd0:	2a200027 	bcs	802d74 <startup-0x1f7fd28c>
    2cd4:	01000000 	mrseq	r0, (UNDEF: 0)
    2cd8:	0004989c 	muleq	r4, ip, r8
    2cdc:	0f621300 	svceq	0x00621300
    2ce0:	3f010000 	svccc	0x00010000
    2ce4:	0000005b 	andeq	r0, r0, fp, asr r0
    2ce8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2cec:	00135318 	andseq	r5, r3, r8, lsl r3
    2cf0:	dc370100 	ldfles	f0, [r7], #-0
    2cf4:	50200026 	eorpl	r0, r0, r6, lsr #32
    2cf8:	01000000 	mrseq	r0, (UNDEF: 0)
    2cfc:	0004c69c 	muleq	r4, ip, r6
    2d00:	00781600 	rsbseq	r1, r8, r0, lsl #12
    2d04:	005b3701 	subseq	r3, fp, r1, lsl #14
    2d08:	91020000 	mrsls	r0, (UNDEF: 2)
    2d0c:	0063106f 	rsbeq	r1, r3, pc, rrx
    2d10:	005b3901 	subseq	r3, fp, r1, lsl #18
    2d14:	91020000 	mrsls	r0, (UNDEF: 2)
    2d18:	ee190077 	mrc	0, 0, r0, cr9, cr7, {3}
    2d1c:	01000012 	tsteq	r0, r2, lsl r0
    2d20:	0026982f 	eoreq	r9, r6, pc, lsr #16
    2d24:	00004420 	andeq	r4, r0, r0, lsr #8
    2d28:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    2d2c:	2f010078 	svccs	0x00010078
    2d30:	0000005b 	andeq	r0, r0, fp, asr r0
    2d34:	106f9102 	rsbne	r9, pc, r2, lsl #2
    2d38:	31010063 	tstcc	r1, r3, rrx
    2d3c:	0000005b 	andeq	r0, r0, fp, asr r0
    2d40:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2d44:	00014000 	andeq	r4, r1, r0
    2d48:	72000400 	andvc	r0, r0, #0, 8
    2d4c:	0400000b 	streq	r0, [r0], #-11
    2d50:	00007701 	andeq	r7, r0, r1, lsl #14
    2d54:	14040c00 	strne	r0, [r4], #-3072	; 0xfffff400
    2d58:	2bb80000 	blcs	fee02d60 <firstTime.4040+0xdedfa270>
    2d5c:	00942000 	addseq	r2, r4, r0
    2d60:	0ec20000 	cdpeq	0, 12, cr0, cr2, cr0, {0}
    2d64:	c5020000 	strgt	r0, [r2, #-0]
    2d68:	14000005 	strne	r0, [r0], #-5
    2d6c:	006a0402 	rsbeq	r0, sl, r2, lsl #8
    2d70:	ff030000 			; <UNDEFINED> instruction: 0xff030000
    2d74:	02000013 	andeq	r0, r0, #19
    2d78:	00006a05 	andeq	r6, r0, r5, lsl #20
    2d7c:	56030000 	strpl	r0, [r3], -r0
    2d80:	02000002 	andeq	r0, r0, #2
    2d84:	00006a06 	andeq	r6, r0, r6, lsl #20
    2d88:	7f030400 	svcvc	0x00030400
    2d8c:	02000003 	andeq	r0, r0, #3
    2d90:	00007708 	andeq	r7, r0, r8, lsl #14
    2d94:	6f030800 	svcvs	0x00030800
    2d98:	02000003 	andeq	r0, r0, #3
    2d9c:	00007709 	andeq	r7, r0, r9, lsl #14
    2da0:	5b030c00 	blpl	c5da8 <startup-0x1ff3a258>
    2da4:	02000002 	andeq	r0, r0, #2
    2da8:	0000940c 	andeq	r9, r0, ip, lsl #8
    2dac:	04001000 	streq	r1, [r0], #-0
    2db0:	00007004 	andeq	r7, r0, r4
    2db4:	08010500 	stmdaeq	r1, {r8, sl}
    2db8:	00000440 	andeq	r0, r0, r0, asr #8
    2dbc:	69050406 	stmdbvs	r5, {r1, r2, sl}
    2dc0:	0700746e 	streq	r7, [r0, -lr, ror #8]
    2dc4:	0000008e 	andeq	r0, r0, lr, lsl #1
    2dc8:	00008e08 	andeq	r8, r0, r8, lsl #28
    2dcc:	00770800 	rsbseq	r0, r7, r0, lsl #16
    2dd0:	04000000 	streq	r0, [r0], #-0
    2dd4:	00002104 	andeq	r2, r0, r4, lsl #2
    2dd8:	7e040400 	cfcpysvc	mvf0, mvf4
    2ddc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2de0:	000005c6 	andeq	r0, r0, r6, asr #11
    2de4:	00210d02 	eoreq	r0, r1, r2, lsl #26
    2de8:	e60a0000 	str	r0, [sl], -r0
    2dec:	01000013 	tsteq	r0, r3, lsl r0
    2df0:	002c120c 	eoreq	r1, ip, ip, lsl #4
    2df4:	00003a20 	andeq	r3, r0, r0, lsr #20
    2df8:	f39c0100 	vaddw.u16	q0, q6, d0
    2dfc:	0b000000 	bleq	2e04 <startup-0x1fffd1fc>
    2e00:	006a626f 	rsbeq	r6, sl, pc, ror #4
    2e04:	00f30c01 	rscseq	r0, r3, r1, lsl #24
    2e08:	91020000 	mrsls	r0, (UNDEF: 2)
    2e0c:	13ff0c74 	mvnsne	r0, #116, 24	; 0x7400
    2e10:	0c010000 	stceq	0, cr0, [r1], {-0}
    2e14:	0000006a 	andeq	r0, r0, sl, rrx
    2e18:	0c709102 	ldfeqp	f1, [r0], #-8
    2e1c:	00000256 	andeq	r0, r0, r6, asr r2
    2e20:	006a0c01 	rsbeq	r0, sl, r1, lsl #24
    2e24:	91020000 	mrsls	r0, (UNDEF: 2)
    2e28:	036f0c6c 	cmneq	pc, #108, 24	; 0x6c00
    2e2c:	0c010000 	stceq	0, cr0, [r1], {-0}
    2e30:	00000077 	andeq	r0, r0, r7, ror r0
    2e34:	00689102 	rsbeq	r9, r8, r2, lsl #2
    2e38:	009a0404 	addseq	r0, sl, r4, lsl #8
    2e3c:	5b0d0000 	blpl	342e44 <startup-0x1fcbd1bc>
    2e40:	01000002 	tsteq	r0, r2
    2e44:	002bb804 	eoreq	fp, fp, r4, lsl #16
    2e48:	00005a20 	andeq	r5, r0, r0, lsr #20
    2e4c:	0c9c0100 	ldfeqs	f0, [ip], {0}
    2e50:	00000699 	muleq	r0, r9, r6
    2e54:	00f30401 	rscseq	r0, r3, r1, lsl #8
    2e58:	91020000 	mrsls	r0, (UNDEF: 2)
    2e5c:	13f50c6c 	mvnsne	r0, #108, 24	; 0x6c00
    2e60:	04010000 	streq	r0, [r1], #-0
    2e64:	00000077 	andeq	r0, r0, r7, ror r0
    2e68:	0e689102 	lgneqe	f1, f2
    2e6c:	000013a9 	andeq	r1, r0, r9, lsr #7
    2e70:	00770501 	rsbseq	r0, r7, r1, lsl #10
    2e74:	91020000 	mrsls	r0, (UNDEF: 2)
    2e78:	12850e74 	addne	r0, r5, #116, 28	; 0x740
    2e7c:	06010000 	streq	r0, [r1], -r0
    2e80:	00000077 	andeq	r0, r0, r7, ror r0
    2e84:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2e88:	0002e000 	andeq	lr, r2, r0
    2e8c:	3d000400 	cfstrscc	mvf0, [r0, #-0]
    2e90:	0400000c 	streq	r0, [r0], #-12
    2e94:	00007701 	andeq	r7, r0, r1, lsl #14
    2e98:	14b10c00 	ldrtne	r0, [r1], #3072	; 0xc00
    2e9c:	2c4c0000 	marcs	acc0, r0, ip
    2ea0:	00e82000 	rsceq	r2, r8, r0
    2ea4:	0f3c0000 	svceq	0x003c0000
    2ea8:	0c020000 	stceq	0, cr0, [r2], {-0}
    2eac:	004e0502 	subeq	r0, lr, r2, lsl #10
    2eb0:	fc030000 	stc2	0, cr0, [r3], {-0}
    2eb4:	02000002 	andeq	r0, r0, #2
    2eb8:	00004e07 	andeq	r4, r0, r7, lsl #28
    2ebc:	30030000 	andcc	r0, r3, r0
    2ec0:	02000006 	andeq	r0, r0, #6
    2ec4:	00004e08 	andeq	r4, r0, r8, lsl #28
    2ec8:	3a030400 	bcc	c3ed0 <startup-0x1ff3c130>
    2ecc:	02000010 	andeq	r0, r0, #16
    2ed0:	00005509 	andeq	r5, r0, r9, lsl #10
    2ed4:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    2ed8:	03200704 			; <UNDEFINED> instruction: 0x03200704
    2edc:	04050000 	streq	r0, [r5], #-0
    2ee0:	0000005b 	andeq	r0, r0, fp, asr r0
    2ee4:	37080104 	strcc	r0, [r8, -r4, lsl #2]
    2ee8:	06000004 	streq	r0, [r0], -r4
    2eec:	0000118c 	andeq	r1, r0, ip, lsl #3
    2ef0:	00210a02 	eoreq	r0, r1, r2, lsl #20
    2ef4:	16070000 	strne	r0, [r7], -r0
    2ef8:	0c000000 	stceq	0, cr0, [r0], {-0}
    2efc:	009e0603 	addseq	r0, lr, r3, lsl #12
    2f00:	0d030000 	stceq	0, cr0, [r3, #-0]
    2f04:	03000005 	movweq	r0, #5
    2f08:	00009e07 	andeq	r9, r0, r7, lsl #28
    2f0c:	1d030000 	stcne	0, cr0, [r3, #-0]
    2f10:	03000000 	movweq	r0, #0
    2f14:	00009e08 	andeq	r9, r0, r8, lsl #28
    2f18:	12030400 	andne	r0, r3, #0, 8
    2f1c:	03000000 	movweq	r0, #0
    2f20:	00009e09 	andeq	r9, r0, r9, lsl #28
    2f24:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    2f28:	00006204 	andeq	r6, r0, r4, lsl #4
    2f2c:	0c5f0600 	mrrceq	6, 0, r0, pc, cr0	; <UNPREDICTABLE>
    2f30:	0a030000 	beq	c2f38 <startup-0x1ff3d0c8>
    2f34:	0000006d 	andeq	r0, r0, sp, rrx
    2f38:	00060507 	andeq	r0, r6, r7, lsl #10
    2f3c:	06042400 	streq	r2, [r4], -r0, lsl #8
    2f40:	00000128 	andeq	r0, r0, r8, lsr #2
    2f44:	0003d403 	andeq	sp, r3, r3, lsl #8
    2f48:	28070400 	stmdacs	r7, {sl}
    2f4c:	00000001 	andeq	r0, r0, r1
    2f50:	00061103 	andeq	r1, r6, r3, lsl #2
    2f54:	2e080400 	cfcpyscs	mvf0, mvf8
    2f58:	04000001 	streq	r0, [r0], #-1
    2f5c:	00057803 	andeq	r7, r5, r3, lsl #16
    2f60:	2e090400 	cfcpyscs	mvf0, mvf9
    2f64:	08000001 	stmdaeq	r0, {r0}
    2f68:	0005a403 	andeq	sl, r5, r3, lsl #8
    2f6c:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    2f70:	0c000001 	stceq	0, cr0, [r0], {1}
    2f74:	0002f503 	andeq	pc, r2, r3, lsl #10
    2f78:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    2f7c:	10000001 	andne	r0, r0, r1
    2f80:	0003e603 	andeq	lr, r3, r3, lsl #12
    2f84:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    2f88:	14000001 	strne	r0, [r0], #-1
    2f8c:	00004803 	andeq	r4, r0, r3, lsl #16
    2f90:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    2f94:	18000001 	stmdane	r0, {r0}
    2f98:	00036503 	andeq	r6, r3, r3, lsl #10
    2f9c:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    2fa0:	1c000001 	stcne	0, cr0, [r0], {1}
    2fa4:	00037503 	andeq	r7, r3, r3, lsl #10
    2fa8:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    2fac:	20000001 	andcs	r0, r0, r1
    2fb0:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    2fb4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2fb8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2fbc:	40090074 	andmi	r0, r9, r4, ror r0
    2fc0:	0a000001 	beq	2fcc <startup-0x1fffd034>
    2fc4:	00000140 	andeq	r0, r0, r0, asr #2
    2fc8:	af040500 	svcge	0x00040500
    2fcc:	05000000 	streq	r0, [r0, #-0]
    2fd0:	00013504 	andeq	r3, r1, r4, lsl #10
    2fd4:	06060600 	streq	r0, [r6], -r0, lsl #12
    2fd8:	15040000 	strne	r0, [r4, #-0]
    2fdc:	000000af 	andeq	r0, r0, pc, lsr #1
    2fe0:	0001620b 	andeq	r6, r1, fp, lsl #4
    2fe4:	00016200 	andeq	r6, r1, r0, lsl #4
    2fe8:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    2fec:	00014c04 	andeq	r4, r1, r4, lsl #24
    2ff0:	04ba0d00 	ldrteq	r0, [sl], #3328	; 0xd00
    2ff4:	1c040000 	stcne	0, cr0, [r4], {-0}
    2ff8:	00000157 	andeq	r0, r0, r7, asr r1
    2ffc:	0003ab0d 	andeq	sl, r3, sp, lsl #22
    3000:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    3004:	0b000001 	bleq	3010 <startup-0x1fffcff0>
    3008:	0000005b 	andeq	r0, r0, fp, asr r0
    300c:	0000018f 	andeq	r0, r0, pc, lsl #3
    3010:	00018f0e 	andeq	r8, r1, lr, lsl #30
    3014:	0003ff00 	andeq	pc, r3, r0, lsl #30
    3018:	92070404 	andls	r0, r7, #4, 8	; 0x4000000
    301c:	0f000003 	svceq	0x00000003
    3020:	000014e1 	andeq	r1, r0, r1, ror #9
    3024:	017e0305 	cmneq	lr, r5, lsl #6
    3028:	03050000 	movweq	r0, #20480	; 0x5000
    302c:	200072ec 	andcs	r7, r0, ip, ror #5
    3030:	0014810f 	andseq	r8, r4, pc, lsl #2
    3034:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    3038:	05000001 	streq	r0, [r0, #-1]
    303c:	0076ec03 	rsbseq	lr, r6, r3, lsl #24
    3040:	145e0f20 	ldrbne	r0, [lr], #-3872	; 0xfffff0e0
    3044:	03070000 	movweq	r0, #28672	; 0x7000
    3048:	0000017e 	andeq	r0, r0, lr, ror r1
    304c:	7aec0305 	bvc	ffb03c68 <firstTime.4040+0xdfafb178>
    3050:	43102000 	tstmi	r0, #0
    3054:	01000014 	tsteq	r0, r4, lsl r0
    3058:	00009e08 	andeq	r9, r0, r8, lsl #28
    305c:	c8030500 	stmdagt	r3, {r8, sl}
    3060:	10200052 	eorne	r0, r0, r2, asr r0
    3064:	0000151d 	andeq	r1, r0, sp, lsl r5
    3068:	009e0901 	addseq	r0, lr, r1, lsl #18
    306c:	03050000 	movweq	r0, #20480	; 0x5000
    3070:	20005294 	mulcs	r0, r4, r2
    3074:	0014a410 	andseq	sl, r4, r0, lsl r4
    3078:	9e0a0100 	adflse	f0, f2, f0
    307c:	05000000 	streq	r0, [r0, #-0]
    3080:	0052d803 	subseq	sp, r2, r3, lsl #16
    3084:	14f41020 	ldrbtne	r1, [r4], #32
    3088:	0c010000 	stceq	0, cr0, [r1], {-0}
    308c:	00000062 	andeq	r0, r0, r2, rrx
    3090:	52880305 	addpl	r0, r8, #335544320	; 0x14000000
    3094:	93102000 	tstls	r0, #0
    3098:	01000014 	tsteq	r0, r4, lsl r0
    309c:	0000620d 	andeq	r6, r0, sp, lsl #4
    30a0:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
    30a4:	10200052 	eorne	r0, r0, r2, asr r0
    30a8:	00001471 	andeq	r1, r0, r1, ror r4
    30ac:	00620e01 	rsbeq	r0, r2, r1, lsl #28
    30b0:	03050000 	movweq	r0, #20480	; 0x5000
    30b4:	20005270 	andcs	r5, r0, r0, ror r2
    30b8:	00151210 	andseq	r1, r5, r0, lsl r2
    30bc:	4c110100 	ldfmis	f0, [r1], {-0}
    30c0:	05000001 	streq	r0, [r0, #-1]
    30c4:	00529803 	subseq	r9, r2, r3, lsl #16
    30c8:	14361020 	ldrtne	r1, [r6], #-32	; 0xffffffe0
    30cc:	12010000 	andne	r0, r1, #0
    30d0:	000000a4 	andeq	r0, r0, r4, lsr #1
    30d4:	52cc0305 	sbcpl	r0, ip, #335544320	; 0x14000000
    30d8:	a40b2000 	strge	r2, [fp], #-0
    30dc:	61000000 	mrsvs	r0, (UNDEF: 0)
    30e0:	11000002 	tstne	r0, r2
    30e4:	0000018f 	andeq	r0, r0, pc, lsl #3
    30e8:	50100000 	andspl	r0, r0, r0
    30ec:	01000014 	tsteq	r0, r4, lsl r0
    30f0:	00025113 	andeq	r5, r2, r3, lsl r1
    30f4:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    30f8:	12200052 	eorne	r0, r0, #82	; 0x52
    30fc:	00001505 	andeq	r1, r0, r5, lsl #10
    3100:	2cc02201 	sfmcs	f2, 2, [r0], {1}
    3104:	00742000 	rsbseq	r2, r4, r0
    3108:	9c010000 	stcls	0, cr0, [r1], {-0}
    310c:	000002a7 	andeq	r0, r0, r7, lsr #5
    3110:	00151213 	andseq	r1, r5, r3, lsl r2
    3114:	62220100 	eorvs	r0, r2, #0, 2
    3118:	02000001 	andeq	r0, r0, #1
    311c:	200f6c91 	mulcs	pc, r1, ip	; <UNPREDICTABLE>
    3120:	01000008 	tsteq	r0, r8
    3124:	00012e23 	andeq	r2, r1, r3, lsr #28
    3128:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    312c:	0020007e 	eoreq	r0, r0, lr, ror r0
    3130:	00040d14 	andeq	r0, r4, r4, lsl sp
    3134:	4c140100 	ldfmis	f0, [r4], {-0}
    3138:	7420002c 	strtvc	r0, [r0], #-44	; 0xffffffd4
    313c:	01000000 	mrseq	r0, (UNDEF: 0)
    3140:	0c990f9c 	ldceq	15, cr0, [r9], {156}	; 0x9c
    3144:	16010000 	strne	r0, [r1], -r0
    3148:	0000009e 	muleq	r0, lr, r0
    314c:	0f749102 	svceq	0x00749102
    3150:	00000ca3 	andeq	r0, r0, r3, lsr #25
    3154:	009e1901 	addseq	r1, lr, r1, lsl #18
    3158:	91020000 	mrsls	r0, (UNDEF: 2)
    315c:	0a990f70 	beq	fe646f24 <firstTime.4040+0xde63e434>
    3160:	1c010000 	stcne	0, cr0, [r1], {-0}
    3164:	0000009e 	muleq	r0, lr, r0
    3168:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    316c:	0002e000 	andeq	lr, r2, r0
    3170:	46000400 	strmi	r0, [r0], -r0, lsl #8
    3174:	0400000d 	streq	r0, [r0], #-13
    3178:	00007701 	andeq	r7, r0, r1, lsl #14
    317c:	156a0c00 	strbne	r0, [sl, #-3072]!	; 0xfffff400
    3180:	2d340000 	ldccs	0, cr0, [r4, #-0]
    3184:	00e82000 	rsceq	r2, r8, r0
    3188:	10160000 	andsne	r0, r6, r0
    318c:	0c020000 	stceq	0, cr0, [r2], {-0}
    3190:	004e0502 	subeq	r0, lr, r2, lsl #10
    3194:	fc030000 	stc2	0, cr0, [r3], {-0}
    3198:	02000002 	andeq	r0, r0, #2
    319c:	00004e07 	andeq	r4, r0, r7, lsl #28
    31a0:	30030000 	andcc	r0, r3, r0
    31a4:	02000006 	andeq	r0, r0, #6
    31a8:	00004e08 	andeq	r4, r0, r8, lsl #28
    31ac:	3a030400 	bcc	c41b4 <startup-0x1ff3be4c>
    31b0:	02000010 	andeq	r0, r0, #16
    31b4:	00005509 	andeq	r5, r0, r9, lsl #10
    31b8:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    31bc:	03200704 			; <UNDEFINED> instruction: 0x03200704
    31c0:	04050000 	streq	r0, [r5], #-0
    31c4:	0000005b 	andeq	r0, r0, fp, asr r0
    31c8:	37080104 	strcc	r0, [r8, -r4, lsl #2]
    31cc:	06000004 	streq	r0, [r0], -r4
    31d0:	0000118c 	andeq	r1, r0, ip, lsl #3
    31d4:	00210a02 	eoreq	r0, r1, r2, lsl #20
    31d8:	16070000 	strne	r0, [r7], -r0
    31dc:	0c000000 	stceq	0, cr0, [r0], {-0}
    31e0:	009e0603 	addseq	r0, lr, r3, lsl #12
    31e4:	0d030000 	stceq	0, cr0, [r3, #-0]
    31e8:	03000005 	movweq	r0, #5
    31ec:	00009e07 	andeq	r9, r0, r7, lsl #28
    31f0:	1d030000 	stcne	0, cr0, [r3, #-0]
    31f4:	03000000 	movweq	r0, #0
    31f8:	00009e08 	andeq	r9, r0, r8, lsl #28
    31fc:	12030400 	andne	r0, r3, #0, 8
    3200:	03000000 	movweq	r0, #0
    3204:	00009e09 	andeq	r9, r0, r9, lsl #28
    3208:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    320c:	00006204 	andeq	r6, r0, r4, lsl #4
    3210:	0c5f0600 	mrrceq	6, 0, r0, pc, cr0	; <UNPREDICTABLE>
    3214:	0a030000 	beq	c321c <startup-0x1ff3cde4>
    3218:	0000006d 	andeq	r0, r0, sp, rrx
    321c:	00060507 	andeq	r0, r6, r7, lsl #10
    3220:	06042400 	streq	r2, [r4], -r0, lsl #8
    3224:	00000128 	andeq	r0, r0, r8, lsr #2
    3228:	0003d403 	andeq	sp, r3, r3, lsl #8
    322c:	28070400 	stmdacs	r7, {sl}
    3230:	00000001 	andeq	r0, r0, r1
    3234:	00061103 	andeq	r1, r6, r3, lsl #2
    3238:	2e080400 	cfcpyscs	mvf0, mvf8
    323c:	04000001 	streq	r0, [r0], #-1
    3240:	00057803 	andeq	r7, r5, r3, lsl #16
    3244:	2e090400 	cfcpyscs	mvf0, mvf9
    3248:	08000001 	stmdaeq	r0, {r0}
    324c:	0005a403 	andeq	sl, r5, r3, lsl #8
    3250:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    3254:	0c000001 	stceq	0, cr0, [r0], {1}
    3258:	0002f503 	andeq	pc, r2, r3, lsl #10
    325c:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    3260:	10000001 	andne	r0, r0, r1
    3264:	0003e603 	andeq	lr, r3, r3, lsl #12
    3268:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    326c:	14000001 	strne	r0, [r0], #-1
    3270:	00004803 	andeq	r4, r0, r3, lsl #16
    3274:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    3278:	18000001 	stmdane	r0, {r0}
    327c:	00036503 	andeq	r6, r3, r3, lsl #10
    3280:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    3284:	1c000001 	stcne	0, cr0, [r0], {1}
    3288:	00037503 	andeq	r7, r3, r3, lsl #10
    328c:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    3290:	20000001 	andcs	r0, r0, r1
    3294:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    3298:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    329c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    32a0:	40090074 	andmi	r0, r9, r4, ror r0
    32a4:	0a000001 	beq	32b0 <startup-0x1fffcd50>
    32a8:	00000140 	andeq	r0, r0, r0, asr #2
    32ac:	af040500 	svcge	0x00040500
    32b0:	05000000 	streq	r0, [r0, #-0]
    32b4:	00013504 	andeq	r3, r1, r4, lsl #10
    32b8:	06060600 	streq	r0, [r6], -r0, lsl #12
    32bc:	15040000 	strne	r0, [r4, #-0]
    32c0:	000000af 	andeq	r0, r0, pc, lsr #1
    32c4:	0001620b 	andeq	r6, r1, fp, lsl #4
    32c8:	00016200 	andeq	r6, r1, r0, lsl #4
    32cc:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    32d0:	00014c04 	andeq	r4, r1, r4, lsl #24
    32d4:	04ba0d00 	ldrteq	r0, [sl], #3328	; 0xd00
    32d8:	1c040000 	stcne	0, cr0, [r4], {-0}
    32dc:	00000157 	andeq	r0, r0, r7, asr r1
    32e0:	0003ab0d 	andeq	sl, r3, sp, lsl #22
    32e4:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    32e8:	0b000001 	bleq	32f4 <startup-0x1fffcd0c>
    32ec:	0000005b 	andeq	r0, r0, fp, asr r0
    32f0:	0000018f 	andeq	r0, r0, pc, lsl #3
    32f4:	00018f0e 	andeq	r8, r1, lr, lsl #30
    32f8:	0003ff00 	andeq	pc, r3, r0, lsl #30
    32fc:	92070404 	andls	r0, r7, #4, 8	; 0x4000000
    3300:	0f000003 	svceq	0x00000003
    3304:	00001537 	andeq	r1, r0, r7, lsr r5
    3308:	017e0305 	cmneq	lr, r5, lsl #6
    330c:	03050000 	movweq	r0, #20480	; 0x5000
    3310:	20007ef0 	strdcs	r7, [r0], -r0
    3314:	0015fa0f 	andseq	pc, r5, pc, lsl #20
    3318:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    331c:	05000001 	streq	r0, [r0, #-1]
    3320:	0082f003 	addeq	pc, r2, r3
    3324:	15d70f20 	ldrbne	r0, [r7, #3872]	; 0xf20
    3328:	03070000 	movweq	r0, #28672	; 0x7000
    332c:	0000017e 	andeq	r0, r0, lr, ror r1
    3330:	86f00305 	ldrbthi	r0, [r0], r5, lsl #6
    3334:	ad102000 	ldcge	0, cr2, [r0, #-0]
    3338:	01000015 	tsteq	r0, r5, lsl r0
    333c:	00009e08 	andeq	r9, r0, r8, lsl #28
    3340:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
    3344:	10200053 	eorne	r0, r0, r3, asr r0
    3348:	0000155d 	andeq	r1, r0, sp, asr r5
    334c:	009e0901 	addseq	r0, lr, r1, lsl #18
    3350:	03050000 	movweq	r0, #20480	; 0x5000
    3354:	20005300 	andcs	r5, r0, r0, lsl #6
    3358:	00152910 	andseq	r2, r5, r0, lsl r9
    335c:	9e0a0100 	adflse	f0, f2, f0
    3360:	05000000 	streq	r0, [r0, #-0]
    3364:	00532803 	subseq	r2, r3, r3, lsl #16
    3368:	159b1020 	ldrne	r1, [fp, #32]
    336c:	0c010000 	stceq	0, cr0, [r1], {-0}
    3370:	00000062 	andeq	r0, r0, r2, rrx
    3374:	532c0305 			; <UNDEFINED> instruction: 0x532c0305
    3378:	4b102000 	blmi	40b380 <startup-0x1fbf4c80>
    337c:	01000015 	tsteq	r0, r5, lsl r0
    3380:	0000620d 	andeq	r6, r0, sp, lsl #4
    3384:	38030500 	stmdacc	r3, {r8, sl}
    3388:	10200053 	eorne	r0, r0, r3, asr r0
    338c:	00001619 	andeq	r1, r0, r9, lsl r6
    3390:	00620e01 	rsbeq	r0, r2, r1, lsl #28
    3394:	03050000 	movweq	r0, #20480	; 0x5000
    3398:	2000531c 	andcs	r5, r0, ip, lsl r3
    339c:	00160d10 	andseq	r0, r6, r0, lsl sp
    33a0:	4c110100 	ldfmis	f0, [r1], {-0}
    33a4:	05000001 	streq	r0, [r0, #-1]
    33a8:	0052dc03 	subseq	sp, r2, r3, lsl #24
    33ac:	15bb1020 	ldrne	r1, [fp, #32]!
    33b0:	12010000 	andne	r0, r1, #0
    33b4:	000000a4 	andeq	r0, r0, r4, lsr #1
    33b8:	53100305 	tstpl	r0, #335544320	; 0x14000000
    33bc:	a40b2000 	strge	r2, [fp], #-0
    33c0:	61000000 	mrsvs	r0, (UNDEF: 0)
    33c4:	11000002 	tstne	r0, r2
    33c8:	0000018f 	andeq	r0, r0, pc, lsl #3
    33cc:	eb100000 	bl	4033d4 <startup-0x1fbfcc2c>
    33d0:	01000015 	tsteq	r0, r5, lsl r0
    33d4:	00025113 	andeq	r5, r2, r3, lsl r1
    33d8:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
    33dc:	12200053 	eorne	r0, r0, #83	; 0x53
    33e0:	000015c9 	andeq	r1, r0, r9, asr #11
    33e4:	2da82201 	sfmcs	f2, 4, [r8, #4]!
    33e8:	00742000 	rsbseq	r2, r4, r0
    33ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    33f0:	000002a7 	andeq	r0, r0, r7, lsr #5
    33f4:	00160d13 	andseq	r0, r6, r3, lsl sp
    33f8:	62220100 	eorvs	r0, r2, #0, 2
    33fc:	02000001 	andeq	r0, r0, #1
    3400:	200f6c91 	mulcs	pc, r1, ip	; <UNPREDICTABLE>
    3404:	01000008 	tsteq	r0, r8
    3408:	00012e23 	andeq	r2, r1, r3, lsr #28
    340c:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
    3410:	0020008a 	eoreq	r0, r0, sl, lsl #1
    3414:	00040d14 	andeq	r0, r4, r4, lsl sp
    3418:	34140100 	ldrcc	r0, [r4], #-256	; 0xffffff00
    341c:	7420002d 	strtvc	r0, [r0], #-45	; 0xffffffd3
    3420:	01000000 	mrseq	r0, (UNDEF: 0)
    3424:	0c990f9c 	ldceq	15, cr0, [r9], {156}	; 0x9c
    3428:	16010000 	strne	r0, [r1], -r0
    342c:	0000009e 	muleq	r0, lr, r0
    3430:	0f749102 	svceq	0x00749102
    3434:	00000ca3 	andeq	r0, r0, r3, lsr #25
    3438:	009e1901 	addseq	r1, lr, r1, lsl #18
    343c:	91020000 	mrsls	r0, (UNDEF: 2)
    3440:	0a990f70 	beq	fe647208 <firstTime.4040+0xde63e718>
    3444:	1c010000 	stcne	0, cr0, [r1], {-0}
    3448:	0000009e 	muleq	r0, lr, r0
    344c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	01130200 	tsteq	r3, r0, lsl #4
  14:	0b3a0b0b 	bleq	e82c48 <startup-0x1f17d3b8>
  18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  1c:	0d030000 	stceq	0, cr0, [r3, #-0]
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	000b3813 	andeq	r3, fp, r3, lsl r8
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000e03 	andeq	r0, r0, r3, lsl #28
  38:	0b000f05 	bleq	3c54 <startup-0x1fffc3ac>
  3c:	0013490b 	andseq	r4, r3, fp, lsl #18
  40:	00160600 	andseq	r0, r6, r0, lsl #12
  44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
  48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  4c:	13070000 	movwne	r0, #28672	; 0x7000
  50:	0b0e0301 	bleq	380c5c <startup-0x1fc7f3a4>
  54:	3b0b3a0b 	blcc	2ce888 <startup-0x1fd31778>
  58:	0013010b 	andseq	r0, r3, fp, lsl #2
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	27011509 	strcs	r1, [r1, -r9, lsl #10]
  6c:	00130119 	andseq	r0, r3, r9, lsl r1
  70:	00050a00 	andeq	r0, r5, r0, lsl #20
  74:	00001349 	andeq	r1, r0, r9, asr #6
  78:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
  7c:	00130113 	andseq	r0, r3, r3, lsl r1
  80:	00210c00 	eoreq	r0, r1, r0, lsl #24
  84:	340d0000 	strcc	r0, [sp], #-0
  88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
  8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  90:	3c193f13 	ldccc	15, cr3, [r9], {19}
  94:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
  98:	13490021 	movtne	r0, #36897	; 0x9021
  9c:	0000052f 	andeq	r0, r0, pc, lsr #10
  a0:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
  a4:	000b2f13 	andeq	r2, fp, r3, lsl pc
  a8:	00341000 	eorseq	r1, r4, r0
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  b8:	34110000 	ldrcc	r0, [r1], #-0
  bc:	3a0e0300 	bcc	380cc4 <startup-0x1fc7f33c>
  c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  c4:	00180213 	andseq	r0, r8, r3, lsl r2
  c8:	00341200 	eorseq	r1, r4, r0, lsl #4
  cc:	0b3a0803 	bleq	e820e0 <startup-0x1f17df20>
  d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  d4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
  dc:	03193f01 	tsteq	r9, #1, 30
  e0:	3b0b3a0e 	blcc	2ce920 <startup-0x1fd316e0>
  e4:	1119270b 	tstne	r9, fp, lsl #14
  e8:	40061201 	andmi	r1, r6, r1, lsl #4
  ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f0:	00001301 	andeq	r1, r0, r1, lsl #6
  f4:	03003414 	movweq	r3, #1044	; 0x414
  f8:	3b0b3a0e 	blcc	2ce938 <startup-0x1fd316c8>
  fc:	02134905 	andseq	r4, r3, #81920	; 0x14000
 100:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 104:	0111010b 	tsteq	r1, fp, lsl #2
 108:	00000612 	andeq	r0, r0, r2, lsl r6
 10c:	3f002e16 	svccc	0x00002e16
 110:	3a0e0319 	bcc	380d7c <startup-0x1fc7f284>
 114:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 118:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 11c:	96184006 	ldrls	r4, [r8], -r6
 120:	00001942 	andeq	r1, r0, r2, asr #18
 124:	3f002e17 	svccc	0x00002e17
 128:	3a0e0319 	bcc	380d94 <startup-0x1fc7f26c>
 12c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 130:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 134:	97184006 	ldrls	r4, [r8, -r6]
 138:	00001942 	andeq	r1, r0, r2, asr #18
 13c:	01110100 	tsteq	r1, r0, lsl #2
 140:	0b130e25 	bleq	4c39dc <startup-0x1fb3c624>
 144:	01110e03 	tsteq	r1, r3, lsl #28
 148:	17100612 			; <UNDEFINED> instruction: 0x17100612
 14c:	13020000 	movwne	r0, #8192	; 0x2000
 150:	3a0b0b01 	bcc	2c2d5c <startup-0x1fd3d2a4>
 154:	010b3b0b 	tsteq	fp, fp, lsl #22
 158:	03000013 	movweq	r0, #19
 15c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 160:	0b3b0b3a 	bleq	ec2e50 <startup-0x1f13d1b0>
 164:	0b381349 	bleq	e04e90 <startup-0x1f1fb170>
 168:	24040000 	strcs	r0, [r4], #-0
 16c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 170:	000e030b 	andeq	r0, lr, fp, lsl #6
 174:	000f0500 	andeq	r0, pc, r0, lsl #10
 178:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 17c:	16060000 	strne	r0, [r6], -r0
 180:	3a0e0300 	bcc	380d88 <startup-0x1fc7f278>
 184:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 188:	07000013 	smladeq	r0, r3, r0, r0
 18c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 190:	0b3a0b0b 	bleq	e82dc4 <startup-0x1f17d23c>
 194:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 198:	24080000 	strcs	r0, [r8], #-0
 19c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1a0:	0008030b 	andeq	r0, r8, fp, lsl #6
 1a4:	01150900 	tsteq	r5, r0, lsl #18
 1a8:	13011927 	movwne	r1, #6439	; 0x1927
 1ac:	050a0000 	streq	r0, [sl, #-0]
 1b0:	00134900 	andseq	r4, r3, r0, lsl #18
 1b4:	01010b00 	tsteq	r1, r0, lsl #22
 1b8:	13011349 	movwne	r1, #4937	; 0x1349
 1bc:	210c0000 	mrscs	r0, (UNDEF: 12)
 1c0:	0d000000 	stceq	0, cr0, [r0, #-0]
 1c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 1c8:	0b3b0b3a 	bleq	ec2eb8 <startup-0x1f13d148>
 1cc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 1d0:	0000193c 	andeq	r1, r0, ip, lsr r9
 1d4:	4700340e 	strmi	r3, [r0, -lr, lsl #8]
 1d8:	3b0b3a13 	blcc	2cea2c <startup-0x1fd315d4>
 1dc:	0018020b 	andseq	r0, r8, fp, lsl #4
 1e0:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 1e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1e8:	0b3b0b3a 	bleq	ec2ed8 <startup-0x1f13d128>
 1ec:	01111927 	tsteq	r1, r7, lsr #18
 1f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1f4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1f8:	10000013 	andne	r0, r0, r3, lsl r0
 1fc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 200:	0b3b0b3a 	bleq	ec2ef0 <startup-0x1f13d110>
 204:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 208:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 20c:	03193f01 	tsteq	r9, #1, 30
 210:	3b0b3a0e 	blcc	2cea50 <startup-0x1fd315b0>
 214:	1119270b 	tstne	r9, fp, lsl #14
 218:	40061201 	andmi	r1, r6, r1, lsl #4
 21c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 220:	01000000 	mrseq	r0, (UNDEF: 0)
 224:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 228:	0e030b13 	vmoveq.32	d3[0], r0
 22c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 230:	00001710 	andeq	r1, r0, r0, lsl r7
 234:	0b011302 	bleq	44e44 <startup-0x1ffbb1bc>
 238:	3b0b3a0b 	blcc	2cea6c <startup-0x1fd31594>
 23c:	0013010b 	andseq	r0, r3, fp, lsl #2
 240:	000d0300 	andeq	r0, sp, r0, lsl #6
 244:	0b3a0e03 	bleq	e83a58 <startup-0x1f17c5a8>
 248:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 24c:	00000b38 	andeq	r0, r0, r8, lsr fp
 250:	0b002404 	bleq	9268 <startup-0x1fff6d98>
 254:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 258:	0500000e 	streq	r0, [r0, #-14]
 25c:	0b0b000f 	bleq	2c02a0 <startup-0x1fd3fd60>
 260:	00001349 	andeq	r1, r0, r9, asr #6
 264:	03001606 	movweq	r1, #1542	; 0x606
 268:	3b0b3a0e 	blcc	2ceaa8 <startup-0x1fd31558>
 26c:	0013490b 	andseq	r4, r3, fp, lsl #18
 270:	01130700 	tsteq	r3, r0, lsl #14
 274:	0b0b0e03 	bleq	2c3a88 <startup-0x1fd3c578>
 278:	0b3b0b3a 	bleq	ec2f68 <startup-0x1f13d098>
 27c:	00001301 	andeq	r1, r0, r1, lsl #6
 280:	0b002408 	bleq	92a8 <startup-0x1fff6d58>
 284:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 288:	09000008 	stmdbeq	r0, {r3}
 28c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 290:	00001301 	andeq	r1, r0, r1, lsl #6
 294:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
 298:	0b000013 	bleq	2ec <startup-0x1ffffd14>
 29c:	13490101 	movtne	r0, #37121	; 0x9101
 2a0:	00001301 	andeq	r1, r0, r1, lsl #6
 2a4:	0000210c 	andeq	r2, r0, ip, lsl #2
 2a8:	00340d00 	eorseq	r0, r4, r0, lsl #26
 2ac:	0b3a0e03 	bleq	e83ac0 <startup-0x1f17c540>
 2b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2b4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 2b8:	210e0000 	mrscs	r0, (UNDEF: 14)
 2bc:	2f134900 	svccs	0x00134900
 2c0:	0f00000b 	svceq	0x0000000b
 2c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 2c8:	0b3b0b3a 	bleq	ec2fb8 <startup-0x1f13d048>
 2cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2d0:	34100000 	ldrcc	r0, [r0], #-0
 2d4:	3a0e0300 	bcc	380edc <startup-0x1fc7f124>
 2d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2dc:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 2e0:	11000018 	tstne	r0, r8, lsl r0
 2e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2e8:	0b3a0e03 	bleq	e83afc <startup-0x1f17c504>
 2ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2f4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2f8:	00130119 	andseq	r0, r3, r9, lsl r1
 2fc:	00051200 	andeq	r1, r5, r0, lsl #4
 300:	0b3a0e03 	bleq	e83b14 <startup-0x1f17c4ec>
 304:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 308:	00001802 	andeq	r1, r0, r2, lsl #16
 30c:	03012e13 	movweq	r2, #7699	; 0x1e13
 310:	3b0b3a0e 	blcc	2ceb50 <startup-0x1fd314b0>
 314:	1119270b 	tstne	r9, fp, lsl #14
 318:	40061201 	andmi	r1, r6, r1, lsl #4
 31c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 320:	01000000 	mrseq	r0, (UNDEF: 0)
 324:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 328:	0e030b13 	vmoveq.32	d3[0], r0
 32c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 330:	00001710 	andeq	r1, r0, r0, lsl r7
 334:	0b002402 	bleq	9344 <startup-0x1fff6cbc>
 338:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 33c:	0300000e 	movweq	r0, #14
 340:	0b0b0113 	bleq	2c0794 <startup-0x1fd3f86c>
 344:	0b3b0b3a 	bleq	ec3034 <startup-0x1f13cfcc>
 348:	00001301 	andeq	r1, r0, r1, lsl #6
 34c:	03000d04 	movweq	r0, #3332	; 0xd04
 350:	3b0b3a0e 	blcc	2ceb90 <startup-0x1fd31470>
 354:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 358:	0500000b 	streq	r0, [r0, #-11]
 35c:	0b0b000f 	bleq	2c03a0 <startup-0x1fd3fc60>
 360:	00001349 	andeq	r1, r0, r9, asr #6
 364:	03001606 	movweq	r1, #1542	; 0x606
 368:	3b0b3a0e 	blcc	2ceba8 <startup-0x1fd31458>
 36c:	0013490b 	andseq	r4, r3, fp, lsl #18
 370:	01130700 	tsteq	r3, r0, lsl #14
 374:	0b0b0e03 	bleq	2c3b88 <startup-0x1fd3c478>
 378:	0b3b0b3a 	bleq	ec3068 <startup-0x1f13cf98>
 37c:	00001301 	andeq	r1, r0, r1, lsl #6
 380:	0b002408 	bleq	93a8 <startup-0x1fff6c58>
 384:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 388:	09000008 	stmdbeq	r0, {r3}
 38c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 390:	00001301 	andeq	r1, r0, r1, lsl #6
 394:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
 398:	0b000013 	bleq	3ec <startup-0x1ffffc14>
 39c:	13490101 	movtne	r0, #37121	; 0x9101
 3a0:	00001301 	andeq	r1, r0, r1, lsl #6
 3a4:	0000210c 	andeq	r2, r0, ip, lsl #2
 3a8:	00340d00 	eorseq	r0, r4, r0, lsl #26
 3ac:	0b3a0e03 	bleq	e83bc0 <startup-0x1f17c440>
 3b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3b4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 3b8:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 3bc:	03193f01 	tsteq	r9, #1, 30
 3c0:	3b0b3a0e 	blcc	2cec00 <startup-0x1fd31400>
 3c4:	1119270b 	tstne	r9, fp, lsl #14
 3c8:	40061201 	andmi	r1, r6, r1, lsl #4
 3cc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3d0:	050f0000 	streq	r0, [pc, #-0]	; 3d8 <startup-0x1ffffc28>
 3d4:	3a0e0300 	bcc	380fdc <startup-0x1fc7f024>
 3d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3dc:	00180213 	andseq	r0, r8, r3, lsl r2
 3e0:	00341000 	eorseq	r1, r4, r0
 3e4:	0b3a0e03 	bleq	e83bf8 <startup-0x1f17c408>
 3e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3ec:	00001802 	andeq	r1, r0, r2, lsl #16
 3f0:	01110100 	tsteq	r1, r0, lsl #2
 3f4:	0b130e25 	bleq	4c3c90 <startup-0x1fb3c370>
 3f8:	01110e03 	tsteq	r1, r3, lsl #28
 3fc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 400:	13020000 	movwne	r0, #8192	; 0x2000
 404:	3a0b0b01 	bcc	2c3010 <startup-0x1fd3cff0>
 408:	010b3b0b 	tsteq	fp, fp, lsl #22
 40c:	03000013 	movweq	r0, #19
 410:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 414:	0b3b0b3a 	bleq	ec3104 <startup-0x1f13cefc>
 418:	0b381349 	bleq	e05144 <startup-0x1f1faebc>
 41c:	24040000 	strcs	r0, [r4], #-0
 420:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 424:	000e030b 	andeq	r0, lr, fp, lsl #6
 428:	000f0500 	andeq	r0, pc, r0, lsl #10
 42c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 430:	16060000 	strne	r0, [r6], -r0
 434:	3a0e0300 	bcc	38103c <startup-0x1fc7efc4>
 438:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 43c:	07000013 	smladeq	r0, r3, r0, r0
 440:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 444:	0b3a0b0b 	bleq	e83078 <startup-0x1f17cf88>
 448:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 44c:	24080000 	strcs	r0, [r8], #-0
 450:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 454:	0008030b 	andeq	r0, r8, fp, lsl #6
 458:	01150900 	tsteq	r5, r0, lsl #18
 45c:	13011927 	movwne	r1, #6439	; 0x1927
 460:	050a0000 	streq	r0, [sl, #-0]
 464:	00134900 	andseq	r4, r3, r0, lsl #18
 468:	01010b00 	tsteq	r1, r0, lsl #22
 46c:	13011349 	movwne	r1, #4937	; 0x1349
 470:	210c0000 	mrscs	r0, (UNDEF: 12)
 474:	0d000000 	stceq	0, cr0, [r0, #-0]
 478:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 47c:	0b3b0b3a 	bleq	ec316c <startup-0x1f13ce94>
 480:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 484:	0000193c 	andeq	r1, r0, ip, lsr r9
 488:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 48c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 490:	00340f00 	eorseq	r0, r4, r0, lsl #30
 494:	0b3a0e03 	bleq	e83ca8 <startup-0x1f17c358>
 498:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 49c:	00001802 	andeq	r1, r0, r2, lsl #16
 4a0:	03003410 	movweq	r3, #1040	; 0x410
 4a4:	3b0b3a0e 	blcc	2cece4 <startup-0x1fd3131c>
 4a8:	3f13490b 	svccc	0x0013490b
 4ac:	00180219 	andseq	r0, r8, r9, lsl r2
 4b0:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 4b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4b8:	0b3b0b3a 	bleq	ec31a8 <startup-0x1f13ce58>
 4bc:	01111927 	tsteq	r1, r7, lsr #18
 4c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4c4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 4c8:	12000013 	andne	r0, r0, #19
 4cc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 4d0:	0b3b0b3a 	bleq	ec31c0 <startup-0x1f13ce40>
 4d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 4dc:	3a0e0301 	bcc	3810e8 <startup-0x1fc7ef18>
 4e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4e8:	96184006 	ldrls	r4, [r8], -r6
 4ec:	00001942 	andeq	r1, r0, r2, asr #18
 4f0:	01110100 	tsteq	r1, r0, lsl #2
 4f4:	0b130e25 	bleq	4c3d90 <startup-0x1fb3c270>
 4f8:	01110e03 	tsteq	r1, r3, lsl #28
 4fc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 500:	13020000 	movwne	r0, #8192	; 0x2000
 504:	3a0b0b01 	bcc	2c3110 <startup-0x1fd3cef0>
 508:	010b3b0b 	tsteq	fp, fp, lsl #22
 50c:	03000013 	movweq	r0, #19
 510:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 514:	0b3b0b3a 	bleq	ec3204 <startup-0x1f13cdfc>
 518:	0b381349 	bleq	e05244 <startup-0x1f1fadbc>
 51c:	24040000 	strcs	r0, [r4], #-0
 520:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 524:	000e030b 	andeq	r0, lr, fp, lsl #6
 528:	000f0500 	andeq	r0, pc, r0, lsl #10
 52c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 530:	16060000 	strne	r0, [r6], -r0
 534:	3a0e0300 	bcc	38113c <startup-0x1fc7eec4>
 538:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 53c:	07000013 	smladeq	r0, r3, r0, r0
 540:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 544:	0b3a0b0b 	bleq	e83178 <startup-0x1f17ce88>
 548:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 54c:	24080000 	strcs	r0, [r8], #-0
 550:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 554:	0008030b 	andeq	r0, r8, fp, lsl #6
 558:	01150900 	tsteq	r5, r0, lsl #18
 55c:	13011927 	movwne	r1, #6439	; 0x1927
 560:	050a0000 	streq	r0, [sl, #-0]
 564:	00134900 	andseq	r4, r3, r0, lsl #18
 568:	01010b00 	tsteq	r1, r0, lsl #22
 56c:	13011349 	movwne	r1, #4937	; 0x1349
 570:	210c0000 	mrscs	r0, (UNDEF: 12)
 574:	0d000000 	stceq	0, cr0, [r0, #-0]
 578:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 57c:	0b3b0b3a 	bleq	ec326c <startup-0x1f13cd94>
 580:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 584:	0000193c 	andeq	r1, r0, ip, lsr r9
 588:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 58c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 590:	00340f00 	eorseq	r0, r4, r0, lsl #30
 594:	0b3a0e03 	bleq	e83da8 <startup-0x1f17c258>
 598:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 59c:	00001802 	andeq	r1, r0, r2, lsl #16
 5a0:	03003410 	movweq	r3, #1040	; 0x410
 5a4:	3b0b3a0e 	blcc	2cede4 <startup-0x1fd3121c>
 5a8:	3f13490b 	svccc	0x0013490b
 5ac:	00180219 	andseq	r0, r8, r9, lsl r2
 5b0:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 5b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5b8:	0b3b0b3a 	bleq	ec32a8 <startup-0x1f13cd58>
 5bc:	01111927 	tsteq	r1, r7, lsr #18
 5c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5c4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 5c8:	12000013 	andne	r0, r0, #19
 5cc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 5d0:	0b3b0b3a 	bleq	ec32c0 <startup-0x1f13cd40>
 5d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 5d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 5dc:	3a0e0301 	bcc	3811e8 <startup-0x1fc7ee18>
 5e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5e8:	96184006 	ldrls	r4, [r8], -r6
 5ec:	00001942 	andeq	r1, r0, r2, asr #18
 5f0:	01110100 	tsteq	r1, r0, lsl #2
 5f4:	0b130e25 	bleq	4c3e90 <startup-0x1fb3c170>
 5f8:	01110e03 	tsteq	r1, r3, lsl #28
 5fc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 600:	13020000 	movwne	r0, #8192	; 0x2000
 604:	3a0b0b01 	bcc	2c3210 <startup-0x1fd3cdf0>
 608:	010b3b0b 	tsteq	fp, fp, lsl #22
 60c:	03000013 	movweq	r0, #19
 610:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 614:	0b3b0b3a 	bleq	ec3304 <startup-0x1f13ccfc>
 618:	0b381349 	bleq	e05344 <startup-0x1f1facbc>
 61c:	24040000 	strcs	r0, [r4], #-0
 620:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 624:	000e030b 	andeq	r0, lr, fp, lsl #6
 628:	000f0500 	andeq	r0, pc, r0, lsl #10
 62c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 630:	16060000 	strne	r0, [r6], -r0
 634:	3a0e0300 	bcc	38123c <startup-0x1fc7edc4>
 638:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 63c:	07000013 	smladeq	r0, r3, r0, r0
 640:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 644:	0b3a0b0b 	bleq	e83278 <startup-0x1f17cd88>
 648:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 64c:	24080000 	strcs	r0, [r8], #-0
 650:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 654:	0008030b 	andeq	r0, r8, fp, lsl #6
 658:	01150900 	tsteq	r5, r0, lsl #18
 65c:	13011927 	movwne	r1, #6439	; 0x1927
 660:	050a0000 	streq	r0, [sl, #-0]
 664:	00134900 	andseq	r4, r3, r0, lsl #18
 668:	01010b00 	tsteq	r1, r0, lsl #22
 66c:	13011349 	movwne	r1, #4937	; 0x1349
 670:	210c0000 	mrscs	r0, (UNDEF: 12)
 674:	0d000000 	stceq	0, cr0, [r0, #-0]
 678:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 67c:	0b3b0b3a 	bleq	ec336c <startup-0x1f13cc94>
 680:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 684:	0000193c 	andeq	r1, r0, ip, lsr r9
 688:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 68c:	00052f13 	andeq	r2, r5, r3, lsl pc
 690:	00340f00 	eorseq	r0, r4, r0, lsl #30
 694:	0b3a1347 	bleq	e853b8 <startup-0x1f17ac48>
 698:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 69c:	34100000 	ldrcc	r0, [r0], #-0
 6a0:	3a134700 	bcc	4d22a8 <startup-0x1fb2dd58>
 6a4:	0018020b 	andseq	r0, r8, fp, lsl #4
 6a8:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 6ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6b4:	01111927 	tsteq	r1, r7, lsr #18
 6b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 6c0:	12000013 	andne	r0, r0, #19
 6c4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 6c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 6d0:	34130000 	ldrcc	r0, [r3], #-0
 6d4:	3a0e0300 	bcc	3812dc <startup-0x1fc7ed24>
 6d8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 6dc:	00180213 	andseq	r0, r8, r3, lsl r2
 6e0:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 6e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6ec:	01111927 	tsteq	r1, r7, lsr #18
 6f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6f4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 6f8:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 6fc:	08030034 	stmdaeq	r3, {r2, r4, r5}
 700:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 704:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 708:	34160000 	ldrcc	r0, [r6], #-0
 70c:	3a080300 	bcc	201314 <startup-0x1fdfecec>
 710:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 714:	17000013 	smladne	r0, r3, r0, r0
 718:	08030005 	stmdaeq	r3, {r0, r2}
 71c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 720:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 724:	0b180000 	bleq	60072c <startup-0x1f9ff8d4>
 728:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 72c:	19000006 	stmdbne	r0, {r1, r2}
 730:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 734:	0b3a0e03 	bleq	e83f48 <startup-0x1f17c0b8>
 738:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 73c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 740:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 744:	00130119 	andseq	r0, r3, r9, lsl r1
 748:	00051a00 	andeq	r1, r5, r0, lsl #20
 74c:	0b3a0803 	bleq	e82760 <startup-0x1f17d8a0>
 750:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 754:	00001802 	andeq	r1, r0, r2, lsl #16
 758:	0300051b 	movweq	r0, #1307	; 0x51b
 75c:	3b0b3a0e 	blcc	2cef9c <startup-0x1fd31064>
 760:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 764:	1c000018 	stcne	0, cr0, [r0], {24}
 768:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 76c:	0b3b0b3a 	bleq	ec345c <startup-0x1f13cba4>
 770:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 774:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 778:	03193f01 	tsteq	r9, #1, 30
 77c:	3b0b3a0e 	blcc	2cefbc <startup-0x1fd31044>
 780:	1119270b 	tstne	r9, fp, lsl #14
 784:	40061201 	andmi	r1, r6, r1, lsl #4
 788:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 78c:	00001301 	andeq	r1, r0, r1, lsl #6
 790:	0300341e 	movweq	r3, #1054	; 0x41e
 794:	3b0b3a08 	blcc	2cefbc <startup-0x1fd31044>
 798:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 79c:	1f000018 	svcne	0x00000018
 7a0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 7a4:	0b3a0e03 	bleq	e83fb8 <startup-0x1f17c048>
 7a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 7ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7b0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 7b4:	20000019 	andcs	r0, r0, r9, lsl r0
 7b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 7bc:	0b3a0e03 	bleq	e83fd0 <startup-0x1f17c030>
 7c0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 7c4:	01111349 	tsteq	r1, r9, asr #6
 7c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7cc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 7d0:	21000013 	tstcs	r0, r3, lsl r0
 7d4:	0e03012e 	adfeqsp	f0, f3, #0.5
 7d8:	0b3b0b3a 	bleq	ec34c8 <startup-0x1f13cb38>
 7dc:	13491927 	movtne	r1, #39207	; 0x9927
 7e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7e4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 7e8:	00130119 	andseq	r0, r3, r9, lsl r1
 7ec:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
 7f0:	0b3a0e03 	bleq	e84004 <startup-0x1f17bffc>
 7f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 7f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7fc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 800:	00130119 	andseq	r0, r3, r9, lsl r1
 804:	002e2300 	eoreq	r2, lr, r0, lsl #6
 808:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 80c:	0b3b0b3a 	bleq	ec34fc <startup-0x1f13cb04>
 810:	01111927 	tsteq	r1, r7, lsr #18
 814:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 818:	00194297 	mulseq	r9, r7, r2
 81c:	11010000 	mrsne	r0, (UNDEF: 1)
 820:	130e2501 	movwne	r2, #58625	; 0xe501
 824:	110e030b 	tstne	lr, fp, lsl #6
 828:	10061201 	andne	r1, r6, r1, lsl #4
 82c:	02000017 	andeq	r0, r0, #23
 830:	0b0b0113 	bleq	2c0c84 <startup-0x1fd3f37c>
 834:	0b3b0b3a 	bleq	ec3524 <startup-0x1f13cadc>
 838:	00001301 	andeq	r1, r0, r1, lsl #6
 83c:	03000d03 	movweq	r0, #3331	; 0xd03
 840:	3b0b3a0e 	blcc	2cf080 <startup-0x1fd30f80>
 844:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 848:	0400000b 	streq	r0, [r0], #-11
 84c:	0b0b0024 	bleq	2c08e4 <startup-0x1fd3f71c>
 850:	0e030b3e 	vmoveq.16	d3[0], r0
 854:	0f050000 	svceq	0x00050000
 858:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 85c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 860:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 864:	0b3b0b3a 	bleq	ec3554 <startup-0x1f13caac>
 868:	00001349 	andeq	r1, r0, r9, asr #6
 86c:	03011307 	movweq	r1, #4871	; 0x1307
 870:	3a0b0b0e 	bcc	2c34b0 <startup-0x1fd3cb50>
 874:	010b3b0b 	tsteq	fp, fp, lsl #22
 878:	08000013 	stmdaeq	r0, {r0, r1, r4}
 87c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 880:	0b3a0e03 	bleq	e84094 <startup-0x1f17bf6c>
 884:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 888:	06120111 			; <UNDEFINED> instruction: 0x06120111
 88c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 890:	00130119 	andseq	r0, r3, r9, lsl r1
 894:	00050900 	andeq	r0, r5, r0, lsl #18
 898:	0b3a0e03 	bleq	e840ac <startup-0x1f17bf54>
 89c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 8a0:	00001802 	andeq	r1, r0, r2, lsl #16
 8a4:	01110100 	tsteq	r1, r0, lsl #2
 8a8:	0b130e25 	bleq	4c4144 <startup-0x1fb3bebc>
 8ac:	01110e03 	tsteq	r1, r3, lsl #28
 8b0:	17100612 			; <UNDEFINED> instruction: 0x17100612
 8b4:	13020000 	movwne	r0, #8192	; 0x2000
 8b8:	3a0b0b01 	bcc	2c34c4 <startup-0x1fd3cb3c>
 8bc:	010b3b0b 	tsteq	fp, fp, lsl #22
 8c0:	03000013 	movweq	r0, #19
 8c4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 8c8:	0b3b0b3a 	bleq	ec35b8 <startup-0x1f13ca48>
 8cc:	0b381349 	bleq	e055f8 <startup-0x1f1faa08>
 8d0:	24040000 	strcs	r0, [r4], #-0
 8d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 8d8:	000e030b 	andeq	r0, lr, fp, lsl #6
 8dc:	000f0500 	andeq	r0, pc, r0, lsl #10
 8e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 8e4:	16060000 	strne	r0, [r6], -r0
 8e8:	3a0e0300 	bcc	3814f0 <startup-0x1fc7eb10>
 8ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8f0:	07000013 	smladeq	r0, r3, r0, r0
 8f4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 8f8:	0b3a0e03 	bleq	e8410c <startup-0x1f17bef4>
 8fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 900:	06120111 			; <UNDEFINED> instruction: 0x06120111
 904:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 908:	00130119 	andseq	r0, r3, r9, lsl r1
 90c:	00050800 	andeq	r0, r5, r0, lsl #16
 910:	0b3a0803 	bleq	e82924 <startup-0x1f17d6dc>
 914:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 918:	00001802 	andeq	r1, r0, r2, lsl #16
 91c:	03000509 	movweq	r0, #1289	; 0x509
 920:	3b0b3a0e 	blcc	2cf160 <startup-0x1fd30ea0>
 924:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 928:	0a000018 	beq	990 <startup-0x1ffff670>
 92c:	0b0b0024 	bleq	2c09c4 <startup-0x1fd3f63c>
 930:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 934:	01000000 	mrseq	r0, (UNDEF: 0)
 938:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 93c:	0e030b13 	vmoveq.32	d3[0], r0
 940:	06120111 			; <UNDEFINED> instruction: 0x06120111
 944:	00001710 	andeq	r1, r0, r0, lsl r7
 948:	0b011302 	bleq	45558 <startup-0x1ffbaaa8>
 94c:	3b0b3a0b 	blcc	2cf180 <startup-0x1fd30e80>
 950:	0013010b 	andseq	r0, r3, fp, lsl #2
 954:	000d0300 	andeq	r0, sp, r0, lsl #6
 958:	0b3a0e03 	bleq	e8416c <startup-0x1f17be94>
 95c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 960:	00000b38 	andeq	r0, r0, r8, lsr fp
 964:	0b002404 	bleq	997c <startup-0x1fff6684>
 968:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 96c:	0500000e 	streq	r0, [r0, #-14]
 970:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 974:	0b3b0b3a 	bleq	ec3664 <startup-0x1f13c99c>
 978:	00001349 	andeq	r1, r0, r9, asr #6
 97c:	3f012e06 	svccc	0x00012e06
 980:	3a0e0319 	bcc	3815ec <startup-0x1fc7ea14>
 984:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 988:	11134919 	tstne	r3, r9, lsl r9
 98c:	40061201 	andmi	r1, r6, r1, lsl #4
 990:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 994:	00001301 	andeq	r1, r0, r1, lsl #6
 998:	03000507 	movweq	r0, #1287	; 0x507
 99c:	3b0b3a08 	blcc	2cf1c4 <startup-0x1fd30e3c>
 9a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 9a4:	08000018 	stmdaeq	r0, {r3, r4}
 9a8:	08030034 	stmdaeq	r3, {r2, r4, r5}
 9ac:	0b3b0b3a 	bleq	ec369c <startup-0x1f13c964>
 9b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 9b4:	24090000 	strcs	r0, [r9], #-0
 9b8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 9bc:	0008030b 	andeq	r0, r8, fp, lsl #6
 9c0:	002e0a00 	eoreq	r0, lr, r0, lsl #20
 9c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 9c8:	0b3b0b3a 	bleq	ec36b8 <startup-0x1f13c948>
 9cc:	13491927 	movtne	r1, #39207	; 0x9927
 9d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 9d8:	0b000019 	bleq	a44 <startup-0x1ffff5bc>
 9dc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 9e0:	0b3a0e03 	bleq	e841f4 <startup-0x1f17be0c>
 9e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 9e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 9f0:	00000019 	andeq	r0, r0, r9, lsl r0
 9f4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 9f8:	030b130e 	movweq	r1, #45838	; 0xb30e
 9fc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 a00:	00171006 	andseq	r1, r7, r6
 a04:	01130200 	tsteq	r3, r0, lsl #4
 a08:	0b3a0b0b 	bleq	e8363c <startup-0x1f17c9c4>
 a0c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 a10:	0d030000 	stceq	0, cr0, [r3, #-0]
 a14:	3a0e0300 	bcc	38161c <startup-0x1fc7e9e4>
 a18:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a1c:	000b3813 	andeq	r3, fp, r3, lsl r8
 a20:	00240400 	eoreq	r0, r4, r0, lsl #8
 a24:	0b3e0b0b 	bleq	f83658 <startup-0x1f07c9a8>
 a28:	00000e03 	andeq	r0, r0, r3, lsl #28
 a2c:	0b000f05 	bleq	4648 <startup-0x1fffb9b8>
 a30:	0013490b 	andseq	r4, r3, fp, lsl #18
 a34:	00160600 	andseq	r0, r6, r0, lsl #12
 a38:	0b3a0e03 	bleq	e8424c <startup-0x1f17bdb4>
 a3c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a40:	13070000 	movwne	r0, #28672	; 0x7000
 a44:	0b0e0301 	bleq	381650 <startup-0x1fc7e9b0>
 a48:	3b0b3a0b 	blcc	2cf27c <startup-0x1fd30d84>
 a4c:	0013010b 	andseq	r0, r3, fp, lsl #2
 a50:	00240800 	eoreq	r0, r4, r0, lsl #16
 a54:	0b3e0b0b 	bleq	f83688 <startup-0x1f07c978>
 a58:	00000803 	andeq	r0, r0, r3, lsl #16
 a5c:	27011509 	strcs	r1, [r1, -r9, lsl #10]
 a60:	00130119 	andseq	r0, r3, r9, lsl r1
 a64:	00050a00 	andeq	r0, r5, r0, lsl #20
 a68:	00001349 	andeq	r1, r0, r9, asr #6
 a6c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 a70:	00130113 	andseq	r0, r3, r3, lsl r1
 a74:	00210c00 	eoreq	r0, r1, r0, lsl #24
 a78:	340d0000 	strcc	r0, [sp], #-0
 a7c:	3a0e0300 	bcc	381684 <startup-0x1fc7e97c>
 a80:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a84:	3c193f13 	ldccc	15, cr3, [r9], {19}
 a88:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 a8c:	13490021 	movtne	r0, #36897	; 0x9021
 a90:	0000052f 	andeq	r0, r0, pc, lsr #10
 a94:	3f012e0f 	svccc	0x00012e0f
 a98:	3a0e0319 	bcc	381704 <startup-0x1fc7e8fc>
 a9c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 aa0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 aa4:	96184006 	ldrls	r4, [r8], -r6
 aa8:	13011942 	movwne	r1, #6466	; 0x1942
 aac:	34100000 	ldrcc	r0, [r0], #-0
 ab0:	3a080300 	bcc	2016b8 <startup-0x1fdfe948>
 ab4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ab8:	00180213 	andseq	r0, r8, r3, lsl r2
 abc:	00341100 	eorseq	r1, r4, r0, lsl #2
 ac0:	0b3a0e03 	bleq	e842d4 <startup-0x1f17bd2c>
 ac4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ac8:	00001802 	andeq	r1, r0, r2, lsl #16
 acc:	49002112 	stmdbmi	r0, {r1, r4, r8, sp}
 ad0:	000b2f13 	andeq	r2, fp, r3, lsl pc
 ad4:	00051300 	andeq	r1, r5, r0, lsl #6
 ad8:	0b3a0e03 	bleq	e842ec <startup-0x1f17bd14>
 adc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ae0:	00001802 	andeq	r1, r0, r2, lsl #16
 ae4:	3f002e14 	svccc	0x00002e14
 ae8:	3a0e0319 	bcc	381754 <startup-0x1fc7e8ac>
 aec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 af0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 af4:	96184006 	ldrls	r4, [r8], -r6
 af8:	00001942 	andeq	r1, r0, r2, asr #18
 afc:	3f002e15 	svccc	0x00002e15
 b00:	3a0e0319 	bcc	38176c <startup-0x1fc7e894>
 b04:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 b08:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 b0c:	97184006 	ldrls	r4, [r8, -r6]
 b10:	00001942 	andeq	r1, r0, r2, asr #18
 b14:	03000516 	movweq	r0, #1302	; 0x516
 b18:	3b0b3a08 	blcc	2cf340 <startup-0x1fd30cc0>
 b1c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 b20:	17000018 	smladne	r0, r8, r0, r0
 b24:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 b28:	0b3a0e03 	bleq	e8433c <startup-0x1f17bcc4>
 b2c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 b30:	01111349 	tsteq	r1, r9, asr #6
 b34:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 b38:	01194296 			; <UNDEFINED> instruction: 0x01194296
 b3c:	18000013 	stmdane	r0, {r0, r1, r4}
 b40:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 b44:	0b3a0e03 	bleq	e84358 <startup-0x1f17bca8>
 b48:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 b4c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 b50:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 b54:	00130119 	andseq	r0, r3, r9, lsl r1
 b58:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 b5c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 b60:	0b3b0b3a 	bleq	ec3850 <startup-0x1f13c7b0>
 b64:	01111927 	tsteq	r1, r7, lsr #18
 b68:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 b6c:	00194297 	mulseq	r9, r7, r2
 b70:	11010000 	mrsne	r0, (UNDEF: 1)
 b74:	130e2501 	movwne	r2, #58625	; 0xe501
 b78:	110e030b 	tstne	lr, fp, lsl #6
 b7c:	10061201 	andne	r1, r6, r1, lsl #4
 b80:	02000017 	andeq	r0, r0, #23
 b84:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 b88:	0b3a0b0b 	bleq	e837bc <startup-0x1f17c844>
 b8c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 b90:	0d030000 	stceq	0, cr0, [r3, #-0]
 b94:	3a0e0300 	bcc	38179c <startup-0x1fc7e864>
 b98:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b9c:	000b3813 	andeq	r3, fp, r3, lsl r8
 ba0:	000f0400 	andeq	r0, pc, r0, lsl #8
 ba4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 ba8:	24050000 	strcs	r0, [r5], #-0
 bac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 bb0:	000e030b 	andeq	r0, lr, fp, lsl #6
 bb4:	00240600 	eoreq	r0, r4, r0, lsl #12
 bb8:	0b3e0b0b 	bleq	f837ec <startup-0x1f07c814>
 bbc:	00000803 	andeq	r0, r0, r3, lsl #16
 bc0:	27011507 	strcs	r1, [r1, -r7, lsl #10]
 bc4:	00130119 	andseq	r0, r3, r9, lsl r1
 bc8:	00050800 	andeq	r0, r5, r0, lsl #16
 bcc:	00001349 	andeq	r1, r0, r9, asr #6
 bd0:	03001609 	movweq	r1, #1545	; 0x609
 bd4:	3b0b3a0e 	blcc	2cf414 <startup-0x1fd30bec>
 bd8:	0013490b 	andseq	r4, r3, fp, lsl #18
 bdc:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
 be0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 be4:	0b3b0b3a 	bleq	ec38d4 <startup-0x1f13c72c>
 be8:	01111927 	tsteq	r1, r7, lsr #18
 bec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 bf0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 bf4:	0b000013 	bleq	c48 <startup-0x1ffff3b8>
 bf8:	08030005 	stmdaeq	r3, {r0, r2}
 bfc:	0b3b0b3a 	bleq	ec38ec <startup-0x1f13c714>
 c00:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 c04:	050c0000 	streq	r0, [ip, #-0]
 c08:	3a0e0300 	bcc	381810 <startup-0x1fc7e7f0>
 c0c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c10:	00180213 	andseq	r0, r8, r3, lsl r2
 c14:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 c18:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 c1c:	0b3b0b3a 	bleq	ec390c <startup-0x1f13c6f4>
 c20:	01111927 	tsteq	r1, r7, lsr #18
 c24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 c28:	00194296 	mulseq	r9, r6, r2
 c2c:	00340e00 	eorseq	r0, r4, r0, lsl #28
 c30:	0b3a0e03 	bleq	e84444 <startup-0x1f17bbbc>
 c34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 c38:	00001802 	andeq	r1, r0, r2, lsl #16
 c3c:	01110100 	tsteq	r1, r0, lsl #2
 c40:	0b130e25 	bleq	4c44dc <startup-0x1fb3bb24>
 c44:	01110e03 	tsteq	r1, r3, lsl #28
 c48:	17100612 			; <UNDEFINED> instruction: 0x17100612
 c4c:	13020000 	movwne	r0, #8192	; 0x2000
 c50:	3a0b0b01 	bcc	2c385c <startup-0x1fd3c7a4>
 c54:	010b3b0b 	tsteq	fp, fp, lsl #22
 c58:	03000013 	movweq	r0, #19
 c5c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 c60:	0b3b0b3a 	bleq	ec3950 <startup-0x1f13c6b0>
 c64:	0b381349 	bleq	e05990 <startup-0x1f1fa670>
 c68:	24040000 	strcs	r0, [r4], #-0
 c6c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 c70:	000e030b 	andeq	r0, lr, fp, lsl #6
 c74:	000f0500 	andeq	r0, pc, r0, lsl #10
 c78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 c7c:	16060000 	strne	r0, [r6], -r0
 c80:	3a0e0300 	bcc	381888 <startup-0x1fc7e778>
 c84:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c88:	07000013 	smladeq	r0, r3, r0, r0
 c8c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 c90:	0b3a0b0b 	bleq	e838c4 <startup-0x1f17c73c>
 c94:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 c98:	24080000 	strcs	r0, [r8], #-0
 c9c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 ca0:	0008030b 	andeq	r0, r8, fp, lsl #6
 ca4:	01150900 	tsteq	r5, r0, lsl #18
 ca8:	13011927 	movwne	r1, #6439	; 0x1927
 cac:	050a0000 	streq	r0, [sl, #-0]
 cb0:	00134900 	andseq	r4, r3, r0, lsl #18
 cb4:	01010b00 	tsteq	r1, r0, lsl #22
 cb8:	13011349 	movwne	r1, #4937	; 0x1349
 cbc:	210c0000 	mrscs	r0, (UNDEF: 12)
 cc0:	0d000000 	stceq	0, cr0, [r0, #-0]
 cc4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 cc8:	0b3b0b3a 	bleq	ec39b8 <startup-0x1f13c648>
 ccc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 cd0:	0000193c 	andeq	r1, r0, ip, lsr r9
 cd4:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 cd8:	00052f13 	andeq	r2, r5, r3, lsl pc
 cdc:	00340f00 	eorseq	r0, r4, r0, lsl #30
 ce0:	0b3a0e03 	bleq	e844f4 <startup-0x1f17bb0c>
 ce4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ce8:	00001802 	andeq	r1, r0, r2, lsl #16
 cec:	03003410 	movweq	r3, #1040	; 0x410
 cf0:	3b0b3a0e 	blcc	2cf530 <startup-0x1fd30ad0>
 cf4:	3f13490b 	svccc	0x0013490b
 cf8:	00180219 	andseq	r0, r8, r9, lsl r2
 cfc:	00211100 	eoreq	r1, r1, r0, lsl #2
 d00:	0b2f1349 	bleq	bc5a2c <startup-0x1f43a5d4>
 d04:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 d08:	03193f01 	tsteq	r9, #1, 30
 d0c:	3b0b3a0e 	blcc	2cf54c <startup-0x1fd30ab4>
 d10:	1119270b 	tstne	r9, fp, lsl #14
 d14:	40061201 	andmi	r1, r6, r1, lsl #4
 d18:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 d1c:	00001301 	andeq	r1, r0, r1, lsl #6
 d20:	03000513 	movweq	r0, #1299	; 0x513
 d24:	3b0b3a0e 	blcc	2cf564 <startup-0x1fd30a9c>
 d28:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 d2c:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 d30:	0e03012e 	adfeqsp	f0, f3, #0.5
 d34:	0b3b0b3a 	bleq	ec3a24 <startup-0x1f13c5dc>
 d38:	01111927 	tsteq	r1, r7, lsr #18
 d3c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 d40:	00194296 	mulseq	r9, r6, r2
 d44:	11010000 	mrsne	r0, (UNDEF: 1)
 d48:	130e2501 	movwne	r2, #58625	; 0xe501
 d4c:	110e030b 	tstne	lr, fp, lsl #6
 d50:	10061201 	andne	r1, r6, r1, lsl #4
 d54:	02000017 	andeq	r0, r0, #23
 d58:	0b0b0113 	bleq	2c11ac <startup-0x1fd3ee54>
 d5c:	0b3b0b3a 	bleq	ec3a4c <startup-0x1f13c5b4>
 d60:	00001301 	andeq	r1, r0, r1, lsl #6
 d64:	03000d03 	movweq	r0, #3331	; 0xd03
 d68:	3b0b3a0e 	blcc	2cf5a8 <startup-0x1fd30a58>
 d6c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 d70:	0400000b 	streq	r0, [r0], #-11
 d74:	0b0b0024 	bleq	2c0e0c <startup-0x1fd3f1f4>
 d78:	0e030b3e 	vmoveq.16	d3[0], r0
 d7c:	0f050000 	svceq	0x00050000
 d80:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 d84:	06000013 			; <UNDEFINED> instruction: 0x06000013
 d88:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 d8c:	0b3b0b3a 	bleq	ec3a7c <startup-0x1f13c584>
 d90:	00001349 	andeq	r1, r0, r9, asr #6
 d94:	03011307 	movweq	r1, #4871	; 0x1307
 d98:	3a0b0b0e 	bcc	2c39d8 <startup-0x1fd3c628>
 d9c:	010b3b0b 	tsteq	fp, fp, lsl #22
 da0:	08000013 	stmdaeq	r0, {r0, r1, r4}
 da4:	0b0b0024 	bleq	2c0e3c <startup-0x1fd3f1c4>
 da8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 dac:	15090000 	strne	r0, [r9, #-0]
 db0:	01192701 	tsteq	r9, r1, lsl #14
 db4:	0a000013 	beq	e08 <startup-0x1ffff1f8>
 db8:	13490005 	movtne	r0, #36869	; 0x9005
 dbc:	010b0000 	mrseq	r0, (UNDEF: 11)
 dc0:	01134901 	tsteq	r3, r1, lsl #18
 dc4:	0c000013 	stceq	0, cr0, [r0], {19}
 dc8:	00000021 	andeq	r0, r0, r1, lsr #32
 dcc:	0300340d 	movweq	r3, #1037	; 0x40d
 dd0:	3b0b3a0e 	blcc	2cf610 <startup-0x1fd309f0>
 dd4:	3f13490b 	svccc	0x0013490b
 dd8:	00193c19 	andseq	r3, r9, r9, lsl ip
 ddc:	00210e00 	eoreq	r0, r1, r0, lsl #28
 de0:	052f1349 	streq	r1, [pc, #-841]!	; a9f <startup-0x1ffff561>
 de4:	340f0000 	strcc	r0, [pc], #-0	; dec <startup-0x1ffff214>
 de8:	3a0e0300 	bcc	3819f0 <startup-0x1fc7e610>
 dec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 df0:	00180213 	andseq	r0, r8, r3, lsl r2
 df4:	00341000 	eorseq	r1, r4, r0
 df8:	0b3a0e03 	bleq	e8460c <startup-0x1f17b9f4>
 dfc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 e00:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 e04:	21110000 	tstcs	r1, r0
 e08:	2f134900 	svccs	0x00134900
 e0c:	1200000b 	andne	r0, r0, #11
 e10:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 e14:	0b3a0e03 	bleq	e84628 <startup-0x1f17b9d8>
 e18:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 e1c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 e20:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 e24:	00130119 	andseq	r0, r3, r9, lsl r1
 e28:	00051300 	andeq	r1, r5, r0, lsl #6
 e2c:	0b3a0e03 	bleq	e84640 <startup-0x1f17b9c0>
 e30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 e34:	00001802 	andeq	r1, r0, r2, lsl #16
 e38:	03012e14 	movweq	r2, #7700	; 0x1e14
 e3c:	3b0b3a0e 	blcc	2cf67c <startup-0x1fd30984>
 e40:	1119270b 	tstne	r9, fp, lsl #14
 e44:	40061201 	andmi	r1, r6, r1, lsl #4
 e48:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 e4c:	Address 0x00000e4c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	08e00002 	stmiaeq	r0!, {r1}^
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000e00 	andcs	r0, r0, r0, lsl #28
  3c:	00000056 	andeq	r0, r0, r6, asr r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	0ac40002 	beq	ff10005c <firstTime.4040+0xdf0f756c>
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000e58 	andcs	r0, r0, r8, asr lr
  5c:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0ff30002 	svceq	0x00f30002
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20001100 	andcs	r1, r0, r0, lsl #2
  7c:	000000fc 	strdeq	r0, [r0], -ip
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	11cc0002 	bicne	r0, ip, r2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	200011fc 	strdcs	r1, [r0], -ip
  9c:	00000364 	andeq	r0, r0, r4, ror #6
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	18110002 	ldmdane	r1, {r1}
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20001560 	andcs	r1, r0, r0, ror #10
  bc:	00000238 	andeq	r0, r0, r8, lsr r2
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	1cad0002 	stcne	0, cr0, [sp], #8
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20001798 	mulcs	r0, r8, r7
  dc:	00000e44 	andeq	r0, r0, r4, asr #28
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	25500002 	ldrbcs	r0, [r0, #-2]
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	200025dc 	ldrdcs	r2, [r0], -ip
  fc:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	26540002 	ldrbcs	r0, [r4], -r2
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20002604 	andcs	r2, r0, r4, lsl #12
 11c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	271b0002 	ldrcs	r0, [fp, -r2]
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	2000262c 	andcs	r2, r0, ip, lsr #12
 13c:	0000006c 	andeq	r0, r0, ip, rrx
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	28540002 	ldmdacs	r4, {r1}^
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	20002698 	mulcs	r0, r8, r6
 15c:	00000520 	andeq	r0, r0, r0, lsr #10
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	2d450002 	stclcs	0, cr0, [r5, #-8]
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	20002bb8 			; <UNDEFINED> instruction: 0x20002bb8
 17c:	00000094 	muleq	r0, r4, r0
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	2e890002 	cdpcs	0, 8, cr0, cr9, cr2, {0}
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	20002c4c 	andcs	r2, r0, ip, asr #24
 19c:	000000e8 	andeq	r0, r0, r8, ror #1
	...
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	316d0002 	cmncc	sp, r2
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20002d34 	andcs	r2, r0, r4, lsr sp
 1bc:	000000e8 	andeq	r0, r0, r8, ror #1
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000e00 	andcs	r0, r0, r0, lsl #28
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
       4:	017d0002 	cmneq	sp, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	6f6d2f3a 	svcvs	0x006d2f3a
      20:	2f632f70 	svccs	0x00632f70
      24:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
      28:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
      2c:	6f697461 	svcvs	0x00697461
      30:	2f72656e 	svccs	0x0072656e
      34:	73504944 	cmpvc	r0, #68, 18	; 0x110000
      38:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
      3c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
      40:	74730000 	ldrbtvc	r0, [r3], #-0
      44:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
      48:	00632e70 	rsbeq	r2, r3, r0, ror lr
      4c:	73000001 	movwvc	r0, #1
      50:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
      54:	00682e65 	rsbeq	r2, r8, r5, ror #28
      58:	69000001 	stmdbvs	r0, {r0}
      5c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      60:	0100682e 	tsteq	r0, lr, lsr #16
      64:	61670000 	cmnvs	r7, r0
      68:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
      6c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
      70:	0100682e 	tsteq	r0, lr, lsr #16
      74:	72670000 	rsbvc	r0, r7, #0
      78:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
      7c:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
      80:	00000100 	andeq	r0, r0, r0, lsl #2
      84:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
      88:	5f726574 	svcpl	0x00726574
      8c:	63616c62 	cmnvs	r1, #25088	; 0x6200
      90:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      94:	0001006d 	andeq	r0, r1, sp, rrx
      98:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
      9c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
      a0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
      a4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
      a8:	01006d62 	tsteq	r0, r2, ror #26
      ac:	6f6d0000 	svcvs	0x006d0000
      b0:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
      b4:	72675f72 	rsbvc	r5, r7, #456	; 0x1c8
      b8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      bc:	01006d62 	tsteq	r0, r2, ror #26
      c0:	72700000 	rsbsvc	r0, r0, #0
      c4:	5f737365 	svcpl	0x00737365
      c8:	63616c62 	cmnvs	r1, #25088	; 0x6200
      cc:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      d0:	0001006d 	andeq	r0, r1, sp, rrx
      d4:	65727000 	ldrbvs	r7, [r2, #-0]!
      d8:	6c5f7373 	mrrcvs	3, 7, r7, pc, cr3	; <UNPREDICTABLE>
      dc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      e0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
      e4:	00000100 	andeq	r0, r0, r0, lsl #2
      e8:	73657270 	cmnvc	r5, #112, 4
      ec:	72675f73 	rsbvc	r5, r7, #460	; 0x1cc
      f0:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      f4:	01006d62 	tsteq	r0, r2, ror #26
      f8:	61630000 	cmnvs	r3, r0
      fc:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     100:	616c625f 	cmnvs	ip, pc, asr r2
     104:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     108:	01006d62 	tsteq	r0, r2, ror #26
     10c:	61630000 	cmnvs	r3, r0
     110:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     114:	6172675f 	cmnvs	r2, pc, asr r7
     118:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     11c:	0001006d 	andeq	r0, r1, sp, rrx
     120:	73616300 	cmnvc	r1, #0, 6
     124:	5f656c74 	svcpl	0x00656c74
     128:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     12c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     130:	0001006d 	andeq	r0, r1, sp, rrx
     134:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     138:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
     13c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     140:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     144:	00000100 	andeq	r0, r0, r0, lsl #2
     148:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     14c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
     150:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     154:	01006d62 	tsteq	r0, r2, ror #26
     158:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
     15c:	5f656c74 	svcpl	0x00656c74
     160:	63616c62 	cmnvs	r1, #25088	; 0x6200
     164:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     168:	0001006d 	andeq	r0, r1, sp, rrx
     16c:	6f6c7300 	svcvs	0x006c7300
     170:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
     174:	682e7478 	stmdavs	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
     178:	00000100 	andeq	r0, r0, r0, lsl #2
     17c:	782e6762 	stmdavc	lr!, {r1, r5, r6, r8, r9, sl, sp, lr}
     180:	01006d62 	tsteq	r0, r2, ror #26
     184:	00000000 	andeq	r0, r0, r0
     188:	00000205 	andeq	r0, r0, r5, lsl #4
     18c:	32032000 	andcc	r2, r3, #0
     190:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
     194:	01010003 	tsteq	r1, r3
     198:	10020500 	andne	r0, r2, r0, lsl #10
     19c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     1a0:	3d2f0127 	stfccs	f0, [pc, #-156]!	; 10c <startup-0x1ffffef4>
     1a4:	03303030 	teqeq	r0, #48	; 0x30
     1a8:	2f3d742c 	svccs	0x003d742c
     1ac:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1b0:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1b4:	2f3e672f 	svccs	0x003e672f
     1b8:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1bc:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1c0:	2f3d672f 	svccs	0x003d672f
     1c4:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     1c8:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     1cc:	2f3d672f 	svccs	0x003d672f
     1d0:	52023f67 	andpl	r3, r2, #412	; 0x19c
     1d4:	4a0a0317 	bmi	280e38 <startup-0x1fd7f1c8>
     1d8:	7583322f 	strvc	r3, [r3, #559]	; 0x22f
     1dc:	595959bb 	ldmdbpl	r9, {r0, r1, r3, r4, r5, r7, r8, fp, ip, lr}^
     1e0:	bb75835c 	bllt	1d60f58 <startup-0x1e29f0a8>
     1e4:	835c6759 	cmphi	ip, #23330816	; 0x1640000
     1e8:	5959bb75 	ldmdbpl	r9, {r0, r2, r4, r5, r6, r8, r9, fp, ip, sp, pc}^
     1ec:	bb75835c 	bllt	1d60f64 <startup-0x1e29f09c>
     1f0:	675b5959 			; <UNDEFINED> instruction: 0x675b5959
     1f4:	83678583 	cmnhi	r7, #549453824	; 0x20c00000
     1f8:	83836785 	orrhi	r6, r3, #34865152	; 0x2140000
     1fc:	83836785 	orrhi	r6, r3, #34865152	; 0x2140000
     200:	68686885 	stmdavs	r8!, {r0, r2, r7, fp, sp, lr}^
     204:	83835968 	orrhi	r5, r3, #104, 18	; 0x1a0000
     208:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
     20c:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
     210:	83838385 	orrhi	r8, r3, #335544322	; 0x14000002
     214:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
     218:	75820f03 	strvc	r0, [r2, #3843]	; 0xf03
     21c:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
     220:	75134e02 	ldrvc	r4, [r3, #-3586]	; 0xfffff1fe
     224:	67757575 			; <UNDEFINED> instruction: 0x67757575
     228:	2f2f7675 	svccs	0x002f7675
     22c:	593f4b30 	ldmdbpl	pc!, {r4, r5, r8, r9, fp, lr}	; <UNPREDICTABLE>
     230:	6721945d 			; <UNDEFINED> instruction: 0x6721945d
     234:	3d3d4f3a 	ldccc	15, cr4, [sp, #-232]!	; 0xffffff18
     238:	93675a25 	cmnls	r7, #151552	; 0x25000
     23c:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     240:	42676767 	rsbmi	r6, r7, #27000832	; 0x19c0000
     244:	01040200 	mrseq	r0, R12_usr
     248:	83068206 	movwhi	r8, #25094	; 0x6206
     24c:	753083bb 	ldrvc	r8, [r0, #-955]!	; 0xfffffc45
     250:	c9bbc991 	ldmibgt	fp!, {r0, r4, r7, r8, fp, lr, pc}
     254:	c9d7c9c9 	ldmibgt	r7, {r0, r3, r6, r7, r8, fp, lr, pc}^
     258:	2108c9f3 	strdcs	ip, [r8, -r3]
     25c:	c91308c9 	ldmdbgt	r3, {r0, r3, r6, r7, fp}
     260:	42022f08 	andmi	r2, r2, #8, 30
     264:	c9130813 	ldmdbgt	r3, {r0, r1, r4, fp}
     268:	08c92108 	stmiaeq	r9, {r3, r8, sp}^
     26c:	3d08bb4b 	vstrcc	d11, [r8, #-300]	; 0xfffffed4
     270:	4b3d4bca 	blmi	f531a0 <startup-0x1f0ace60>
     274:	3d59323d 	lfmcc	f3, 2, [r9, #-244]	; 0xffffff0c
     278:	bb323d4b 	bllt	c8f7ac <startup-0x1f370854>
     27c:	bbbbbbbb 	bllt	feeef170 <firstTime.4040+0xdeee6680>
     280:	24e775e5 	strbtcs	r7, [r7], #1509	; 0x5e5
     284:	67765959 			; <UNDEFINED> instruction: 0x67765959
     288:	003f675b 	eorseq	r6, pc, fp, asr r7	; <UNPREDICTABLE>
     28c:	06010402 	streq	r0, [r1], -r2, lsl #8
     290:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     294:	02009002 	andeq	r9, r0, #2
     298:	06900304 	ldreq	r0, [r0], r4, lsl #6
     29c:	68845967 	stmvs	r4, {r0, r1, r2, r5, r6, r8, fp, ip, lr}
     2a0:	f4916767 			; <UNDEFINED> instruction: 0xf4916767
     2a4:	69598383 	ldmdbvs	r9, {r0, r1, r7, r8, r9, pc}^
     2a8:	5a03aebd 	bpl	ebda4 <startup-0x1ff1425c>
     2ac:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
     2b0:	7fa40301 	svcvc	0x00a40301
     2b4:	00250220 	eoreq	r0, r5, r0, lsr #4
     2b8:	008a0101 	addeq	r0, sl, r1, lsl #2
     2bc:	00020000 	andeq	r0, r2, r0
     2c0:	00000070 	andeq	r0, r0, r0, ror r0
     2c4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     2c8:	0101000d 	tsteq	r1, sp
     2cc:	00000101 	andeq	r0, r0, r1, lsl #2
     2d0:	00000100 	andeq	r0, r0, r0, lsl #2
     2d4:	2f3a4301 	svccs	0x003a4301
     2d8:	2f706f6d 	svccs	0x00706f6d
     2dc:	6f4d2f63 	svcvs	0x004d2f63
     2e0:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     2e4:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     2e8:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     2ec:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     2f0:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     2f4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     2f8:	0000432f 	andeq	r4, r0, pc, lsr #6
     2fc:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     300:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     304:	632e7463 			; <UNDEFINED> instruction: 0x632e7463
     308:	00000100 	andeq	r0, r0, r0, lsl #2
     30c:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     310:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     314:	00000100 	andeq	r0, r0, r0, lsl #2
     318:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     31c:	00682e65 	rsbeq	r2, r8, r5, ror #28
     320:	67000001 	strvs	r0, [r0, -r1]
     324:	6f656d61 	svcvs	0x00656d61
     328:	63656a62 	cmnvs	r5, #401408	; 0x62000
     32c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     330:	00000001 	andeq	r0, r0, r1
     334:	00020500 	andeq	r0, r2, r0, lsl #10
     338:	1920000e 	stmdbne	r0!, {r1, r2, r3}
     33c:	594b4c4c 	stmdbpl	fp, {r2, r3, r6, sl, fp, lr}^
     340:	02ca3d67 	sbceq	r3, sl, #6592	; 0x19c0
     344:	01010004 	tsteq	r1, r4
     348:	00000184 	andeq	r0, r0, r4, lsl #3
     34c:	01370002 	teqeq	r7, r2
     350:	01020000 	mrseq	r0, (UNDEF: 2)
     354:	000d0efb 	strdeq	r0, [sp], -fp
     358:	01010101 	tsteq	r1, r1, lsl #2
     35c:	01000000 	mrseq	r0, (UNDEF: 0)
     360:	43010000 	movwmi	r0, #4096	; 0x1000
     364:	6f6d2f3a 	svcvs	0x006d2f3a
     368:	2f632f70 	svccs	0x00632f70
     36c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     370:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     374:	6f697461 	svcvs	0x00697461
     378:	2f72656e 	svccs	0x0072656e
     37c:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     380:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     384:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     388:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     38c:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
     390:	00000100 	andeq	r0, r0, r0, lsl #2
     394:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     398:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     39c:	00000100 	andeq	r0, r0, r0, lsl #2
     3a0:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     3a4:	00682e65 	rsbeq	r2, r8, r5, ror #28
     3a8:	67000001 	strvs	r0, [r0, -r1]
     3ac:	6f656d61 	svcvs	0x00656d61
     3b0:	63656a62 	cmnvs	r5, #401408	; 0x62000
     3b4:	00682e74 	rsbeq	r2, r8, r4, ror lr
     3b8:	66000001 	strvs	r0, [r0], -r1
     3bc:	5f657269 	svcpl	0x00657269
     3c0:	63616c62 	cmnvs	r1, #25088	; 0x6200
     3c4:	2e325f6b 	cdpcs	15, 3, cr5, cr2, cr11, {3}
     3c8:	006d6278 	rsbeq	r6, sp, r8, ror r2
     3cc:	66000001 	strvs	r0, [r0], -r1
     3d0:	31657269 	cmncc	r5, r9, ror #4
     3d4:	6172675f 	cmnvs	r2, pc, asr r7
     3d8:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     3dc:	0001006d 	andeq	r0, r1, sp, rrx
     3e0:	72696600 	rsbvc	r6, r9, #0, 12
     3e4:	6c5f3165 	ldfvse	f3, [pc], {101}	; 0x65
     3e8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     3ec:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     3f0:	00000100 	andeq	r0, r0, r0, lsl #2
     3f4:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     3f8:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     3fc:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     400:	01006d62 	tsteq	r0, r2, ror #26
     404:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     408:	5f326572 	svcpl	0x00326572
     40c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     410:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     414:	0001006d 	andeq	r0, r1, sp, rrx
     418:	72696600 	rsbvc	r6, r9, #0, 12
     41c:	675f3365 	ldrbvs	r3, [pc, -r5, ror #6]
     420:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     424:	006d6278 	rsbeq	r6, sp, r8, ror r2
     428:	66000001 	strvs	r0, [r0], -r1
     42c:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     430:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     434:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     438:	01006d62 	tsteq	r0, r2, ror #26
     43c:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     440:	5f346572 	svcpl	0x00346572
     444:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     448:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     44c:	00000100 	andeq	r0, r0, r0, lsl #2
     450:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     454:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     458:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     45c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     460:	66000001 	strvs	r0, [r0], -r1
     464:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     468:	6172675f 	cmnvs	r2, pc, asr r7
     46c:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     470:	0001006d 	andeq	r0, r1, sp, rrx
     474:	72696600 	rsbvc	r6, r9, #0, 12
     478:	6c5f3565 	cfldr64vs	mvdx3, [pc], {101}	; 0x65
     47c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     480:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     484:	00000100 	andeq	r0, r0, r0, lsl #2
     488:	02050000 	andeq	r0, r5, #0
     48c:	20000e58 	andcs	r0, r0, r8, asr lr
     490:	3d013003 	stccc	0, cr3, [r1, #-12]
     494:	2f3e672f 	svccs	0x003e672f
     498:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     49c:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     4a0:	2f3e672f 	svccs	0x003e672f
     4a4:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     4a8:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     4ac:	2f3e672f 	svccs	0x003e672f
     4b0:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     4b4:	1446023d 	strbne	r0, [r6], #-573	; 0xfffffdc3
     4b8:	3e2f4b4c 	vnmulcc.f64	d4, d15, d12
     4bc:	5959594b 	ldmdbpl	r9, {r0, r1, r3, r6, r8, fp, ip, lr}^
     4c0:	9191915a 	orrsls	r9, r1, sl, asr r1
     4c4:	3d3e9391 	ldccc	3, cr9, [lr, #-580]!	; 0xfffffdbc
     4c8:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     4cc:	01010031 	tsteq	r1, r1, lsr r0
     4d0:	000000a6 	andeq	r0, r0, r6, lsr #1
     4d4:	006c0002 	rsbeq	r0, ip, r2
     4d8:	01020000 	mrseq	r0, (UNDEF: 2)
     4dc:	000d0efb 	strdeq	r0, [sp], -fp
     4e0:	01010101 	tsteq	r1, r1, lsl #2
     4e4:	01000000 	mrseq	r0, (UNDEF: 0)
     4e8:	43010000 	movwmi	r0, #4096	; 0x1000
     4ec:	6f6d2f3a 	svcvs	0x006d2f3a
     4f0:	2f632f70 	svccs	0x00632f70
     4f4:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     4f8:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     4fc:	6f697461 	svcvs	0x00697461
     500:	2f72656e 	svccs	0x0072656e
     504:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     508:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     50c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     510:	6c700000 	ldclvs	0, cr0, [r0], #-0
     514:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
     518:	0100632e 	tsteq	r0, lr, lsr #6
     51c:	70730000 	rsbsvc	r0, r3, r0
     520:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     524:	0100682e 	tsteq	r0, lr, lsr #16
     528:	6d690000 	stclvs	0, cr0, [r9, #-0]
     52c:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
     530:	00010068 	andeq	r0, r1, r8, rrx
     534:	6d616700 	stclvs	7, cr6, [r1, #-0]
     538:	6a626f65 	bvs	189c2d4 <startup-0x1e763d2c>
     53c:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     540:	00010068 	andeq	r0, r1, r8, rrx
     544:	05000000 	streq	r0, [r0, #-0]
     548:	00110002 	andseq	r0, r1, r2
     54c:	594b1720 	stmdbpl	fp, {r5, r8, r9, sl, ip}^
     550:	00cf3d67 	sbceq	r3, pc, r7, ror #26
     554:	06010402 	streq	r0, [r1], -r2, lsl #8
     558:	5b59064a 	blpl	1641e88 <startup-0x1e9be178>
     55c:	01040200 	mrseq	r0, R12_usr
     560:	59064a06 	stmdbpl	r6, {r1, r2, r9, fp, lr}
     564:	0402005b 	streq	r0, [r2], #-91	; 0xffffffa5
     568:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
     56c:	4b765b75 	blmi	1d97348 <startup-0x1e268cb8>
     570:	675b4b68 	ldrbvs	r4, [fp, -r8, ror #22]
     574:	000a0268 	andeq	r0, sl, r8, ror #4
     578:	01dd0101 	bicseq	r0, sp, r1, lsl #2
     57c:	00020000 	andeq	r0, r2, r0
     580:	00000182 	andeq	r0, r0, r2, lsl #3
     584:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     588:	0101000d 	tsteq	r1, sp
     58c:	00000101 	andeq	r0, r0, r1, lsl #2
     590:	00000100 	andeq	r0, r0, r0, lsl #2
     594:	2f3a4301 	svccs	0x003a4301
     598:	2f706f6d 	svccs	0x00706f6d
     59c:	6f4d2f63 	svcvs	0x004d2f63
     5a0:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     5a4:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     5a8:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     5ac:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     5b0:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     5b4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     5b8:	0000432f 	andeq	r4, r0, pc, lsr #6
     5bc:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     5c0:	0100632e 	tsteq	r0, lr, lsr #6
     5c4:	70730000 	rsbsvc	r0, r3, r0
     5c8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     5cc:	0100682e 	tsteq	r0, lr, lsr #16
     5d0:	6d690000 	stclvs	0, cr0, [r9, #-0]
     5d4:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
     5d8:	00010068 	andeq	r0, r1, r8, rrx
     5dc:	6d616700 	stclvs	7, cr6, [r1, #-0]
     5e0:	6a626f65 	bvs	189c37c <startup-0x1e763c84>
     5e4:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     5e8:	00010068 	andeq	r0, r1, r8, rrx
     5ec:	72696200 	rsbvc	r6, r9, #0, 4
     5f0:	625f3164 	subsvs	r3, pc, #100, 2
     5f4:	6b63616c 	blvs	18d8bac <startup-0x1e727454>
     5f8:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     5fc:	00000100 	andeq	r0, r0, r0, lsl #2
     600:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     604:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     608:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     60c:	01006d62 	tsteq	r0, r2, ror #26
     610:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     614:	5f316472 	svcpl	0x00316472
     618:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     61c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     620:	0001006d 	andeq	r0, r1, sp, rrx
     624:	72696200 	rsbvc	r6, r9, #0, 4
     628:	625f3264 	subsvs	r3, pc, #100, 4	; 0x40000006
     62c:	6b63616c 	blvs	18d8be4 <startup-0x1e72741c>
     630:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     634:	00000100 	andeq	r0, r0, r0, lsl #2
     638:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     63c:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     640:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     644:	01006d62 	tsteq	r0, r2, ror #26
     648:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     64c:	5f326472 	svcpl	0x00326472
     650:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     654:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     658:	0001006d 	andeq	r0, r1, sp, rrx
     65c:	72696200 	rsbvc	r6, r9, #0, 4
     660:	625f3364 	subsvs	r3, pc, #100, 6	; 0x90000001
     664:	6b63616c 	blvs	18d8c1c <startup-0x1e7273e4>
     668:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     66c:	00000100 	andeq	r0, r0, r0, lsl #2
     670:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     674:	72675f33 	rsbvc	r5, r7, #51, 30	; 0xcc
     678:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     67c:	01006d62 	tsteq	r0, r2, ror #26
     680:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     684:	5f336472 	svcpl	0x00336472
     688:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     68c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     690:	0001006d 	andeq	r0, r1, sp, rrx
     694:	72696200 	rsbvc	r6, r9, #0, 4
     698:	625f3464 	subsvs	r3, pc, #100, 8	; 0x64000000
     69c:	6b63616c 	blvs	18d8c54 <startup-0x1e7273ac>
     6a0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     6a4:	00000100 	andeq	r0, r0, r0, lsl #2
     6a8:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     6ac:	72675f34 	rsbvc	r5, r7, #52, 30	; 0xd0
     6b0:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     6b4:	01006d62 	tsteq	r0, r2, ror #26
     6b8:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     6bc:	5f346472 	svcpl	0x00346472
     6c0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     6c4:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     6c8:	0001006d 	andeq	r0, r1, sp, rrx
     6cc:	72696200 	rsbvc	r6, r9, #0, 4
     6d0:	625f3564 	subsvs	r3, pc, #100, 10	; 0x19000000
     6d4:	6b63616c 	blvs	18d8c8c <startup-0x1e727374>
     6d8:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     6dc:	00000100 	andeq	r0, r0, r0, lsl #2
     6e0:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     6e4:	72675f35 	rsbvc	r5, r7, #53, 30	; 0xd4
     6e8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     6ec:	01006d62 	tsteq	r0, r2, ror #26
     6f0:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     6f4:	5f356472 	svcpl	0x00356472
     6f8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     6fc:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     700:	0001006d 	andeq	r0, r1, sp, rrx
     704:	05000000 	streq	r0, [r0, #-0]
     708:	0011fc02 	andseq	pc, r1, r2, lsl #24
     70c:	013f0320 	teqeq	pc, r0, lsr #6
     710:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     714:	2f3d672f 	svccs	0x003d672f
     718:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     71c:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     720:	2f3f672f 	svccs	0x003f672f
     724:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     728:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     72c:	2f3d672f 	svccs	0x003d672f
     730:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     734:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     738:	2f3d672f 	svccs	0x003d672f
     73c:	5e023d67 	cdppl	13, 0, cr3, cr2, cr7, {3}
     740:	2f4b4c14 	svccs	0x004b4c14
     744:	59594b3e 	ldmdbpl	r9, {r1, r2, r3, r4, r5, r8, r9, fp, lr}^
     748:	915c5959 	cmpls	ip, r9, asr r9
     74c:	93919191 	orrsls	r9, r1, #1073741860	; 0x40000024
     750:	3d3d3e94 	ldccc	14, cr3, [sp, #-592]!	; 0xfffffdb0
     754:	3d023d3d 	stccc	13, cr3, [r2, #-244]	; 0xffffff0c
     758:	61010100 	mrsvs	r0, (UNDEF: 17)
     75c:	02000001 	andeq	r0, r0, #1
     760:	00011c00 	andeq	r1, r1, r0, lsl #24
     764:	fb010200 	blx	40f6e <startup-0x1ffbf092>
     768:	01000d0e 	tsteq	r0, lr, lsl #26
     76c:	00010101 	andeq	r0, r1, r1, lsl #2
     770:	00010000 	andeq	r0, r1, r0
     774:	3a430100 	bcc	10c0b7c <startup-0x1ef3f484>
     778:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     77c:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 6c8 <startup-0x1ffff938>
     780:	616c706f 	cmnvs	ip, pc, rrx
     784:	61726f62 	cmnvs	r2, r2, ror #30
     788:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     78c:	442f7265 	strtmi	r7, [pc], #-613	; 794 <startup-0x1ffff86c>
     790:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     794:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     798:	00432f68 	subeq	r2, r3, r8, ror #30
     79c:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     7a0:	632e6863 			; <UNDEFINED> instruction: 0x632e6863
     7a4:	00000100 	andeq	r0, r0, r0, lsl #2
     7a8:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     7ac:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     7b0:	00000100 	andeq	r0, r0, r0, lsl #2
     7b4:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     7b8:	00682e65 	rsbeq	r2, r8, r5, ror #28
     7bc:	67000001 	strvs	r0, [r0, -r1]
     7c0:	6f656d61 	svcvs	0x00656d61
     7c4:	63656a62 	cmnvs	r5, #401408	; 0x62000
     7c8:	00682e74 	rsbeq	r2, r8, r4, ror lr
     7cc:	77000001 	strvc	r0, [r0, -r1]
     7d0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     7d4:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
     7d8:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     7dc:	006d6278 	rsbeq	r6, sp, r8, ror r2
     7e0:	77000001 	strvc	r0, [r0, -r1]
     7e4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     7e8:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     7ec:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     7f0:	01006d62 	tsteq	r0, r2, ror #26
     7f4:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     7f8:	31686374 	smccc	34356	; 0x8634
     7fc:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     800:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     804:	01006d62 	tsteq	r0, r2, ror #26
     808:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     80c:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     810:	616c625f 	cmnvs	ip, pc, asr r2
     814:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     818:	01006d62 	tsteq	r0, r2, ror #26
     81c:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     820:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     824:	6172675f 	cmnvs	r2, pc, asr r7
     828:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     82c:	0001006d 	andeq	r0, r1, sp, rrx
     830:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     834:	5f326863 	svcpl	0x00326863
     838:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     83c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     840:	0001006d 	andeq	r0, r1, sp, rrx
     844:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     848:	5f336863 	svcpl	0x00336863
     84c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     850:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     854:	0001006d 	andeq	r0, r1, sp, rrx
     858:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     85c:	5f336863 	svcpl	0x00336863
     860:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     864:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     868:	00000100 	andeq	r0, r0, r0, lsl #2
     86c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     870:	6c5f3368 	mrrcvs	3, 6, r3, pc, cr8	; <UNPREDICTABLE>
     874:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     878:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     87c:	00000100 	andeq	r0, r0, r0, lsl #2
     880:	02050000 	andeq	r0, r5, #0
     884:	20001560 	andcs	r1, r0, r0, ror #10
     888:	3e012803 	cdpcc	8, 0, cr2, cr1, cr3, {0}
     88c:	2f3d672f 	svccs	0x003d672f
     890:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     894:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     898:	2f3d672f 	svccs	0x003d672f
     89c:	672f3f67 	strvs	r3, [pc, -r7, ror #30]!
     8a0:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     8a4:	023e672f 	eorseq	r6, lr, #12320768	; 0xbc0000
     8a8:	4b4c143a 	blmi	1305998 <startup-0x1ecfa668>
     8ac:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
     8b0:	91915b59 	orrsls	r5, r1, r9, asr fp
     8b4:	3d3e9491 	cfldrscc	mvf9, [lr, #-580]!	; 0xfffffdbc
     8b8:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     8bc:	01010029 	tsteq	r1, r9, lsr #32
     8c0:	0000034e 	andeq	r0, r0, lr, asr #6
     8c4:	007c0002 	rsbseq	r0, ip, r2
     8c8:	01020000 	mrseq	r0, (UNDEF: 2)
     8cc:	000d0efb 	strdeq	r0, [sp], -fp
     8d0:	01010101 	tsteq	r1, r1, lsl #2
     8d4:	01000000 	mrseq	r0, (UNDEF: 0)
     8d8:	43010000 	movwmi	r0, #4096	; 0x1000
     8dc:	6f6d2f3a 	svcvs	0x006d2f3a
     8e0:	2f632f70 	svccs	0x00632f70
     8e4:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     8e8:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     8ec:	6f697461 	svcvs	0x00697461
     8f0:	2f72656e 	svccs	0x0072656e
     8f4:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     8f8:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     8fc:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     900:	72670000 	rsbvc	r0, r7, #0
     904:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
     908:	632e7363 			; <UNDEFINED> instruction: 0x632e7363
     90c:	00000100 	andeq	r0, r0, r0, lsl #2
     910:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     914:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     918:	00000100 	andeq	r0, r0, r0, lsl #2
     91c:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     920:	00682e65 	rsbeq	r2, r8, r5, ror #28
     924:	67000001 	strvs	r0, [r0, -r1]
     928:	6f656d61 	svcvs	0x00656d61
     92c:	63656a62 	cmnvs	r5, #401408	; 0x62000
     930:	00682e74 	rsbeq	r2, r8, r4, ror lr
     934:	67000001 	strvs	r0, [r0, -r1]
     938:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     93c:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
     940:	00010068 	andeq	r0, r1, r8, rrx
     944:	05000000 	streq	r0, [r0, #-0]
     948:	00179802 	andseq	r9, r7, r2, lsl #16
     94c:	3d301520 	cfldr32cc	mvfx1, [r0, #-128]!	; 0xffffff80
     950:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
     954:	06010402 	streq	r0, [r1], -r2, lsl #8
     958:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
     95c:	3d3d30a0 	ldccc	0, cr3, [sp, #-640]!	; 0xfffffd80
     960:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
     964:	20060104 	andcs	r0, r6, r4, lsl #2
     968:	a03d6706 	eorsge	r6, sp, r6, lsl #14
     96c:	2f2f214b 	svccs	0x002f214b
     970:	4c5e2a2f 	mrrcmi	10, 2, r2, lr, cr15
     974:	5b57214f 	blpl	15c8eb8 <startup-0x1ea37148>
     978:	4c4a0903 	mcrrmi	9, 0, r0, sl, cr3	; <UNPREDICTABLE>
     97c:	03040200 	movweq	r0, #16896	; 0x4200
     980:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     984:	02005703 	andeq	r5, r0, #786432	; 0xc0000
     988:	3c060104 	stfccs	f0, [r6], {4}
     98c:	2f674c06 	svccs	0x00674c06
     990:	4b2f674b 	blmi	bda6c4 <startup-0x1f42593c>
     994:	68a14b4b 	stmiavs	r1!, {r0, r1, r3, r6, r8, r9, fp, lr}
     998:	59839159 	stmibpl	r3, {r0, r3, r4, r6, r8, ip, pc}
     99c:	d7596876 			; <UNDEFINED> instruction: 0xd7596876
     9a0:	67675983 	strbvs	r5, [r7, -r3, lsl #19]!
     9a4:	03741203 	cmneq	r4, #805306368	; 0x30000000
     9a8:	1203206e 	andne	r2, r3, #110	; 0x6e
     9ac:	2070034a 	rsbscs	r0, r0, sl, asr #6
     9b0:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
     9b4:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
     9b8:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
     9bc:	3d3d3e4c 	ldccc	14, cr3, [sp, #-304]!	; 0xfffffed0
     9c0:	3d313d3d 	ldccc	13, cr3, [r1, #-244]!	; 0xffffff0c
     9c4:	313d752f 	teqcc	sp, pc, lsr #10
     9c8:	274a7903 	strbcs	r7, [sl, -r3, lsl #18]
     9cc:	67bc3d23 	ldrvs	r3, [ip, r3, lsr #26]!
     9d0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     9d4:	2f3d2f59 	svccs	0x003d2f59
     9d8:	4b3e3d59 	blmi	f8ff44 <startup-0x1f0700bc>
     9dc:	3d4b303d 	stclcc	0, cr3, [fp, #-244]	; 0xffffff0c
     9e0:	67bc3d31 			; <UNDEFINED> instruction: 0x67bc3d31
     9e4:	915a5959 	cmpls	sl, r9, asr r9
     9e8:	3d2f594b 			; <UNDEFINED> instruction: 0x3d2f594b
     9ec:	3d593e2f 	ldclcc	14, cr3, [r9, #-188]	; 0xffffff44
     9f0:	313d5930 	teqcc	sp, r0, lsr r9
     9f4:	673d3d3d 			; <UNDEFINED> instruction: 0x673d3d3d
     9f8:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
     9fc:	914b833d 	cmpls	fp, sp, lsr r3
     a00:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
     a04:	3d2f4c83 	stccc	12, cr4, [pc, #-524]!	; 800 <startup-0x1ffff800>
     a08:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
     a0c:	3e3d3d3e 	mrccc	13, 1, r3, cr13, cr14, {1}
     a10:	4b4b4b4b 	blmi	12d3744 <startup-0x1ed2c8bc>
     a14:	3e3d3d4b 	cdpcc	13, 3, cr3, cr13, cr11, {2}
     a18:	004c9f4b 	subeq	r9, ip, fp, asr #30
     a1c:	4b030402 	blmi	c1a2c <startup-0x1ff3e5d4>
     a20:	03040200 	movweq	r0, #16896	; 0x4200
     a24:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
     a28:	00580601 	subseq	r0, r8, r1, lsl #12
     a2c:	06020402 	streq	r0, [r2], -r2, lsl #8
     a30:	04020046 	streq	r0, [r2], #-70	; 0xffffffba
     a34:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     a38:	2f764d52 	svccs	0x00764d52
     a3c:	01040200 	mrseq	r0, R12_usr
     a40:	02004a06 	andeq	r4, r0, #24576	; 0x6000
     a44:	004a0204 	subeq	r0, sl, r4, lsl #4
     a48:	4a030402 	bmi	c1a58 <startup-0x1ff3e5a8>
     a4c:	13084c06 	movwne	r4, #35846	; 0x8c06
     a50:	bc3e3d3d 	ldclt	13, cr3, [lr], #-244	; 0xffffff0c
     a54:	3d76763d 	ldclcc	6, cr7, [r6, #-244]!	; 0xffffff0c
     a58:	23d71fd9 	bicscs	r1, r7, #868	; 0x364
     a5c:	d71fd93d 			; <UNDEFINED> instruction: 0xd71fd93d
     a60:	1fd93d23 	svcne	0x00d93d23
     a64:	2e6103d7 	mcrcs	3, 3, r0, cr1, cr7, {6}
     a68:	af202303 	svcge	0x00202303
     a6c:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
     a70:	004a0601 	subeq	r0, sl, r1, lsl #12
     a74:	4a020402 	bmi	81a84 <startup-0x1ff7e57c>
     a78:	03040200 	movweq	r0, #16896	; 0x4200
     a7c:	754b064a 	strbvc	r0, [fp, #-1610]	; 0xfffff9b6
     a80:	59591308 	ldmdbpl	r9, {r3, r8, r9, ip}^
     a84:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
     a88:	763d5b59 			; <UNDEFINED> instruction: 0x763d5b59
     a8c:	4b4c4b3d 	blmi	1313788 <startup-0x1ecec878>
     a90:	9fd8c93e 	svcls	0x00d8c93e
     a94:	a0ae3dca 	adcge	r3, lr, sl, asr #27
     a98:	03ac5e03 			; <UNDEFINED> instruction: 0x03ac5e03
     a9c:	4c842023 	stcmi	0, cr2, [r4], {35}	; 0x23
     aa0:	0200592f 	andeq	r5, r0, #770048	; 0xbc000
     aa4:	58060104 	stmdapl	r6, {r2, r8}
     aa8:	02040200 	andeq	r0, r4, #0, 4
     aac:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     ab0:	02002004 	andeq	r2, r0, #4
     ab4:	3d060404 	cfstrscc	mvf0, [r6, #-16]
     ab8:	0075d759 	rsbseq	sp, r5, r9, asr r7
     abc:	59030402 	stmdbpl	r3, {r1, sl}
     ac0:	03040200 	movweq	r0, #16896	; 0x4200
     ac4:	040200ab 	streq	r0, [r2], #-171	; 0xffffff55
     ac8:	009e0601 	addseq	r0, lr, r1, lsl #12
     acc:	06020402 	streq	r0, [r2], -r2, lsl #8
     ad0:	04020055 	streq	r0, [r2], #-85	; 0xffffffab
     ad4:	00740601 	rsbseq	r0, r4, r1, lsl #12
     ad8:	06020402 	streq	r0, [r2], -r2, lsl #8
     adc:	04020056 	streq	r0, [r2], #-86	; 0xffffffaa
     ae0:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
     ae4:	52580a03 	subspl	r0, r8, #12288	; 0x3000
     ae8:	595a5976 	ldmdbpl	sl, {r1, r2, r4, r5, r6, r8, fp, ip, lr}^
     aec:	3dbb3d3d 	ldccc	13, cr3, [fp, #244]!	; 0xf4
     af0:	083de691 	ldmdaeq	sp!, {r0, r4, r7, r9, sl, sp, lr, pc}
     af4:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
     af8:	087a0302 	ldmdaeq	sl!, {r1, r8, r9}^
     afc:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     b00:	003c0601 	eorseq	r0, ip, r1, lsl #12
     b04:	06020402 	streq	r0, [r2], -r2, lsl #8
     b08:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
     b0c:	003c0601 	eorseq	r0, ip, r1, lsl #12
     b10:	06020402 	streq	r0, [r2], -r2, lsl #8
     b14:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
     b18:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     b1c:	4c580e03 	mrrcmi	14, 0, r0, r8, cr3
     b20:	02003d77 	andeq	r3, r0, #7616	; 0x1dc0
     b24:	003d0304 	eorseq	r0, sp, r4, lsl #6
     b28:	65030402 	strvs	r0, [r3, #-1026]	; 0xfffffbfe
     b2c:	01040200 	mrseq	r0, R12_usr
     b30:	02003c06 	andeq	r3, r0, #1536	; 0x600
     b34:	65060204 	strvs	r0, [r6, #-516]	; 0xfffffdfc
     b38:	01040200 	mrseq	r0, R12_usr
     b3c:	6b063c06 	blvs	18fb5c <startup-0x1fe704a4>
     b40:	003d774c 	eorseq	r7, sp, ip, asr #14
     b44:	3d030402 	cfstrscc	mvf0, [r3, #-8]
     b48:	03040200 	movweq	r0, #16896	; 0x4200
     b4c:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
     b50:	003c0601 	eorseq	r0, ip, r1, lsl #12
     b54:	06020402 	streq	r0, [r2], -r2, lsl #8
     b58:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
     b5c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     b60:	2f3d4d6b 	svccs	0x003d4d6b
     b64:	30302f2f 	eorscc	r2, r0, pc, lsr #30
     b68:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
     b6c:	02003001 	andeq	r3, r0, #1
     b70:	002f0104 	eoreq	r0, pc, r4, lsl #2
     b74:	67010402 	strvs	r0, [r1, -r2, lsl #8]
     b78:	01040200 	mrseq	r0, R12_usr
     b7c:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
     b80:	00130801 	andseq	r0, r3, r1, lsl #16
     b84:	4b010402 	blmi	41b94 <startup-0x1ffbe46c>
     b88:	01040200 	mrseq	r0, R12_usr
     b8c:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     b90:	02006801 	andeq	r6, r0, #65536	; 0x10000
     b94:	00c90104 	sbceq	r0, r9, r4, lsl #2
     b98:	08010402 	stmdaeq	r1, {r1, sl}
     b9c:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
     ba0:	02009201 	andeq	r9, r0, #268435456	; 0x10000000
     ba4:	004b0104 	subeq	r0, fp, r4, lsl #2
     ba8:	3e010402 	cdpcc	4, 0, cr0, cr1, cr2, {0}
     bac:	01040200 	mrseq	r0, R12_usr
     bb0:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     bb4:	02006701 	andeq	r6, r0, #262144	; 0x40000
     bb8:	13080104 	movwne	r0, #33028	; 0x8104
     bbc:	01040200 	mrseq	r0, R12_usr
     bc0:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
     bc4:	3c6c0301 	stclcc	3, cr0, [ip], #-4
     bc8:	3e3c1903 	vaddcc.f16	s2, s24, s6	; <UNPREDICTABLE>
     bcc:	03040200 	movweq	r0, #16896	; 0x4200
     bd0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     bd4:	00910803 	addseq	r0, r1, r3, lsl #16
     bd8:	08030402 	stmdaeq	r3, {r1, sl}
     bdc:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
     be0:	00910803 	addseq	r0, r1, r3, lsl #16
     be4:	08030402 	stmdaeq	r3, {r1, sl}
     be8:	04020046 	streq	r0, [r2], #-70	; 0xffffffba
     bec:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     bf0:	4b3e0850 	blmi	f82d38 <startup-0x1f07d2c8>
     bf4:	0821083d 	stmdaeq	r1!, {r0, r2, r3, r4, r5, fp}
     bf8:	4d210821 	stcmi	8, cr0, [r1, #-132]!	; 0xffffff7c
     bfc:	4b21304b 	blmi	84cd30 <startup-0x1f7b32d0>
     c00:	4b3e4b3e 	blmi	f93900 <startup-0x1f06c700>
     c04:	75034b3e 	strvc	r4, [r3, #-2878]	; 0xfffff4c2
     c08:	580e033c 	stmdapl	lr, {r2, r3, r4, r5, r8, r9}
     c0c:	000b0230 	andeq	r0, fp, r0, lsr r2
     c10:	00720101 	rsbseq	r0, r2, r1, lsl #2
     c14:	00020000 	andeq	r0, r2, r0
     c18:	0000005b 	andeq	r0, r0, fp, asr r0
     c1c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     c20:	0101000d 	tsteq	r1, sp
     c24:	00000101 	andeq	r0, r0, r1, lsl #2
     c28:	00000100 	andeq	r0, r0, r0, lsl #2
     c2c:	2f3a4301 	svccs	0x003a4301
     c30:	2f706f6d 	svccs	0x00706f6d
     c34:	6f4d2f63 	svcvs	0x004d2f63
     c38:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     c3c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     c40:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     c44:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     c48:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     c4c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     c50:	0000432f 	andeq	r4, r0, pc, lsr #6
     c54:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     c58:	00632e65 	rsbeq	r2, r3, r5, ror #28
     c5c:	73000001 	movwvc	r0, #1
     c60:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     c64:	00682e65 	rsbeq	r2, r8, r5, ror #28
     c68:	69000001 	stmdbvs	r0, {r0}
     c6c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     c70:	0100682e 	tsteq	r0, lr, lsr #16
     c74:	00000000 	andeq	r0, r0, r0
     c78:	25dc0205 	ldrbcs	r0, [ip, #517]	; 0x205
     c7c:	75142000 	ldrvc	r2, [r4, #-0]
     c80:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     c84:	01010004 	tsteq	r1, r4
     c88:	00000068 	andeq	r0, r0, r8, rrx
     c8c:	00510002 	subseq	r0, r1, r2
     c90:	01020000 	mrseq	r0, (UNDEF: 2)
     c94:	000d0efb 	strdeq	r0, [sp], -fp
     c98:	01010101 	tsteq	r1, r1, lsl #2
     c9c:	01000000 	mrseq	r0, (UNDEF: 0)
     ca0:	43010000 	movwmi	r0, #4096	; 0x1000
     ca4:	6f6d2f3a 	svcvs	0x006d2f3a
     ca8:	2f632f70 	svccs	0x00632f70
     cac:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     cb0:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     cb4:	6f697461 	svcvs	0x00697461
     cb8:	2f72656e 	svccs	0x0072656e
     cbc:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     cc0:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     cc4:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     cc8:	70730000 	rsbsvc	r0, r3, r0
     ccc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     cd0:	0100632e 	tsteq	r0, lr, lsr #6
     cd4:	70730000 	rsbsvc	r0, r3, r0
     cd8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     cdc:	0100682e 	tsteq	r0, lr, lsr #16
     ce0:	00000000 	andeq	r0, r0, r0
     ce4:	26040205 	strcs	r0, [r4], -r5, lsl #4
     ce8:	75152000 	ldrvc	r2, [r5, #-0]
     cec:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     cf0:	01010004 	tsteq	r1, r4
     cf4:	0000006c 	andeq	r0, r0, ip, rrx
     cf8:	004d0002 	subeq	r0, sp, r2
     cfc:	01020000 	mrseq	r0, (UNDEF: 2)
     d00:	000d0efb 	strdeq	r0, [sp], -fp
     d04:	01010101 	tsteq	r1, r1, lsl #2
     d08:	01000000 	mrseq	r0, (UNDEF: 0)
     d0c:	43010000 	movwmi	r0, #4096	; 0x1000
     d10:	6f6d2f3a 	svcvs	0x006d2f3a
     d14:	2f632f70 	svccs	0x00632f70
     d18:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     d1c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     d20:	6f697461 	svcvs	0x00697461
     d24:	2f72656e 	svccs	0x0072656e
     d28:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     d2c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     d30:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     d34:	70670000 	rsbvc	r0, r7, r0
     d38:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
     d3c:	00000100 	andeq	r0, r0, r0, lsl #2
     d40:	6f697067 	svcvs	0x00697067
     d44:	0100682e 	tsteq	r0, lr, lsr #16
     d48:	00000000 	andeq	r0, r0, r0
     d4c:	262c0205 	strtcs	r0, [ip], -r5, lsl #4
     d50:	2f152000 	svccs	0x00152000
     d54:	592f763d 	stmdbpl	pc!, {r0, r2, r3, r4, r5, r9, sl, ip, sp, lr}	; <UNPREDICTABLE>
     d58:	674b693d 	smlaldxvs	r6, fp, sp, r9
     d5c:	02223091 	eoreq	r3, r2, #145	; 0x91
     d60:	01010004 	tsteq	r1, r4
     d64:	0000015a 	andeq	r0, r0, sl, asr r1
     d68:	00810002 	addeq	r0, r1, r2
     d6c:	01020000 	mrseq	r0, (UNDEF: 2)
     d70:	000d0efb 	strdeq	r0, [sp], -fp
     d74:	01010101 	tsteq	r1, r1, lsl #2
     d78:	01000000 	mrseq	r0, (UNDEF: 0)
     d7c:	43010000 	movwmi	r0, #4096	; 0x1000
     d80:	6f6d2f3a 	svcvs	0x006d2f3a
     d84:	2f632f70 	svccs	0x00632f70
     d88:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     d8c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     d90:	6f697461 	svcvs	0x00697461
     d94:	2f72656e 	svccs	0x0072656e
     d98:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     d9c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     da0:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     da4:	73610000 	cmnvc	r1, #0
     da8:	5f696963 	svcpl	0x00696963
     dac:	70736964 	rsbsvc	r6, r3, r4, ror #18
     db0:	2e79616c 	rpwcsez	f6, f1, #4.0
     db4:	00010063 	andeq	r0, r1, r3, rrx
     db8:	72707300 	rsbsvc	r7, r0, #0, 6
     dbc:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     dc0:	00010068 	andeq	r0, r1, r8, rrx
     dc4:	616d6900 	cmnvs	sp, r0, lsl #18
     dc8:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     dcc:	00000100 	andeq	r0, r0, r0, lsl #2
     dd0:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     dd4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     dd8:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     ddc:	00000100 	andeq	r0, r0, r0, lsl #2
     de0:	70617267 	rsbvc	r7, r1, r7, ror #4
     de4:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
     de8:	0100682e 	tsteq	r0, lr, lsr #16
     dec:	00000000 	andeq	r0, r0, r0
     df0:	26980205 	ldrcs	r0, [r8], r5, lsl #4
     df4:	2e032000 	cdpcs	0, 0, cr2, cr3, cr0, {0}
     df8:	bb596901 	bllt	165b204 <startup-0x1e9a4dfc>
     dfc:	59696859 	stmdbpl	r9!, {r0, r3, r4, r6, fp, sp, lr}^
     e00:	76591308 	ldrbvc	r1, [r9], -r8, lsl #6
     e04:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
     e08:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
     e0c:	673e4c59 			; <UNDEFINED> instruction: 0x673e4c59
     e10:	675a3d3d 	smmlarvs	sl, sp, sp, r3
     e14:	3e842f67 	cdpcc	15, 8, cr2, cr4, cr7, {3}
     e18:	5a3d3d67 	bpl	f503bc <startup-0x1f0afc44>
     e1c:	842f6767 	strthi	r6, [pc], #-1895	; e24 <startup-0x1ffff1dc>
     e20:	2f4b3d67 	svccs	0x004b3d67
     e24:	3d3e683d 	ldccc	8, cr6, [lr, #-244]!	; 0xffffff0c
     e28:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
     e2c:	0067762f 	rsbeq	r7, r7, pc, lsr #12
     e30:	06010402 	streq	r0, [r1], -r2, lsl #8
     e34:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
     e38:	914c3d59 	cmpls	ip, r9, asr sp
     e3c:	9f764b67 	svcls	0x00764b67
     e40:	0200304c 	andeq	r3, r0, #76	; 0x4c
     e44:	20060104 	andcs	r0, r6, r4, lsl #2
     e48:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
     e4c:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
     e50:	06200601 	strteq	r0, [r0], -r1, lsl #12
     e54:	3f3d3d83 	svccc	0x003d3d83
     e58:	01040200 	mrseq	r0, R12_usr
     e5c:	83062006 	movwhi	r2, #24582	; 0x6006
     e60:	003f3d3d 	eorseq	r3, pc, sp, lsr sp	; <UNPREDICTABLE>
     e64:	06010402 	streq	r0, [r1], -r2, lsl #8
     e68:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
     e6c:	343e3f3d 	ldrtcc	r3, [lr], #-3901	; 0xfffff0c3
     e70:	2f2f843d 	svccs	0x002f843d
     e74:	843e3e2f 	ldrthi	r3, [lr], #-3631	; 0xfffff1d1
     e78:	73214b2f 			; <UNDEFINED> instruction: 0x73214b2f
     e7c:	214b2f4d 	cmpcs	fp, sp, asr #30
     e80:	59684d73 	stmdbpl	r8!, {r0, r1, r4, r5, r6, r8, sl, fp, lr}^
     e84:	73214b30 			; <UNDEFINED> instruction: 0x73214b30
     e88:	73214b4d 			; <UNDEFINED> instruction: 0x73214b4d
     e8c:	754c4b4e 	strbvc	r4, [ip, #-2894]	; 0xfffff4b2
     e90:	3d2f4b30 	vstmdbcc	pc!, {d4-d27}
     e94:	02007321 	andeq	r7, r0, #-2080374784	; 0x84000000
     e98:	4a060104 	bmi	1812b0 <startup-0x1fe7ed50>
     e9c:	2f4b6b06 	svccs	0x004b6b06
     ea0:	0073213d 	rsbseq	r2, r3, sp, lsr r1
     ea4:	06010402 	streq	r0, [r1], -r2, lsl #8
     ea8:	4b6b064a 	blmi	1ac27d8 <startup-0x1e53d828>
     eac:	68753e4e 	ldmdavs	r5!, {r1, r2, r3, r6, r9, sl, fp, ip, sp}^
     eb0:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
     eb4:	4b4d7321 	blmi	135db40 <startup-0x1eca24c0>
     eb8:	4d73212f 	ldfmie	f2, [r3, #-188]!	; 0xffffff44
     ebc:	00080221 	andeq	r0, r8, r1, lsr #4
     ec0:	00760101 	rsbseq	r0, r6, r1, lsl #2
     ec4:	00020000 	andeq	r0, r2, r0
     ec8:	00000057 	andeq	r0, r0, r7, asr r0
     ecc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     ed0:	0101000d 	tsteq	r1, sp
     ed4:	00000101 	andeq	r0, r0, r1, lsl #2
     ed8:	00000100 	andeq	r0, r0, r0, lsl #2
     edc:	2f3a4301 	svccs	0x003a4301
     ee0:	2f706f6d 	svccs	0x00706f6d
     ee4:	6f4d2f63 	svcvs	0x004d2f63
     ee8:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     eec:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     ef0:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     ef4:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     ef8:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     efc:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f00:	0000432f 	andeq	r4, r0, pc, lsr #6
     f04:	776f6c73 			; <UNDEFINED> instruction: 0x776f6c73
     f08:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
     f0c:	00632e74 	rsbeq	r2, r3, r4, ror lr
     f10:	73000001 	movwvc	r0, #1
     f14:	5f776f6c 	svcpl	0x00776f6c
     f18:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     f1c:	0100682e 	tsteq	r0, lr, lsr #16
     f20:	00000000 	andeq	r0, r0, r0
     f24:	2bb80205 	blcs	fee01740 <firstTime.4040+0xdedf8c50>
     f28:	59152000 	ldmdbpl	r5, {sp}
     f2c:	5984c99f 	stmibpl	r4, {r0, r1, r2, r3, r4, r7, r8, fp, lr, pc}
     f30:	3d3d754c 	cfldr32cc	mvfx7, [sp, #-304]!	; 0xfffffed0
     f34:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     f38:	01010007 	tsteq	r1, r7
     f3c:	000000d6 	ldrdeq	r0, [r0], -r6
     f40:	00ab0002 	adceq	r0, fp, r2
     f44:	01020000 	mrseq	r0, (UNDEF: 2)
     f48:	000d0efb 	strdeq	r0, [sp], -fp
     f4c:	01010101 	tsteq	r1, r1, lsl #2
     f50:	01000000 	mrseq	r0, (UNDEF: 0)
     f54:	43010000 	movwmi	r0, #4096	; 0x1000
     f58:	6f6d2f3a 	svcvs	0x006d2f3a
     f5c:	2f632f70 	svccs	0x00632f70
     f60:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     f64:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     f68:	6f697461 	svcvs	0x00697461
     f6c:	2f72656e 	svccs	0x0072656e
     f70:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     f74:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     f78:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     f7c:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
     f80:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     f84:	00632e73 	rsbeq	r2, r3, r3, ror lr
     f88:	73000001 	movwvc	r0, #1
     f8c:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     f90:	00682e65 	rsbeq	r2, r8, r5, ror #28
     f94:	69000001 	stmdbvs	r0, {r0}
     f98:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     f9c:	0100682e 	tsteq	r0, lr, lsr #16
     fa0:	61670000 	cmnvs	r7, r0
     fa4:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
     fa8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     fac:	0100682e 	tsteq	r0, lr, lsr #16
     fb0:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
     fb4:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     fb8:	6c625f73 	stclvs	15, cr5, [r2], #-460	; 0xfffffe34
     fbc:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     fc0:	006d6278 	rsbeq	r6, sp, r8, ror r2
     fc4:	69000001 	stmdbvs	r0, {r0}
     fc8:	6f6f646e 	svcvs	0x006f646e
     fcc:	675f7372 			; <UNDEFINED> instruction: 0x675f7372
     fd0:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     fd4:	006d6278 	rsbeq	r6, sp, r8, ror r2
     fd8:	69000001 	stmdbvs	r0, {r0}
     fdc:	6f6f646e 	svcvs	0x006f646e
     fe0:	6c5f7372 	mrrcvs	3, 7, r7, pc, cr2	; <UNPREDICTABLE>
     fe4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     fe8:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     fec:	00000100 	andeq	r0, r0, r0, lsl #2
     ff0:	02050000 	andeq	r0, r5, #0
     ff4:	20002c4c 	andcs	r2, r0, ip, asr #24
     ff8:	3e011303 	cdpcc	3, 0, cr1, cr1, cr3, {0}
     ffc:	2f3d672f 	svccs	0x003d672f
    1000:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
    1004:	4c5a083e 	mrrcmi	8, 3, r0, sl, cr14
    1008:	4c3e2f4b 	ldcmi	15, cr2, [lr], #-300	; 0xfffffed4
    100c:	3d3d3e93 	ldccc	14, cr3, [sp, #-588]!	; 0xfffffdb4
    1010:	00083d3d 	andeq	r3, r8, sp, lsr sp
    1014:	00da0101 	sbcseq	r0, sl, r1, lsl #2
    1018:	00020000 	andeq	r0, r2, r0
    101c:	000000af 	andeq	r0, r0, pc, lsr #1
    1020:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1024:	0101000d 	tsteq	r1, sp
    1028:	00000101 	andeq	r0, r0, r1, lsl #2
    102c:	00000100 	andeq	r0, r0, r0, lsl #2
    1030:	2f3a4301 	svccs	0x003a4301
    1034:	2f706f6d 	svccs	0x00706f6d
    1038:	6f4d2f63 	svcvs	0x004d2f63
    103c:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1040:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    1044:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1048:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    104c:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1050:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1054:	0000432f 	andeq	r4, r0, pc, lsr #6
    1058:	6f646e69 	svcvs	0x00646e69
    105c:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1060:	0100632e 	tsteq	r0, lr, lsr #6
    1064:	70730000 	rsbsvc	r0, r3, r0
    1068:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    106c:	0100682e 	tsteq	r0, lr, lsr #16
    1070:	6d690000 	stclvs	0, cr0, [r9, #-0]
    1074:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
    1078:	00010068 	andeq	r0, r1, r8, rrx
    107c:	6d616700 	stclvs	7, cr6, [r1, #-0]
    1080:	6a626f65 	bvs	189ce1c <startup-0x1e7631e4>
    1084:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
    1088:	00010068 	andeq	r0, r1, r8, rrx
    108c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1090:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1094:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
    1098:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
    109c:	006d6278 	rsbeq	r6, sp, r8, ror r2
    10a0:	69000001 	stmdbvs	r0, {r0}
    10a4:	6f6f646e 	svcvs	0x006f646e
    10a8:	5f327372 	svcpl	0x00327372
    10ac:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    10b0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    10b4:	00000100 	andeq	r0, r0, r0, lsl #2
    10b8:	6f646e69 	svcvs	0x00646e69
    10bc:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    10c0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    10c4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
    10c8:	01006d62 	tsteq	r0, r2, ror #26
    10cc:	00000000 	andeq	r0, r0, r0
    10d0:	2d340205 	lfmcs	f0, 4, [r4, #-20]!	; 0xffffffec
    10d4:	13032000 	movwne	r2, #12288	; 0x3000
    10d8:	672f3e01 	strvs	r3, [pc, -r1, lsl #28]!
    10dc:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
    10e0:	083e672f 	ldmdaeq	lr!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}
    10e4:	2f4b4c5a 	svccs	0x004b4c5a
    10e8:	3e934c3e 	mrccc	12, 4, r4, cr3, cr14, {1}
    10ec:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    10f0:	01010008 	tsteq	r1, r8

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
       4:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
       8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
       c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
      10:	696c0073 	stmdbvs	ip!, {r0, r1, r4, r5, r6}^
      14:	49746867 	ldmdbmi	r4!, {r0, r1, r2, r5, r6, fp, sp, lr}^
      18:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      1c:	61726700 	cmnvs	r2, r0, lsl #14
      20:	616d4979 	smcvs	54425	; 0xd499
      24:	63006567 	movwvs	r6, #1383	; 0x567
      28:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
      2c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
      30:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
      34:	00737469 	rsbseq	r7, r3, r9, ror #8
      38:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
      3c:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
      40:	5f747865 	svcpl	0x00747865
      44:	0061726b 	rsbeq	r7, r1, fp, ror #4
      48:	72665f6e 	rsbvc	r5, r6, #440	; 0x1b8
      4c:	73656d61 	cmnvc	r5, #6208	; 0x1840
      50:	73616300 	cmnvc	r1, #0, 6
      54:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
      58:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      5c:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
      60:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      64:	74003031 	strvc	r3, [r0], #-49	; 0xffffffcf
      68:	43706d65 	cmnmi	r0, #6464	; 0x1940
      6c:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
      70:	616c4265 	cmnvs	ip, r5, ror #4
      74:	47006b63 	strmi	r6, [r0, -r3, ror #22]
      78:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
      7c:	36203939 			; <UNDEFINED> instruction: 0x36203939
      80:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
      84:	31303220 	teqcc	r0, r0, lsr #4
      88:	31323037 	teqcc	r2, r7, lsr r0
      8c:	72282035 	eorvc	r2, r8, #53	; 0x35
      90:	61656c65 	cmnvs	r5, r5, ror #24
      94:	20296573 	eorcs	r6, r9, r3, ror r5
      98:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
      9c:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
      a0:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
      a4:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
      a8:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
      ac:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
      b0:	73697665 	cmnvc	r9, #105906176	; 0x6500000
      b4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
      b8:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
      bc:	205d3231 	subscs	r3, sp, r1, lsr r2
      c0:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
      c4:	20626d75 	rsbcs	r6, r2, r5, ror sp
      c8:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
      cc:	613d6863 	teqvs	sp, r3, ror #16
      d0:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
      d4:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
      d8:	6f6c666d 	svcvs	0x006c666d
      dc:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
      e0:	733d6962 	teqvc	sp, #1605632	; 0x188000
      e4:	2074666f 	rsbscs	r6, r4, pc, ror #12
      e8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
      ec:	20626d75 	rsbcs	r6, r2, r5, ror sp
      f0:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
      f4:	613d6863 	teqvs	sp, r3, ror #16
      f8:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
      fc:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     100:	4f2d2067 	svcmi	0x002d2067
     104:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
     108:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
     10c:	6d003939 	vstrvs.16	s6, [r0, #-114]	; 0xffffff8e	; <UNPREDICTABLE>
     110:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     114:	69007265 	stmdbvs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     118:	6c635f73 	stclvs	15, cr5, [r3], #-460	; 0xfffffe34
     11c:	69626d69 	stmdbvs	r2!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
     120:	6300676e 	movwvs	r6, #1902	; 0x76e
     124:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     128:	6a624f65 	bvs	1893ec4 <startup-0x1e76c13c>
     12c:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     130:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     134:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
     138:	00726574 	rsbseq	r6, r2, r4, ror r5
     13c:	73657270 	cmnvc	r5, #112, 4
     140:	6c625f73 	stclvs	15, cr5, [r2], #-460	; 0xfffffe34
     144:	5f6b6361 	svcpl	0x006b6361
     148:	73746962 	cmnvc	r4, #1605632	; 0x188000
     14c:	72696600 	rsbvc	r6, r9, #0, 12
     150:	695f3165 	ldmdbvs	pc, {r0, r2, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     154:	6f6f646e 	svcvs	0x006f646e
     158:	63007372 	movwvs	r7, #882	; 0x372
     15c:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     160:	616d4965 	cmnvs	sp, r5, ror #18
     164:	00736567 	rsbseq	r6, r3, r7, ror #10
     168:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     16c:	616d4965 	cmnvs	sp, r5, ror #18
     170:	73006567 	movwvc	r6, #1383	; 0x567
     174:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     178:	74007075 	strvc	r7, [r0], #-117	; 0xffffff8b
     17c:	31747865 	cmncc	r4, r5, ror #16
     180:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     184:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     188:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     18c:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
     190:	5f656c74 	svcpl	0x00656c74
     194:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     198:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     19c:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     1a0:	4d706d65 	ldclmi	13, cr6, [r0, #-404]!	; 0xfffffe6c
     1a4:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     1a8:	72477265 	subvc	r7, r7, #1342177286	; 0x50000006
     1ac:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     1b0:	32747865 	rsbscc	r7, r4, #6619136	; 0x650000
     1b4:	65727000 	ldrbvs	r7, [r2, #-0]!
     1b8:	72477373 	subvc	r7, r7, #-872415231	; 0xcc000001
     1bc:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     1c0:	34747865 	ldrbtcc	r7, [r4], #-2149	; 0xfffff79b
     1c4:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1c8:	74003374 	strvc	r3, [r0], #-884	; 0xfffffc8c
     1cc:	35747865 	ldrbcc	r7, [r4, #-2149]!	; 0xfffff79b
     1d0:	72696600 	rsbvc	r6, r9, #0, 12
     1d4:	68003165 	stmdavs	r0, {r0, r2, r5, r6, r8, ip, sp}
     1d8:	635f7361 	cmpvs	pc, #-2080374783	; 0x84000001
     1dc:	626d696c 	rsbvs	r6, sp, #108, 18	; 0x1b0000
     1e0:	74006465 	strvc	r6, [r0], #-1125	; 0xfffffb9b
     1e4:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     1e8:	65740067 	ldrbvs	r0, [r4, #-103]!	; 0xffffff99
     1ec:	00387478 	eorseq	r7, r8, r8, ror r4
     1f0:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     1f4:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
     1f8:	5f6b6361 	svcpl	0x006b6361
     1fc:	73746962 	cmnvc	r4, #1605632	; 0x188000
     200:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     204:	6e6f4d70 	mcrvs	13, 3, r4, cr15, cr0, {3}
     208:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     20c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     210:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     214:	00377478 	eorseq	r7, r7, r8, ror r4
     218:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     21c:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     220:	5f726566 	svcpl	0x00726566
     224:	63616c62 	cmnvs	r1, #25088	; 0x6200
     228:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
     22c:	00367478 	eorseq	r7, r6, r8, ror r4
     230:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     234:	6f6d0039 	svcvs	0x006d0039
     238:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     23c:	696f5072 	stmdbvs	pc!, {r1, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
     240:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     244:	6f6d0032 	svcvs	0x006d0032
     248:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     24c:	696f5072 	stmdbvs	pc!, {r1, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
     250:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     254:	6f720033 	svcvs	0x00720033
     258:	64003277 	strvs	r3, [r0], #-631	; 0xfffffd89
     25c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
     260:	6d007961 	vstrvs.16	s14, [r0, #-194]	; 0xffffff3e	; <UNPREDICTABLE>
     264:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     268:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
     26c:	6b63616c 	blvs	18d8824 <startup-0x1e7277dc>
     270:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     274:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
     278:	615f7469 	cmpvs	pc, r9, ror #8
     27c:	6c007070 	stcvs	0, cr7, [r0], {112}	; 0x70
     280:	5f676e6f 	svcpl	0x00676e6f
     284:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     288:	65727000 	ldrbvs	r7, [r2, #-0]!
     28c:	624f7373 	subvs	r7, pc, #-872415231	; 0xcc000001
     290:	7264006a 	rsbvc	r0, r4, #106	; 0x6a
     294:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
     298:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     29c:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
     2a0:	5f6b6361 	svcpl	0x006b6361
     2a4:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     2a8:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     2ac:	70007468 	andvc	r7, r0, r8, ror #8
     2b0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     2b4:	00347265 	eorseq	r7, r4, r5, ror #4
     2b8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     2bc:	35726574 	ldrbcc	r6, [r2, #-1396]!	; 0xfffffa8c
     2c0:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     2c4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     2c8:	6f700036 	svcvs	0x00700036
     2cc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     2d0:	70003772 	andvc	r3, r0, r2, ror r7
     2d4:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     2d8:	00387265 	eorseq	r7, r8, r5, ror #4
     2dc:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     2e0:	39726574 	ldmdbcc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     2e4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     2e8:	73614370 	cmnvc	r1, #112, 6	; 0xc0000001
     2ec:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
     2f0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     2f4:	6e657200 	cdpvs	2, 6, cr7, cr5, cr0, {0}
     2f8:	00726564 	rsbseq	r6, r2, r4, ror #10
     2fc:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
     300:	72640068 	rsbvc	r0, r4, #104	; 0x68
     304:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
     308:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     30c:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
     310:	5f6b6361 	svcpl	0x006b6361
     314:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     318:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
     31c:	2074726f 	rsbscs	r7, r4, pc, ror #4
     320:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     324:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     328:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     32c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
     330:	755f7961 	ldrbvc	r7, [pc, #-2401]	; fffff9d7 <firstTime.4040+0xdfff6ee7>
     334:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
     338:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
     33c:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     340:	6f4d706d 	svcvs	0x004d706d
     344:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     348:	69740072 	ldmdbvs	r4!, {r1, r4, r5, r6}^
     34c:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
     350:	6b63616c 	blvs	18d8908 <startup-0x1e7276f8>
     354:	65727000 	ldrbvs	r7, [r2, #-0]!
     358:	675f7373 			; <UNDEFINED> instruction: 0x675f7373
     35c:	5f796172 	svcpl	0x00796172
     360:	73746962 	cmnvc	r4, #1605632	; 0x188000
     364:	696e6100 	stmdbvs	lr!, {r8, sp, lr}^
     368:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     36c:	735f6e6f 	cmpvc	pc, #1776	; 0x6f0
     370:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     374:	696e6100 	stmdbvs	lr!, {r8, sp, lr}^
     378:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     37c:	635f6e6f 	cmpvs	pc, #1776	; 0x6f0
     380:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     384:	6d007265 	sfmvs	f7, 4, [r0, #-404]	; 0xfffffe6c
     388:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     38c:	624f7265 	subvs	r7, pc, #1342177286	; 0x50000006
     390:	6973006a 	ldmdbvs	r3!, {r1, r3, r5, r6}^
     394:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
     398:	74006570 	strvc	r6, [r0], #-1392	; 0xfffffa90
     39c:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     3a0:	6172675f 	cmnvs	r2, pc, asr r7
     3a4:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     3a8:	6e007374 	mcrvs	3, 0, r7, cr0, cr4, {3}
     3ac:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
     3b0:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
     3b4:	00737463 	rsbseq	r7, r3, r3, ror #8
     3b8:	73657270 	cmnvc	r5, #112, 4
     3bc:	696c5f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     3c0:	5f746867 	svcpl	0x00746867
     3c4:	73746962 	cmnvc	r4, #1605632	; 0x188000
     3c8:	65727000 	ldrbvs	r7, [r2, #-0]!
     3cc:	6d497373 	stclvs	3, cr7, [r9, #-460]	; 0xfffffe34
     3d0:	00656761 	rsbeq	r6, r5, r1, ror #14
     3d4:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     3d8:	73007365 	movwvc	r7, #869	; 0x365
     3dc:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     3e0:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
     3e4:	75630074 	strbvc	r0, [r3, #-116]!	; 0xffffff8c
     3e8:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     3ec:	72665f74 	rsbvc	r5, r6, #116, 30	; 0x1d0
     3f0:	00656d61 	rsbeq	r6, r5, r1, ror #26
     3f4:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     3f8:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
     3fc:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     400:	50706d65 	rsbspl	r6, r0, r5, ror #26
     404:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     408:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     40c:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     410:	72705374 	rsbsvc	r5, r0, #116, 6	; 0xd0000001
     414:	73657469 	cmnvc	r5, #1761607680	; 0x69000000
     418:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     41c:	73614370 	cmnvc	r1, #112, 6	; 0xc0000001
     420:	47656c74 			; <UNDEFINED> instruction: 0x47656c74
     424:	00796172 	rsbseq	r6, r9, r2, ror r1
     428:	706d6574 	rsbvc	r6, sp, r4, ror r5
     42c:	6c746954 			; <UNDEFINED> instruction: 0x6c746954
     430:	616c4265 	cmnvs	ip, r5, ror #4
     434:	75006b63 	strvc	r6, [r0, #-2915]	; 0xfffff49d
     438:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     43c:	2064656e 	rsbcs	r6, r4, lr, ror #10
     440:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     444:	61726400 	cmnvs	r2, r0, lsl #8
     448:	75625f77 	strbvc	r5, [r2, #-3959]!	; 0xfffff089
     44c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     450:	616c625f 	cmnvs	ip, pc, asr r2
     454:	675f6b63 	ldrbvs	r6, [pc, -r3, ror #22]
     458:	00796172 	rsbseq	r6, r9, r2, ror r1
     45c:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     460:	5f726574 	svcpl	0x00726574
     464:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     468:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     46c:	63007374 	movwvs	r7, #884	; 0x374
     470:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     474:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
     478:	5f6b6361 	svcpl	0x006b6361
     47c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     480:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     484:	624f656c 	subvs	r6, pc, #108, 10	; 0x1b000000
     488:	3a43006a 	bcc	10c0638 <startup-0x1ef3f9c8>
     48c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     490:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 3dc <startup-0x1ffffc24>
     494:	616c706f 	cmnvs	ip, pc, rrx
     498:	61726f62 	cmnvs	r2, r2, ror #30
     49c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     4a0:	442f7265 	strtmi	r7, [pc], #-613	; 4a8 <startup-0x1ffffb58>
     4a4:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     4a8:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     4ac:	2f432f68 	svccs	0x00432f68
     4b0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     4b4:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
     4b8:	61670063 	cmnvs	r7, r3, rrx
     4bc:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
     4c0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     4c4:	61630073 	smcvs	12291	; 0x3003
     4c8:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     4cc:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     4d0:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     4d4:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     4d8:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     4dc:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     4e0:	7247656c 	subvc	r6, r7, #108, 10	; 0x1b000000
     4e4:	63007961 	movwvs	r7, #2401	; 0x961
     4e8:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
     4ec:	735f746e 	cmpvc	pc, #1845493760	; 0x6e000000
     4f0:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
     4f4:	6574006e 	ldrbvs	r0, [r4, #-110]!	; 0xffffff92
     4f8:	7250706d 	subsvc	r7, r0, #109	; 0x6d
     4fc:	42737365 	rsbsmi	r7, r3, #-1811939327	; 0x94000001
     500:	6b63616c 	blvs	18d8ab8 <startup-0x1e727548>
     504:	5f676200 	svcpl	0x00676200
     508:	73746962 	cmnvc	r4, #1605632	; 0x188000
     50c:	616c6200 	cmnvs	ip, r0, lsl #4
     510:	6d496b63 	vstrvs	d22, [r9, #-396]	; 0xfffffe74
     514:	00656761 	rsbeq	r6, r5, r1, ror #14
     518:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     51c:	5f726574 	svcpl	0x00726574
     520:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     524:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     528:	61630073 	smcvs	12291	; 0x3003
     52c:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     530:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     534:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     538:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     53c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     540:	61720073 	cmnvs	r2, r3, ror r0
     544:	6d6f646e 	cfstrdvs	mvd6, [pc, #-440]!	; 394 <startup-0x1ffffc6c>
     548:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
     54c:	69660064 	stmdbvs	r6!, {r2, r5, r6}^
     550:	00326572 	eorseq	r6, r2, r2, ror r5
     554:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     558:	69660033 	stmdbvs	r6!, {r0, r1, r4, r5}^
     55c:	00346572 	eorseq	r6, r4, r2, ror r5
     560:	73657270 	cmnvc	r5, #112, 4
     564:	616c4273 	smcvs	50211	; 0xc423
     568:	6d006b63 	vstrvs	d6, [r0, #-396]	; 0xfffffe74
     56c:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     570:	6d497265 	sfmvs	f7, 2, [r9, #-404]	; 0xfffffe6c
     574:	00656761 	rsbeq	r6, r5, r1, ror #14
     578:	736f5079 	cmnvc	pc, #121	; 0x79
     57c:	73616c00 	cmnvc	r1, #0, 24
     580:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     584:	5f626d69 	svcpl	0x00626d69
     588:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
     58c:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
     590:	32317478 	eorscc	r7, r1, #120, 8	; 0x78000000
     594:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     598:	74695470 	strbtvc	r5, [r9], #-1136	; 0xfffffb90
     59c:	694c656c 	stmdbvs	ip, {r2, r3, r5, r6, r8, sl, sp, lr}^
     5a0:	00746867 	rsbseq	r6, r4, r7, ror #16
     5a4:	61647075 	smcvs	18181	; 0x4705
     5a8:	70006574 	andvc	r6, r0, r4, ror r5
     5ac:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     5b0:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     5b4:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
     5b8:	54706d65 	ldrbtpl	r6, [r0], #-3429	; 0xfffff29b
     5bc:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     5c0:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     5c4:	6c537400 	cfldrdvs	mvd7, [r3], {-0}
     5c8:	6554776f 	ldrbvs	r7, [r4, #-1903]	; 0xfffff891
     5cc:	75007478 	strvc	r7, [r0, #-1144]	; 0xfffffb88
     5d0:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     5d4:	6200745f 	andvs	r7, r0, #1593835520	; 0x5f000000
     5d8:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
     5dc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     5e0:	67694c72 			; <UNDEFINED> instruction: 0x67694c72
     5e4:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
     5e8:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
     5ec:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     5f0:	61724772 	cmnvs	r2, r2, ror r7
     5f4:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     5f8:	7250706d 	subsvc	r7, r0, #109	; 0x6d
     5fc:	4c737365 	ldclmi	3, cr7, [r3], #-404	; 0xfffffe6c
     600:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     604:	61477400 	cmpvs	r7, r0, lsl #8
     608:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
     60c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     610:	6f507800 	svcvs	0x00507800
     614:	61630073 	smcvs	12291	; 0x3003
     618:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     61c:	63616c42 	cmnvs	r1, #16896	; 0x4200
     620:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
     624:	30317478 	eorscc	r7, r1, r8, ror r4
     628:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     62c:	00313174 	eorseq	r3, r1, r4, ror r1
     630:	67696568 	strbvs	r6, [r9, -r8, ror #10]!
     634:	6d007468 	cfstrsvs	mvf7, [r0, #-416]	; 0xfffffe60
     638:	006e6961 	rsbeq	r6, lr, r1, ror #18
     63c:	73657270 	cmnvc	r5, #112, 4
     640:	67694c73 			; <UNDEFINED> instruction: 0x67694c73
     644:	6d007468 	cfstrsvs	mvf7, [r0, #-416]	; 0xfffffe60
     648:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     64c:	6d497265 	sfmvs	f7, 2, [r9, #-404]	; 0xfffffe6c
     650:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     654:	6d616700 	stclvs	7, cr6, [r1, #-0]
     658:	6a624f65 	bvs	18943f4 <startup-0x1e76bc0c>
     65c:	55746365 	ldrbpl	r6, [r4, #-869]!	; 0xfffffc9b
     660:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     664:	3a430065 	bcc	10c0800 <startup-0x1ef3f800>
     668:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     66c:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 5b8 <startup-0x1ffffa48>
     670:	616c706f 	cmnvs	ip, pc, rrx
     674:	61726f62 	cmnvs	r2, r2, ror #30
     678:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     67c:	442f7265 	strtmi	r7, [pc], #-613	; 684 <startup-0x1ffff97c>
     680:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     684:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     688:	2f432f68 	svccs	0x00432f68
     68c:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     690:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     694:	632e7463 			; <UNDEFINED> instruction: 0x632e7463
     698:	69687400 	stmdbvs	r8!, {sl, ip, sp, lr}^
     69c:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     6a0:	47356572 			; <UNDEFINED> instruction: 0x47356572
     6a4:	00796172 	rsbseq	r6, r9, r2, ror r1
     6a8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     6ac:	61724731 	cmnvs	r2, r1, lsr r7
     6b0:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     6b4:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     6b8:	47326572 			; <UNDEFINED> instruction: 0x47326572
     6bc:	00796172 	rsbseq	r6, r9, r2, ror r1
     6c0:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     6c4:	61724733 	cmnvs	r2, r3, lsr r7
     6c8:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     6cc:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     6d0:	47346572 			; <UNDEFINED> instruction: 0x47346572
     6d4:	00796172 	rsbseq	r6, r9, r2, ror r1
     6d8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     6dc:	63616c42 	cmnvs	r1, #16896	; 0x4200
     6e0:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
     6e4:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     6e8:	47336572 			; <UNDEFINED> instruction: 0x47336572
     6ec:	00796172 	rsbseq	r6, r9, r2, ror r1
     6f0:	706d6574 	rsbvc	r6, sp, r4, ror r5
     6f4:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     6f8:	63616c42 	cmnvs	r1, #16896	; 0x4200
     6fc:	6966006b 	stmdbvs	r6!, {r0, r1, r3, r5, r6}^
     700:	4c316572 	cfldr32mi	mvfx6, [r1], #-456	; 0xfffffe38
     704:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     708:	72696600 	rsbvc	r6, r9, #0, 12
     70c:	694c3465 	stmdbvs	ip, {r0, r2, r5, r6, sl, ip, sp}^
     710:	00746867 	rsbseq	r6, r4, r7, ror #16
     714:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     718:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     71c:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     720:	00737469 	rsbseq	r7, r3, r9, ror #8
     724:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     728:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     72c:	5f746867 	svcpl	0x00746867
     730:	73746962 	cmnvc	r4, #1605632	; 0x188000
     734:	72696600 	rsbvc	r6, r9, #0, 12
     738:	694c3365 	stmdbvs	ip, {r0, r2, r5, r6, r8, r9, ip, sp}^
     73c:	00746867 	rsbseq	r6, r4, r7, ror #16
     740:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     744:	31726574 	cmncc	r2, r4, ror r5
     748:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     74c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     750:	69660033 	stmdbvs	r6!, {r0, r1, r4, r5}^
     754:	5f356572 	svcpl	0x00356572
     758:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     75c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     760:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     764:	49336572 	ldmdbmi	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}
     768:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     76c:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     770:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     774:	69660030 	stmdbvs	r6!, {r4, r5}^
     778:	4c356572 	cfldr32mi	mvfx6, [r5], #-456	; 0xfffffe38
     77c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     780:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     784:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     788:	65740032 	ldrbvs	r0, [r4, #-50]!	; 0xffffffce
     78c:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     790:	47356572 			; <UNDEFINED> instruction: 0x47356572
     794:	00796172 	rsbseq	r6, r9, r2, ror r1
     798:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     79c:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     7a0:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     7a4:	00737469 	rsbseq	r7, r3, r9, ror #8
     7a8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     7ac:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
     7b0:	66007468 	strvs	r7, [r0], -r8, ror #8
     7b4:	31657269 	cmncc	r5, r9, ror #4
     7b8:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     7bc:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     7c0:	00737469 	rsbseq	r7, r3, r9, ror #8
     7c4:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     7c8:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     7cc:	5f746867 	svcpl	0x00746867
     7d0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     7d4:	72696600 	rsbvc	r6, r9, #0, 12
     7d8:	6a624f65 	bvs	1894574 <startup-0x1e76ba8c>
     7dc:	72696600 	rsbvc	r6, r9, #0, 12
     7e0:	72473265 	subvc	r3, r7, #1342177286	; 0x50000006
     7e4:	66007961 	strvs	r7, [r0], -r1, ror #18
     7e8:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     7ec:	6172675f 	cmnvs	r2, pc, asr r7
     7f0:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     7f4:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     7f8:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     7fc:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     800:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     804:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     808:	49346572 	ldmdbmi	r4!, {r1, r4, r5, r6, r8, sl, sp, lr}
     80c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     810:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     814:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     818:	694c3165 	stmdbvs	ip, {r0, r2, r5, r6, r8, ip, sp}^
     81c:	00746867 	rsbseq	r6, r4, r7, ror #16
     820:	73726966 	cmnvc	r2, #1671168	; 0x198000
     824:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
     828:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
     82c:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
     830:	00657269 	rsbeq	r7, r5, r9, ror #4
     834:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     838:	696c5f35 	stmdbvs	ip!, {r0, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     83c:	5f746867 	svcpl	0x00746867
     840:	73746962 	cmnvc	r4, #1605632	; 0x188000
     844:	72696600 	rsbvc	r6, r9, #0, 12
     848:	616d4965 	cmnvs	sp, r5, ror #18
     84c:	00736567 	rsbseq	r6, r3, r7, ror #10
     850:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     854:	616d4931 	cmnvs	sp, r1, lsr r9
     858:	66006567 	strvs	r6, [r0], -r7, ror #10
     85c:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     860:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     864:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     868:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     86c:	72473165 	subvc	r3, r7, #1073741849	; 0x40000019
     870:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     874:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     878:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     87c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     880:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     884:	5f336572 	svcpl	0x00336572
     888:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     88c:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     890:	66007374 			; <UNDEFINED> instruction: 0x66007374
     894:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     898:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     89c:	69660065 	stmdbvs	r6!, {r0, r2, r5, r6}^
     8a0:	625f6572 	subsvs	r6, pc, #478150656	; 0x1c800000
     8a4:	6b63616c 	blvs	18d8e5c <startup-0x1e7271a4>
     8a8:	625f325f 	subsvs	r3, pc, #-268435451	; 0xf0000005
     8ac:	00737469 	rsbseq	r7, r3, r9, ror #8
     8b0:	706d6574 	rsbvc	r6, sp, r4, ror r5
     8b4:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     8b8:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
     8bc:	66007468 	strvs	r7, [r0], -r8, ror #8
     8c0:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     8c4:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     8c8:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
     8cc:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     8d0:	4c356572 	cfldr32mi	mvfx6, [r5], #-456	; 0xfffffe38
     8d4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     8d8:	2f3a4300 	svccs	0x003a4300
     8dc:	2f706f6d 	svccs	0x00706f6d
     8e0:	6f4d2f63 	svcvs	0x004d2f63
     8e4:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     8e8:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     8ec:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     8f0:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     8f4:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     8f8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     8fc:	662f432f 	strtvs	r4, [pc], -pc, lsr #6
     900:	2e657269 	cdpcs	2, 6, cr7, cr5, cr9, {3}
     904:	69660063 	stmdbvs	r6!, {r0, r1, r5, r6}^
     908:	5f336572 	svcpl	0x00336572
     90c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     910:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     914:	616c0073 	smcvs	49155	; 0xc003
     918:	69527473 	ldmdbvs	r2, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     91c:	56746867 	ldrbtpl	r6, [r4], -r7, ror #16
     920:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     924:	73616c00 	cmnvc	r1, #0, 24
     928:	66654c74 			; <UNDEFINED> instruction: 0x66654c74
     92c:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
     930:	43006575 	movwmi	r6, #1397	; 0x575
     934:	6f6d2f3a 	svcvs	0x006d2f3a
     938:	2f632f70 	svccs	0x00632f70
     93c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     940:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     944:	6f697461 	svcvs	0x00697461
     948:	2f72656e 	svccs	0x0072656e
     94c:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     950:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     954:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     958:	616c702f 	cmnvs	ip, pc, lsr #32
     95c:	2e726579 	mrccs	5, 3, r6, cr2, cr9, {3}
     960:	6c700063 	ldclvs	0, cr0, [r0], #-396	; 0xfffffe74
     964:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
     968:	61647055 	qdsubvs	r7, r5, r4
     96c:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
     970:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     974:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     978:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     97c:	69620074 	stmdbvs	r2!, {r2, r4, r5, r6}^
     980:	5f336472 	svcpl	0x00336472
     984:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     988:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     98c:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     990:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     994:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     998:	69620065 	stmdbvs	r2!, {r0, r2, r5, r6}^
     99c:	5f346472 	svcpl	0x00346472
     9a0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     9a4:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     9a8:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     9ac:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     9b0:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     9b4:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     9b8:	6f700074 	svcvs	0x00700074
     9bc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     9c0:	00343172 	eorseq	r3, r4, r2, ror r1
     9c4:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     9c8:	696c5f35 	stmdbvs	ip!, {r0, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     9cc:	5f746867 	svcpl	0x00746867
     9d0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     9d4:	72696200 	rsbvc	r6, r9, #0, 4
     9d8:	694c3364 	stmdbvs	ip, {r2, r5, r6, r8, r9, ip, sp}^
     9dc:	00746867 	rsbseq	r6, r4, r7, ror #16
     9e0:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     9e4:	31726574 	cmncc	r2, r4, ror r5
     9e8:	69620039 	stmdbvs	r2!, {r0, r3, r4, r5}^
     9ec:	4c316472 	cfldrsmi	mvf6, [r1], #-456	; 0xfffffe38
     9f0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     9f4:	72696200 	rsbvc	r6, r9, #0, 4
     9f8:	6c423364 	mcrrvs	3, 6, r3, r2, cr4
     9fc:	006b6361 	rsbeq	r6, fp, r1, ror #6
     a00:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a04:	61724731 	cmnvs	r2, r1, lsr r7
     a08:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     a0c:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     a10:	42346472 	eorsmi	r6, r4, #1912602624	; 0x72000000
     a14:	6b63616c 	blvs	18d8fcc <startup-0x1e727034>
     a18:	72696200 	rsbvc	r6, r9, #0, 4
     a1c:	6c423564 	cfstr64vs	mvdx3, [r2], {100}	; 0x64
     a20:	006b6361 	rsbeq	r6, fp, r1, ror #6
     a24:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     a28:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     a2c:	6f700030 	svcvs	0x00700030
     a30:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     a34:	00313272 	eorseq	r3, r1, r2, ror r2
     a38:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a3c:	61724734 	cmnvs	r2, r4, lsr r7
     a40:	69620079 	stmdbvs	r2!, {r0, r3, r4, r5, r6}^
     a44:	42326472 	eorsmi	r6, r2, #1912602624	; 0x72000000
     a48:	6b63616c 	blvs	18d9000 <startup-0x1e727000>
     a4c:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     a50:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     a54:	70003432 	andvc	r3, r0, r2, lsr r4
     a58:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     a5c:	36317265 	ldrtcc	r7, [r1], -r5, ror #4
     a60:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     a64:	72694270 	rsbvc	r4, r9, #112, 4
     a68:	72473264 	subvc	r3, r7, #100, 4	; 0x40000006
     a6c:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     a70:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     a74:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     a78:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     a7c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     a80:	72694270 	rsbvc	r4, r9, #112, 4
     a84:	67694c64 	strbvs	r4, [r9, -r4, ror #24]!
     a88:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     a8c:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     a90:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     a94:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     a98:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     a9c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     aa0:	62003331 	andvs	r3, r0, #-1006632960	; 0xc4000000
     aa4:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     aa8:	616c625f 	cmnvs	ip, pc, asr r2
     aac:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     ab0:	00737469 	rsbseq	r7, r3, r9, ror #8
     ab4:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     ab8:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     abc:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     ac0:	00737469 	rsbseq	r7, r3, r9, ror #8
     ac4:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     ac8:	616d4936 	cmnvs	sp, r6, lsr r9
     acc:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
     ad0:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     ad4:	616c625f 	cmnvs	ip, pc, asr r2
     ad8:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     adc:	00737469 	rsbseq	r7, r3, r9, ror #8
     ae0:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     ae4:	6c625f34 	stclvs	15, cr5, [r2], #-208	; 0xffffff30
     ae8:	5f6b6361 	svcpl	0x006b6361
     aec:	73746962 	cmnvc	r4, #1605632	; 0x188000
     af0:	72696200 	rsbvc	r6, r9, #0, 4
     af4:	6d493364 	stclvs	3, cr3, [r9, #-400]	; 0xfffffe70
     af8:	00656761 	rsbeq	r6, r5, r1, ror #14
     afc:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b00:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     b04:	5f746867 	svcpl	0x00746867
     b08:	73746962 	cmnvc	r4, #1605632	; 0x188000
     b0c:	72696200 	rsbvc	r6, r9, #0, 4
     b10:	625f3564 	subsvs	r3, pc, #100, 10	; 0x19000000
     b14:	6b63616c 	blvs	18d90cc <startup-0x1e726f34>
     b18:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     b1c:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     b20:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     b24:	4c336472 	cfldrsmi	mvf6, [r3], #-456	; 0xfffffe38
     b28:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     b2c:	72696200 	rsbvc	r6, r9, #0, 4
     b30:	675f3564 	ldrbvs	r3, [pc, -r4, ror #10]
     b34:	5f796172 	svcpl	0x00796172
     b38:	73746962 	cmnvc	r4, #1605632	; 0x188000
     b3c:	72696200 	rsbvc	r6, r9, #0, 4
     b40:	72473264 	subvc	r3, r7, #100, 4	; 0x40000006
     b44:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     b48:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     b4c:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     b50:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     b54:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     b58:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     b5c:	47336472 			; <UNDEFINED> instruction: 0x47336472
     b60:	00796172 	rsbseq	r6, r9, r2, ror r1
     b64:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b68:	72675f34 	rsbvc	r5, r7, #52, 30	; 0xd0
     b6c:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     b70:	00737469 	rsbseq	r7, r3, r9, ror #8
     b74:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     b78:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     b7c:	69620033 	stmdbvs	r2!, {r0, r1, r4, r5}^
     b80:	4c356472 	cfldrsmi	mvf6, [r5], #-456	; 0xfffffe38
     b84:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     b88:	72696200 	rsbvc	r6, r9, #0, 4
     b8c:	616d4964 	cmnvs	sp, r4, ror #18
     b90:	00736567 	rsbseq	r6, r3, r7, ror #10
     b94:	706d6574 	rsbvc	r6, sp, r4, ror r5
     b98:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     b9c:	616c4235 	cmnvs	ip, r5, lsr r2
     ba0:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     ba4:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     ba8:	63616c42 	cmnvs	r1, #16896	; 0x4200
     bac:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
     bb0:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     bb4:	42326472 	eorsmi	r6, r2, #1912602624	; 0x72000000
     bb8:	6b63616c 	blvs	18d9170 <startup-0x1e726e90>
     bbc:	72696200 	rsbvc	r6, r9, #0, 4
     bc0:	675f3364 	ldrbvs	r3, [pc, -r4, ror #6]
     bc4:	5f796172 	svcpl	0x00796172
     bc8:	73746962 	cmnvc	r4, #1605632	; 0x188000
     bcc:	72696200 	rsbvc	r6, r9, #0, 4
     bd0:	6c423164 	stfvse	f3, [r2], {100}	; 0x64
     bd4:	006b6361 	rsbeq	r6, fp, r1, ror #6
     bd8:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     bdc:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
     be0:	43007468 	movwmi	r7, #1128	; 0x468
     be4:	6f6d2f3a 	svcvs	0x006d2f3a
     be8:	2f632f70 	svccs	0x00632f70
     bec:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     bf0:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     bf4:	6f697461 	svcvs	0x00697461
     bf8:	2f72656e 	svccs	0x0072656e
     bfc:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     c00:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     c04:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     c08:	7269622f 	rsbvc	r6, r9, #-268435454	; 0xf0000002
     c0c:	00632e64 	rsbeq	r2, r3, r4, ror #28
     c10:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     c14:	7269625f 	rsbvc	r6, r9, #-268435451	; 0xf0000005
     c18:	69620064 	stmdbvs	r2!, {r2, r5, r6}^
     c1c:	624f6472 	subvs	r6, pc, #1912602624	; 0x72000000
     c20:	6962006a 	stmdbvs	r2!, {r1, r3, r5, r6}^
     c24:	5f326472 	svcpl	0x00326472
     c28:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     c2c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     c30:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     c34:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     c38:	72476472 	subvc	r6, r7, #1912602624	; 0x72000000
     c3c:	62007961 	andvs	r7, r0, #1589248	; 0x184000
     c40:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     c44:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     c48:	72696200 	rsbvc	r6, r9, #0, 4
     c4c:	625f3164 	subsvs	r3, pc, #100, 2
     c50:	6b63616c 	blvs	18d9208 <startup-0x1e726df8>
     c54:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     c58:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     c5c:	49316472 	ldmdbmi	r1!, {r1, r4, r5, r6, sl, sp, lr}
     c60:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     c64:	72696200 	rsbvc	r6, r9, #0, 4
     c68:	72473364 	subvc	r3, r7, #100, 6	; 0x90000001
     c6c:	66007961 	strvs	r7, [r0], -r1, ror #18
     c70:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
     c74:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
     c78:	00726574 	rsbseq	r6, r2, r4, ror r5
     c7c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     c80:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     c84:	63616c42 	cmnvs	r1, #16896	; 0x4200
     c88:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
     c8c:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     c90:	42336472 	eorsmi	r6, r3, #1912602624	; 0x72000000
     c94:	6b63616c 	blvs	18d924c <startup-0x1e726db4>
     c98:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     c9c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     ca0:	70003131 	andvc	r3, r0, r1, lsr r1
     ca4:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     ca8:	32317265 	eorscc	r7, r1, #1342177286	; 0x50000006
     cac:	72696200 	rsbvc	r6, r9, #0, 4
     cb0:	694c3464 	stmdbvs	ip, {r2, r5, r6, sl, ip, sp}^
     cb4:	00746867 	rsbseq	r6, r4, r7, ror #16
     cb8:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     cbc:	616d4935 	cmnvs	sp, r5, lsr r9
     cc0:	70006567 	andvc	r6, r0, r7, ror #10
     cc4:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     cc8:	35317265 	ldrcc	r7, [r1, #-613]!	; 0xfffffd9b
     ccc:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     cd0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     cd4:	70003731 	andvc	r3, r0, r1, lsr r7
     cd8:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     cdc:	38317265 	ldmdacc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     ce0:	72696200 	rsbvc	r6, r9, #0, 4
     ce4:	6d493264 	sfmvs	f3, 2, [r9, #-400]	; 0xfffffe70
     ce8:	00656761 	rsbeq	r6, r5, r1, ror #14
     cec:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     cf0:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     cf4:	69620032 	stmdbvs	r2!, {r1, r4, r5}^
     cf8:	5f326472 	svcpl	0x00326472
     cfc:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     d00:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     d04:	77007374 	smlsdxvc	r0, r4, r3, r7
     d08:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     d0c:	616c4232 	cmnvs	ip, r2, lsr r2
     d10:	77006b63 	strvc	r6, [r0, -r3, ror #22]
     d14:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     d18:	61724731 	cmnvs	r2, r1, lsr r7
     d1c:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     d20:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     d24:	4c686374 	stclmi	3, cr6, [r8], #-464	; 0xfffffe30
     d28:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     d2c:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     d30:	624f6863 	subvs	r6, pc, #6488064	; 0x630000
     d34:	6977006a 	ldmdbvs	r7!, {r1, r3, r5, r6}^
     d38:	31686374 	smccc	34356	; 0x8634
     d3c:	616c625f 	cmnvs	ip, pc, asr r2
     d40:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     d44:	00737469 	rsbseq	r7, r3, r9, ror #8
     d48:	706d6574 	rsbvc	r6, sp, r4, ror r5
     d4c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     d50:	694c3368 	stmdbvs	ip, {r3, r5, r6, r8, r9, ip, sp}^
     d54:	00746867 	rsbseq	r6, r4, r7, ror #16
     d58:	706d6574 	rsbvc	r6, sp, r4, ror r5
     d5c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     d60:	694c3268 	stmdbvs	ip, {r3, r5, r6, r9, ip, sp}^
     d64:	00746867 	rsbseq	r6, r4, r7, ror #16
     d68:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     d6c:	694c3168 	stmdbvs	ip, {r3, r5, r6, r8, ip, sp}^
     d70:	00746867 	rsbseq	r6, r4, r7, ror #16
     d74:	706d6574 	rsbvc	r6, sp, r4, ror r5
     d78:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     d7c:	6c423268 	sfmvs	f3, 2, [r2], {104}	; 0x68
     d80:	006b6361 	rsbeq	r6, fp, r1, ror #6
     d84:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     d88:	6c5f3268 	lfmvs	f3, 2, [pc], {104}	; 0x68
     d8c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     d90:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     d94:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     d98:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     d9c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     da0:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
     da4:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     da8:	63616c42 	cmnvs	r1, #16896	; 0x4200
     dac:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     db0:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     db4:	6172675f 	cmnvs	r2, pc, asr r7
     db8:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     dbc:	69007374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
     dc0:	5f74696e 	svcpl	0x0074696e
     dc4:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     dc8:	65740068 	ldrbvs	r0, [r4, #-104]!	; 0xffffff98
     dcc:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     dd0:	42686374 	rsbmi	r6, r8, #116, 6	; 0xd0000001
     dd4:	6b63616c 	blvs	18d938c <startup-0x1e726c74>
     dd8:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     ddc:	5f326863 	svcpl	0x00326863
     de0:	63616c62 	cmnvs	r1, #25088	; 0x6200
     de4:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     de8:	77007374 	smlsdxvc	r0, r4, r3, r7
     dec:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     df0:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     df4:	5f746867 	svcpl	0x00746867
     df8:	73746962 	cmnvc	r4, #1605632	; 0x188000
     dfc:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     e00:	47336863 	ldrmi	r6, [r3, -r3, ror #16]!
     e04:	00796172 	rsbseq	r6, r9, r2, ror r1
     e08:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e0c:	72473268 	subvc	r3, r7, #104, 4	; 0x80000006
     e10:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     e14:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     e18:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e1c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     e20:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     e24:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     e28:	47326863 	ldrmi	r6, [r2, -r3, ror #16]!
     e2c:	00796172 	rsbseq	r6, r9, r2, ror r1
     e30:	706d6574 	rsbvc	r6, sp, r4, ror r5
     e34:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     e38:	6c423368 	mcrrvs	3, 6, r3, r2, cr8
     e3c:	006b6361 	rsbeq	r6, fp, r1, ror #6
     e40:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e44:	6c5f3168 	ldfvse	f3, [pc], {104}	; 0x68
     e48:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     e4c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     e50:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     e54:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     e58:	6172675f 	cmnvs	r2, pc, asr r7
     e5c:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     e60:	77007374 	smlsdxvc	r0, r4, r3, r7
     e64:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e68:	616d4934 	cmnvs	sp, r4, lsr r9
     e6c:	77006567 	strvc	r6, [r0, -r7, ror #10]
     e70:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e74:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
     e78:	77007468 	strvc	r7, [r0, -r8, ror #8]
     e7c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e80:	616d4931 	cmnvs	sp, r1, lsr r9
     e84:	77006567 	strvc	r6, [r0, -r7, ror #10]
     e88:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e8c:	616c4231 	cmnvs	ip, r1, lsr r2
     e90:	77006b63 	strvc	r6, [r0, -r3, ror #22]
     e94:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e98:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     e9c:	77007468 	strvc	r7, [r0, -r8, ror #8]
     ea0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     ea4:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     ea8:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
     eac:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     eb0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     eb4:	61724733 	cmnvs	r2, r3, lsr r7
     eb8:	3a430079 	bcc	10c10a4 <startup-0x1ef3ef5c>
     ebc:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     ec0:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; e0c <startup-0x1ffff1f4>
     ec4:	616c706f 	cmnvs	ip, pc, rrx
     ec8:	61726f62 	cmnvs	r2, r2, ror #30
     ecc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     ed0:	442f7265 	strtmi	r7, [pc], #-613	; ed8 <startup-0x1ffff128>
     ed4:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     ed8:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     edc:	2f432f68 	svccs	0x00432f68
     ee0:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     ee4:	00632e68 	rsbeq	r2, r3, r8, ror #28
     ee8:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     eec:	675f3168 	ldrbvs	r3, [pc, -r8, ror #2]
     ef0:	5f796172 	svcpl	0x00796172
     ef4:	73746962 	cmnvc	r4, #1605632	; 0x188000
     ef8:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     efc:	5f336863 	svcpl	0x00336863
     f00:	63616c62 	cmnvs	r1, #25088	; 0x6200
     f04:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     f08:	77007374 	smlsdxvc	r0, r4, r3, r7
     f0c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f10:	616d4932 	cmnvs	sp, r2, lsr r9
     f14:	70006567 	andvc	r6, r0, r7, ror #10
     f18:	00656761 	rsbeq	r6, r5, r1, ror #14
     f1c:	70617267 	rsbvc	r7, r1, r7, ror #4
     f20:	5f636968 	svcpl	0x00636968
     f24:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     f28:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
     f2c:	00726566 	rsbseq	r6, r2, r6, ror #10
     f30:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
     f34:	6400326c 	strvs	r3, [r0], #-620	; 0xfffffd94
     f38:	5f776172 	svcpl	0x00776172
     f3c:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     f40:	6a626f5f 	bvs	189ccc4 <startup-0x1e76333c>
     f44:	00746365 	rsbseq	r6, r4, r5, ror #6
     f48:	616c6564 	cmnvs	ip, r4, ror #10
     f4c:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     f50:	006f7263 	rsbeq	r7, pc, r3, ror #4
     f54:	70617267 	rsbvc	r7, r1, r7, ror #4
     f58:	5f636968 	svcpl	0x00636968
     f5c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
     f60:	6f635f65 	svcvs	0x00635f65
     f64:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
     f68:	6c630064 	stclvs	0, cr0, [r3], #-400	; 0xfffffe70
     f6c:	5f726165 	svcpl	0x00726165
     f70:	6b636162 	blvs	18d9500 <startup-0x1e726b00>
     f74:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     f78:	70007265 	andvc	r7, r0, r5, ror #4
     f7c:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
     f80:	624f6700 	subvs	r6, pc, #0, 14
     f84:	7267006a 	rsbvc	r0, r7, #106	; 0x6a
     f88:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
     f8c:	72645f63 	rsbvc	r5, r4, #396	; 0x18c
     f90:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
     f94:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
     f98:	6564006e 	strbvs	r0, [r4, #-110]!	; 0xffffff92
     f9c:	5f79616c 	svcpl	0x0079616c
     fa0:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
     fa4:	68730069 	ldmdavs	r3!, {r0, r3, r5, r6}^
     fa8:	665f776f 	ldrbvs	r7, [pc], -pc, ror #14
     fac:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
     fb0:	61726400 	cmnvs	r2, r0, lsl #8
     fb4:	70735f77 	rsbsvc	r5, r3, r7, ror pc
     fb8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     fbc:	6c656400 	cfstrdvs	mvd6, [r5], #-0
     fc0:	355f7961 	ldrbcc	r7, [pc, #-2401]	; 667 <startup-0x1ffff999>
     fc4:	736e3030 	cmnvc	lr, #48	; 0x30
     fc8:	61726700 	cmnvs	r2, r0, lsl #14
     fcc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
     fd0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     fd4:	67006574 	smlsdxvs	r0, r4, r5, r6
     fd8:	53796172 	cmnpl	r9, #-2147483620	; 0x8000001c
     fdc:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
     fe0:	74736554 	ldrbtvc	r6, [r3], #-1364	; 0xfffffaac
     fe4:	61726700 	cmnvs	r2, r0, lsl #14
     fe8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
     fec:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
     ff0:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     ff4:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     ff8:	00726165 	rsbseq	r6, r2, r5, ror #2
     ffc:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1000:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1004:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1008:	6f62616c 	svcvs	0x0062616c
    100c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1010:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1014:	5049442f 	subpl	r4, r9, pc, lsr #8
    1018:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    101c:	2f686374 	svccs	0x00686374
    1020:	72672f43 	rsbvc	r2, r7, #268	; 0x10c
    1024:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    1028:	632e7363 			; <UNDEFINED> instruction: 0x632e7363
    102c:	61726700 	cmnvs	r2, r0, lsl #14
    1030:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1034:	6165725f 	cmnvs	r5, pc, asr r2
    1038:	61645f64 	cmnvs	r4, r4, ror #30
    103c:	63006174 	movwvs	r6, #372	; 0x174
    1040:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    1044:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    1048:	5f70755f 	svcpl	0x0070755f
    104c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
    1050:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
    1054:	73726566 	cmnvc	r2, #427819008	; 0x19800000
    1058:	61726700 	cmnvs	r2, r0, lsl #14
    105c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1060:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    1064:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1068:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
    106c:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    1070:	5f79616c 	svcpl	0x0079616c
    1074:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
    1078:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
    107c:	65526c6c 	ldrbvs	r6, [r2, #-3180]	; 0xfffff394
    1080:	6e617463 	cdpvs	4, 6, cr7, cr1, cr3, {3}
    1084:	00656c67 	rsbeq	r6, r5, r7, ror #24
    1088:	6b73616d 	blvs	1cd9644 <startup-0x1e3269bc>
    108c:	61726600 	cmnvs	r2, r0, lsl #12
    1090:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
    1094:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    1098:	72670068 	rsbvc	r0, r7, #104	; 0x68
    109c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    10a0:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
    10a4:	5f657469 	svcpl	0x00657469
    10a8:	61746164 	cmnvs	r4, r4, ror #2
    10ac:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
    10b0:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
    10b4:	5f687464 	svcpl	0x00687464
    10b8:	625f6e69 	subsvs	r6, pc, #1680	; 0x690
    10bc:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    10c0:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
    10c4:	615f7261 	cmpvs	pc, r1, ror #4
    10c8:	625f6c6c 	subsvs	r6, pc, #108, 24	; 0x6c00
    10cc:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
    10d0:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    10d4:	63007372 	movwvs	r7, #882	; 0x372
    10d8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    10dc:	74636552 	strbtvc	r6, [r3], #-1362	; 0xfffffaae
    10e0:	6c676e61 	stclvs	14, cr6, [r7], #-388	; 0xfffffe7c
    10e4:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    10e8:	00786564 	rsbseq	r6, r8, r4, ror #10
    10ec:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
    10f0:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
    10f4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    10f8:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
    10fc:	72670072 	rsbvc	r0, r7, #114	; 0x72
    1100:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    1104:	61775f63 	cmnvs	r7, r3, ror #30
    1108:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
    110c:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    1110:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
    1114:	745f7261 	ldrbvc	r7, [pc], #-609	; 111c <startup-0x1fffeee4>
    1118:	42736968 	rsbsmi	r6, r3, #104, 18	; 0x1a0000
    111c:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
    1120:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1124:	72670072 	rsbvc	r0, r7, #114	; 0x72
    1128:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    112c:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
    1130:	61697469 	cmnvs	r9, r9, ror #8
    1134:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
    1138:	61726700 	cmnvs	r2, r0, lsl #14
    113c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1140:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
    1144:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
    1148:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
    114c:	6f6c006e 	svcvs	0x006c006e
    1150:	695f6461 	ldmdbvs	pc, {r0, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
    1154:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1158:	2f3a4300 	svccs	0x003a4300
    115c:	2f706f6d 	svccs	0x00706f6d
    1160:	6f4d2f63 	svcvs	0x004d2f63
    1164:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1168:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    116c:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1170:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1174:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1178:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    117c:	692f432f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r8, r9, lr}	; <UNPREDICTABLE>
    1180:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1184:	6c00632e 	stcvs	3, cr6, [r0], {46}	; 0x2e
    1188:	5f64616f 	svcpl	0x0064616f
    118c:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    1190:	43006574 	movwmi	r6, #1396	; 0x574
    1194:	6f6d2f3a 	svcvs	0x006d2f3a
    1198:	2f632f70 	svccs	0x00632f70
    119c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    11a0:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    11a4:	6f697461 	svcvs	0x00697461
    11a8:	2f72656e 	svccs	0x0072656e
    11ac:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    11b0:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    11b4:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    11b8:	7270732f 	rsbsvc	r7, r0, #-1140850688	; 0xbc000000
    11bc:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
    11c0:	6f4d0063 	svcvs	0x004d0063
    11c4:	00726564 	rsbseq	r6, r2, r4, ror #10
    11c8:	5f746573 	svcpl	0x00746573
    11cc:	445f7075 	ldrbmi	r7, [pc], #-117	; 11d4 <startup-0x1fffee2c>
    11d0:	6f004c49 	svcvs	0x00004c49
    11d4:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
    11d8:	6f006867 	svcvs	0x00006867
    11dc:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    11e0:	50470072 	subpl	r0, r7, r2, ror r0
    11e4:	50004f49 	andpl	r4, r0, r9, asr #30
    11e8:	72645075 	rsbvc	r5, r4, #117	; 0x75
    11ec:	72646900 	rsbvc	r6, r4, #0, 18
    11f0:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    11f4:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    11f8:	2f3a4300 	svccs	0x003a4300
    11fc:	2f706f6d 	svccs	0x00706f6d
    1200:	6f4d2f63 	svcvs	0x004d2f63
    1204:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1208:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    120c:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1210:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1214:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1218:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    121c:	672f432f 	strvs	r4, [pc, -pc, lsr #6]!
    1220:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    1224:	746f0063 	strbtvc	r0, [pc], #-99	; 122c <startup-0x1fffedd4>
    1228:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    122c:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    1230:	61657200 	cmnvs	r5, r0, lsl #4
    1234:	49445f64 	stmdbmi	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1238:	69735f4c 	ldmdbvs	r3!, {r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    123c:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0xfffff892
    1240:	72646f00 	rsbvc	r6, r4, #0, 30
    1244:	00776f4c 	rsbseq	r6, r7, ip, asr #30
    1248:	6570536f 	ldrbvs	r5, [r0, #-879]!	; 0xfffffc91
    124c:	00726465 	rsbseq	r6, r2, r5, ror #8
    1250:	48726469 	ldmdami	r2!, {r0, r3, r5, r6, sl, sp, lr}^
    1254:	00686769 	rsbeq	r6, r8, r9, ror #14
    1258:	4c726469 	cfldrdmi	mvd6, [r2], #-420	; 0xfffffe5c
    125c:	6f00776f 	svcvs	0x0000776f
    1260:	65527264 	ldrbvs	r7, [r2, #-612]	; 0xfffffd9c
    1264:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1268:	72006465 	andvc	r6, r0, #1694498816	; 0x65000000
    126c:	5f646165 	svcpl	0x00646165
    1270:	004c4944 	subeq	r4, ip, r4, asr #18
    1274:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1278:	7070615f 	rsbsvc	r6, r0, pc, asr r1
    127c:	6163696c 	cmnvs	r3, ip, ror #18
    1280:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1284:	6d696c00 	stclvs	12, cr6, [r9, #-0]
    1288:	00327469 	eorseq	r7, r2, r9, ror #8
    128c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1290:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
    1294:	645f6461 	ldrbvs	r6, [pc], #-1121	; 129c <startup-0x1fffed64>
    1298:	00617461 	rsbeq	r7, r1, r1, ror #8
    129c:	5f746573 	svcpl	0x00746573
    12a0:	615f7075 	cmpvs	pc, r5, ror r0	; <UNPREDICTABLE>
    12a4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    12a8:	63736100 	cmnvs	r3, #0, 2
    12ac:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
    12b0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    12b4:	756c6f63 	strbvc	r6, [ip, #-3939]!	; 0xfffff09d
    12b8:	63006e6d 	movwvs	r6, #3693	; 0xe6d
    12bc:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    12c0:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
    12c4:	61006969 	tstvs	r0, r9, ror #18
    12c8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    12cc:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    12d0:	705f6574 	subsvc	r6, pc, r4, ror r5	; <UNPREDICTABLE>
    12d4:	00747261 	rsbseq	r7, r4, r1, ror #4
    12d8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    12dc:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
    12e0:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
    12e4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    12e8:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
    12ec:	73610072 	cmnvc	r1, #114	; 0x72
    12f0:	5f696963 	svcpl	0x00696963
    12f4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    12f8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    12fc:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1300:	63736100 	cmnvs	r3, #0, 2
    1304:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
    1308:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    130c:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    1310:	73657400 	cmnvc	r5, #0, 8
    1314:	74003174 	strvc	r3, [r0], #-372	; 0xfffffe8c
    1318:	32747365 	rsbscc	r7, r4, #-1811939327	; 0x94000001
    131c:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    1320:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1324:	63736100 	cmnvs	r3, #0, 2
    1328:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
    132c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1330:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    1334:	73610061 	cmnvc	r1, #97	; 0x61
    1338:	5f696963 	svcpl	0x00696963
    133c:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
    1340:	63736100 	cmnvs	r3, #0, 2
    1344:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
    1348:	5f646165 	svcpl	0x00646165
    134c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1350:	61007375 	tstvs	r0, r5, ror r3
    1354:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1358:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    135c:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1360:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
    1364:	00726165 	rsbseq	r6, r2, r5, ror #2
    1368:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    136c:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    1370:	00657469 	rsbeq	r7, r5, r9, ror #8
    1374:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1378:	6f675f69 	svcvs	0x00675f69
    137c:	59586f54 	ldmdbpl	r8, {r2, r4, r6, r8, r9, sl, fp, sp, lr}^
    1380:	63736100 	cmnvs	r3, #0, 2
    1384:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
    1388:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    138c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1390:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 11c8 <startup-0x1fffee38>
    1394:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1398:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    139c:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    13a0:	5f657469 	svcpl	0x00657469
    13a4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    13a8:	6d696c00 	stclvs	12, cr6, [r9, #-0]
    13ac:	00317469 	eorseq	r7, r1, r9, ror #8
    13b0:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    13b4:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    13b8:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    13bc:	6f62616c 	svcvs	0x0062616c
    13c0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    13c4:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    13c8:	5049442f 	subpl	r4, r9, pc, lsr #8
    13cc:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    13d0:	2f686374 	svccs	0x00686374
    13d4:	73612f43 	cmnvc	r1, #268	; 0x10c
    13d8:	5f696963 	svcpl	0x00696963
    13dc:	70736964 	rsbsvc	r6, r3, r4, ror #18
    13e0:	2e79616c 	rpwcsez	f6, f1, #4.0
    13e4:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
    13e8:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    13ec:	5f776f6c 	svcpl	0x00776f6c
    13f0:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
    13f4:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
    13f8:	5f687467 	svcpl	0x00687467
    13fc:	725f666f 	subsvc	r6, pc, #116391936	; 0x6f00000
    1400:	0031776f 	eorseq	r7, r1, pc, ror #14
    1404:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1408:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    140c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1410:	6f62616c 	svcvs	0x0062616c
    1414:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1418:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    141c:	5049442f 	subpl	r4, r9, pc, lsr #8
    1420:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1424:	2f686374 	svccs	0x00686374
    1428:	6c732f43 	ldclvs	15, cr2, [r3], #-268	; 0xfffffef4
    142c:	745f776f 	ldrbvc	r7, [pc], #-1903	; 1434 <startup-0x1fffebcc>
    1430:	2e747865 	cdpcs	8, 7, cr7, cr4, cr5, {3}
    1434:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
    1438:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    143c:	616d4973 	smcvs	54419	; 0xd493
    1440:	69006567 	stmdbvs	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    1444:	6f6f646e 	svcvs	0x006f646e
    1448:	6c427372 	mcrrvs	3, 7, r7, r2, cr2
    144c:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1450:	6f646e69 	svcvs	0x00646e69
    1454:	4973726f 	ldmdbmi	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    1458:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    145c:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    1460:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1464:	696c5f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1468:	5f746867 	svcpl	0x00746867
    146c:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1470:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1474:	646e4970 	strbtvs	r4, [lr], #-2416	; 0xfffff690
    1478:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    147c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1480:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1484:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1488:	6172675f 	cmnvs	r2, pc, asr r7
    148c:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1490:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    1494:	49706d65 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    1498:	6f6f646e 	svcvs	0x006f646e
    149c:	694c7372 	stmdbvs	ip, {r1, r4, r5, r6, r8, r9, ip, sp, lr}^
    14a0:	00746867 	rsbseq	r6, r4, r7, ror #16
    14a4:	6f646e69 	svcvs	0x00646e69
    14a8:	4c73726f 	lfmmi	f7, 2, [r3], #-444	; 0xfffffe44
    14ac:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    14b0:	2f3a4300 	svccs	0x003a4300
    14b4:	2f706f6d 	svccs	0x00706f6d
    14b8:	6f4d2f63 	svcvs	0x004d2f63
    14bc:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    14c0:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    14c4:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    14c8:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    14cc:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    14d0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    14d4:	692f432f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r8, r9, lr}	; <UNPREDICTABLE>
    14d8:	6f6f646e 	svcvs	0x006f646e
    14dc:	632e7372 			; <UNDEFINED> instruction: 0x632e7372
    14e0:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    14e4:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    14e8:	616c625f 	cmnvs	ip, pc, asr r2
    14ec:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
    14f0:	00737469 	rsbseq	r7, r3, r9, ror #8
    14f4:	706d6574 	rsbvc	r6, sp, r4, ror r5
    14f8:	6f646e49 	svcvs	0x00646e49
    14fc:	4273726f 	rsbsmi	r7, r3, #-268435450	; 0xf0000006
    1500:	6b63616c 	blvs	18d9ab8 <startup-0x1e726548>
    1504:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    1508:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    150c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1510:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    1514:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1518:	6a624f73 	bvs	18952ec <startup-0x1e76ad14>
    151c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1520:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1524:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1528:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    152c:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1530:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
    1534:	69007468 	stmdbvs	r0, {r3, r5, r6, sl, ip, sp, lr}
    1538:	6f6f646e 	svcvs	0x006f646e
    153c:	5f327372 	svcpl	0x00327372
    1540:	63616c62 	cmnvs	r1, #25088	; 0x6200
    1544:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1548:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    154c:	49706d65 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    1550:	6f6f646e 	svcvs	0x006f646e
    1554:	4c327372 	ldcmi	3, cr7, [r2], #-456	; 0xfffffe38
    1558:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    155c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1560:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1564:	61724732 	cmnvs	r2, r2, lsr r7
    1568:	3a430079 	bcc	10c1754 <startup-0x1ef3e8ac>
    156c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    1570:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 14bc <startup-0x1fffeb44>
    1574:	616c706f 	cmnvs	ip, pc, rrx
    1578:	61726f62 	cmnvs	r2, r2, ror #30
    157c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1580:	442f7265 	strtmi	r7, [pc], #-613	; 1588 <startup-0x1fffea78>
    1584:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    1588:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    158c:	2f432f68 	svccs	0x00432f68
    1590:	6f646e69 	svcvs	0x00646e69
    1594:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1598:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
    159c:	49706d65 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    15a0:	6f6f646e 	svcvs	0x006f646e
    15a4:	42327372 	eorsmi	r7, r2, #-939524095	; 0xc8000001
    15a8:	6b63616c 	blvs	18d9b60 <startup-0x1e7264a0>
    15ac:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    15b0:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    15b4:	616c4232 	cmnvs	ip, r2, lsr r2
    15b8:	69006b63 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    15bc:	6f6f646e 	svcvs	0x006f646e
    15c0:	49327372 	ldmdbmi	r2!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}
    15c4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    15c8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    15cc:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    15d0:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    15d4:	69003273 	stmdbvs	r0, {r0, r1, r4, r5, r6, r9, ip, sp}
    15d8:	6f6f646e 	svcvs	0x006f646e
    15dc:	5f327372 	svcpl	0x00327372
    15e0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    15e4:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    15e8:	69007374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    15ec:	6f6f646e 	svcvs	0x006f646e
    15f0:	49327372 	ldmdbmi	r2!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}
    15f4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    15f8:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    15fc:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1600:	675f3273 			; <UNDEFINED> instruction: 0x675f3273
    1604:	5f796172 	svcpl	0x00796172
    1608:	73746962 	cmnvc	r4, #1605632	; 0x188000
    160c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1610:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1614:	6a624f32 	bvs	18952e4 <startup-0x1e76ad1c>
    1618:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    161c:	646e4970 	strbtvs	r4, [lr], #-2416	; 0xfffff690
    1620:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1624:	61724732 	cmnvs	r2, r2, lsr r7
    1628:	Address 0x00001628 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000024 	andeq	r0, r0, r4, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000034 	andcs	r0, r0, r4, lsr r0
  48:	000001c8 	andeq	r0, r0, r8, asr #3
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	300e4101 	andcc	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	200001fc 	strdcs	r0, [r0], -ip
  68:	00000c04 	andeq	r0, r0, r4, lsl #24
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	06d00e42 	ldrbeq	r0, [r0], r2, asr #28
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000000c 	andeq	r0, r0, ip
  84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  88:	7c020001 	stcvc	0, cr0, [r2], {1}
  8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000080 	andeq	r0, r0, r0, lsl #1
  98:	20000e00 	andcs	r0, r0, r0, lsl #28
  9c:	00000010 	andeq	r0, r0, r0, lsl r0
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000080 	andeq	r0, r0, r0, lsl #1
  b8:	20000e10 	andcs	r0, r0, r0, lsl lr
  bc:	00000046 	andeq	r0, r0, r6, asr #32
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000000c 	andeq	r0, r0, ip
  d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d8:	7c020001 	stcvc	0, cr0, [r2], {1}
  dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  e8:	20000e58 	andcs	r0, r0, r8, asr lr
  ec:	00000184 	andeq	r0, r0, r4, lsl #3
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f8:	380e4101 	stmdacc	lr, {r0, r8, lr}
  fc:	00070d41 	andeq	r0, r7, r1, asr #26
 100:	00000020 	andeq	r0, r0, r0, lsr #32
 104:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 108:	20000fdc 	ldrdcs	r0, [r0], -ip
 10c:	00000124 	andeq	r0, r0, r4, lsr #2
 110:	400c0e41 	andmi	r0, ip, r1, asr #28
 114:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 118:	018e4002 	orreq	r4, lr, r2
 11c:	41180e41 	tstmi	r8, r1, asr #28
 120:	0000070d 	andeq	r0, r0, sp, lsl #14
 124:	0000000c 	andeq	r0, r0, ip
 128:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 12c:	7c020001 	stcvc	0, cr0, [r2], {1}
 130:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000124 	andeq	r0, r0, r4, lsr #2
 13c:	20001100 	andcs	r1, r0, r0, lsl #2
 140:	000000fc 	strdeq	r0, [r0], -ip
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000000c 	andeq	r0, r0, ip
 158:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 15c:	7c020001 	stcvc	0, cr0, [r2], {1}
 160:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 164:	0000001c 	andeq	r0, r0, ip, lsl r0
 168:	00000154 	andeq	r0, r0, r4, asr r1
 16c:	200011fc 	strdcs	r1, [r0], -ip
 170:	0000020c 	andeq	r0, r0, ip, lsl #4
 174:	40080e41 	andmi	r0, r8, r1, asr #28
 178:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 17c:	480e4101 	stmdami	lr, {r0, r8, lr}
 180:	00070d41 	andeq	r0, r7, r1, asr #26
 184:	00000020 	andeq	r0, r0, r0, lsr #32
 188:	00000154 	andeq	r0, r0, r4, asr r1
 18c:	20001408 	andcs	r1, r0, r8, lsl #8
 190:	00000158 	andeq	r0, r0, r8, asr r1
 194:	400c0e41 	andmi	r0, ip, r1, asr #28
 198:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 19c:	018e4002 	orreq	r4, lr, r2
 1a0:	41180e41 	tstmi	r8, r1, asr #28
 1a4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1a8:	0000000c 	andeq	r0, r0, ip
 1ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1b0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	000001a8 	andeq	r0, r0, r8, lsr #3
 1c0:	20001560 	andcs	r1, r0, r0, ror #10
 1c4:	00000140 	andeq	r0, r0, r0, asr #2
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	300e4101 	andcc	r4, lr, r1, lsl #2
 1d4:	00070d41 	andeq	r0, r7, r1, asr #26
 1d8:	00000020 	andeq	r0, r0, r0, lsr #32
 1dc:	000001a8 	andeq	r0, r0, r8, lsr #3
 1e0:	200016a0 	andcs	r1, r0, r0, lsr #13
 1e4:	000000f8 	strdeq	r0, [r0], -r8
 1e8:	400c0e41 	andmi	r0, ip, r1, asr #28
 1ec:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1f0:	018e4002 	orreq	r4, lr, r2
 1f4:	41180e41 	tstmi	r8, r1, asr #28
 1f8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1fc:	0000000c 	andeq	r0, r0, ip
 200:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 204:	7c020001 	stcvc	0, cr0, [r2], {1}
 208:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 20c:	00000018 	andeq	r0, r0, r8, lsl r0
 210:	000001fc 	strdeq	r0, [r0], -ip
 214:	20001798 	mulcs	r0, r8, r7
 218:	00000044 	andeq	r0, r0, r4, asr #32
 21c:	40080e41 	andmi	r0, r8, r1, asr #28
 220:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 224:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 228:	00000018 	andeq	r0, r0, r8, lsl r0
 22c:	000001fc 	strdeq	r0, [r0], -ip
 230:	200017dc 	ldrdcs	r1, [r0], -ip
 234:	00000044 	andeq	r0, r0, r4, asr #32
 238:	40080e41 	andmi	r0, r8, r1, asr #28
 23c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 240:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 244:	0000001c 	andeq	r0, r0, ip, lsl r0
 248:	000001fc 	strdeq	r0, [r0], -ip
 24c:	20001820 	andcs	r1, r0, r0, lsr #16
 250:	0000002c 	andeq	r0, r0, ip, lsr #32
 254:	40080e41 	andmi	r0, r8, r1, asr #28
 258:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 25c:	100e4101 	andne	r4, lr, r1, lsl #2
 260:	00070d41 	andeq	r0, r7, r1, asr #26
 264:	0000001c 	andeq	r0, r0, ip, lsl r0
 268:	000001fc 	strdeq	r0, [r0], -ip
 26c:	2000184c 	andcs	r1, r0, ip, asr #16
 270:	00000026 	andeq	r0, r0, r6, lsr #32
 274:	40080e41 	andmi	r0, r8, r1, asr #28
 278:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 27c:	100e4101 	andne	r4, lr, r1, lsl #2
 280:	00070d41 	andeq	r0, r7, r1, asr #26
 284:	0000001c 	andeq	r0, r0, ip, lsl r0
 288:	000001fc 	strdeq	r0, [r0], -ip
 28c:	20001872 	andcs	r1, r0, r2, ror r8
 290:	00000032 	andeq	r0, r0, r2, lsr r0
 294:	40080e41 	andmi	r0, r8, r1, asr #28
 298:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 29c:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a0:	00070d41 	andeq	r0, r7, r1, asr #26
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
 2a8:	000001fc 	strdeq	r0, [r0], -ip
 2ac:	200018a4 	andcs	r1, r0, r4, lsr #17
 2b0:	00000018 	andeq	r0, r0, r8, lsl r0
 2b4:	40080e41 	andmi	r0, r8, r1, asr #28
 2b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2c0:	00000018 	andeq	r0, r0, r8, lsl r0
 2c4:	000001fc 	strdeq	r0, [r0], -ip
 2c8:	200018bc 			; <UNDEFINED> instruction: 0x200018bc
 2cc:	00000030 	andeq	r0, r0, r0, lsr r0
 2d0:	40080e41 	andmi	r0, r8, r1, asr #28
 2d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e0:	000001fc 	strdeq	r0, [r0], -ip
 2e4:	200018ec 	andcs	r1, r0, ip, ror #17
 2e8:	00000050 	andeq	r0, r0, r0, asr r0
 2ec:	40080e41 	andmi	r0, r8, r1, asr #28
 2f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2f8:	00070d41 	andeq	r0, r7, r1, asr #26
 2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 300:	000001fc 	strdeq	r0, [r0], -ip
 304:	2000193c 	andcs	r1, r0, ip, lsr r9
 308:	00000058 	andeq	r0, r0, r8, asr r0
 30c:	40080e41 	andmi	r0, r8, r1, asr #28
 310:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 314:	180e4101 	stmdane	lr, {r0, r8, lr}
 318:	00070d41 	andeq	r0, r7, r1, asr #26
 31c:	0000001c 	andeq	r0, r0, ip, lsl r0
 320:	000001fc 	strdeq	r0, [r0], -ip
 324:	20001994 	mulcs	r0, r4, r9
 328:	00000066 	andeq	r0, r0, r6, rrx
 32c:	40080e41 	andmi	r0, r8, r1, asr #28
 330:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 334:	100e4101 	andne	r4, lr, r1, lsl #2
 338:	00070d41 	andeq	r0, r7, r1, asr #26
 33c:	0000001c 	andeq	r0, r0, ip, lsl r0
 340:	000001fc 	strdeq	r0, [r0], -ip
 344:	200019fa 	strdcs	r1, [r0], -sl
 348:	0000006e 	andeq	r0, r0, lr, rrx
 34c:	40080e41 	andmi	r0, r8, r1, asr #28
 350:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 354:	100e4101 	andne	r4, lr, r1, lsl #2
 358:	00070d41 	andeq	r0, r7, r1, asr #26
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	000001fc 	strdeq	r0, [r0], -ip
 364:	20001a68 	andcs	r1, r0, r8, ror #20
 368:	00000094 	muleq	r0, r4, r0
 36c:	40080e41 	andmi	r0, r8, r1, asr #28
 370:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 374:	180e4101 	stmdane	lr, {r0, r8, lr}
 378:	00070d41 	andeq	r0, r7, r1, asr #26
 37c:	0000001c 	andeq	r0, r0, ip, lsl r0
 380:	000001fc 	strdeq	r0, [r0], -ip
 384:	20001afc 	strdcs	r1, [r0], -ip
 388:	0000002a 	andeq	r0, r0, sl, lsr #32
 38c:	40080e41 	andmi	r0, r8, r1, asr #28
 390:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 394:	100e4101 	andne	r4, lr, r1, lsl #2
 398:	00070d41 	andeq	r0, r7, r1, asr #26
 39c:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a0:	000001fc 	strdeq	r0, [r0], -ip
 3a4:	20001b26 	andcs	r1, r0, r6, lsr #22
 3a8:	0000007e 	andeq	r0, r0, lr, ror r0
 3ac:	40080e41 	andmi	r0, r8, r1, asr #28
 3b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b4:	100e4101 	andne	r4, lr, r1, lsl #2
 3b8:	00070d41 	andeq	r0, r7, r1, asr #26
 3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c0:	000001fc 	strdeq	r0, [r0], -ip
 3c4:	20001ba4 	andcs	r1, r0, r4, lsr #23
 3c8:	00000046 	andeq	r0, r0, r6, asr #32
 3cc:	40080e41 	andmi	r0, r8, r1, asr #28
 3d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d4:	100e4101 	andne	r4, lr, r1, lsl #2
 3d8:	00070d41 	andeq	r0, r7, r1, asr #26
 3dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e0:	000001fc 	strdeq	r0, [r0], -ip
 3e4:	20001bea 	andcs	r1, r0, sl, ror #23
 3e8:	00000046 	andeq	r0, r0, r6, asr #32
 3ec:	40080e41 	andmi	r0, r8, r1, asr #28
 3f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f4:	100e4101 	andne	r4, lr, r1, lsl #2
 3f8:	00070d41 	andeq	r0, r7, r1, asr #26
 3fc:	00000018 	andeq	r0, r0, r8, lsl r0
 400:	000001fc 	strdeq	r0, [r0], -ip
 404:	20001c30 	andcs	r1, r0, r0, lsr ip
 408:	0000006e 	andeq	r0, r0, lr, rrx
 40c:	40080e41 	andmi	r0, r8, r1, asr #28
 410:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 414:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 418:	0000001c 	andeq	r0, r0, ip, lsl r0
 41c:	000001fc 	strdeq	r0, [r0], -ip
 420:	20001c9e 	mulcs	r0, lr, ip
 424:	00000066 	andeq	r0, r0, r6, rrx
 428:	40080e41 	andmi	r0, r8, r1, asr #28
 42c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 430:	100e4101 	andne	r4, lr, r1, lsl #2
 434:	00070d41 	andeq	r0, r7, r1, asr #26
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	000001fc 	strdeq	r0, [r0], -ip
 440:	20001d04 	andcs	r1, r0, r4, lsl #26
 444:	00000180 	andeq	r0, r0, r0, lsl #3
 448:	40080e41 	andmi	r0, r8, r1, asr #28
 44c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 450:	200e4101 	andcs	r4, lr, r1, lsl #2
 454:	00070d41 	andeq	r0, r7, r1, asr #26
 458:	0000001c 	andeq	r0, r0, ip, lsl r0
 45c:	000001fc 	strdeq	r0, [r0], -ip
 460:	20001e84 	andcs	r1, r0, r4, lsl #29
 464:	000001a0 	andeq	r0, r0, r0, lsr #3
 468:	40080e41 	andmi	r0, r8, r1, asr #28
 46c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 470:	280e4101 	stmdacs	lr, {r0, r8, lr}
 474:	00070d41 	andeq	r0, r7, r1, asr #26
 478:	0000001c 	andeq	r0, r0, ip, lsl r0
 47c:	000001fc 	strdeq	r0, [r0], -ip
 480:	20002024 	andcs	r2, r0, r4, lsr #32
 484:	000000d6 	ldrdeq	r0, [r0], -r6
 488:	40080e41 	andmi	r0, r8, r1, asr #28
 48c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 490:	200e4101 	andcs	r4, lr, r1, lsl #2
 494:	00070d41 	andeq	r0, r7, r1, asr #26
 498:	00000024 	andeq	r0, r0, r4, lsr #32
 49c:	000001fc 	strdeq	r0, [r0], -ip
 4a0:	200020fa 	strdcs	r2, [r0], -sl
 4a4:	0000011a 	andeq	r0, r0, sl, lsl r1
 4a8:	40100e41 	andsmi	r0, r0, r1, asr #28
 4ac:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 4b0:	02874003 	addeq	r4, r7, #3
 4b4:	41018e40 	tstmi	r1, r0, asr #28
 4b8:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 4bc:	00000007 	andeq	r0, r0, r7
 4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c4:	000001fc 	strdeq	r0, [r0], -ip
 4c8:	20002214 	andcs	r2, r0, r4, lsl r2
 4cc:	00000052 	andeq	r0, r0, r2, asr r0
 4d0:	40080e41 	andmi	r0, r8, r1, asr #28
 4d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d8:	200e4101 	andcs	r4, lr, r1, lsl #2
 4dc:	00070d41 	andeq	r0, r7, r1, asr #26
 4e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e4:	000001fc 	strdeq	r0, [r0], -ip
 4e8:	20002266 	andcs	r2, r0, r6, ror #4
 4ec:	00000052 	andeq	r0, r0, r2, asr r0
 4f0:	40080e41 	andmi	r0, r8, r1, asr #28
 4f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f8:	200e4101 	andcs	r4, lr, r1, lsl #2
 4fc:	00070d41 	andeq	r0, r7, r1, asr #26
 500:	00000020 	andeq	r0, r0, r0, lsr #32
 504:	000001fc 	strdeq	r0, [r0], -ip
 508:	200022b8 			; <UNDEFINED> instruction: 0x200022b8
 50c:	00000130 	andeq	r0, r0, r0, lsr r1
 510:	400c0e41 	andmi	r0, ip, r1, asr #28
 514:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 518:	018e4002 	orreq	r4, lr, r2
 51c:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 520:	0000070d 	andeq	r0, r0, sp, lsl #14
 524:	0000001c 	andeq	r0, r0, ip, lsl r0
 528:	000001fc 	strdeq	r0, [r0], -ip
 52c:	200023e8 	andcs	r2, r0, r8, ror #7
 530:	00000108 	andeq	r0, r0, r8, lsl #2
 534:	40080e41 	andmi	r0, r8, r1, asr #28
 538:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 53c:	100e4101 	andne	r4, lr, r1, lsl #2
 540:	00070d41 	andeq	r0, r7, r1, asr #26
 544:	0000001c 	andeq	r0, r0, ip, lsl r0
 548:	000001fc 	strdeq	r0, [r0], -ip
 54c:	200024f0 	strdcs	r2, [r0], -r0
 550:	00000082 	andeq	r0, r0, r2, lsl #1
 554:	40080e41 	andmi	r0, r8, r1, asr #28
 558:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 55c:	200e4101 	andcs	r4, lr, r1, lsl #2
 560:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
 564:	0000001c 	andeq	r0, r0, ip, lsl r0
 568:	000001fc 	strdeq	r0, [r0], -ip
 56c:	20002572 	andcs	r2, r0, r2, ror r5
 570:	0000006a 	andeq	r0, r0, sl, rrx
 574:	40080e41 	andmi	r0, r8, r1, asr #28
 578:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 57c:	100e4101 	andne	r4, lr, r1, lsl #2
 580:	00070d41 	andeq	r0, r7, r1, asr #26
 584:	0000000c 	andeq	r0, r0, ip
 588:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 58c:	7c020001 	stcvc	0, cr0, [r2], {1}
 590:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 594:	0000001c 	andeq	r0, r0, ip, lsl r0
 598:	00000584 	andeq	r0, r0, r4, lsl #11
 59c:	200025dc 	ldrdcs	r2, [r0], -ip
 5a0:	00000028 	andeq	r0, r0, r8, lsr #32
 5a4:	40080e41 	andmi	r0, r8, r1, asr #28
 5a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 5b0:	00070d41 	andeq	r0, r7, r1, asr #26
 5b4:	0000000c 	andeq	r0, r0, ip
 5b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5bc:	7c020001 	stcvc	0, cr0, [r2], {1}
 5c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c8:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
 5cc:	20002604 	andcs	r2, r0, r4, lsl #12
 5d0:	00000028 	andeq	r0, r0, r8, lsr #32
 5d4:	40080e41 	andmi	r0, r8, r1, asr #28
 5d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5dc:	180e4101 	stmdane	lr, {r0, r8, lr}
 5e0:	00070d41 	andeq	r0, r7, r1, asr #26
 5e4:	0000000c 	andeq	r0, r0, ip
 5e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5ec:	7c020001 	stcvc	0, cr0, [r2], {1}
 5f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5f4:	00000018 	andeq	r0, r0, r8, lsl r0
 5f8:	000005e4 	andeq	r0, r0, r4, ror #11
 5fc:	2000262c 	andcs	r2, r0, ip, lsr #12
 600:	00000018 	andeq	r0, r0, r8, lsl r0
 604:	40080e41 	andmi	r0, r8, r1, asr #28
 608:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 60c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 610:	00000018 	andeq	r0, r0, r8, lsl r0
 614:	000005e4 	andeq	r0, r0, r4, ror #11
 618:	20002644 	andcs	r2, r0, r4, asr #12
 61c:	00000020 	andeq	r0, r0, r0, lsr #32
 620:	40080e41 	andmi	r0, r8, r1, asr #28
 624:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 628:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 62c:	00000020 	andeq	r0, r0, r0, lsr #32
 630:	000005e4 	andeq	r0, r0, r4, ror #11
 634:	20002664 	andcs	r2, r0, r4, ror #12
 638:	00000034 	andeq	r0, r0, r4, lsr r0
 63c:	400c0e41 	andmi	r0, ip, r1, asr #28
 640:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 644:	018e4002 	orreq	r4, lr, r2
 648:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 64c:	0000070d 	andeq	r0, r0, sp, lsl #14
 650:	0000000c 	andeq	r0, r0, ip
 654:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 658:	7c020001 	stcvc	0, cr0, [r2], {1}
 65c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 660:	0000001c 	andeq	r0, r0, ip, lsl r0
 664:	00000650 	andeq	r0, r0, r0, asr r6
 668:	20002698 	mulcs	r0, r8, r6
 66c:	00000044 	andeq	r0, r0, r4, asr #32
 670:	40080e41 	andmi	r0, r8, r1, asr #28
 674:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 678:	180e4101 	stmdane	lr, {r0, r8, lr}
 67c:	00070d41 	andeq	r0, r7, r1, asr #26
 680:	0000001c 	andeq	r0, r0, ip, lsl r0
 684:	00000650 	andeq	r0, r0, r0, asr r6
 688:	200026dc 	ldrdcs	r2, [r0], -ip
 68c:	00000050 	andeq	r0, r0, r0, asr r0
 690:	40080e41 	andmi	r0, r8, r1, asr #28
 694:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 698:	180e4101 	stmdane	lr, {r0, r8, lr}
 69c:	00070d41 	andeq	r0, r7, r1, asr #26
 6a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6a4:	00000650 	andeq	r0, r0, r0, asr r6
 6a8:	2000272c 	andcs	r2, r0, ip, lsr #14
 6ac:	0000002a 	andeq	r0, r0, sl, lsr #32
 6b0:	40080e41 	andmi	r0, r8, r1, asr #28
 6b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6b8:	100e4101 	andne	r4, lr, r1, lsl #2
 6bc:	00070d41 	andeq	r0, r7, r1, asr #26
 6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c4:	00000650 	andeq	r0, r0, r0, asr r6
 6c8:	20002756 	andcs	r2, r0, r6, asr r7
 6cc:	0000002a 	andeq	r0, r0, sl, lsr #32
 6d0:	40080e41 	andmi	r0, r8, r1, asr #28
 6d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6d8:	100e4101 	andne	r4, lr, r1, lsl #2
 6dc:	00070d41 	andeq	r0, r7, r1, asr #26
 6e0:	00000020 	andeq	r0, r0, r0, lsr #32
 6e4:	00000650 	andeq	r0, r0, r0, asr r6
 6e8:	20002780 	andcs	r2, r0, r0, lsl #15
 6ec:	00000054 	andeq	r0, r0, r4, asr r0
 6f0:	400c0e41 	andmi	r0, ip, r1, asr #28
 6f4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 6f8:	018e4002 	orreq	r4, lr, r2
 6fc:	41180e41 	tstmi	r8, r1, asr #28
 700:	0000070d 	andeq	r0, r0, sp, lsl #14
 704:	00000020 	andeq	r0, r0, r0, lsr #32
 708:	00000650 	andeq	r0, r0, r0, asr r6
 70c:	200027d4 	ldrdcs	r2, [r0], -r4
 710:	00000054 	andeq	r0, r0, r4, asr r0
 714:	400c0e41 	andmi	r0, ip, r1, asr #28
 718:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 71c:	018e4002 	orreq	r4, lr, r2
 720:	41180e41 	tstmi	r8, r1, asr #28
 724:	0000070d 	andeq	r0, r0, sp, lsl #14
 728:	0000001c 	andeq	r0, r0, ip, lsl r0
 72c:	00000650 	andeq	r0, r0, r0, asr r6
 730:	20002828 	andcs	r2, r0, r8, lsr #16
 734:	00000030 	andeq	r0, r0, r0, lsr r0
 738:	40080e41 	andmi	r0, r8, r1, asr #28
 73c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 740:	100e4101 	andne	r4, lr, r1, lsl #2
 744:	00070d41 	andeq	r0, r7, r1, asr #26
 748:	0000001c 	andeq	r0, r0, ip, lsl r0
 74c:	00000650 	andeq	r0, r0, r0, asr r6
 750:	20002858 	andcs	r2, r0, r8, asr r8
 754:	00000034 	andeq	r0, r0, r4, lsr r0
 758:	40080e41 	andmi	r0, r8, r1, asr #28
 75c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 760:	100e4101 	andne	r4, lr, r1, lsl #2
 764:	00070d41 	andeq	r0, r7, r1, asr #26
 768:	0000001c 	andeq	r0, r0, ip, lsl r0
 76c:	00000650 	andeq	r0, r0, r0, asr r6
 770:	2000288c 	andcs	r2, r0, ip, lsl #17
 774:	0000003c 	andeq	r0, r0, ip, lsr r0
 778:	40080e41 	andmi	r0, r8, r1, asr #28
 77c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 780:	100e4101 	andne	r4, lr, r1, lsl #2
 784:	00070d41 	andeq	r0, r7, r1, asr #26
 788:	0000001c 	andeq	r0, r0, ip, lsl r0
 78c:	00000650 	andeq	r0, r0, r0, asr r6
 790:	200028c8 	andcs	r2, r0, r8, asr #17
 794:	00000050 	andeq	r0, r0, r0, asr r0
 798:	40080e41 	andmi	r0, r8, r1, asr #28
 79c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7a0:	180e4101 	stmdane	lr, {r0, r8, lr}
 7a4:	00070d41 	andeq	r0, r7, r1, asr #26
 7a8:	00000018 	andeq	r0, r0, r8, lsl r0
 7ac:	00000650 	andeq	r0, r0, r0, asr r6
 7b0:	20002918 	andcs	r2, r0, r8, lsl r9
 7b4:	0000009a 	muleq	r0, sl, r0
 7b8:	40080e41 	andmi	r0, r8, r1, asr #28
 7bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7c0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 7c4:	00000018 	andeq	r0, r0, r8, lsl r0
 7c8:	00000650 	andeq	r0, r0, r0, asr r6
 7cc:	200029b2 			; <UNDEFINED> instruction: 0x200029b2
 7d0:	0000001a 	andeq	r0, r0, sl, lsl r0
 7d4:	40080e41 	andmi	r0, r8, r1, asr #28
 7d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7dc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 7e0:	00000018 	andeq	r0, r0, r8, lsl r0
 7e4:	00000650 	andeq	r0, r0, r0, asr r6
 7e8:	200029cc 	andcs	r2, r0, ip, asr #19
 7ec:	00000012 	andeq	r0, r0, r2, lsl r0
 7f0:	40080e41 	andmi	r0, r8, r1, asr #28
 7f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7f8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 7fc:	00000020 	andeq	r0, r0, r0, lsr #32
 800:	00000650 	andeq	r0, r0, r0, asr r6
 804:	200029de 	ldrdcs	r2, [r0], -lr
 808:	0000006a 	andeq	r0, r0, sl, rrx
 80c:	400c0e41 	andmi	r0, ip, r1, asr #28
 810:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 814:	018e4002 	orreq	r4, lr, r2
 818:	41300e41 	teqmi	r0, r1, asr #28
 81c:	0000070d 	andeq	r0, r0, sp, lsl #14
 820:	0000001c 	andeq	r0, r0, ip, lsl r0
 824:	00000650 	andeq	r0, r0, r0, asr r6
 828:	20002a48 	andcs	r2, r0, r8, asr #20
 82c:	0000005e 	andeq	r0, r0, lr, asr r0
 830:	40080e41 	andmi	r0, r8, r1, asr #28
 834:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 838:	100e4101 	andne	r4, lr, r1, lsl #2
 83c:	00070d41 	andeq	r0, r7, r1, asr #26
 840:	0000001c 	andeq	r0, r0, ip, lsl r0
 844:	00000650 	andeq	r0, r0, r0, asr r6
 848:	20002aa6 	andcs	r2, r0, r6, lsr #21
 84c:	0000008e 	andeq	r0, r0, lr, lsl #1
 850:	40080e41 	andmi	r0, r8, r1, asr #28
 854:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 858:	200e4101 	andcs	r4, lr, r1, lsl #2
 85c:	00070d41 	andeq	r0, r7, r1, asr #26
 860:	00000020 	andeq	r0, r0, r0, lsr #32
 864:	00000650 	andeq	r0, r0, r0, asr r6
 868:	20002b34 	andcs	r2, r0, r4, lsr fp
 86c:	00000084 	andeq	r0, r0, r4, lsl #1
 870:	400c0e41 	andmi	r0, ip, r1, asr #28
 874:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 878:	018e4002 	orreq	r4, lr, r2
 87c:	41380e41 	teqmi	r8, r1, asr #28
 880:	0000070d 	andeq	r0, r0, sp, lsl #14
 884:	0000000c 	andeq	r0, r0, ip
 888:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 88c:	7c020001 	stcvc	0, cr0, [r2], {1}
 890:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 894:	0000001c 	andeq	r0, r0, ip, lsl r0
 898:	00000884 	andeq	r0, r0, r4, lsl #17
 89c:	20002bb8 			; <UNDEFINED> instruction: 0x20002bb8
 8a0:	0000005a 	andeq	r0, r0, sl, asr r0
 8a4:	40080e41 	andmi	r0, r8, r1, asr #28
 8a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 8b0:	00070d41 	andeq	r0, r7, r1, asr #26
 8b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8b8:	00000884 	andeq	r0, r0, r4, lsl #17
 8bc:	20002c12 	andcs	r2, r0, r2, lsl ip
 8c0:	0000003a 	andeq	r0, r0, sl, lsr r0
 8c4:	40080e41 	andmi	r0, r8, r1, asr #28
 8c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8cc:	180e4101 	stmdane	lr, {r0, r8, lr}
 8d0:	00070d41 	andeq	r0, r7, r1, asr #26
 8d4:	0000000c 	andeq	r0, r0, ip
 8d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8dc:	7c020001 	stcvc	0, cr0, [r2], {1}
 8e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 8e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e8:	000008d4 	ldrdeq	r0, [r0], -r4
 8ec:	20002c4c 	andcs	r2, r0, ip, asr #24
 8f0:	00000074 	andeq	r0, r0, r4, ror r0
 8f4:	40080e41 	andmi	r0, r8, r1, asr #28
 8f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8fc:	180e4101 	stmdane	lr, {r0, r8, lr}
 900:	00070d41 	andeq	r0, r7, r1, asr #26
 904:	00000020 	andeq	r0, r0, r0, lsr #32
 908:	000008d4 	ldrdeq	r0, [r0], -r4
 90c:	20002cc0 	andcs	r2, r0, r0, asr #25
 910:	00000074 	andeq	r0, r0, r4, ror r0
 914:	400c0e41 	andmi	r0, ip, r1, asr #28
 918:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 91c:	018e4002 	orreq	r4, lr, r2
 920:	41180e41 	tstmi	r8, r1, asr #28
 924:	0000070d 	andeq	r0, r0, sp, lsl #14
 928:	0000000c 	andeq	r0, r0, ip
 92c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 930:	7c020001 	stcvc	0, cr0, [r2], {1}
 934:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 938:	0000001c 	andeq	r0, r0, ip, lsl r0
 93c:	00000928 	andeq	r0, r0, r8, lsr #18
 940:	20002d34 	andcs	r2, r0, r4, lsr sp
 944:	00000074 	andeq	r0, r0, r4, ror r0
 948:	40080e41 	andmi	r0, r8, r1, asr #28
 94c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 950:	180e4101 	stmdane	lr, {r0, r8, lr}
 954:	00070d41 	andeq	r0, r7, r1, asr #26
 958:	00000020 	andeq	r0, r0, r0, lsr #32
 95c:	00000928 	andeq	r0, r0, r8, lsr #18
 960:	20002da8 	andcs	r2, r0, r8, lsr #27
 964:	00000074 	andeq	r0, r0, r4, ror r0
 968:	400c0e41 	andmi	r0, ip, r1, asr #28
 96c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 970:	018e4002 	orreq	r4, lr, r2
 974:	41180e41 	tstmi	r8, r1, asr #28
 978:	0000070d 	andeq	r0, r0, sp, lsl #14
 97c:	0000000c 	andeq	r0, r0, ip
 980:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 984:	7c010001 	stcvc	0, cr0, [r1], {1}
 988:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 98c:	0000000c 	andeq	r0, r0, ip
 990:	0000097c 	andeq	r0, r0, ip, ror r9
 994:	20002e1d 	andcs	r2, r0, sp, lsl lr
 998:	000001cc 	andeq	r0, r0, ip, asr #3
