
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#endif
}

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8fa 	bl	200001fc <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:
void init_app( void ) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000014:	4b05      	ldr	r3, [pc, #20]	; (2000002c <init_app+0x1c>)
20000016:	4a06      	ldr	r2, [pc, #24]	; (20000030 <init_app+0x20>)
20000018:	601a      	str	r2, [r3, #0]
	set_up_DIL();
2000001a:	f002 fc0f 	bl	2000283c <set_up_DIL>
	graphic_initialize();
2000001e:	f001 ff0f 	bl	20001e40 <graphic_initialize>
	graphic_clear_screen();
20000022:	f001 ff44 	bl	20001eae <graphic_clear_screen>
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}
2000002c:	40021000 	andmi	r1, r2, r0
20000030:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000034 <initSprites>:
sprite tempTitleLight;
sprite tempPressBlack;
sprite tempPressGray;
sprite tempPressLight;

void initSprites( void ) {
20000034:	b580      	push	{r7, lr}
20000036:	b08a      	sub	sp, #40	; 0x28
20000038:	af00      	add	r7, sp, #0
	sprite *monsterPointer = &tempMonster;
2000003a:	4b49      	ldr	r3, [pc, #292]	; (20000160 <initSprites+0x12c>)
2000003c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(monsterPointer, monster_black_bits, monster_black_width, monster_black_height);
2000003e:	4949      	ldr	r1, [pc, #292]	; (20000164 <initSprites+0x130>)
20000040:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000042:	231e      	movs	r3, #30
20000044:	221e      	movs	r2, #30
20000046:	f002 fbe5 	bl	20002814 <load_sprite>
	monster = monsterPointer;
2000004a:	4b47      	ldr	r3, [pc, #284]	; (20000168 <initSprites+0x134>)
2000004c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000004e:	601a      	str	r2, [r3, #0]
	
	sprite *monsterPointer2 = &tempMonsterLight;
20000050:	4b46      	ldr	r3, [pc, #280]	; (2000016c <initSprites+0x138>)
20000052:	623b      	str	r3, [r7, #32]
	load_sprite(monsterPointer2, monster_light_bits, monster_light_width, monster_light_height);
20000054:	4946      	ldr	r1, [pc, #280]	; (20000170 <initSprites+0x13c>)
20000056:	6a38      	ldr	r0, [r7, #32]
20000058:	231e      	movs	r3, #30
2000005a:	221e      	movs	r2, #30
2000005c:	f002 fbda 	bl	20002814 <load_sprite>
	monsterLight = monsterPointer2;
20000060:	4b44      	ldr	r3, [pc, #272]	; (20000174 <initSprites+0x140>)
20000062:	6a3a      	ldr	r2, [r7, #32]
20000064:	601a      	str	r2, [r3, #0]

	sprite *monsterPointer3 = &tempMonsterGray;
20000066:	4b44      	ldr	r3, [pc, #272]	; (20000178 <initSprites+0x144>)
20000068:	61fb      	str	r3, [r7, #28]
	load_sprite(monsterPointer3, monster_gray_bits, monster_gray_width, monster_gray_height);
2000006a:	4944      	ldr	r1, [pc, #272]	; (2000017c <initSprites+0x148>)
2000006c:	69f8      	ldr	r0, [r7, #28]
2000006e:	231e      	movs	r3, #30
20000070:	221e      	movs	r2, #30
20000072:	f002 fbcf 	bl	20002814 <load_sprite>
	monsterGray = monsterPointer3;
20000076:	4b42      	ldr	r3, [pc, #264]	; (20000180 <initSprites+0x14c>)
20000078:	69fa      	ldr	r2, [r7, #28]
2000007a:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempBg;
2000007c:	4b41      	ldr	r3, [pc, #260]	; (20000184 <initSprites+0x150>)
2000007e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer4, bg_bits, bg_width, bg_height);
20000080:	4941      	ldr	r1, [pc, #260]	; (20000188 <initSprites+0x154>)
20000082:	69b8      	ldr	r0, [r7, #24]
20000084:	2340      	movs	r3, #64	; 0x40
20000086:	2280      	movs	r2, #128	; 0x80
20000088:	f002 fbc4 	bl	20002814 <load_sprite>
	bg = pointer4;
2000008c:	4b3f      	ldr	r3, [pc, #252]	; (2000018c <initSprites+0x158>)
2000008e:	69ba      	ldr	r2, [r7, #24]
20000090:	601a      	str	r2, [r3, #0]
	
	sprite *pointer5 = &tempCastleBlack;
20000092:	4b3f      	ldr	r3, [pc, #252]	; (20000190 <initSprites+0x15c>)
20000094:	617b      	str	r3, [r7, #20]
	load_sprite(pointer5, castle_black_bits, castle_black_width, castle_black_height);
20000096:	493f      	ldr	r1, [pc, #252]	; (20000194 <initSprites+0x160>)
20000098:	6978      	ldr	r0, [r7, #20]
2000009a:	2340      	movs	r3, #64	; 0x40
2000009c:	2280      	movs	r2, #128	; 0x80
2000009e:	f002 fbb9 	bl	20002814 <load_sprite>
	castleBlack = pointer5;
200000a2:	4b3d      	ldr	r3, [pc, #244]	; (20000198 <initSprites+0x164>)
200000a4:	697a      	ldr	r2, [r7, #20]
200000a6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer6 = &tempCastleGray;
200000a8:	4b3c      	ldr	r3, [pc, #240]	; (2000019c <initSprites+0x168>)
200000aa:	613b      	str	r3, [r7, #16]
	load_sprite(pointer6, castle_gray_bits, castle_black_width, castle_black_height);
200000ac:	493c      	ldr	r1, [pc, #240]	; (200001a0 <initSprites+0x16c>)
200000ae:	6938      	ldr	r0, [r7, #16]
200000b0:	2340      	movs	r3, #64	; 0x40
200000b2:	2280      	movs	r2, #128	; 0x80
200000b4:	f002 fbae 	bl	20002814 <load_sprite>
	castleGray = pointer6;
200000b8:	4b3a      	ldr	r3, [pc, #232]	; (200001a4 <initSprites+0x170>)
200000ba:	693a      	ldr	r2, [r7, #16]
200000bc:	601a      	str	r2, [r3, #0]
	
	sprite *pointer7 = &tempCastleLight;
200000be:	4b3a      	ldr	r3, [pc, #232]	; (200001a8 <initSprites+0x174>)
200000c0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer7, castle_light_bits, castle_black_width, castle_black_height);
200000c2:	493a      	ldr	r1, [pc, #232]	; (200001ac <initSprites+0x178>)
200000c4:	68f8      	ldr	r0, [r7, #12]
200000c6:	2340      	movs	r3, #64	; 0x40
200000c8:	2280      	movs	r2, #128	; 0x80
200000ca:	f002 fba3 	bl	20002814 <load_sprite>
	castleLight = pointer7;
200000ce:	4b38      	ldr	r3, [pc, #224]	; (200001b0 <initSprites+0x17c>)
200000d0:	68fa      	ldr	r2, [r7, #12]
200000d2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer8 = &tempTitleLight;
200000d4:	4b37      	ldr	r3, [pc, #220]	; (200001b4 <initSprites+0x180>)
200000d6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, title_light_bits, title_black_width, title_black_height);
200000d8:	4937      	ldr	r1, [pc, #220]	; (200001b8 <initSprites+0x184>)
200000da:	68b8      	ldr	r0, [r7, #8]
200000dc:	231e      	movs	r3, #30
200000de:	2232      	movs	r2, #50	; 0x32
200000e0:	f002 fb98 	bl	20002814 <load_sprite>
	titleLight = pointer8;
200000e4:	4b35      	ldr	r3, [pc, #212]	; (200001bc <initSprites+0x188>)
200000e6:	68ba      	ldr	r2, [r7, #8]
200000e8:	601a      	str	r2, [r3, #0]
	sprite *pointer9 = &tempTitleGray;
200000ea:	4b35      	ldr	r3, [pc, #212]	; (200001c0 <initSprites+0x18c>)
200000ec:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, title_gray_bits, title_black_width, title_black_height);
200000ee:	4935      	ldr	r1, [pc, #212]	; (200001c4 <initSprites+0x190>)
200000f0:	6878      	ldr	r0, [r7, #4]
200000f2:	231e      	movs	r3, #30
200000f4:	2232      	movs	r2, #50	; 0x32
200000f6:	f002 fb8d 	bl	20002814 <load_sprite>
	titleGray = pointer9;
200000fa:	4b33      	ldr	r3, [pc, #204]	; (200001c8 <initSprites+0x194>)
200000fc:	687a      	ldr	r2, [r7, #4]
200000fe:	601a      	str	r2, [r3, #0]
	sprite *pointer10 = &tempTitleBlack;
20000100:	4b32      	ldr	r3, [pc, #200]	; (200001cc <initSprites+0x198>)
20000102:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, title_black_bits, title_black_width, title_black_height);
20000104:	4932      	ldr	r1, [pc, #200]	; (200001d0 <initSprites+0x19c>)
20000106:	6838      	ldr	r0, [r7, #0]
20000108:	231e      	movs	r3, #30
2000010a:	2232      	movs	r2, #50	; 0x32
2000010c:	f002 fb82 	bl	20002814 <load_sprite>
	titleBlack = pointer10;	
20000110:	4b30      	ldr	r3, [pc, #192]	; (200001d4 <initSprites+0x1a0>)
20000112:	683a      	ldr	r2, [r7, #0]
20000114:	601a      	str	r2, [r3, #0]
	
	pointer8 = &tempPressLight;
20000116:	4b30      	ldr	r3, [pc, #192]	; (200001d8 <initSprites+0x1a4>)
20000118:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, press_light_bits, press_black_width, press_black_height);
2000011a:	4930      	ldr	r1, [pc, #192]	; (200001dc <initSprites+0x1a8>)
2000011c:	68b8      	ldr	r0, [r7, #8]
2000011e:	2323      	movs	r3, #35	; 0x23
20000120:	223c      	movs	r2, #60	; 0x3c
20000122:	f002 fb77 	bl	20002814 <load_sprite>
	pressLight = pointer8;
20000126:	4b2e      	ldr	r3, [pc, #184]	; (200001e0 <initSprites+0x1ac>)
20000128:	68ba      	ldr	r2, [r7, #8]
2000012a:	601a      	str	r2, [r3, #0]
	pointer9 = &tempPressGray;
2000012c:	4b2d      	ldr	r3, [pc, #180]	; (200001e4 <initSprites+0x1b0>)
2000012e:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, press_gray_bits, press_black_width, press_black_height);
20000130:	492d      	ldr	r1, [pc, #180]	; (200001e8 <initSprites+0x1b4>)
20000132:	6878      	ldr	r0, [r7, #4]
20000134:	2323      	movs	r3, #35	; 0x23
20000136:	223c      	movs	r2, #60	; 0x3c
20000138:	f002 fb6c 	bl	20002814 <load_sprite>
	pressGray = pointer9;
2000013c:	4b2b      	ldr	r3, [pc, #172]	; (200001ec <initSprites+0x1b8>)
2000013e:	687a      	ldr	r2, [r7, #4]
20000140:	601a      	str	r2, [r3, #0]
	pointer10 = &tempPressBlack;
20000142:	4b2b      	ldr	r3, [pc, #172]	; (200001f0 <initSprites+0x1bc>)
20000144:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, press_black_bits, press_black_width, press_black_height);
20000146:	492b      	ldr	r1, [pc, #172]	; (200001f4 <initSprites+0x1c0>)
20000148:	6838      	ldr	r0, [r7, #0]
2000014a:	2323      	movs	r3, #35	; 0x23
2000014c:	223c      	movs	r2, #60	; 0x3c
2000014e:	f002 fb61 	bl	20002814 <load_sprite>
	pressBlack = pointer10;	
20000152:	4b29      	ldr	r3, [pc, #164]	; (200001f8 <initSprites+0x1c4>)
20000154:	683a      	ldr	r2, [r7, #0]
20000156:	601a      	str	r2, [r3, #0]
	
	
}
20000158:	46c0      	nop			; (mov r8, r8)
2000015a:	46bd      	mov	sp, r7
2000015c:	b00a      	add	sp, #40	; 0x28
2000015e:	bd80      	pop	{r7, pc}
20000160:	20003250 	andcs	r3, r0, r0, asr r2
20000164:	20005564 	andcs	r5, r0, r4, ror #10
20000168:	20003224 	andcs	r3, r0, r4, lsr #4
2000016c:	200032a8 	andcs	r3, r0, r8, lsr #5
20000170:	200055dc 	ldrdcs	r5, [r0], -ip
20000174:	200032d0 	ldrdcs	r3, [r0], -r0
20000178:	20003270 	andcs	r3, r0, r0, ror r2
2000017c:	20005654 	andcs	r5, r0, r4, asr r6
20000180:	200032e4 	andcs	r3, r0, r4, ror #5
20000184:	200032e8 	andcs	r3, r0, r8, ror #5
20000188:	20006890 	mulcs	r0, r0, r8
2000018c:	2000326c 	andcs	r3, r0, ip, ror #4
20000190:	20003228 	andcs	r3, r0, r8, lsr #4
20000194:	20005a14 	andcs	r5, r0, r4, lsl sl
20000198:	2000324c 	andcs	r3, r0, ip, asr #4
2000019c:	200032c4 	andcs	r3, r0, r4, asr #5
200001a0:	20005e14 	andcs	r5, r0, r4, lsl lr
200001a4:	200032d8 	ldrdcs	r3, [r0], -r8
200001a8:	20003298 	mulcs	r0, r8, r2
200001ac:	20006214 	andcs	r6, r0, r4, lsl r2
200001b0:	20003288 	andcs	r3, r0, r8, lsl #5
200001b4:	2000327c 	andcs	r3, r0, ip, ror r2
200001b8:	20006614 	andcs	r6, r0, r4, lsl r6
200001bc:	200032d4 	ldrdcs	r3, [r0], -r4
200001c0:	20003240 	andcs	r3, r0, r0, asr #4
200001c4:	200066e8 	andcs	r6, r0, r8, ror #13
200001c8:	200032c0 	andcs	r3, r0, r0, asr #5
200001cc:	20003260 	andcs	r3, r0, r0, ror #4
200001d0:	200067bc 			; <UNDEFINED> instruction: 0x200067bc
200001d4:	200032f4 	strdcs	r3, [r0], -r4
200001d8:	2000328c 	andcs	r3, r0, ip, lsl #5
200001dc:	200057e4 	andcs	r5, r0, r4, ror #15
200001e0:	2000325c 	andcs	r3, r0, ip, asr r2
200001e4:	20003234 	andcs	r3, r0, r4, lsr r2
200001e8:	200058fc 	strdcs	r5, [r0], -ip
200001ec:	200032a4 	andcs	r3, r0, r4, lsr #5
200001f0:	200032b4 			; <UNDEFINED> instruction: 0x200032b4
200001f4:	200056cc 	andcs	r5, r0, ip, asr #13
200001f8:	200032e0 	andcs	r3, r0, r0, ror #5

200001fc <main>:
	
int counter = 0;
int current_screen = START_SCREEN;
void main(void)
{
200001fc:	b590      	push	{r4, r7, lr}
200001fe:	4cfe      	ldr	r4, [pc, #1016]	; (200005f8 <main+0x3fc>)
20000200:	44a5      	add	sp, r4
20000202:	af00      	add	r7, sp, #0
 * 2. Draw it with method above.
 * 3. Show frame with some long fram_length for testing.
 * 
 * */
	
	init_app();	
20000204:	f7ff ff04 	bl	20000010 <init_app>
	initSprites();
20000208:	f7ff ff14 	bl	20000034 <initSprites>
	
	GameObject monsterObj;
	Image monsterImage;
	Image monsterImages[] = {monsterImage};
2000020c:	23bf      	movs	r3, #191	; 0xbf
2000020e:	009b      	lsls	r3, r3, #2
20000210:	18fb      	adds	r3, r7, r3
20000212:	22c2      	movs	r2, #194	; 0xc2
20000214:	0092      	lsls	r2, r2, #2
20000216:	18ba      	adds	r2, r7, r2
20000218:	ca13      	ldmia	r2!, {r0, r1, r4}
2000021a:	c313      	stmia	r3!, {r0, r1, r4}
	monsterObj.images = monsterImages;
2000021c:	23c5      	movs	r3, #197	; 0xc5
2000021e:	009b      	lsls	r3, r3, #2
20000220:	18fb      	adds	r3, r7, r3
20000222:	22bf      	movs	r2, #191	; 0xbf
20000224:	0092      	lsls	r2, r2, #2
20000226:	18ba      	adds	r2, r7, r2
20000228:	601a      	str	r2, [r3, #0]
	load_image(&monsterObj.images[0], monster, monsterGray, monsterLight);
2000022a:	23c5      	movs	r3, #197	; 0xc5
2000022c:	009b      	lsls	r3, r3, #2
2000022e:	18fb      	adds	r3, r7, r3
20000230:	6818      	ldr	r0, [r3, #0]
20000232:	4bf2      	ldr	r3, [pc, #968]	; (200005fc <main+0x400>)
20000234:	6819      	ldr	r1, [r3, #0]
20000236:	4bf2      	ldr	r3, [pc, #968]	; (20000600 <main+0x404>)
20000238:	681a      	ldr	r2, [r3, #0]
2000023a:	4bf2      	ldr	r3, [pc, #968]	; (20000604 <main+0x408>)
2000023c:	681b      	ldr	r3, [r3, #0]
2000023e:	f002 fad5 	bl	200027ec <load_image>
	monsterObj.xPos = 30;
20000242:	23c5      	movs	r3, #197	; 0xc5
20000244:	009b      	lsls	r3, r3, #2
20000246:	18fb      	adds	r3, r7, r3
20000248:	221e      	movs	r2, #30
2000024a:	605a      	str	r2, [r3, #4]
	monsterObj.yPos = 4;
2000024c:	23c5      	movs	r3, #197	; 0xc5
2000024e:	009b      	lsls	r3, r3, #2
20000250:	18fb      	adds	r3, r7, r3
20000252:	2204      	movs	r2, #4
20000254:	609a      	str	r2, [r3, #8]
	monsterObj.current_frame = 0;
20000256:	23c5      	movs	r3, #197	; 0xc5
20000258:	009b      	lsls	r3, r3, #2
2000025a:	18fb      	adds	r3, r7, r3
2000025c:	2200      	movs	r2, #0
2000025e:	615a      	str	r2, [r3, #20]
	monsterObj.update = playerUpdate;
20000260:	23c5      	movs	r3, #197	; 0xc5
20000262:	009b      	lsls	r3, r3, #2
20000264:	18fb      	adds	r3, r7, r3
20000266:	4ae8      	ldr	r2, [pc, #928]	; (20000608 <main+0x40c>)
20000268:	60da      	str	r2, [r3, #12]
	
	GameObject titleObj;
	Image titleImage;
	Image titleImages[] = {titleImage};
2000026a:	23b0      	movs	r3, #176	; 0xb0
2000026c:	009b      	lsls	r3, r3, #2
2000026e:	18fb      	adds	r3, r7, r3
20000270:	22b3      	movs	r2, #179	; 0xb3
20000272:	0092      	lsls	r2, r2, #2
20000274:	18ba      	adds	r2, r7, r2
20000276:	ca13      	ldmia	r2!, {r0, r1, r4}
20000278:	c313      	stmia	r3!, {r0, r1, r4}
	titleObj.images = titleImages;
2000027a:	23b6      	movs	r3, #182	; 0xb6
2000027c:	009b      	lsls	r3, r3, #2
2000027e:	18fb      	adds	r3, r7, r3
20000280:	22b0      	movs	r2, #176	; 0xb0
20000282:	0092      	lsls	r2, r2, #2
20000284:	18ba      	adds	r2, r7, r2
20000286:	601a      	str	r2, [r3, #0]
	load_image(&titleObj.images[0], titleBlack, titleGray, titleLight);
20000288:	23b6      	movs	r3, #182	; 0xb6
2000028a:	009b      	lsls	r3, r3, #2
2000028c:	18fb      	adds	r3, r7, r3
2000028e:	6818      	ldr	r0, [r3, #0]
20000290:	4bde      	ldr	r3, [pc, #888]	; (2000060c <main+0x410>)
20000292:	6819      	ldr	r1, [r3, #0]
20000294:	4bde      	ldr	r3, [pc, #888]	; (20000610 <main+0x414>)
20000296:	681a      	ldr	r2, [r3, #0]
20000298:	4bde      	ldr	r3, [pc, #888]	; (20000614 <main+0x418>)
2000029a:	681b      	ldr	r3, [r3, #0]
2000029c:	f002 faa6 	bl	200027ec <load_image>
	titleObj.xPos = 1;
200002a0:	23b6      	movs	r3, #182	; 0xb6
200002a2:	009b      	lsls	r3, r3, #2
200002a4:	18fb      	adds	r3, r7, r3
200002a6:	2201      	movs	r2, #1
200002a8:	605a      	str	r2, [r3, #4]
	titleObj.yPos = -40;
200002aa:	23b6      	movs	r3, #182	; 0xb6
200002ac:	009b      	lsls	r3, r3, #2
200002ae:	18fb      	adds	r3, r7, r3
200002b0:	2228      	movs	r2, #40	; 0x28
200002b2:	4252      	negs	r2, r2
200002b4:	609a      	str	r2, [r3, #8]
	titleObj.current_frame = 0;
200002b6:	23b6      	movs	r3, #182	; 0xb6
200002b8:	009b      	lsls	r3, r3, #2
200002ba:	18fb      	adds	r3, r7, r3
200002bc:	2200      	movs	r2, #0
200002be:	615a      	str	r2, [r3, #20]
	
	GameObject pressObj;
	Image pressImage;
	Image pressImages[] = {pressImage};
200002c0:	23a1      	movs	r3, #161	; 0xa1
200002c2:	009b      	lsls	r3, r3, #2
200002c4:	18fb      	adds	r3, r7, r3
200002c6:	22a4      	movs	r2, #164	; 0xa4
200002c8:	0092      	lsls	r2, r2, #2
200002ca:	18ba      	adds	r2, r7, r2
200002cc:	ca13      	ldmia	r2!, {r0, r1, r4}
200002ce:	c313      	stmia	r3!, {r0, r1, r4}
	pressObj.images = pressImages;
200002d0:	23a7      	movs	r3, #167	; 0xa7
200002d2:	009b      	lsls	r3, r3, #2
200002d4:	18fb      	adds	r3, r7, r3
200002d6:	22a1      	movs	r2, #161	; 0xa1
200002d8:	0092      	lsls	r2, r2, #2
200002da:	18ba      	adds	r2, r7, r2
200002dc:	601a      	str	r2, [r3, #0]
	load_image(&pressObj.images[0], pressBlack, pressLight, pressGray);
200002de:	23a7      	movs	r3, #167	; 0xa7
200002e0:	009b      	lsls	r3, r3, #2
200002e2:	18fb      	adds	r3, r7, r3
200002e4:	6818      	ldr	r0, [r3, #0]
200002e6:	4bcc      	ldr	r3, [pc, #816]	; (20000618 <main+0x41c>)
200002e8:	6819      	ldr	r1, [r3, #0]
200002ea:	4bcc      	ldr	r3, [pc, #816]	; (2000061c <main+0x420>)
200002ec:	681a      	ldr	r2, [r3, #0]
200002ee:	4bcc      	ldr	r3, [pc, #816]	; (20000620 <main+0x424>)
200002f0:	681b      	ldr	r3, [r3, #0]
200002f2:	f002 fa7b 	bl	200027ec <load_image>
	pressObj.xPos = 65-30;
200002f6:	23a7      	movs	r3, #167	; 0xa7
200002f8:	009b      	lsls	r3, r3, #2
200002fa:	18fb      	adds	r3, r7, r3
200002fc:	2223      	movs	r2, #35	; 0x23
200002fe:	605a      	str	r2, [r3, #4]
	pressObj.yPos = 29-15;
20000300:	23a7      	movs	r3, #167	; 0xa7
20000302:	009b      	lsls	r3, r3, #2
20000304:	18fb      	adds	r3, r7, r3
20000306:	220e      	movs	r2, #14
20000308:	609a      	str	r2, [r3, #8]
	pressObj.current_frame = 0;
2000030a:	23a7      	movs	r3, #167	; 0xa7
2000030c:	009b      	lsls	r3, r3, #2
2000030e:	18fb      	adds	r3, r7, r3
20000310:	2200      	movs	r2, #0
20000312:	615a      	str	r2, [r3, #20]
	
	GameObject castleObj;
	Image castleImage;
	Image castleImages[] = {castleImage};
20000314:	4bc3      	ldr	r3, [pc, #780]	; (20000624 <main+0x428>)
20000316:	22d2      	movs	r2, #210	; 0xd2
20000318:	0092      	lsls	r2, r2, #2
2000031a:	4694      	mov	ip, r2
2000031c:	44bc      	add	ip, r7
2000031e:	4463      	add	r3, ip
20000320:	2295      	movs	r2, #149	; 0x95
20000322:	0092      	lsls	r2, r2, #2
20000324:	18ba      	adds	r2, r7, r2
20000326:	ca13      	ldmia	r2!, {r0, r1, r4}
20000328:	c313      	stmia	r3!, {r0, r1, r4}
	castleObj.images = castleImages;
2000032a:	2398      	movs	r3, #152	; 0x98
2000032c:	009b      	lsls	r3, r3, #2
2000032e:	18fb      	adds	r3, r7, r3
20000330:	2292      	movs	r2, #146	; 0x92
20000332:	0092      	lsls	r2, r2, #2
20000334:	18ba      	adds	r2, r7, r2
20000336:	601a      	str	r2, [r3, #0]
	load_image(&castleObj.images[0], castleBlack, castleGray, castleLight);
20000338:	2398      	movs	r3, #152	; 0x98
2000033a:	009b      	lsls	r3, r3, #2
2000033c:	18fb      	adds	r3, r7, r3
2000033e:	6818      	ldr	r0, [r3, #0]
20000340:	4bb9      	ldr	r3, [pc, #740]	; (20000628 <main+0x42c>)
20000342:	6819      	ldr	r1, [r3, #0]
20000344:	4bb9      	ldr	r3, [pc, #740]	; (2000062c <main+0x430>)
20000346:	681a      	ldr	r2, [r3, #0]
20000348:	4bb9      	ldr	r3, [pc, #740]	; (20000630 <main+0x434>)
2000034a:	681b      	ldr	r3, [r3, #0]
2000034c:	f002 fa4e 	bl	200027ec <load_image>
	castleObj.xPos = 1;
20000350:	2398      	movs	r3, #152	; 0x98
20000352:	009b      	lsls	r3, r3, #2
20000354:	18fb      	adds	r3, r7, r3
20000356:	2201      	movs	r2, #1
20000358:	605a      	str	r2, [r3, #4]
	castleObj.yPos = 1;
2000035a:	2398      	movs	r3, #152	; 0x98
2000035c:	009b      	lsls	r3, r3, #2
2000035e:	18fb      	adds	r3, r7, r3
20000360:	2201      	movs	r2, #1
20000362:	609a      	str	r2, [r3, #8]
	castleObj.current_frame = 0;
20000364:	2398      	movs	r3, #152	; 0x98
20000366:	009b      	lsls	r3, r3, #2
20000368:	18fb      	adds	r3, r7, r3
2000036a:	2200      	movs	r2, #0
2000036c:	615a      	str	r2, [r3, #20]
	
	GameObject indoors;
	init_indoors( &indoors );
2000036e:	2389      	movs	r3, #137	; 0x89
20000370:	009b      	lsls	r3, r3, #2
20000372:	18fb      	adds	r3, r7, r3
20000374:	0018      	movs	r0, r3
20000376:	f002 fdab 	bl	20002ed0 <init_indoors>
	indoors.xPos = 1;
2000037a:	4bae      	ldr	r3, [pc, #696]	; (20000634 <main+0x438>)
2000037c:	22d2      	movs	r2, #210	; 0xd2
2000037e:	0092      	lsls	r2, r2, #2
20000380:	4694      	mov	ip, r2
20000382:	44bc      	add	ip, r7
20000384:	4463      	add	r3, ip
20000386:	2201      	movs	r2, #1
20000388:	605a      	str	r2, [r3, #4]
	indoors.yPos = 1;
2000038a:	4baa      	ldr	r3, [pc, #680]	; (20000634 <main+0x438>)
2000038c:	22d2      	movs	r2, #210	; 0xd2
2000038e:	0092      	lsls	r2, r2, #2
20000390:	4694      	mov	ip, r2
20000392:	44bc      	add	ip, r7
20000394:	4463      	add	r3, ip
20000396:	2201      	movs	r2, #1
20000398:	609a      	str	r2, [r3, #8]
	
	GameObject indoors2;
	init_indoors2( &indoors2 );
2000039a:	2380      	movs	r3, #128	; 0x80
2000039c:	009b      	lsls	r3, r3, #2
2000039e:	18fb      	adds	r3, r7, r3
200003a0:	0018      	movs	r0, r3
200003a2:	f002 fe09 	bl	20002fb8 <init_indoors2>
	indoors2.xPos = 1;
200003a6:	4ba4      	ldr	r3, [pc, #656]	; (20000638 <main+0x43c>)
200003a8:	22d2      	movs	r2, #210	; 0xd2
200003aa:	0092      	lsls	r2, r2, #2
200003ac:	4694      	mov	ip, r2
200003ae:	44bc      	add	ip, r7
200003b0:	4463      	add	r3, ip
200003b2:	2201      	movs	r2, #1
200003b4:	605a      	str	r2, [r3, #4]
	indoors2.yPos = 1;
200003b6:	4ba0      	ldr	r3, [pc, #640]	; (20000638 <main+0x43c>)
200003b8:	22d2      	movs	r2, #210	; 0xd2
200003ba:	0092      	lsls	r2, r2, #2
200003bc:	4694      	mov	ip, r2
200003be:	44bc      	add	ip, r7
200003c0:	4463      	add	r3, ip
200003c2:	2201      	movs	r2, #1
200003c4:	609a      	str	r2, [r3, #8]
	
	GameObject bird;
	init_bird( &bird );
200003c6:	23ee      	movs	r3, #238	; 0xee
200003c8:	005b      	lsls	r3, r3, #1
200003ca:	18fb      	adds	r3, r7, r3
200003cc:	0018      	movs	r0, r3
200003ce:	f001 f923 	bl	20001618 <init_bird>
	bird.xPos = 180;
200003d2:	4b9a      	ldr	r3, [pc, #616]	; (2000063c <main+0x440>)
200003d4:	22d2      	movs	r2, #210	; 0xd2
200003d6:	0092      	lsls	r2, r2, #2
200003d8:	4694      	mov	ip, r2
200003da:	44bc      	add	ip, r7
200003dc:	4463      	add	r3, ip
200003de:	22b4      	movs	r2, #180	; 0xb4
200003e0:	605a      	str	r2, [r3, #4]
	bird.yPos = 40;
200003e2:	4b96      	ldr	r3, [pc, #600]	; (2000063c <main+0x440>)
200003e4:	22d2      	movs	r2, #210	; 0xd2
200003e6:	0092      	lsls	r2, r2, #2
200003e8:	4694      	mov	ip, r2
200003ea:	44bc      	add	ip, r7
200003ec:	4463      	add	r3, ip
200003ee:	2228      	movs	r2, #40	; 0x28
200003f0:	609a      	str	r2, [r3, #8]
	bird.update = gameObjectUpdate;
200003f2:	4b92      	ldr	r3, [pc, #584]	; (2000063c <main+0x440>)
200003f4:	22d2      	movs	r2, #210	; 0xd2
200003f6:	0092      	lsls	r2, r2, #2
200003f8:	4694      	mov	ip, r2
200003fa:	44bc      	add	ip, r7
200003fc:	4463      	add	r3, ip
200003fe:	4a90      	ldr	r2, [pc, #576]	; (20000640 <main+0x444>)
20000400:	60da      	str	r2, [r3, #12]
	
	GameObject player;
	init_witch( &player );
20000402:	23dc      	movs	r3, #220	; 0xdc
20000404:	005b      	lsls	r3, r3, #1
20000406:	18fb      	adds	r3, r7, r3
20000408:	0018      	movs	r0, r3
2000040a:	f001 fa51 	bl	200018b0 <init_witch>
	player.xPos = 3;
2000040e:	4b8d      	ldr	r3, [pc, #564]	; (20000644 <main+0x448>)
20000410:	22d2      	movs	r2, #210	; 0xd2
20000412:	0092      	lsls	r2, r2, #2
20000414:	4694      	mov	ip, r2
20000416:	44bc      	add	ip, r7
20000418:	4463      	add	r3, ip
2000041a:	2203      	movs	r2, #3
2000041c:	605a      	str	r2, [r3, #4]
	player.yPos = LIMIT_DOWN - 1; //player position
2000041e:	4b89      	ldr	r3, [pc, #548]	; (20000644 <main+0x448>)
20000420:	22d2      	movs	r2, #210	; 0xd2
20000422:	0092      	lsls	r2, r2, #2
20000424:	4694      	mov	ip, r2
20000426:	44bc      	add	ip, r7
20000428:	4463      	add	r3, ip
2000042a:	2226      	movs	r2, #38	; 0x26
2000042c:	609a      	str	r2, [r3, #8]
	player.update = playerUpdate;
2000042e:	4b85      	ldr	r3, [pc, #532]	; (20000644 <main+0x448>)
20000430:	22d2      	movs	r2, #210	; 0xd2
20000432:	0092      	lsls	r2, r2, #2
20000434:	4694      	mov	ip, r2
20000436:	44bc      	add	ip, r7
20000438:	4463      	add	r3, ip
2000043a:	4a73      	ldr	r2, [pc, #460]	; (20000608 <main+0x40c>)
2000043c:	60da      	str	r2, [r3, #12]
	
	GameObject fire2;
	init_fire( &fire2 );
2000043e:	23ca      	movs	r3, #202	; 0xca
20000440:	005b      	lsls	r3, r3, #1
20000442:	18fb      	adds	r3, r7, r3
20000444:	0018      	movs	r0, r3
20000446:	f000 fe83 	bl	20001150 <init_fire>
	GameObject fire3;
	init_fire( &fire3 );
2000044a:	23b8      	movs	r3, #184	; 0xb8
2000044c:	005b      	lsls	r3, r3, #1
2000044e:	18fb      	adds	r3, r7, r3
20000450:	0018      	movs	r0, r3
20000452:	f000 fe7d 	bl	20001150 <init_fire>
	GameObject fire4;
	init_fire( &fire4 );
20000456:	23a6      	movs	r3, #166	; 0xa6
20000458:	005b      	lsls	r3, r3, #1
2000045a:	18fb      	adds	r3, r7, r3
2000045c:	0018      	movs	r0, r3
2000045e:	f000 fe77 	bl	20001150 <init_fire>
	GameObject fire1;
	init_fire( &fire1 );
20000462:	2394      	movs	r3, #148	; 0x94
20000464:	005b      	lsls	r3, r3, #1
20000466:	18fb      	adds	r3, r7, r3
20000468:	0018      	movs	r0, r3
2000046a:	f000 fe71 	bl	20001150 <init_fire>
	GameObject fire1_indoors;
	init_fire( &fire1_indoors );
2000046e:	1d7b      	adds	r3, r7, #5
20000470:	33ff      	adds	r3, #255	; 0xff
20000472:	0018      	movs	r0, r3
20000474:	f000 fe6c 	bl	20001150 <init_fire>
	fire1_indoors.xPos = 50;		//FIRE1_INDO
20000478:	4b73      	ldr	r3, [pc, #460]	; (20000648 <main+0x44c>)
2000047a:	22d2      	movs	r2, #210	; 0xd2
2000047c:	0092      	lsls	r2, r2, #2
2000047e:	4694      	mov	ip, r2
20000480:	44bc      	add	ip, r7
20000482:	4463      	add	r3, ip
20000484:	2232      	movs	r2, #50	; 0x32
20000486:	605a      	str	r2, [r3, #4]
	fire1_indoors.yPos = 64-12-7;
20000488:	4b6f      	ldr	r3, [pc, #444]	; (20000648 <main+0x44c>)
2000048a:	22d2      	movs	r2, #210	; 0xd2
2000048c:	0092      	lsls	r2, r2, #2
2000048e:	4694      	mov	ip, r2
20000490:	44bc      	add	ip, r7
20000492:	4463      	add	r3, ip
20000494:	222d      	movs	r2, #45	; 0x2d
20000496:	609a      	str	r2, [r3, #8]
	fire1_indoors.update = gameObjectUpdate;
20000498:	4b6b      	ldr	r3, [pc, #428]	; (20000648 <main+0x44c>)
2000049a:	22d2      	movs	r2, #210	; 0xd2
2000049c:	0092      	lsls	r2, r2, #2
2000049e:	4694      	mov	ip, r2
200004a0:	44bc      	add	ip, r7
200004a2:	4463      	add	r3, ip
200004a4:	4a66      	ldr	r2, [pc, #408]	; (20000640 <main+0x444>)
200004a6:	60da      	str	r2, [r3, #12]
	
	fire2.xPos = 98;
200004a8:	4b68      	ldr	r3, [pc, #416]	; (2000064c <main+0x450>)
200004aa:	22d2      	movs	r2, #210	; 0xd2
200004ac:	0092      	lsls	r2, r2, #2
200004ae:	4694      	mov	ip, r2
200004b0:	44bc      	add	ip, r7
200004b2:	4463      	add	r3, ip
200004b4:	2262      	movs	r2, #98	; 0x62
200004b6:	605a      	str	r2, [r3, #4]
	fire2.yPos = 26-12;
200004b8:	4b64      	ldr	r3, [pc, #400]	; (2000064c <main+0x450>)
200004ba:	22d2      	movs	r2, #210	; 0xd2
200004bc:	0092      	lsls	r2, r2, #2
200004be:	4694      	mov	ip, r2
200004c0:	44bc      	add	ip, r7
200004c2:	4463      	add	r3, ip
200004c4:	220e      	movs	r2, #14
200004c6:	609a      	str	r2, [r3, #8]
	fire3.xPos = 115;
200004c8:	4b61      	ldr	r3, [pc, #388]	; (20000650 <main+0x454>)
200004ca:	22d2      	movs	r2, #210	; 0xd2
200004cc:	0092      	lsls	r2, r2, #2
200004ce:	4694      	mov	ip, r2
200004d0:	44bc      	add	ip, r7
200004d2:	4463      	add	r3, ip
200004d4:	2273      	movs	r2, #115	; 0x73
200004d6:	605a      	str	r2, [r3, #4]
	fire3.yPos = 34-12;
200004d8:	4b5d      	ldr	r3, [pc, #372]	; (20000650 <main+0x454>)
200004da:	22d2      	movs	r2, #210	; 0xd2
200004dc:	0092      	lsls	r2, r2, #2
200004de:	4694      	mov	ip, r2
200004e0:	44bc      	add	ip, r7
200004e2:	4463      	add	r3, ip
200004e4:	2216      	movs	r2, #22
200004e6:	609a      	str	r2, [r3, #8]
	
	fire1.xPos = 85;
200004e8:	4b5a      	ldr	r3, [pc, #360]	; (20000654 <main+0x458>)
200004ea:	22d2      	movs	r2, #210	; 0xd2
200004ec:	0092      	lsls	r2, r2, #2
200004ee:	4694      	mov	ip, r2
200004f0:	44bc      	add	ip, r7
200004f2:	4463      	add	r3, ip
200004f4:	2255      	movs	r2, #85	; 0x55
200004f6:	605a      	str	r2, [r3, #4]
	fire1.yPos = 23-12;
200004f8:	4b56      	ldr	r3, [pc, #344]	; (20000654 <main+0x458>)
200004fa:	22d2      	movs	r2, #210	; 0xd2
200004fc:	0092      	lsls	r2, r2, #2
200004fe:	4694      	mov	ip, r2
20000500:	44bc      	add	ip, r7
20000502:	4463      	add	r3, ip
20000504:	220b      	movs	r2, #11
20000506:	609a      	str	r2, [r3, #8]
	fire4.xPos = 71;
20000508:	4b53      	ldr	r3, [pc, #332]	; (20000658 <main+0x45c>)
2000050a:	22d2      	movs	r2, #210	; 0xd2
2000050c:	0092      	lsls	r2, r2, #2
2000050e:	4694      	mov	ip, r2
20000510:	44bc      	add	ip, r7
20000512:	4463      	add	r3, ip
20000514:	2247      	movs	r2, #71	; 0x47
20000516:	605a      	str	r2, [r3, #4]
	fire4.yPos = 27-11;
20000518:	4b4f      	ldr	r3, [pc, #316]	; (20000658 <main+0x45c>)
2000051a:	22d2      	movs	r2, #210	; 0xd2
2000051c:	0092      	lsls	r2, r2, #2
2000051e:	4694      	mov	ip, r2
20000520:	44bc      	add	ip, r7
20000522:	4463      	add	r3, ip
20000524:	2210      	movs	r2, #16
20000526:	609a      	str	r2, [r3, #8]
	//draw_game_object(&castleObj);
	
	fire2.animation_speed = 2;
20000528:	4b48      	ldr	r3, [pc, #288]	; (2000064c <main+0x450>)
2000052a:	22d2      	movs	r2, #210	; 0xd2
2000052c:	0092      	lsls	r2, r2, #2
2000052e:	4694      	mov	ip, r2
20000530:	44bc      	add	ip, r7
20000532:	4463      	add	r3, ip
20000534:	2202      	movs	r2, #2
20000536:	61da      	str	r2, [r3, #28]
	fire3.animation_speed = 2;
20000538:	4b45      	ldr	r3, [pc, #276]	; (20000650 <main+0x454>)
2000053a:	22d2      	movs	r2, #210	; 0xd2
2000053c:	0092      	lsls	r2, r2, #2
2000053e:	4694      	mov	ip, r2
20000540:	44bc      	add	ip, r7
20000542:	4463      	add	r3, ip
20000544:	2202      	movs	r2, #2
20000546:	61da      	str	r2, [r3, #28]
	fire1.animation_speed = 2;
20000548:	4b42      	ldr	r3, [pc, #264]	; (20000654 <main+0x458>)
2000054a:	22d2      	movs	r2, #210	; 0xd2
2000054c:	0092      	lsls	r2, r2, #2
2000054e:	4694      	mov	ip, r2
20000550:	44bc      	add	ip, r7
20000552:	4463      	add	r3, ip
20000554:	2202      	movs	r2, #2
20000556:	61da      	str	r2, [r3, #28]
	fire4.animation_speed = 2;
20000558:	4b3f      	ldr	r3, [pc, #252]	; (20000658 <main+0x45c>)
2000055a:	22d2      	movs	r2, #210	; 0xd2
2000055c:	0092      	lsls	r2, r2, #2
2000055e:	4694      	mov	ip, r2
20000560:	44bc      	add	ip, r7
20000562:	4463      	add	r3, ip
20000564:	2202      	movs	r2, #2
20000566:	61da      	str	r2, [r3, #28]
	
	fire2.update = gameObjectUpdate;
20000568:	4b38      	ldr	r3, [pc, #224]	; (2000064c <main+0x450>)
2000056a:	22d2      	movs	r2, #210	; 0xd2
2000056c:	0092      	lsls	r2, r2, #2
2000056e:	4694      	mov	ip, r2
20000570:	44bc      	add	ip, r7
20000572:	4463      	add	r3, ip
20000574:	4a32      	ldr	r2, [pc, #200]	; (20000640 <main+0x444>)
20000576:	60da      	str	r2, [r3, #12]
	fire3.update = gameObjectUpdate;
20000578:	4b35      	ldr	r3, [pc, #212]	; (20000650 <main+0x454>)
2000057a:	22d2      	movs	r2, #210	; 0xd2
2000057c:	0092      	lsls	r2, r2, #2
2000057e:	4694      	mov	ip, r2
20000580:	44bc      	add	ip, r7
20000582:	4463      	add	r3, ip
20000584:	4a2e      	ldr	r2, [pc, #184]	; (20000640 <main+0x444>)
20000586:	60da      	str	r2, [r3, #12]
	fire1.update = gameObjectUpdate;
20000588:	4b32      	ldr	r3, [pc, #200]	; (20000654 <main+0x458>)
2000058a:	22d2      	movs	r2, #210	; 0xd2
2000058c:	0092      	lsls	r2, r2, #2
2000058e:	4694      	mov	ip, r2
20000590:	44bc      	add	ip, r7
20000592:	4463      	add	r3, ip
20000594:	4a2a      	ldr	r2, [pc, #168]	; (20000640 <main+0x444>)
20000596:	60da      	str	r2, [r3, #12]
	fire4.update = gameObjectUpdate;
20000598:	4b2f      	ldr	r3, [pc, #188]	; (20000658 <main+0x45c>)
2000059a:	22d2      	movs	r2, #210	; 0xd2
2000059c:	0092      	lsls	r2, r2, #2
2000059e:	4694      	mov	ip, r2
200005a0:	44bc      	add	ip, r7
200005a2:	4463      	add	r3, ip
200005a4:	4a26      	ldr	r2, [pc, #152]	; (20000640 <main+0x444>)
200005a6:	60da      	str	r2, [r3, #12]
	SlowText text8;
	SlowText text9;
	SlowText text10;
	SlowText text11;
	SlowText text12;
	init_slow_text(&text_kra, "*KRA!* *KRA!*", "   ", 1);
200005a8:	4a2c      	ldr	r2, [pc, #176]	; (2000065c <main+0x460>)
200005aa:	492d      	ldr	r1, [pc, #180]	; (20000660 <main+0x464>)
200005ac:	23f0      	movs	r3, #240	; 0xf0
200005ae:	18f8      	adds	r0, r7, r3
200005b0:	2301      	movs	r3, #1
200005b2:	f002 fc36 	bl	20002e22 <init_slow_text>
	init_slow_text(&text1, "For centuries the", "DILs-witches have", 1);
200005b6:	4a2b      	ldr	r2, [pc, #172]	; (20000664 <main+0x468>)
200005b8:	492b      	ldr	r1, [pc, #172]	; (20000668 <main+0x46c>)
200005ba:	23dc      	movs	r3, #220	; 0xdc
200005bc:	18f8      	adds	r0, r7, r3
200005be:	2301      	movs	r3, #1
200005c0:	f002 fc2f 	bl	20002e22 <init_slow_text>
	init_slow_text(&text2, "coiled in fear,", "    ", 1);
200005c4:	4a29      	ldr	r2, [pc, #164]	; (2000066c <main+0x470>)
200005c6:	492a      	ldr	r1, [pc, #168]	; (20000670 <main+0x474>)
200005c8:	23c8      	movs	r3, #200	; 0xc8
200005ca:	18f8      	adds	r0, r7, r3
200005cc:	2301      	movs	r3, #1
200005ce:	f002 fc28 	bl	20002e22 <init_slow_text>
	init_slow_text(&text3, "whenever they hear", "that a DIPs-witch", 1);
200005d2:	4a28      	ldr	r2, [pc, #160]	; (20000674 <main+0x478>)
200005d4:	4928      	ldr	r1, [pc, #160]	; (20000678 <main+0x47c>)
200005d6:	23b4      	movs	r3, #180	; 0xb4
200005d8:	18f8      	adds	r0, r7, r3
200005da:	2301      	movs	r3, #1
200005dc:	f002 fc21 	bl	20002e22 <init_slow_text>
	init_slow_text(&text4, "is near.", "   ", 1);
200005e0:	4a1e      	ldr	r2, [pc, #120]	; (2000065c <main+0x460>)
200005e2:	4926      	ldr	r1, [pc, #152]	; (2000067c <main+0x480>)
200005e4:	23a0      	movs	r3, #160	; 0xa0
200005e6:	18f8      	adds	r0, r7, r3
200005e8:	2301      	movs	r3, #1
200005ea:	f002 fc1a 	bl	20002e22 <init_slow_text>
	init_slow_text(&text5, "So it is quite", "surprising, finding", 1);
200005ee:	4a24      	ldr	r2, [pc, #144]	; (20000680 <main+0x484>)
200005f0:	4924      	ldr	r1, [pc, #144]	; (20000684 <main+0x488>)
200005f2:	238c      	movs	r3, #140	; 0x8c
200005f4:	18f8      	adds	r0, r7, r3
200005f6:	e047      	b.n	20000688 <main+0x48c>
200005f8:	fffffcb4 			; <UNDEFINED> instruction: 0xfffffcb4
200005fc:	20003224 	andcs	r3, r0, r4, lsr #4
20000600:	200032e4 	andcs	r3, r0, r4, ror #5
20000604:	200032d0 	ldrdcs	r3, [r0], -r0
20000608:	20001275 	andcs	r1, r0, r5, ror r2
2000060c:	200032f4 	strdcs	r3, [r0], -r4
20000610:	200032c0 	andcs	r3, r0, r0, asr #5
20000614:	200032d4 	ldrdcs	r3, [r0], -r4
20000618:	200032e0 	andcs	r3, r0, r0, ror #5
2000061c:	2000325c 	andcs	r3, r0, ip, asr r2
20000620:	200032a4 	andcs	r3, r0, r4, lsr #5
20000624:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20000628:	2000324c 	andcs	r3, r0, ip, asr #4
2000062c:	200032d8 	ldrdcs	r3, [r0], -r8
20000630:	20003288 	andcs	r3, r0, r8, lsl #5
20000634:	fffffedc 			; <UNDEFINED> instruction: 0xfffffedc
20000638:	fffffeb8 			; <UNDEFINED> instruction: 0xfffffeb8
2000063c:	fffffe94 			; <UNDEFINED> instruction: 0xfffffe94
20000640:	20000f85 	andcs	r0, r0, r5, lsl #31
20000644:	fffffe70 			; <UNDEFINED> instruction: 0xfffffe70
20000648:	fffffdbc 			; <UNDEFINED> instruction: 0xfffffdbc
2000064c:	fffffe4c 			; <UNDEFINED> instruction: 0xfffffe4c
20000650:	fffffe28 			; <UNDEFINED> instruction: 0xfffffe28
20000654:	fffffde0 			; <UNDEFINED> instruction: 0xfffffde0
20000658:	fffffe04 			; <UNDEFINED> instruction: 0xfffffe04
2000065c:	20008d10 	andcs	r8, r0, r0, lsl sp
20000660:	20008d14 	andcs	r8, r0, r4, lsl sp
20000664:	20008d24 	andcs	r8, r0, r4, lsr #26
20000668:	20008d38 	andcs	r8, r0, r8, lsr sp
2000066c:	20008d4c 	andcs	r8, r0, ip, asr #26
20000670:	20008d54 	andcs	r8, r0, r4, asr sp
20000674:	20008d64 	andcs	r8, r0, r4, ror #26
20000678:	20008d78 	andcs	r8, r0, r8, ror sp
2000067c:	20008d8c 	andcs	r8, r0, ip, lsl #27
20000680:	20008d98 	mulcs	r0, r8, sp
20000684:	20008dac 	andcs	r8, r0, ip, lsr #27
20000688:	2301      	movs	r3, #1
2000068a:	f002 fbca 	bl	20002e22 <init_slow_text>
	init_slow_text(&text6, "you here,", "    ", 1);
2000068e:	4adf      	ldr	r2, [pc, #892]	; (20000a0c <main+0x810>)
20000690:	49df      	ldr	r1, [pc, #892]	; (20000a10 <main+0x814>)
20000692:	2378      	movs	r3, #120	; 0x78
20000694:	18f8      	adds	r0, r7, r3
20000696:	2301      	movs	r3, #1
20000698:	f002 fbc3 	bl	20002e22 <init_slow_text>
	init_slow_text(&text7, "queen Daffo of DILs,", "heir to king Lear.", 1);
2000069c:	4add      	ldr	r2, [pc, #884]	; (20000a14 <main+0x818>)
2000069e:	49de      	ldr	r1, [pc, #888]	; (20000a18 <main+0x81c>)
200006a0:	2364      	movs	r3, #100	; 0x64
200006a2:	18f8      	adds	r0, r7, r3
200006a4:	2301      	movs	r3, #1
200006a6:	f002 fbbc 	bl	20002e22 <init_slow_text>
	init_slow_text(&text8, "But maybe you're", "tempted, to loot", 1);
200006aa:	4adc      	ldr	r2, [pc, #880]	; (20000a1c <main+0x820>)
200006ac:	49dc      	ldr	r1, [pc, #880]	; (20000a20 <main+0x824>)
200006ae:	2350      	movs	r3, #80	; 0x50
200006b0:	18f8      	adds	r0, r7, r3
200006b2:	2301      	movs	r3, #1
200006b4:	f002 fbb5 	bl	20002e22 <init_slow_text>
	init_slow_text(&text9, "from the riches,", "    ", 1);
200006b8:	4ad4      	ldr	r2, [pc, #848]	; (20000a0c <main+0x810>)
200006ba:	49da      	ldr	r1, [pc, #872]	; (20000a24 <main+0x828>)
200006bc:	233c      	movs	r3, #60	; 0x3c
200006be:	18f8      	adds	r0, r7, r3
200006c0:	2301      	movs	r3, #1
200006c2:	f002 fbae 	bl	20002e22 <init_slow_text>
	init_slow_text(&text12, "wicked DIPs-witches.", "    ", 1);
200006c6:	4ad1      	ldr	r2, [pc, #836]	; (20000a0c <main+0x810>)
200006c8:	49d7      	ldr	r1, [pc, #860]	; (20000a28 <main+0x82c>)
200006ca:	0038      	movs	r0, r7
200006cc:	2301      	movs	r3, #1
200006ce:	f002 fba8 	bl	20002e22 <init_slow_text>
	init_slow_text(&text10, "so grippily trea-", "sured by", 1);
200006d2:	4ad6      	ldr	r2, [pc, #856]	; (20000a2c <main+0x830>)
200006d4:	49d6      	ldr	r1, [pc, #856]	; (20000a30 <main+0x834>)
200006d6:	2328      	movs	r3, #40	; 0x28
200006d8:	18f8      	adds	r0, r7, r3
200006da:	2301      	movs	r3, #1
200006dc:	f002 fba1 	bl	20002e22 <init_slow_text>
	init_slow_text(&text11, "Enter, brave witch,", "- reset the switch!", 1);
200006e0:	4ad4      	ldr	r2, [pc, #848]	; (20000a34 <main+0x838>)
200006e2:	49d5      	ldr	r1, [pc, #852]	; (20000a38 <main+0x83c>)
200006e4:	2314      	movs	r3, #20
200006e6:	18f8      	adds	r0, r7, r3
200006e8:	2301      	movs	r3, #1
200006ea:	f002 fb9a 	bl	20002e22 <init_slow_text>
	//ascii_write_part("Yeeaaah!!!", "This is working! :)", 5, 10);
	set_up_ascii();
200006ee:	f002 fa75 	bl	20002bdc <set_up_ascii>
	set_up_DIL();
200006f2:	f002 f8a3 	bl	2000283c <set_up_DIL>
	clear_ascii();
200006f6:	f002 fa7a 	bl	20002bee <clear_ascii>
	
	int is_climbing = 0;
200006fa:	2300      	movs	r3, #0
200006fc:	22d1      	movs	r2, #209	; 0xd1
200006fe:	0092      	lsls	r2, r2, #2
20000700:	18ba      	adds	r2, r7, r2
20000702:	6013      	str	r3, [r2, #0]
	int has_climbed = 0;
20000704:	2300      	movs	r3, #0
20000706:	22d0      	movs	r2, #208	; 0xd0
20000708:	0092      	lsls	r2, r2, #2
2000070a:	18ba      	adds	r2, r7, r2
2000070c:	6013      	str	r3, [r2, #0]
	int game_over = 0;
2000070e:	2300      	movs	r3, #0
20000710:	22cf      	movs	r2, #207	; 0xcf
20000712:	0092      	lsls	r2, r2, #2
20000714:	18ba      	adds	r2, r7, r2
20000716:	6013      	str	r3, [r2, #0]
	int game_over_adder = 0;
20000718:	2300      	movs	r3, #0
2000071a:	22ce      	movs	r2, #206	; 0xce
2000071c:	0092      	lsls	r2, r2, #2
2000071e:	18ba      	adds	r2, r7, r2
20000720:	6013      	str	r3, [r2, #0]
	
	
	current_screen = RESET_GAME;
20000722:	4bc6      	ldr	r3, [pc, #792]	; (20000a3c <main+0x840>)
20000724:	220a      	movs	r2, #10
20000726:	601a      	str	r2, [r3, #0]
	
	//Game loop
	while(1) {
			
		switch(current_screen) {
20000728:	4bc4      	ldr	r3, [pc, #784]	; (20000a3c <main+0x840>)
2000072a:	681b      	ldr	r3, [r3, #0]
2000072c:	2b01      	cmp	r3, #1
2000072e:	d020      	beq.n	20000772 <main+0x576>
20000730:	dc02      	bgt.n	20000738 <main+0x53c>
20000732:	2b00      	cmp	r3, #0
20000734:	d011      	beq.n	2000075a <main+0x55e>
20000736:	e7f7      	b.n	20000728 <main+0x52c>
20000738:	2b02      	cmp	r3, #2
2000073a:	d100      	bne.n	2000073e <main+0x542>
2000073c:	e29c      	b.n	20000c78 <main+0xa7c>
2000073e:	2b0a      	cmp	r3, #10
20000740:	d101      	bne.n	20000746 <main+0x54a>
20000742:	f000 fbb3 	bl	20000eac <main+0xcb0>
20000746:	e7ef      	b.n	20000728 <main+0x52c>
			
			case SWITCH_LOCK: //before

				while(read_DIL() == 0){
					draw_game_object(&pressObj);
20000748:	23a7      	movs	r3, #167	; 0xa7
2000074a:	009b      	lsls	r3, r3, #2
2000074c:	18fb      	adds	r3, r7, r3
2000074e:	0018      	movs	r0, r3
20000750:	f001 ffd6 	bl	20002700 <draw_game_object>
					show_frame(1);
20000754:	2001      	movs	r0, #1
20000756:	f002 f814 	bl	20002782 <show_frame>
				while(read_DIL() == 0){
2000075a:	f002 f87b 	bl	20002854 <read_DIL>
2000075e:	1e03      	subs	r3, r0, #0
20000760:	d0f2      	beq.n	20000748 <main+0x54c>
				}
				
				counter = 0;
20000762:	4bb7      	ldr	r3, [pc, #732]	; (20000a40 <main+0x844>)
20000764:	2200      	movs	r2, #0
20000766:	601a      	str	r2, [r3, #0]
				current_screen = START_SCREEN;
20000768:	4bb4      	ldr	r3, [pc, #720]	; (20000a3c <main+0x840>)
2000076a:	2201      	movs	r2, #1
2000076c:	601a      	str	r2, [r3, #0]
				break;
2000076e:	f000 fbf3 	bl	20000f58 <main+0xd5c>
			
			
			case START_SCREEN: //outside
				
				counter++;
20000772:	4bb3      	ldr	r3, [pc, #716]	; (20000a40 <main+0x844>)
20000774:	681b      	ldr	r3, [r3, #0]
20000776:	1c5a      	adds	r2, r3, #1
20000778:	4bb1      	ldr	r3, [pc, #708]	; (20000a40 <main+0x844>)
2000077a:	601a      	str	r2, [r3, #0]
				
				if(titleObj.yPos < 1) {
2000077c:	23b6      	movs	r3, #182	; 0xb6
2000077e:	009b      	lsls	r3, r3, #2
20000780:	18fb      	adds	r3, r7, r3
20000782:	689b      	ldr	r3, [r3, #8]
20000784:	2b00      	cmp	r3, #0
20000786:	dc08      	bgt.n	2000079a <main+0x59e>
					titleObj.yPos++;
20000788:	23b6      	movs	r3, #182	; 0xb6
2000078a:	009b      	lsls	r3, r3, #2
2000078c:	18fb      	adds	r3, r7, r3
2000078e:	689b      	ldr	r3, [r3, #8]
20000790:	1c5a      	adds	r2, r3, #1
20000792:	23b6      	movs	r3, #182	; 0xb6
20000794:	009b      	lsls	r3, r3, #2
20000796:	18fb      	adds	r3, r7, r3
20000798:	609a      	str	r2, [r3, #8]
				}
				
				draw_game_object(&castleObj);
2000079a:	2398      	movs	r3, #152	; 0x98
2000079c:	009b      	lsls	r3, r3, #2
2000079e:	18fb      	adds	r3, r7, r3
200007a0:	0018      	movs	r0, r3
200007a2:	f001 ffad 	bl	20002700 <draw_game_object>
				draw_game_object(&fire2);
200007a6:	23ca      	movs	r3, #202	; 0xca
200007a8:	005b      	lsls	r3, r3, #1
200007aa:	18fb      	adds	r3, r7, r3
200007ac:	0018      	movs	r0, r3
200007ae:	f001 ffa7 	bl	20002700 <draw_game_object>
				draw_game_object(&fire3);
200007b2:	23b8      	movs	r3, #184	; 0xb8
200007b4:	005b      	lsls	r3, r3, #1
200007b6:	18fb      	adds	r3, r7, r3
200007b8:	0018      	movs	r0, r3
200007ba:	f001 ffa1 	bl	20002700 <draw_game_object>
				draw_game_object(&fire1);
200007be:	2394      	movs	r3, #148	; 0x94
200007c0:	005b      	lsls	r3, r3, #1
200007c2:	18fb      	adds	r3, r7, r3
200007c4:	0018      	movs	r0, r3
200007c6:	f001 ff9b 	bl	20002700 <draw_game_object>
				draw_game_object(&fire4);
200007ca:	23a6      	movs	r3, #166	; 0xa6
200007cc:	005b      	lsls	r3, r3, #1
200007ce:	18fb      	adds	r3, r7, r3
200007d0:	0018      	movs	r0, r3
200007d2:	f001 ff95 	bl	20002700 <draw_game_object>
				draw_game_object(&titleObj);
200007d6:	23b6      	movs	r3, #182	; 0xb6
200007d8:	009b      	lsls	r3, r3, #2
200007da:	18fb      	adds	r3, r7, r3
200007dc:	0018      	movs	r0, r3
200007de:	f001 ff8f 	bl	20002700 <draw_game_object>
				draw_game_object(&bird);
200007e2:	23ee      	movs	r3, #238	; 0xee
200007e4:	005b      	lsls	r3, r3, #1
200007e6:	18fb      	adds	r3, r7, r3
200007e8:	0018      	movs	r0, r3
200007ea:	f001 ff89 	bl	20002700 <draw_game_object>
				show_frame(1);
200007ee:	2001      	movs	r0, #1
200007f0:	f001 ffc7 	bl	20002782 <show_frame>
				
				static int long_text = 40;
				static int short_text = 20;
				static int delay_until_text = 130;
				
				if (counter < delay_until_text - 55 && counter > delay_until_text - 90)
200007f4:	4b93      	ldr	r3, [pc, #588]	; (20000a44 <main+0x848>)
200007f6:	681b      	ldr	r3, [r3, #0]
200007f8:	3b37      	subs	r3, #55	; 0x37
200007fa:	001a      	movs	r2, r3
200007fc:	4b90      	ldr	r3, [pc, #576]	; (20000a40 <main+0x844>)
200007fe:	681b      	ldr	r3, [r3, #0]
20000800:	429a      	cmp	r2, r3
20000802:	dd13      	ble.n	2000082c <main+0x630>
20000804:	4b8f      	ldr	r3, [pc, #572]	; (20000a44 <main+0x848>)
20000806:	681b      	ldr	r3, [r3, #0]
20000808:	3b5a      	subs	r3, #90	; 0x5a
2000080a:	001a      	movs	r2, r3
2000080c:	4b8c      	ldr	r3, [pc, #560]	; (20000a40 <main+0x844>)
2000080e:	681b      	ldr	r3, [r3, #0]
20000810:	429a      	cmp	r2, r3
20000812:	da0b      	bge.n	2000082c <main+0x630>
					text_kra.display(&text_kra, 20);
20000814:	4b8c      	ldr	r3, [pc, #560]	; (20000a48 <main+0x84c>)
20000816:	22d2      	movs	r2, #210	; 0xd2
20000818:	0092      	lsls	r2, r2, #2
2000081a:	4694      	mov	ip, r2
2000081c:	44bc      	add	ip, r7
2000081e:	4463      	add	r3, ip
20000820:	691b      	ldr	r3, [r3, #16]
20000822:	22f0      	movs	r2, #240	; 0xf0
20000824:	18ba      	adds	r2, r7, r2
20000826:	2114      	movs	r1, #20
20000828:	0010      	movs	r0, r2
2000082a:	4798      	blx	r3
				if (counter == delay_until_text - 25)
2000082c:	4b85      	ldr	r3, [pc, #532]	; (20000a44 <main+0x848>)
2000082e:	681b      	ldr	r3, [r3, #0]
20000830:	3b19      	subs	r3, #25
20000832:	001a      	movs	r2, r3
20000834:	4b82      	ldr	r3, [pc, #520]	; (20000a40 <main+0x844>)
20000836:	681b      	ldr	r3, [r3, #0]
20000838:	429a      	cmp	r2, r3
2000083a:	d101      	bne.n	20000840 <main+0x644>
					clear_ascii();
2000083c:	f002 f9d7 	bl	20002bee <clear_ascii>
				
				if (counter < delay_until_text);
20000840:	4b7f      	ldr	r3, [pc, #508]	; (20000a40 <main+0x844>)
20000842:	681a      	ldr	r2, [r3, #0]
20000844:	4b7f      	ldr	r3, [pc, #508]	; (20000a44 <main+0x848>)
20000846:	681b      	ldr	r3, [r3, #0]
20000848:	429a      	cmp	r2, r3
2000084a:	da00      	bge.n	2000084e <main+0x652>
2000084c:	e1a1      	b.n	20000b92 <main+0x996>
				else if (counter < delay_until_text + 1*long_text)
2000084e:	4b7d      	ldr	r3, [pc, #500]	; (20000a44 <main+0x848>)
20000850:	681a      	ldr	r2, [r3, #0]
20000852:	4b7e      	ldr	r3, [pc, #504]	; (20000a4c <main+0x850>)
20000854:	681b      	ldr	r3, [r3, #0]
20000856:	18d2      	adds	r2, r2, r3
20000858:	4b79      	ldr	r3, [pc, #484]	; (20000a40 <main+0x844>)
2000085a:	681b      	ldr	r3, [r3, #0]
2000085c:	429a      	cmp	r2, r3
2000085e:	dd0c      	ble.n	2000087a <main+0x67e>
					text1.display(&text1, 20);
20000860:	4b7b      	ldr	r3, [pc, #492]	; (20000a50 <main+0x854>)
20000862:	22d2      	movs	r2, #210	; 0xd2
20000864:	0092      	lsls	r2, r2, #2
20000866:	4694      	mov	ip, r2
20000868:	44bc      	add	ip, r7
2000086a:	4463      	add	r3, ip
2000086c:	691b      	ldr	r3, [r3, #16]
2000086e:	22dc      	movs	r2, #220	; 0xdc
20000870:	18ba      	adds	r2, r7, r2
20000872:	2114      	movs	r1, #20
20000874:	0010      	movs	r0, r2
20000876:	4798      	blx	r3
20000878:	e18b      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 1*long_text + 1*short_text)
2000087a:	4b72      	ldr	r3, [pc, #456]	; (20000a44 <main+0x848>)
2000087c:	681a      	ldr	r2, [r3, #0]
2000087e:	4b73      	ldr	r3, [pc, #460]	; (20000a4c <main+0x850>)
20000880:	681b      	ldr	r3, [r3, #0]
20000882:	18d2      	adds	r2, r2, r3
20000884:	4b73      	ldr	r3, [pc, #460]	; (20000a54 <main+0x858>)
20000886:	681b      	ldr	r3, [r3, #0]
20000888:	18d2      	adds	r2, r2, r3
2000088a:	4b6d      	ldr	r3, [pc, #436]	; (20000a40 <main+0x844>)
2000088c:	681b      	ldr	r3, [r3, #0]
2000088e:	429a      	cmp	r2, r3
20000890:	dd0c      	ble.n	200008ac <main+0x6b0>
					text2.display(&text2, 20);
20000892:	4b71      	ldr	r3, [pc, #452]	; (20000a58 <main+0x85c>)
20000894:	22d2      	movs	r2, #210	; 0xd2
20000896:	0092      	lsls	r2, r2, #2
20000898:	4694      	mov	ip, r2
2000089a:	44bc      	add	ip, r7
2000089c:	4463      	add	r3, ip
2000089e:	691b      	ldr	r3, [r3, #16]
200008a0:	22c8      	movs	r2, #200	; 0xc8
200008a2:	18ba      	adds	r2, r7, r2
200008a4:	2114      	movs	r1, #20
200008a6:	0010      	movs	r0, r2
200008a8:	4798      	blx	r3
200008aa:	e172      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 2*long_text + 1*short_text)
200008ac:	4b67      	ldr	r3, [pc, #412]	; (20000a4c <main+0x850>)
200008ae:	681b      	ldr	r3, [r3, #0]
200008b0:	005a      	lsls	r2, r3, #1
200008b2:	4b64      	ldr	r3, [pc, #400]	; (20000a44 <main+0x848>)
200008b4:	681b      	ldr	r3, [r3, #0]
200008b6:	18d2      	adds	r2, r2, r3
200008b8:	4b66      	ldr	r3, [pc, #408]	; (20000a54 <main+0x858>)
200008ba:	681b      	ldr	r3, [r3, #0]
200008bc:	18d2      	adds	r2, r2, r3
200008be:	4b60      	ldr	r3, [pc, #384]	; (20000a40 <main+0x844>)
200008c0:	681b      	ldr	r3, [r3, #0]
200008c2:	429a      	cmp	r2, r3
200008c4:	dd0c      	ble.n	200008e0 <main+0x6e4>
					text3.display(&text3, 20);
200008c6:	4b65      	ldr	r3, [pc, #404]	; (20000a5c <main+0x860>)
200008c8:	22d2      	movs	r2, #210	; 0xd2
200008ca:	0092      	lsls	r2, r2, #2
200008cc:	4694      	mov	ip, r2
200008ce:	44bc      	add	ip, r7
200008d0:	4463      	add	r3, ip
200008d2:	691b      	ldr	r3, [r3, #16]
200008d4:	22b4      	movs	r2, #180	; 0xb4
200008d6:	18ba      	adds	r2, r7, r2
200008d8:	2114      	movs	r1, #20
200008da:	0010      	movs	r0, r2
200008dc:	4798      	blx	r3
200008de:	e158      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 2*long_text + 2*short_text)
200008e0:	4b5a      	ldr	r3, [pc, #360]	; (20000a4c <main+0x850>)
200008e2:	681b      	ldr	r3, [r3, #0]
200008e4:	005a      	lsls	r2, r3, #1
200008e6:	4b57      	ldr	r3, [pc, #348]	; (20000a44 <main+0x848>)
200008e8:	681b      	ldr	r3, [r3, #0]
200008ea:	18d2      	adds	r2, r2, r3
200008ec:	4b59      	ldr	r3, [pc, #356]	; (20000a54 <main+0x858>)
200008ee:	681b      	ldr	r3, [r3, #0]
200008f0:	005b      	lsls	r3, r3, #1
200008f2:	18d2      	adds	r2, r2, r3
200008f4:	4b52      	ldr	r3, [pc, #328]	; (20000a40 <main+0x844>)
200008f6:	681b      	ldr	r3, [r3, #0]
200008f8:	429a      	cmp	r2, r3
200008fa:	dd0c      	ble.n	20000916 <main+0x71a>
					text4.display(&text4, 20);
200008fc:	4b58      	ldr	r3, [pc, #352]	; (20000a60 <main+0x864>)
200008fe:	22d2      	movs	r2, #210	; 0xd2
20000900:	0092      	lsls	r2, r2, #2
20000902:	4694      	mov	ip, r2
20000904:	44bc      	add	ip, r7
20000906:	4463      	add	r3, ip
20000908:	691b      	ldr	r3, [r3, #16]
2000090a:	22a0      	movs	r2, #160	; 0xa0
2000090c:	18ba      	adds	r2, r7, r2
2000090e:	2114      	movs	r1, #20
20000910:	0010      	movs	r0, r2
20000912:	4798      	blx	r3
20000914:	e13d      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 3*long_text + 2*short_text)
20000916:	4b4d      	ldr	r3, [pc, #308]	; (20000a4c <main+0x850>)
20000918:	681a      	ldr	r2, [r3, #0]
2000091a:	0013      	movs	r3, r2
2000091c:	005b      	lsls	r3, r3, #1
2000091e:	189a      	adds	r2, r3, r2
20000920:	4b48      	ldr	r3, [pc, #288]	; (20000a44 <main+0x848>)
20000922:	681b      	ldr	r3, [r3, #0]
20000924:	18d2      	adds	r2, r2, r3
20000926:	4b4b      	ldr	r3, [pc, #300]	; (20000a54 <main+0x858>)
20000928:	681b      	ldr	r3, [r3, #0]
2000092a:	005b      	lsls	r3, r3, #1
2000092c:	18d2      	adds	r2, r2, r3
2000092e:	4b44      	ldr	r3, [pc, #272]	; (20000a40 <main+0x844>)
20000930:	681b      	ldr	r3, [r3, #0]
20000932:	429a      	cmp	r2, r3
20000934:	dd0c      	ble.n	20000950 <main+0x754>
					text5.display(&text5, 15);
20000936:	4b4b      	ldr	r3, [pc, #300]	; (20000a64 <main+0x868>)
20000938:	22d2      	movs	r2, #210	; 0xd2
2000093a:	0092      	lsls	r2, r2, #2
2000093c:	4694      	mov	ip, r2
2000093e:	44bc      	add	ip, r7
20000940:	4463      	add	r3, ip
20000942:	691b      	ldr	r3, [r3, #16]
20000944:	228c      	movs	r2, #140	; 0x8c
20000946:	18ba      	adds	r2, r7, r2
20000948:	210f      	movs	r1, #15
2000094a:	0010      	movs	r0, r2
2000094c:	4798      	blx	r3
2000094e:	e120      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 3*long_text + 3*short_text)
20000950:	4b3e      	ldr	r3, [pc, #248]	; (20000a4c <main+0x850>)
20000952:	681a      	ldr	r2, [r3, #0]
20000954:	0013      	movs	r3, r2
20000956:	005b      	lsls	r3, r3, #1
20000958:	189a      	adds	r2, r3, r2
2000095a:	4b3a      	ldr	r3, [pc, #232]	; (20000a44 <main+0x848>)
2000095c:	681b      	ldr	r3, [r3, #0]
2000095e:	18d1      	adds	r1, r2, r3
20000960:	4b3c      	ldr	r3, [pc, #240]	; (20000a54 <main+0x858>)
20000962:	681a      	ldr	r2, [r3, #0]
20000964:	0013      	movs	r3, r2
20000966:	005b      	lsls	r3, r3, #1
20000968:	189b      	adds	r3, r3, r2
2000096a:	18ca      	adds	r2, r1, r3
2000096c:	4b34      	ldr	r3, [pc, #208]	; (20000a40 <main+0x844>)
2000096e:	681b      	ldr	r3, [r3, #0]
20000970:	429a      	cmp	r2, r3
20000972:	dd0c      	ble.n	2000098e <main+0x792>
					text6.display(&text6, 20);
20000974:	4b3c      	ldr	r3, [pc, #240]	; (20000a68 <main+0x86c>)
20000976:	22d2      	movs	r2, #210	; 0xd2
20000978:	0092      	lsls	r2, r2, #2
2000097a:	4694      	mov	ip, r2
2000097c:	44bc      	add	ip, r7
2000097e:	4463      	add	r3, ip
20000980:	691b      	ldr	r3, [r3, #16]
20000982:	2278      	movs	r2, #120	; 0x78
20000984:	18ba      	adds	r2, r7, r2
20000986:	2114      	movs	r1, #20
20000988:	0010      	movs	r0, r2
2000098a:	4798      	blx	r3
2000098c:	e101      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 4*long_text + 3*short_text + 3)
2000098e:	4b2f      	ldr	r3, [pc, #188]	; (20000a4c <main+0x850>)
20000990:	681b      	ldr	r3, [r3, #0]
20000992:	009a      	lsls	r2, r3, #2
20000994:	4b2b      	ldr	r3, [pc, #172]	; (20000a44 <main+0x848>)
20000996:	681b      	ldr	r3, [r3, #0]
20000998:	18d1      	adds	r1, r2, r3
2000099a:	4b2e      	ldr	r3, [pc, #184]	; (20000a54 <main+0x858>)
2000099c:	681a      	ldr	r2, [r3, #0]
2000099e:	0013      	movs	r3, r2
200009a0:	005b      	lsls	r3, r3, #1
200009a2:	189b      	adds	r3, r3, r2
200009a4:	18cb      	adds	r3, r1, r3
200009a6:	1cda      	adds	r2, r3, #3
200009a8:	4b25      	ldr	r3, [pc, #148]	; (20000a40 <main+0x844>)
200009aa:	681b      	ldr	r3, [r3, #0]
200009ac:	429a      	cmp	r2, r3
200009ae:	dd0c      	ble.n	200009ca <main+0x7ce>
					text7.display(&text7, 20);
200009b0:	4b2e      	ldr	r3, [pc, #184]	; (20000a6c <main+0x870>)
200009b2:	22d2      	movs	r2, #210	; 0xd2
200009b4:	0092      	lsls	r2, r2, #2
200009b6:	4694      	mov	ip, r2
200009b8:	44bc      	add	ip, r7
200009ba:	4463      	add	r3, ip
200009bc:	691b      	ldr	r3, [r3, #16]
200009be:	2264      	movs	r2, #100	; 0x64
200009c0:	18ba      	adds	r2, r7, r2
200009c2:	2114      	movs	r1, #20
200009c4:	0010      	movs	r0, r2
200009c6:	4798      	blx	r3
200009c8:	e0e3      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 5*long_text + 3*short_text + 2)
200009ca:	4b20      	ldr	r3, [pc, #128]	; (20000a4c <main+0x850>)
200009cc:	681a      	ldr	r2, [r3, #0]
200009ce:	0013      	movs	r3, r2
200009d0:	009b      	lsls	r3, r3, #2
200009d2:	189a      	adds	r2, r3, r2
200009d4:	4b1b      	ldr	r3, [pc, #108]	; (20000a44 <main+0x848>)
200009d6:	681b      	ldr	r3, [r3, #0]
200009d8:	18d1      	adds	r1, r2, r3
200009da:	4b1e      	ldr	r3, [pc, #120]	; (20000a54 <main+0x858>)
200009dc:	681a      	ldr	r2, [r3, #0]
200009de:	0013      	movs	r3, r2
200009e0:	005b      	lsls	r3, r3, #1
200009e2:	189b      	adds	r3, r3, r2
200009e4:	18cb      	adds	r3, r1, r3
200009e6:	1c9a      	adds	r2, r3, #2
200009e8:	4b15      	ldr	r3, [pc, #84]	; (20000a40 <main+0x844>)
200009ea:	681b      	ldr	r3, [r3, #0]
200009ec:	429a      	cmp	r2, r3
200009ee:	dd41      	ble.n	20000a74 <main+0x878>
					text8.display(&text8, 20);
200009f0:	4b1f      	ldr	r3, [pc, #124]	; (20000a70 <main+0x874>)
200009f2:	22d2      	movs	r2, #210	; 0xd2
200009f4:	0092      	lsls	r2, r2, #2
200009f6:	4694      	mov	ip, r2
200009f8:	44bc      	add	ip, r7
200009fa:	4463      	add	r3, ip
200009fc:	691b      	ldr	r3, [r3, #16]
200009fe:	2250      	movs	r2, #80	; 0x50
20000a00:	18ba      	adds	r2, r7, r2
20000a02:	2114      	movs	r1, #20
20000a04:	0010      	movs	r0, r2
20000a06:	4798      	blx	r3
20000a08:	e0c3      	b.n	20000b92 <main+0x996>
20000a0a:	46c0      	nop			; (mov r8, r8)
20000a0c:	20008d4c 	andcs	r8, r0, ip, asr #26
20000a10:	20008dbc 			; <UNDEFINED> instruction: 0x20008dbc
20000a14:	20008dc8 	andcs	r8, r0, r8, asr #27
20000a18:	20008ddc 	ldrdcs	r8, [r0], -ip
20000a1c:	20008df4 	strdcs	r8, [r0], -r4
20000a20:	20008e08 	andcs	r8, r0, r8, lsl #28
20000a24:	20008e1c 	andcs	r8, r0, ip, lsl lr
20000a28:	20008e30 	andcs	r8, r0, r0, lsr lr
20000a2c:	20008e48 	andcs	r8, r0, r8, asr #28
20000a30:	20008e54 	andcs	r8, r0, r4, asr lr
20000a34:	20008e68 	andcs	r8, r0, r8, ror #28
20000a38:	20008e7c 	andcs	r8, r0, ip, ror lr
20000a3c:	20006c90 	mulcs	r0, r0, ip
20000a40:	20003204 	andcs	r3, r0, r4, lsl #4
20000a44:	20006c94 	mulcs	r0, r4, ip
20000a48:	fffffda8 			; <UNDEFINED> instruction: 0xfffffda8
20000a4c:	20006c98 	mulcs	r0, r8, ip
20000a50:	fffffd94 			; <UNDEFINED> instruction: 0xfffffd94
20000a54:	20006c9c 	mulcs	r0, ip, ip
20000a58:	fffffd80 			; <UNDEFINED> instruction: 0xfffffd80
20000a5c:	fffffd6c 			; <UNDEFINED> instruction: 0xfffffd6c
20000a60:	fffffd58 			; <UNDEFINED> instruction: 0xfffffd58
20000a64:	fffffd44 			; <UNDEFINED> instruction: 0xfffffd44
20000a68:	fffffd30 			; <UNDEFINED> instruction: 0xfffffd30
20000a6c:	fffffd1c 			; <UNDEFINED> instruction: 0xfffffd1c
20000a70:	fffffd08 			; <UNDEFINED> instruction: 0xfffffd08
				else if(counter < delay_until_text + 5*long_text + 4*short_text + 2)
20000a74:	4bcc      	ldr	r3, [pc, #816]	; (20000da8 <main+0xbac>)
20000a76:	681a      	ldr	r2, [r3, #0]
20000a78:	0013      	movs	r3, r2
20000a7a:	009b      	lsls	r3, r3, #2
20000a7c:	189a      	adds	r2, r3, r2
20000a7e:	4bcb      	ldr	r3, [pc, #812]	; (20000dac <main+0xbb0>)
20000a80:	681b      	ldr	r3, [r3, #0]
20000a82:	18d2      	adds	r2, r2, r3
20000a84:	4bca      	ldr	r3, [pc, #808]	; (20000db0 <main+0xbb4>)
20000a86:	681b      	ldr	r3, [r3, #0]
20000a88:	009b      	lsls	r3, r3, #2
20000a8a:	18d3      	adds	r3, r2, r3
20000a8c:	1c9a      	adds	r2, r3, #2
20000a8e:	4bc9      	ldr	r3, [pc, #804]	; (20000db4 <main+0xbb8>)
20000a90:	681b      	ldr	r3, [r3, #0]
20000a92:	429a      	cmp	r2, r3
20000a94:	dd0c      	ble.n	20000ab0 <main+0x8b4>
					text9.display(&text9, 20);
20000a96:	4bc8      	ldr	r3, [pc, #800]	; (20000db8 <main+0xbbc>)
20000a98:	22d2      	movs	r2, #210	; 0xd2
20000a9a:	0092      	lsls	r2, r2, #2
20000a9c:	4694      	mov	ip, r2
20000a9e:	44bc      	add	ip, r7
20000aa0:	4463      	add	r3, ip
20000aa2:	691b      	ldr	r3, [r3, #16]
20000aa4:	223c      	movs	r2, #60	; 0x3c
20000aa6:	18ba      	adds	r2, r7, r2
20000aa8:	2114      	movs	r1, #20
20000aaa:	0010      	movs	r0, r2
20000aac:	4798      	blx	r3
20000aae:	e070      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 6*long_text + 4*short_text - 2 + 2)
20000ab0:	4bbd      	ldr	r3, [pc, #756]	; (20000da8 <main+0xbac>)
20000ab2:	681a      	ldr	r2, [r3, #0]
20000ab4:	0013      	movs	r3, r2
20000ab6:	005b      	lsls	r3, r3, #1
20000ab8:	189b      	adds	r3, r3, r2
20000aba:	005b      	lsls	r3, r3, #1
20000abc:	001a      	movs	r2, r3
20000abe:	4bbb      	ldr	r3, [pc, #748]	; (20000dac <main+0xbb0>)
20000ac0:	681b      	ldr	r3, [r3, #0]
20000ac2:	18d2      	adds	r2, r2, r3
20000ac4:	4bba      	ldr	r3, [pc, #744]	; (20000db0 <main+0xbb4>)
20000ac6:	681b      	ldr	r3, [r3, #0]
20000ac8:	009b      	lsls	r3, r3, #2
20000aca:	18d2      	adds	r2, r2, r3
20000acc:	4bb9      	ldr	r3, [pc, #740]	; (20000db4 <main+0xbb8>)
20000ace:	681b      	ldr	r3, [r3, #0]
20000ad0:	429a      	cmp	r2, r3
20000ad2:	dd0c      	ble.n	20000aee <main+0x8f2>
					text10.display(&text10, 15);
20000ad4:	4bb9      	ldr	r3, [pc, #740]	; (20000dbc <main+0xbc0>)
20000ad6:	22d2      	movs	r2, #210	; 0xd2
20000ad8:	0092      	lsls	r2, r2, #2
20000ada:	4694      	mov	ip, r2
20000adc:	44bc      	add	ip, r7
20000ade:	4463      	add	r3, ip
20000ae0:	691b      	ldr	r3, [r3, #16]
20000ae2:	2228      	movs	r2, #40	; 0x28
20000ae4:	18ba      	adds	r2, r7, r2
20000ae6:	210f      	movs	r1, #15
20000ae8:	0010      	movs	r0, r2
20000aea:	4798      	blx	r3
20000aec:	e051      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 6*long_text + 5*short_text + 3 + 2)
20000aee:	4bae      	ldr	r3, [pc, #696]	; (20000da8 <main+0xbac>)
20000af0:	681a      	ldr	r2, [r3, #0]
20000af2:	0013      	movs	r3, r2
20000af4:	005b      	lsls	r3, r3, #1
20000af6:	189b      	adds	r3, r3, r2
20000af8:	005b      	lsls	r3, r3, #1
20000afa:	001a      	movs	r2, r3
20000afc:	4bab      	ldr	r3, [pc, #684]	; (20000dac <main+0xbb0>)
20000afe:	681b      	ldr	r3, [r3, #0]
20000b00:	18d1      	adds	r1, r2, r3
20000b02:	4bab      	ldr	r3, [pc, #684]	; (20000db0 <main+0xbb4>)
20000b04:	681a      	ldr	r2, [r3, #0]
20000b06:	0013      	movs	r3, r2
20000b08:	009b      	lsls	r3, r3, #2
20000b0a:	189b      	adds	r3, r3, r2
20000b0c:	18cb      	adds	r3, r1, r3
20000b0e:	1d5a      	adds	r2, r3, #5
20000b10:	4ba8      	ldr	r3, [pc, #672]	; (20000db4 <main+0xbb8>)
20000b12:	681b      	ldr	r3, [r3, #0]
20000b14:	429a      	cmp	r2, r3
20000b16:	dd0b      	ble.n	20000b30 <main+0x934>
					text12.display(&text12, 15);
20000b18:	4ba9      	ldr	r3, [pc, #676]	; (20000dc0 <main+0xbc4>)
20000b1a:	22d2      	movs	r2, #210	; 0xd2
20000b1c:	0092      	lsls	r2, r2, #2
20000b1e:	4694      	mov	ip, r2
20000b20:	44bc      	add	ip, r7
20000b22:	4463      	add	r3, ip
20000b24:	691b      	ldr	r3, [r3, #16]
20000b26:	003a      	movs	r2, r7
20000b28:	210f      	movs	r1, #15
20000b2a:	0010      	movs	r0, r2
20000b2c:	4798      	blx	r3
20000b2e:	e030      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 7*long_text + 5*short_text + 6 + 2) {
20000b30:	4b9d      	ldr	r3, [pc, #628]	; (20000da8 <main+0xbac>)
20000b32:	681a      	ldr	r2, [r3, #0]
20000b34:	0013      	movs	r3, r2
20000b36:	00db      	lsls	r3, r3, #3
20000b38:	1a9a      	subs	r2, r3, r2
20000b3a:	4b9c      	ldr	r3, [pc, #624]	; (20000dac <main+0xbb0>)
20000b3c:	681b      	ldr	r3, [r3, #0]
20000b3e:	18d1      	adds	r1, r2, r3
20000b40:	4b9b      	ldr	r3, [pc, #620]	; (20000db0 <main+0xbb4>)
20000b42:	681a      	ldr	r2, [r3, #0]
20000b44:	0013      	movs	r3, r2
20000b46:	009b      	lsls	r3, r3, #2
20000b48:	189b      	adds	r3, r3, r2
20000b4a:	18cb      	adds	r3, r1, r3
20000b4c:	3308      	adds	r3, #8
20000b4e:	001a      	movs	r2, r3
20000b50:	4b98      	ldr	r3, [pc, #608]	; (20000db4 <main+0xbb8>)
20000b52:	681b      	ldr	r3, [r3, #0]
20000b54:	429a      	cmp	r2, r3
20000b56:	dd0c      	ble.n	20000b72 <main+0x976>
					text11.display(&text11, 20);
20000b58:	4b9a      	ldr	r3, [pc, #616]	; (20000dc4 <main+0xbc8>)
20000b5a:	22d2      	movs	r2, #210	; 0xd2
20000b5c:	0092      	lsls	r2, r2, #2
20000b5e:	4694      	mov	ip, r2
20000b60:	44bc      	add	ip, r7
20000b62:	4463      	add	r3, ip
20000b64:	691b      	ldr	r3, [r3, #16]
20000b66:	2214      	movs	r2, #20
20000b68:	18ba      	adds	r2, r7, r2
20000b6a:	2114      	movs	r1, #20
20000b6c:	0010      	movs	r0, r2
20000b6e:	4798      	blx	r3
20000b70:	e00f      	b.n	20000b92 <main+0x996>
				} else {
					if (read_DIL() == 0) {
20000b72:	f001 fe6f 	bl	20002854 <read_DIL>
20000b76:	1e03      	subs	r3, r0, #0
20000b78:	d10b      	bne.n	20000b92 <main+0x996>
						current_screen = GAME_SCREEN;
20000b7a:	4b93      	ldr	r3, [pc, #588]	; (20000dc8 <main+0xbcc>)
20000b7c:	2202      	movs	r2, #2
20000b7e:	601a      	str	r2, [r3, #0]
						random_seed = counter;
20000b80:	4b8c      	ldr	r3, [pc, #560]	; (20000db4 <main+0xbb8>)
20000b82:	681a      	ldr	r2, [r3, #0]
20000b84:	4b91      	ldr	r3, [pc, #580]	; (20000dcc <main+0xbd0>)
20000b86:	601a      	str	r2, [r3, #0]
						counter = 0;
20000b88:	4b8a      	ldr	r3, [pc, #552]	; (20000db4 <main+0xbb8>)
20000b8a:	2200      	movs	r2, #0
20000b8c:	601a      	str	r2, [r3, #0]
						clear_ascii();
20000b8e:	f002 f82e 	bl	20002bee <clear_ascii>
					}
				}
				
				if(read_DIL() == SKIP_VALUE) {
20000b92:	f001 fe5f 	bl	20002854 <read_DIL>
20000b96:	0003      	movs	r3, r0
20000b98:	2b80      	cmp	r3, #128	; 0x80
20000b9a:	d10b      	bne.n	20000bb4 <main+0x9b8>
					current_screen = GAME_SCREEN;
20000b9c:	4b8a      	ldr	r3, [pc, #552]	; (20000dc8 <main+0xbcc>)
20000b9e:	2202      	movs	r2, #2
20000ba0:	601a      	str	r2, [r3, #0]
					random_seed = counter;
20000ba2:	4b84      	ldr	r3, [pc, #528]	; (20000db4 <main+0xbb8>)
20000ba4:	681a      	ldr	r2, [r3, #0]
20000ba6:	4b89      	ldr	r3, [pc, #548]	; (20000dcc <main+0xbd0>)
20000ba8:	601a      	str	r2, [r3, #0]
					counter = 0;
20000baa:	4b82      	ldr	r3, [pc, #520]	; (20000db4 <main+0xbb8>)
20000bac:	2200      	movs	r2, #0
20000bae:	601a      	str	r2, [r3, #0]
					clear_ascii();
20000bb0:	f002 f81d 	bl	20002bee <clear_ascii>
				}
				
				
				fire2.update(&fire2);
20000bb4:	4b86      	ldr	r3, [pc, #536]	; (20000dd0 <main+0xbd4>)
20000bb6:	22d2      	movs	r2, #210	; 0xd2
20000bb8:	0092      	lsls	r2, r2, #2
20000bba:	4694      	mov	ip, r2
20000bbc:	44bc      	add	ip, r7
20000bbe:	4463      	add	r3, ip
20000bc0:	68db      	ldr	r3, [r3, #12]
20000bc2:	22ca      	movs	r2, #202	; 0xca
20000bc4:	0052      	lsls	r2, r2, #1
20000bc6:	18ba      	adds	r2, r7, r2
20000bc8:	0010      	movs	r0, r2
20000bca:	4798      	blx	r3
				fire3.update(&fire3);
20000bcc:	4b81      	ldr	r3, [pc, #516]	; (20000dd4 <main+0xbd8>)
20000bce:	22d2      	movs	r2, #210	; 0xd2
20000bd0:	0092      	lsls	r2, r2, #2
20000bd2:	4694      	mov	ip, r2
20000bd4:	44bc      	add	ip, r7
20000bd6:	4463      	add	r3, ip
20000bd8:	68db      	ldr	r3, [r3, #12]
20000bda:	22b8      	movs	r2, #184	; 0xb8
20000bdc:	0052      	lsls	r2, r2, #1
20000bde:	18ba      	adds	r2, r7, r2
20000be0:	0010      	movs	r0, r2
20000be2:	4798      	blx	r3
				fire1.update(&fire1);
20000be4:	4b7c      	ldr	r3, [pc, #496]	; (20000dd8 <main+0xbdc>)
20000be6:	22d2      	movs	r2, #210	; 0xd2
20000be8:	0092      	lsls	r2, r2, #2
20000bea:	4694      	mov	ip, r2
20000bec:	44bc      	add	ip, r7
20000bee:	4463      	add	r3, ip
20000bf0:	68db      	ldr	r3, [r3, #12]
20000bf2:	2294      	movs	r2, #148	; 0x94
20000bf4:	0052      	lsls	r2, r2, #1
20000bf6:	18ba      	adds	r2, r7, r2
20000bf8:	0010      	movs	r0, r2
20000bfa:	4798      	blx	r3
				fire4.update(&fire4);
20000bfc:	4b77      	ldr	r3, [pc, #476]	; (20000ddc <main+0xbe0>)
20000bfe:	22d2      	movs	r2, #210	; 0xd2
20000c00:	0092      	lsls	r2, r2, #2
20000c02:	4694      	mov	ip, r2
20000c04:	44bc      	add	ip, r7
20000c06:	4463      	add	r3, ip
20000c08:	68db      	ldr	r3, [r3, #12]
20000c0a:	22a6      	movs	r2, #166	; 0xa6
20000c0c:	0052      	lsls	r2, r2, #1
20000c0e:	18ba      	adds	r2, r7, r2
20000c10:	0010      	movs	r0, r2
20000c12:	4798      	blx	r3
				bird.update(&bird);
20000c14:	4b72      	ldr	r3, [pc, #456]	; (20000de0 <main+0xbe4>)
20000c16:	22d2      	movs	r2, #210	; 0xd2
20000c18:	0092      	lsls	r2, r2, #2
20000c1a:	4694      	mov	ip, r2
20000c1c:	44bc      	add	ip, r7
20000c1e:	4463      	add	r3, ip
20000c20:	68db      	ldr	r3, [r3, #12]
20000c22:	22ee      	movs	r2, #238	; 0xee
20000c24:	0052      	lsls	r2, r2, #1
20000c26:	18ba      	adds	r2, r7, r2
20000c28:	0010      	movs	r0, r2
20000c2a:	4798      	blx	r3
				bird.xPos -= 2;
20000c2c:	4b6c      	ldr	r3, [pc, #432]	; (20000de0 <main+0xbe4>)
20000c2e:	22d2      	movs	r2, #210	; 0xd2
20000c30:	0092      	lsls	r2, r2, #2
20000c32:	4694      	mov	ip, r2
20000c34:	44bc      	add	ip, r7
20000c36:	4463      	add	r3, ip
20000c38:	685b      	ldr	r3, [r3, #4]
20000c3a:	1e9a      	subs	r2, r3, #2
20000c3c:	4b68      	ldr	r3, [pc, #416]	; (20000de0 <main+0xbe4>)
20000c3e:	21d2      	movs	r1, #210	; 0xd2
20000c40:	0089      	lsls	r1, r1, #2
20000c42:	468c      	mov	ip, r1
20000c44:	44bc      	add	ip, r7
20000c46:	4463      	add	r3, ip
20000c48:	605a      	str	r2, [r3, #4]
				if (counter % 2 == 0) {
20000c4a:	4b5a      	ldr	r3, [pc, #360]	; (20000db4 <main+0xbb8>)
20000c4c:	681b      	ldr	r3, [r3, #0]
20000c4e:	001a      	movs	r2, r3
20000c50:	2301      	movs	r3, #1
20000c52:	4013      	ands	r3, r2
20000c54:	d000      	beq.n	20000c58 <main+0xa5c>
20000c56:	e17b      	b.n	20000f50 <main+0xd54>
					bird.yPos--;
20000c58:	4b61      	ldr	r3, [pc, #388]	; (20000de0 <main+0xbe4>)
20000c5a:	22d2      	movs	r2, #210	; 0xd2
20000c5c:	0092      	lsls	r2, r2, #2
20000c5e:	4694      	mov	ip, r2
20000c60:	44bc      	add	ip, r7
20000c62:	4463      	add	r3, ip
20000c64:	689b      	ldr	r3, [r3, #8]
20000c66:	1e5a      	subs	r2, r3, #1
20000c68:	4b5d      	ldr	r3, [pc, #372]	; (20000de0 <main+0xbe4>)
20000c6a:	21d2      	movs	r1, #210	; 0xd2
20000c6c:	0089      	lsls	r1, r1, #2
20000c6e:	468c      	mov	ip, r1
20000c70:	44bc      	add	ip, r7
20000c72:	4463      	add	r3, ip
20000c74:	609a      	str	r2, [r3, #8]
				}
				
				break;
20000c76:	e16b      	b.n	20000f50 <main+0xd54>
				
			case GAME_SCREEN: //inside
				
				counter++;
20000c78:	4b4e      	ldr	r3, [pc, #312]	; (20000db4 <main+0xbb8>)
20000c7a:	681b      	ldr	r3, [r3, #0]
20000c7c:	1c5a      	adds	r2, r3, #1
20000c7e:	4b4d      	ldr	r3, [pc, #308]	; (20000db4 <main+0xbb8>)
20000c80:	601a      	str	r2, [r3, #0]
				if(read_DIL_single( LIGHT_TRIGGER )) {
20000c82:	2006      	movs	r0, #6
20000c84:	f001 fdf6 	bl	20002874 <read_DIL_single>
20000c88:	1e03      	subs	r3, r0, #0
20000c8a:	d006      	beq.n	20000c9a <main+0xa9e>
					draw_game_object( &indoors2 );
20000c8c:	2380      	movs	r3, #128	; 0x80
20000c8e:	009b      	lsls	r3, r3, #2
20000c90:	18fb      	adds	r3, r7, r3
20000c92:	0018      	movs	r0, r3
20000c94:	f001 fd34 	bl	20002700 <draw_game_object>
20000c98:	e00a      	b.n	20000cb0 <main+0xab4>
				} else {
					draw_game_object( &indoors );
20000c9a:	2389      	movs	r3, #137	; 0x89
20000c9c:	009b      	lsls	r3, r3, #2
20000c9e:	18fb      	adds	r3, r7, r3
20000ca0:	0018      	movs	r0, r3
20000ca2:	f001 fd2d 	bl	20002700 <draw_game_object>
					draw_game_object( &fire1_indoors );
20000ca6:	1d7b      	adds	r3, r7, #5
20000ca8:	33ff      	adds	r3, #255	; 0xff
20000caa:	0018      	movs	r0, r3
20000cac:	f001 fd28 	bl	20002700 <draw_game_object>
				}
				
				draw_game_object( &player );
20000cb0:	23dc      	movs	r3, #220	; 0xdc
20000cb2:	005b      	lsls	r3, r3, #1
20000cb4:	18fb      	adds	r3, r7, r3
20000cb6:	0018      	movs	r0, r3
20000cb8:	f001 fd22 	bl	20002700 <draw_game_object>
				show_frame(1);
20000cbc:	2001      	movs	r0, #1
20000cbe:	f001 fd60 	bl	20002782 <show_frame>
				
				static int last_climb_value = 100;
				if((read_DIL_single(CLIMB_TRIGGER) != last_climb_value) && player.xPos > 90 && player.xPos < 108 && !has_climbed) {
20000cc2:	2004      	movs	r0, #4
20000cc4:	f001 fdd6 	bl	20002874 <read_DIL_single>
20000cc8:	0002      	movs	r2, r0
20000cca:	4b46      	ldr	r3, [pc, #280]	; (20000de4 <main+0xbe8>)
20000ccc:	681b      	ldr	r3, [r3, #0]
20000cce:	429a      	cmp	r2, r3
20000cd0:	d024      	beq.n	20000d1c <main+0xb20>
20000cd2:	4b45      	ldr	r3, [pc, #276]	; (20000de8 <main+0xbec>)
20000cd4:	22d2      	movs	r2, #210	; 0xd2
20000cd6:	0092      	lsls	r2, r2, #2
20000cd8:	4694      	mov	ip, r2
20000cda:	44bc      	add	ip, r7
20000cdc:	4463      	add	r3, ip
20000cde:	685b      	ldr	r3, [r3, #4]
20000ce0:	2b5a      	cmp	r3, #90	; 0x5a
20000ce2:	dd1b      	ble.n	20000d1c <main+0xb20>
20000ce4:	4b40      	ldr	r3, [pc, #256]	; (20000de8 <main+0xbec>)
20000ce6:	22d2      	movs	r2, #210	; 0xd2
20000ce8:	0092      	lsls	r2, r2, #2
20000cea:	4694      	mov	ip, r2
20000cec:	44bc      	add	ip, r7
20000cee:	4463      	add	r3, ip
20000cf0:	685b      	ldr	r3, [r3, #4]
20000cf2:	2b6b      	cmp	r3, #107	; 0x6b
20000cf4:	dc12      	bgt.n	20000d1c <main+0xb20>
20000cf6:	23d0      	movs	r3, #208	; 0xd0
20000cf8:	009b      	lsls	r3, r3, #2
20000cfa:	18fb      	adds	r3, r7, r3
20000cfc:	681b      	ldr	r3, [r3, #0]
20000cfe:	2b00      	cmp	r3, #0
20000d00:	d10c      	bne.n	20000d1c <main+0xb20>
					is_climbing = 1;
20000d02:	2301      	movs	r3, #1
20000d04:	22d1      	movs	r2, #209	; 0xd1
20000d06:	0092      	lsls	r2, r2, #2
20000d08:	18ba      	adds	r2, r7, r2
20000d0a:	6013      	str	r3, [r2, #0]
					player.xPos = 98;
20000d0c:	4b36      	ldr	r3, [pc, #216]	; (20000de8 <main+0xbec>)
20000d0e:	22d2      	movs	r2, #210	; 0xd2
20000d10:	0092      	lsls	r2, r2, #2
20000d12:	4694      	mov	ip, r2
20000d14:	44bc      	add	ip, r7
20000d16:	4463      	add	r3, ip
20000d18:	2262      	movs	r2, #98	; 0x62
20000d1a:	605a      	str	r2, [r3, #4]
				}
				last_climb_value = read_DIL_single(CLIMB_TRIGGER);
20000d1c:	2004      	movs	r0, #4
20000d1e:	f001 fda9 	bl	20002874 <read_DIL_single>
20000d22:	0002      	movs	r2, r0
20000d24:	4b2f      	ldr	r3, [pc, #188]	; (20000de4 <main+0xbe8>)
20000d26:	601a      	str	r2, [r3, #0]
				
				if(is_climbing) {
20000d28:	23d1      	movs	r3, #209	; 0xd1
20000d2a:	009b      	lsls	r3, r3, #2
20000d2c:	18fb      	adds	r3, r7, r3
20000d2e:	681b      	ldr	r3, [r3, #0]
20000d30:	2b00      	cmp	r3, #0
20000d32:	d05b      	beq.n	20000dec <main+0xbf0>
					gameObjectUpdate( &player );
20000d34:	23dc      	movs	r3, #220	; 0xdc
20000d36:	005b      	lsls	r3, r3, #1
20000d38:	18fb      	adds	r3, r7, r3
20000d3a:	0018      	movs	r0, r3
20000d3c:	f000 f922 	bl	20000f84 <gameObjectUpdate>
					if(player.yPos > 4) {
20000d40:	4b29      	ldr	r3, [pc, #164]	; (20000de8 <main+0xbec>)
20000d42:	22d2      	movs	r2, #210	; 0xd2
20000d44:	0092      	lsls	r2, r2, #2
20000d46:	4694      	mov	ip, r2
20000d48:	44bc      	add	ip, r7
20000d4a:	4463      	add	r3, ip
20000d4c:	689b      	ldr	r3, [r3, #8]
20000d4e:	2b04      	cmp	r3, #4
20000d50:	dd0f      	ble.n	20000d72 <main+0xb76>
						player.yPos--;
20000d52:	4b25      	ldr	r3, [pc, #148]	; (20000de8 <main+0xbec>)
20000d54:	22d2      	movs	r2, #210	; 0xd2
20000d56:	0092      	lsls	r2, r2, #2
20000d58:	4694      	mov	ip, r2
20000d5a:	44bc      	add	ip, r7
20000d5c:	4463      	add	r3, ip
20000d5e:	689b      	ldr	r3, [r3, #8]
20000d60:	1e5a      	subs	r2, r3, #1
20000d62:	4b21      	ldr	r3, [pc, #132]	; (20000de8 <main+0xbec>)
20000d64:	21d2      	movs	r1, #210	; 0xd2
20000d66:	0089      	lsls	r1, r1, #2
20000d68:	468c      	mov	ip, r1
20000d6a:	44bc      	add	ip, r7
20000d6c:	4463      	add	r3, ip
20000d6e:	609a      	str	r2, [r3, #8]
20000d70:	e048      	b.n	20000e04 <main+0xc08>
					} else {	//Stay at top level and disable climbing forever!
						player.yPos = 5;
20000d72:	4b1d      	ldr	r3, [pc, #116]	; (20000de8 <main+0xbec>)
20000d74:	22d2      	movs	r2, #210	; 0xd2
20000d76:	0092      	lsls	r2, r2, #2
20000d78:	4694      	mov	ip, r2
20000d7a:	44bc      	add	ip, r7
20000d7c:	4463      	add	r3, ip
20000d7e:	2205      	movs	r2, #5
20000d80:	609a      	str	r2, [r3, #8]
						player.xPos = 96;
20000d82:	4b19      	ldr	r3, [pc, #100]	; (20000de8 <main+0xbec>)
20000d84:	22d2      	movs	r2, #210	; 0xd2
20000d86:	0092      	lsls	r2, r2, #2
20000d88:	4694      	mov	ip, r2
20000d8a:	44bc      	add	ip, r7
20000d8c:	4463      	add	r3, ip
20000d8e:	2260      	movs	r2, #96	; 0x60
20000d90:	605a      	str	r2, [r3, #4]
						is_climbing = 0;
20000d92:	2300      	movs	r3, #0
20000d94:	22d1      	movs	r2, #209	; 0xd1
20000d96:	0092      	lsls	r2, r2, #2
20000d98:	18ba      	adds	r2, r7, r2
20000d9a:	6013      	str	r3, [r2, #0]
						has_climbed = 1;
20000d9c:	2301      	movs	r3, #1
20000d9e:	22d0      	movs	r2, #208	; 0xd0
20000da0:	0092      	lsls	r2, r2, #2
20000da2:	18ba      	adds	r2, r7, r2
20000da4:	6013      	str	r3, [r2, #0]
20000da6:	e02d      	b.n	20000e04 <main+0xc08>
20000da8:	20006c98 	mulcs	r0, r8, ip
20000dac:	20006c94 	mulcs	r0, r4, ip
20000db0:	20006c9c 	mulcs	r0, ip, ip
20000db4:	20003204 	andcs	r3, r0, r4, lsl #4
20000db8:	fffffcf4 			; <UNDEFINED> instruction: 0xfffffcf4
20000dbc:	fffffce0 			; <UNDEFINED> instruction: 0xfffffce0
20000dc0:	fffffcb8 			; <UNDEFINED> instruction: 0xfffffcb8
20000dc4:	fffffccc 			; <UNDEFINED> instruction: 0xfffffccc
20000dc8:	20006c90 	mulcs	r0, r0, ip
20000dcc:	200032dc 	ldrdcs	r3, [r0], -ip
20000dd0:	fffffe4c 			; <UNDEFINED> instruction: 0xfffffe4c
20000dd4:	fffffe28 			; <UNDEFINED> instruction: 0xfffffe28
20000dd8:	fffffde0 			; <UNDEFINED> instruction: 0xfffffde0
20000ddc:	fffffe04 			; <UNDEFINED> instruction: 0xfffffe04
20000de0:	fffffe94 			; <UNDEFINED> instruction: 0xfffffe94
20000de4:	20006ca0 	andcs	r6, r0, r0, lsr #25
20000de8:	fffffe70 			; <UNDEFINED> instruction: 0xfffffe70
					}
				} else {
					player.update(&player);
20000dec:	4b5b      	ldr	r3, [pc, #364]	; (20000f5c <main+0xd60>)
20000dee:	22d2      	movs	r2, #210	; 0xd2
20000df0:	0092      	lsls	r2, r2, #2
20000df2:	4694      	mov	ip, r2
20000df4:	44bc      	add	ip, r7
20000df6:	4463      	add	r3, ip
20000df8:	68db      	ldr	r3, [r3, #12]
20000dfa:	22dc      	movs	r2, #220	; 0xdc
20000dfc:	0052      	lsls	r2, r2, #1
20000dfe:	18ba      	adds	r2, r7, r2
20000e00:	0010      	movs	r0, r2
20000e02:	4798      	blx	r3
				}
				
				fire1_indoors.update(&fire1_indoors);
20000e04:	4b56      	ldr	r3, [pc, #344]	; (20000f60 <main+0xd64>)
20000e06:	22d2      	movs	r2, #210	; 0xd2
20000e08:	0092      	lsls	r2, r2, #2
20000e0a:	4694      	mov	ip, r2
20000e0c:	44bc      	add	ip, r7
20000e0e:	4463      	add	r3, ip
20000e10:	68db      	ldr	r3, [r3, #12]
20000e12:	1d7a      	adds	r2, r7, #5
20000e14:	32ff      	adds	r2, #255	; 0xff
20000e16:	0010      	movs	r0, r2
20000e18:	4798      	blx	r3
				
				static int distance_player_fire;
				distance_player_fire = (player.xPos + 9) - (fire1_indoors.xPos + 5);
20000e1a:	4b50      	ldr	r3, [pc, #320]	; (20000f5c <main+0xd60>)
20000e1c:	22d2      	movs	r2, #210	; 0xd2
20000e1e:	0092      	lsls	r2, r2, #2
20000e20:	4694      	mov	ip, r2
20000e22:	44bc      	add	ip, r7
20000e24:	4463      	add	r3, ip
20000e26:	685b      	ldr	r3, [r3, #4]
20000e28:	3309      	adds	r3, #9
20000e2a:	001a      	movs	r2, r3
20000e2c:	4b4c      	ldr	r3, [pc, #304]	; (20000f60 <main+0xd64>)
20000e2e:	21d2      	movs	r1, #210	; 0xd2
20000e30:	0089      	lsls	r1, r1, #2
20000e32:	468c      	mov	ip, r1
20000e34:	44bc      	add	ip, r7
20000e36:	4463      	add	r3, ip
20000e38:	685b      	ldr	r3, [r3, #4]
20000e3a:	3305      	adds	r3, #5
20000e3c:	1ad2      	subs	r2, r2, r3
20000e3e:	4b49      	ldr	r3, [pc, #292]	; (20000f64 <main+0xd68>)
20000e40:	601a      	str	r2, [r3, #0]
				if(player.yPos > (fire1_indoors.yPos - 18 + 4) && distance_player_fire < 5 && distance_player_fire > -5) {
20000e42:	4b46      	ldr	r3, [pc, #280]	; (20000f5c <main+0xd60>)
20000e44:	22d2      	movs	r2, #210	; 0xd2
20000e46:	0092      	lsls	r2, r2, #2
20000e48:	4694      	mov	ip, r2
20000e4a:	44bc      	add	ip, r7
20000e4c:	4463      	add	r3, ip
20000e4e:	689a      	ldr	r2, [r3, #8]
20000e50:	4b43      	ldr	r3, [pc, #268]	; (20000f60 <main+0xd64>)
20000e52:	21d2      	movs	r1, #210	; 0xd2
20000e54:	0089      	lsls	r1, r1, #2
20000e56:	468c      	mov	ip, r1
20000e58:	44bc      	add	ip, r7
20000e5a:	4463      	add	r3, ip
20000e5c:	689b      	ldr	r3, [r3, #8]
20000e5e:	3b0e      	subs	r3, #14
20000e60:	429a      	cmp	r2, r3
20000e62:	dd0c      	ble.n	20000e7e <main+0xc82>
20000e64:	4b3f      	ldr	r3, [pc, #252]	; (20000f64 <main+0xd68>)
20000e66:	681b      	ldr	r3, [r3, #0]
20000e68:	2b04      	cmp	r3, #4
20000e6a:	dc08      	bgt.n	20000e7e <main+0xc82>
20000e6c:	4b3d      	ldr	r3, [pc, #244]	; (20000f64 <main+0xd68>)
20000e6e:	681b      	ldr	r3, [r3, #0]
20000e70:	3304      	adds	r3, #4
20000e72:	db04      	blt.n	20000e7e <main+0xc82>
					game_over_adder = 100;
20000e74:	2364      	movs	r3, #100	; 0x64
20000e76:	22ce      	movs	r2, #206	; 0xce
20000e78:	0092      	lsls	r2, r2, #2
20000e7a:	18ba      	adds	r2, r7, r2
20000e7c:	6013      	str	r3, [r2, #0]
				}
				
				game_over += game_over_adder;
20000e7e:	23cf      	movs	r3, #207	; 0xcf
20000e80:	009b      	lsls	r3, r3, #2
20000e82:	18fb      	adds	r3, r7, r3
20000e84:	681a      	ldr	r2, [r3, #0]
20000e86:	23ce      	movs	r3, #206	; 0xce
20000e88:	009b      	lsls	r3, r3, #2
20000e8a:	18fb      	adds	r3, r7, r3
20000e8c:	681b      	ldr	r3, [r3, #0]
20000e8e:	18d3      	adds	r3, r2, r3
20000e90:	22cf      	movs	r2, #207	; 0xcf
20000e92:	0092      	lsls	r2, r2, #2
20000e94:	18ba      	adds	r2, r7, r2
20000e96:	6013      	str	r3, [r2, #0]
				if(game_over == 100) {
20000e98:	23cf      	movs	r3, #207	; 0xcf
20000e9a:	009b      	lsls	r3, r3, #2
20000e9c:	18fb      	adds	r3, r7, r3
20000e9e:	681b      	ldr	r3, [r3, #0]
20000ea0:	2b64      	cmp	r3, #100	; 0x64
20000ea2:	d158      	bne.n	20000f56 <main+0xd5a>
					current_screen = RESET_GAME;
20000ea4:	4b30      	ldr	r3, [pc, #192]	; (20000f68 <main+0xd6c>)
20000ea6:	220a      	movs	r2, #10
20000ea8:	601a      	str	r2, [r3, #0]
				}
				
				break;
20000eaa:	e054      	b.n	20000f56 <main+0xd5a>
				
			
			case RESET_GAME: //restart
				counter = 0;
20000eac:	4b2f      	ldr	r3, [pc, #188]	; (20000f6c <main+0xd70>)
20000eae:	2200      	movs	r2, #0
20000eb0:	601a      	str	r2, [r3, #0]
				current_screen = START_SCREEN;
20000eb2:	4b2d      	ldr	r3, [pc, #180]	; (20000f68 <main+0xd6c>)
20000eb4:	2201      	movs	r2, #1
20000eb6:	601a      	str	r2, [r3, #0]
				if(read_DIL() == 0) {
20000eb8:	f001 fccc 	bl	20002854 <read_DIL>
20000ebc:	1e03      	subs	r3, r0, #0
20000ebe:	d102      	bne.n	20000ec6 <main+0xcca>
					current_screen = SWITCH_LOCK; 
20000ec0:	4b29      	ldr	r3, [pc, #164]	; (20000f68 <main+0xd6c>)
20000ec2:	2200      	movs	r2, #0
20000ec4:	601a      	str	r2, [r3, #0]
				}
	
				is_climbing = 0;
20000ec6:	2300      	movs	r3, #0
20000ec8:	22d1      	movs	r2, #209	; 0xd1
20000eca:	0092      	lsls	r2, r2, #2
20000ecc:	18ba      	adds	r2, r7, r2
20000ece:	6013      	str	r3, [r2, #0]
				has_climbed = 0;
20000ed0:	2300      	movs	r3, #0
20000ed2:	22d0      	movs	r2, #208	; 0xd0
20000ed4:	0092      	lsls	r2, r2, #2
20000ed6:	18ba      	adds	r2, r7, r2
20000ed8:	6013      	str	r3, [r2, #0]
				game_over = 0;
20000eda:	2300      	movs	r3, #0
20000edc:	22cf      	movs	r2, #207	; 0xcf
20000ede:	0092      	lsls	r2, r2, #2
20000ee0:	18ba      	adds	r2, r7, r2
20000ee2:	6013      	str	r3, [r2, #0]
				game_over_adder = 0;
20000ee4:	2300      	movs	r3, #0
20000ee6:	22ce      	movs	r2, #206	; 0xce
20000ee8:	0092      	lsls	r2, r2, #2
20000eea:	18ba      	adds	r2, r7, r2
20000eec:	6013      	str	r3, [r2, #0]
				fire1_indoors.xPos = 40;		//FIRE1_INDO
20000eee:	4b1c      	ldr	r3, [pc, #112]	; (20000f60 <main+0xd64>)
20000ef0:	22d2      	movs	r2, #210	; 0xd2
20000ef2:	0092      	lsls	r2, r2, #2
20000ef4:	4694      	mov	ip, r2
20000ef6:	44bc      	add	ip, r7
20000ef8:	4463      	add	r3, ip
20000efa:	2228      	movs	r2, #40	; 0x28
20000efc:	605a      	str	r2, [r3, #4]
				fire1_indoors.yPos = 64-12-8;
20000efe:	4b18      	ldr	r3, [pc, #96]	; (20000f60 <main+0xd64>)
20000f00:	22d2      	movs	r2, #210	; 0xd2
20000f02:	0092      	lsls	r2, r2, #2
20000f04:	4694      	mov	ip, r2
20000f06:	44bc      	add	ip, r7
20000f08:	4463      	add	r3, ip
20000f0a:	222c      	movs	r2, #44	; 0x2c
20000f0c:	609a      	str	r2, [r3, #8]
				
				bird.xPos = 180;
20000f0e:	4b18      	ldr	r3, [pc, #96]	; (20000f70 <main+0xd74>)
20000f10:	22d2      	movs	r2, #210	; 0xd2
20000f12:	0092      	lsls	r2, r2, #2
20000f14:	4694      	mov	ip, r2
20000f16:	44bc      	add	ip, r7
20000f18:	4463      	add	r3, ip
20000f1a:	22b4      	movs	r2, #180	; 0xb4
20000f1c:	605a      	str	r2, [r3, #4]
				bird.yPos = 40;
20000f1e:	4b14      	ldr	r3, [pc, #80]	; (20000f70 <main+0xd74>)
20000f20:	22d2      	movs	r2, #210	; 0xd2
20000f22:	0092      	lsls	r2, r2, #2
20000f24:	4694      	mov	ip, r2
20000f26:	44bc      	add	ip, r7
20000f28:	4463      	add	r3, ip
20000f2a:	2228      	movs	r2, #40	; 0x28
20000f2c:	609a      	str	r2, [r3, #8]
				
				player.xPos = 3;
20000f2e:	4b0b      	ldr	r3, [pc, #44]	; (20000f5c <main+0xd60>)
20000f30:	22d2      	movs	r2, #210	; 0xd2
20000f32:	0092      	lsls	r2, r2, #2
20000f34:	4694      	mov	ip, r2
20000f36:	44bc      	add	ip, r7
20000f38:	4463      	add	r3, ip
20000f3a:	2203      	movs	r2, #3
20000f3c:	605a      	str	r2, [r3, #4]
				player.yPos = 64-18-7; //player position
20000f3e:	4b07      	ldr	r3, [pc, #28]	; (20000f5c <main+0xd60>)
20000f40:	22d2      	movs	r2, #210	; 0xd2
20000f42:	0092      	lsls	r2, r2, #2
20000f44:	4694      	mov	ip, r2
20000f46:	44bc      	add	ip, r7
20000f48:	4463      	add	r3, ip
20000f4a:	2227      	movs	r2, #39	; 0x27
20000f4c:	609a      	str	r2, [r3, #8]
				
				break;
20000f4e:	e003      	b.n	20000f58 <main+0xd5c>
				break;
20000f50:	46c0      	nop			; (mov r8, r8)
20000f52:	f7ff fbe9 	bl	20000728 <main+0x52c>
				break;
20000f56:	46c0      	nop			; (mov r8, r8)
		switch(current_screen) {
20000f58:	f7ff fbe6 	bl	20000728 <main+0x52c>
20000f5c:	fffffe70 			; <UNDEFINED> instruction: 0xfffffe70
20000f60:	fffffdbc 			; <UNDEFINED> instruction: 0xfffffdbc
20000f64:	20003208 	andcs	r3, r0, r8, lsl #4
20000f68:	20006c90 	mulcs	r0, r0, ip
20000f6c:	20003204 	andcs	r3, r0, r4, lsl #4
20000f70:	fffffe94 			; <UNDEFINED> instruction: 0xfffffe94

20000f74 <render>:
GameObject* gameObjects[100];
int nGameObjects = 0;


void render(GameObject* this)
{
20000f74:	b580      	push	{r7, lr}
20000f76:	b082      	sub	sp, #8
20000f78:	af00      	add	r7, sp, #0
20000f7a:	6078      	str	r0, [r7, #4]
    
}
20000f7c:	46c0      	nop			; (mov r8, r8)
20000f7e:	46bd      	mov	sp, r7
20000f80:	b002      	add	sp, #8
20000f82:	bd80      	pop	{r7, pc}

20000f84 <gameObjectUpdate>:

void gameObjectUpdate(GameObject *this) {
20000f84:	b580      	push	{r7, lr}
20000f86:	b082      	sub	sp, #8
20000f88:	af00      	add	r7, sp, #0
20000f8a:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
20000f8c:	687b      	ldr	r3, [r7, #4]
20000f8e:	6a1b      	ldr	r3, [r3, #32]
20000f90:	1c5a      	adds	r2, r3, #1
20000f92:	687b      	ldr	r3, [r7, #4]
20000f94:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
20000f96:	687b      	ldr	r3, [r7, #4]
20000f98:	6a1a      	ldr	r2, [r3, #32]
20000f9a:	687b      	ldr	r3, [r7, #4]
20000f9c:	69db      	ldr	r3, [r3, #28]
20000f9e:	429a      	cmp	r2, r3
20000fa0:	d10f      	bne.n	20000fc2 <gameObjectUpdate+0x3e>
		this->animation_counter = 0;
20000fa2:	687b      	ldr	r3, [r7, #4]
20000fa4:	2200      	movs	r2, #0
20000fa6:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20000fa8:	687b      	ldr	r3, [r7, #4]
20000faa:	695b      	ldr	r3, [r3, #20]
20000fac:	1c5a      	adds	r2, r3, #1
20000fae:	687b      	ldr	r3, [r7, #4]
20000fb0:	699b      	ldr	r3, [r3, #24]
20000fb2:	0019      	movs	r1, r3
20000fb4:	0010      	movs	r0, r2
20000fb6:	f002 f91f 	bl	200031f8 <__aeabi_idivmod>
20000fba:	000b      	movs	r3, r1
20000fbc:	001a      	movs	r2, r3
20000fbe:	687b      	ldr	r3, [r7, #4]
20000fc0:	615a      	str	r2, [r3, #20]
	}
}
20000fc2:	46c0      	nop			; (mov r8, r8)
20000fc4:	46bd      	mov	sp, r7
20000fc6:	b002      	add	sp, #8
20000fc8:	bd80      	pop	{r7, pc}
	...

20000fcc <initSprites>:
Image fire2Image;
Image fire3Image;
Image fire4Image;
Image fire5Image;
Image fireImages[5];
static void initSprites( void ) {	
20000fcc:	b580      	push	{r7, lr}
20000fce:	b08c      	sub	sp, #48	; 0x30
20000fd0:	af00      	add	r7, sp, #0
	sprite *pointer0 = &tempFireBlack;
20000fd2:	4b3e      	ldr	r3, [pc, #248]	; (200010cc <initSprites+0x100>)
20000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer0, fire_black_2_bits, fire1_gray_width, fire1_gray_height);
20000fd6:	493e      	ldr	r1, [pc, #248]	; (200010d0 <initSprites+0x104>)
20000fd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20000fda:	230c      	movs	r3, #12
20000fdc:	2208      	movs	r2, #8
20000fde:	f001 fc19 	bl	20002814 <load_sprite>
	fireBlack = pointer0;
20000fe2:	4b3c      	ldr	r3, [pc, #240]	; (200010d4 <initSprites+0x108>)
20000fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20000fe6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer1 = &tempFire1Gray;
20000fe8:	4b3b      	ldr	r3, [pc, #236]	; (200010d8 <initSprites+0x10c>)
20000fea:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer1, fire1_gray_bits, fire1_gray_width, fire1_gray_height);
20000fec:	493b      	ldr	r1, [pc, #236]	; (200010dc <initSprites+0x110>)
20000fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20000ff0:	230c      	movs	r3, #12
20000ff2:	2208      	movs	r2, #8
20000ff4:	f001 fc0e 	bl	20002814 <load_sprite>
	fire1Gray = pointer1;
20000ff8:	4b39      	ldr	r3, [pc, #228]	; (200010e0 <initSprites+0x114>)
20000ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
20000ffc:	601a      	str	r2, [r3, #0]

	sprite *pointer2 = &tempFire1Light;
20000ffe:	4b39      	ldr	r3, [pc, #228]	; (200010e4 <initSprites+0x118>)
20001000:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer2, fire1_light_bits, fire1_gray_width, fire1_gray_height);
20001002:	4939      	ldr	r1, [pc, #228]	; (200010e8 <initSprites+0x11c>)
20001004:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001006:	230c      	movs	r3, #12
20001008:	2208      	movs	r2, #8
2000100a:	f001 fc03 	bl	20002814 <load_sprite>
	fire1Light = pointer2;
2000100e:	4b37      	ldr	r3, [pc, #220]	; (200010ec <initSprites+0x120>)
20001010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001012:	601a      	str	r2, [r3, #0]

	sprite *pointer3 = &tempFire2Gray;
20001014:	4b36      	ldr	r3, [pc, #216]	; (200010f0 <initSprites+0x124>)
20001016:	623b      	str	r3, [r7, #32]
	load_sprite(pointer3, fire2_gray_bits, fire1_gray_width, fire1_gray_height);
20001018:	4936      	ldr	r1, [pc, #216]	; (200010f4 <initSprites+0x128>)
2000101a:	6a38      	ldr	r0, [r7, #32]
2000101c:	230c      	movs	r3, #12
2000101e:	2208      	movs	r2, #8
20001020:	f001 fbf8 	bl	20002814 <load_sprite>
	fire2Gray = pointer3;
20001024:	4b34      	ldr	r3, [pc, #208]	; (200010f8 <initSprites+0x12c>)
20001026:	6a3a      	ldr	r2, [r7, #32]
20001028:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempFire2Light;
2000102a:	4b34      	ldr	r3, [pc, #208]	; (200010fc <initSprites+0x130>)
2000102c:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer4, fire2_light_bits, fire1_gray_width, fire1_gray_height);
2000102e:	4934      	ldr	r1, [pc, #208]	; (20001100 <initSprites+0x134>)
20001030:	69f8      	ldr	r0, [r7, #28]
20001032:	230c      	movs	r3, #12
20001034:	2208      	movs	r2, #8
20001036:	f001 fbed 	bl	20002814 <load_sprite>
	fire2Light = pointer4;
2000103a:	4b32      	ldr	r3, [pc, #200]	; (20001104 <initSprites+0x138>)
2000103c:	69fa      	ldr	r2, [r7, #28]
2000103e:	601a      	str	r2, [r3, #0]

	sprite *pointer5 = &tempFire3Gray;
20001040:	4b31      	ldr	r3, [pc, #196]	; (20001108 <initSprites+0x13c>)
20001042:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer5, fire3_gray_bits, fire1_gray_width, fire1_gray_height);
20001044:	4931      	ldr	r1, [pc, #196]	; (2000110c <initSprites+0x140>)
20001046:	69b8      	ldr	r0, [r7, #24]
20001048:	230c      	movs	r3, #12
2000104a:	2208      	movs	r2, #8
2000104c:	f001 fbe2 	bl	20002814 <load_sprite>
	fire3Gray = pointer5;
20001050:	4b2f      	ldr	r3, [pc, #188]	; (20001110 <initSprites+0x144>)
20001052:	69ba      	ldr	r2, [r7, #24]
20001054:	601a      	str	r2, [r3, #0]

	sprite *pointer6 = &tempFire3Light;
20001056:	4b2f      	ldr	r3, [pc, #188]	; (20001114 <initSprites+0x148>)
20001058:	617b      	str	r3, [r7, #20]
	load_sprite(pointer6, fire3_light_bits, fire1_gray_width, fire1_gray_height);
2000105a:	492f      	ldr	r1, [pc, #188]	; (20001118 <initSprites+0x14c>)
2000105c:	6978      	ldr	r0, [r7, #20]
2000105e:	230c      	movs	r3, #12
20001060:	2208      	movs	r2, #8
20001062:	f001 fbd7 	bl	20002814 <load_sprite>
	fire3Light = pointer6;
20001066:	4b2d      	ldr	r3, [pc, #180]	; (2000111c <initSprites+0x150>)
20001068:	697a      	ldr	r2, [r7, #20]
2000106a:	601a      	str	r2, [r3, #0]

	sprite *pointer7 = &tempFire4Gray;
2000106c:	4b2c      	ldr	r3, [pc, #176]	; (20001120 <initSprites+0x154>)
2000106e:	613b      	str	r3, [r7, #16]
	load_sprite(pointer7, fire4_gray_bits, fire1_gray_width, fire1_gray_height);
20001070:	492c      	ldr	r1, [pc, #176]	; (20001124 <initSprites+0x158>)
20001072:	6938      	ldr	r0, [r7, #16]
20001074:	230c      	movs	r3, #12
20001076:	2208      	movs	r2, #8
20001078:	f001 fbcc 	bl	20002814 <load_sprite>
	fire4Gray = pointer7;
2000107c:	4b2a      	ldr	r3, [pc, #168]	; (20001128 <initSprites+0x15c>)
2000107e:	693a      	ldr	r2, [r7, #16]
20001080:	601a      	str	r2, [r3, #0]

	sprite *pointer8 = &tempFire4Light;
20001082:	4b2a      	ldr	r3, [pc, #168]	; (2000112c <initSprites+0x160>)
20001084:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer8, fire4_light_bits, fire1_gray_width, fire1_gray_height);
20001086:	492a      	ldr	r1, [pc, #168]	; (20001130 <initSprites+0x164>)
20001088:	68f8      	ldr	r0, [r7, #12]
2000108a:	230c      	movs	r3, #12
2000108c:	2208      	movs	r2, #8
2000108e:	f001 fbc1 	bl	20002814 <load_sprite>
	fire4Light = pointer8;
20001092:	4b28      	ldr	r3, [pc, #160]	; (20001134 <initSprites+0x168>)
20001094:	68fa      	ldr	r2, [r7, #12]
20001096:	601a      	str	r2, [r3, #0]

	sprite *pointer9 = &tempFire5Gray;
20001098:	4b27      	ldr	r3, [pc, #156]	; (20001138 <initSprites+0x16c>)
2000109a:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer9, fire5_gray_bits, fire1_gray_width, fire1_gray_height);
2000109c:	4927      	ldr	r1, [pc, #156]	; (2000113c <initSprites+0x170>)
2000109e:	68b8      	ldr	r0, [r7, #8]
200010a0:	230c      	movs	r3, #12
200010a2:	2208      	movs	r2, #8
200010a4:	f001 fbb6 	bl	20002814 <load_sprite>
	fire5Gray = pointer9;
200010a8:	4b25      	ldr	r3, [pc, #148]	; (20001140 <initSprites+0x174>)
200010aa:	68ba      	ldr	r2, [r7, #8]
200010ac:	601a      	str	r2, [r3, #0]

	sprite *pointer10 = &tempFire5Light;
200010ae:	4b25      	ldr	r3, [pc, #148]	; (20001144 <initSprites+0x178>)
200010b0:	607b      	str	r3, [r7, #4]
	load_sprite(pointer10, fire5_light_bits, fire1_gray_width, fire1_gray_height);
200010b2:	4925      	ldr	r1, [pc, #148]	; (20001148 <initSprites+0x17c>)
200010b4:	6878      	ldr	r0, [r7, #4]
200010b6:	230c      	movs	r3, #12
200010b8:	2208      	movs	r2, #8
200010ba:	f001 fbab 	bl	20002814 <load_sprite>
	fire5Light = pointer10;
200010be:	4b23      	ldr	r3, [pc, #140]	; (2000114c <initSprites+0x180>)
200010c0:	687a      	ldr	r2, [r7, #4]
200010c2:	601a      	str	r2, [r3, #0]
}
200010c4:	46c0      	nop			; (mov r8, r8)
200010c6:	46bd      	mov	sp, r7
200010c8:	b00c      	add	sp, #48	; 0x30
200010ca:	bd80      	pop	{r7, pc}
200010cc:	200034c0 	andcs	r3, r0, r0, asr #9
200010d0:	20006ca4 	andcs	r6, r0, r4, lsr #25
200010d4:	200035b8 			; <UNDEFINED> instruction: 0x200035b8
200010d8:	200035ac 	andcs	r3, r0, ip, lsr #11
200010dc:	20006cb0 			; <UNDEFINED> instruction: 0x20006cb0
200010e0:	200035d0 	ldrdcs	r3, [r0], -r0
200010e4:	20003588 	andcs	r3, r0, r8, lsl #11
200010e8:	20006cbc 			; <UNDEFINED> instruction: 0x20006cbc
200010ec:	20003488 	andcs	r3, r0, r8, lsl #9
200010f0:	200034b4 			; <UNDEFINED> instruction: 0x200034b4
200010f4:	20006cc8 	andcs	r6, r0, r8, asr #25
200010f8:	200035cc 	andcs	r3, r0, ip, asr #11
200010fc:	200035bc 			; <UNDEFINED> instruction: 0x200035bc
20001100:	20006cd4 	ldrdcs	r6, [r0], -r4
20001104:	200035a4 	andcs	r3, r0, r4, lsr #11
20001108:	2000356c 	andcs	r3, r0, ip, ror #10
2000110c:	20006ce0 	andcs	r6, r0, r0, ror #25
20001110:	20003498 	mulcs	r0, r8, r4
20001114:	2000348c 	andcs	r3, r0, ip, lsl #9
20001118:	20006cec 	andcs	r6, r0, ip, ror #25
2000111c:	200035c8 	andcs	r3, r0, r8, asr #11
20001120:	2000349c 	mulcs	r0, ip, r4
20001124:	20006cf8 	strdcs	r6, [r0], -r8
20001128:	20003584 	andcs	r3, r0, r4, lsl #11
2000112c:	200034d8 	ldrdcs	r3, [r0], -r8
20001130:	20006d04 	andcs	r6, r0, r4, lsl #26
20001134:	200034f0 	strdcs	r3, [r0], -r0
20001138:	20003560 	andcs	r3, r0, r0, ror #10
2000113c:	20006d10 	andcs	r6, r0, r0, lsl sp
20001140:	200035a0 	andcs	r3, r0, r0, lsr #11
20001144:	20003594 	mulcs	r0, r4, r5
20001148:	20006d1c 	andcs	r6, r0, ip, lsl sp
2000114c:	200035a8 	andcs	r3, r0, r8, lsr #11

20001150 <init_fire>:
	
void init_fire( GameObject *fireObj ) {
20001150:	b590      	push	{r4, r7, lr}
20001152:	b083      	sub	sp, #12
20001154:	af00      	add	r7, sp, #0
20001156:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001158:	4b30      	ldr	r3, [pc, #192]	; (2000121c <init_fire+0xcc>)
2000115a:	681b      	ldr	r3, [r3, #0]
2000115c:	2b00      	cmp	r3, #0
2000115e:	d049      	beq.n	200011f4 <init_fire+0xa4>
		initSprites();
20001160:	f7ff ff34 	bl	20000fcc <initSprites>
		firstTime = 0;			
20001164:	4b2d      	ldr	r3, [pc, #180]	; (2000121c <init_fire+0xcc>)
20001166:	2200      	movs	r2, #0
20001168:	601a      	str	r2, [r3, #0]

		fireImages[0] = fire1Image;
2000116a:	4b2d      	ldr	r3, [pc, #180]	; (20001220 <init_fire+0xd0>)
2000116c:	4a2d      	ldr	r2, [pc, #180]	; (20001224 <init_fire+0xd4>)
2000116e:	ca13      	ldmia	r2!, {r0, r1, r4}
20001170:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[1] = fire2Image;
20001172:	4b2b      	ldr	r3, [pc, #172]	; (20001220 <init_fire+0xd0>)
20001174:	4a2c      	ldr	r2, [pc, #176]	; (20001228 <init_fire+0xd8>)
20001176:	330c      	adds	r3, #12
20001178:	ca13      	ldmia	r2!, {r0, r1, r4}
2000117a:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[2] = fire3Image;
2000117c:	4b28      	ldr	r3, [pc, #160]	; (20001220 <init_fire+0xd0>)
2000117e:	4a2b      	ldr	r2, [pc, #172]	; (2000122c <init_fire+0xdc>)
20001180:	3318      	adds	r3, #24
20001182:	ca13      	ldmia	r2!, {r0, r1, r4}
20001184:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[3] = fire4Image;
20001186:	4b26      	ldr	r3, [pc, #152]	; (20001220 <init_fire+0xd0>)
20001188:	4a29      	ldr	r2, [pc, #164]	; (20001230 <init_fire+0xe0>)
2000118a:	3324      	adds	r3, #36	; 0x24
2000118c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000118e:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[4] = fire5Image;
20001190:	4b23      	ldr	r3, [pc, #140]	; (20001220 <init_fire+0xd0>)
20001192:	4a28      	ldr	r2, [pc, #160]	; (20001234 <init_fire+0xe4>)
20001194:	3330      	adds	r3, #48	; 0x30
20001196:	ca13      	ldmia	r2!, {r0, r1, r4}
20001198:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&fireImages[0], fire1Gray, fire1Light, fireBlack);
2000119a:	4b27      	ldr	r3, [pc, #156]	; (20001238 <init_fire+0xe8>)
2000119c:	6819      	ldr	r1, [r3, #0]
2000119e:	4b27      	ldr	r3, [pc, #156]	; (2000123c <init_fire+0xec>)
200011a0:	681a      	ldr	r2, [r3, #0]
200011a2:	4b27      	ldr	r3, [pc, #156]	; (20001240 <init_fire+0xf0>)
200011a4:	681b      	ldr	r3, [r3, #0]
200011a6:	481e      	ldr	r0, [pc, #120]	; (20001220 <init_fire+0xd0>)
200011a8:	f001 fb20 	bl	200027ec <load_image>
		load_image(&fireImages[1], fire2Gray, fire2Light, fireBlack);
200011ac:	4b25      	ldr	r3, [pc, #148]	; (20001244 <init_fire+0xf4>)
200011ae:	6819      	ldr	r1, [r3, #0]
200011b0:	4b25      	ldr	r3, [pc, #148]	; (20001248 <init_fire+0xf8>)
200011b2:	681a      	ldr	r2, [r3, #0]
200011b4:	4b22      	ldr	r3, [pc, #136]	; (20001240 <init_fire+0xf0>)
200011b6:	681b      	ldr	r3, [r3, #0]
200011b8:	4824      	ldr	r0, [pc, #144]	; (2000124c <init_fire+0xfc>)
200011ba:	f001 fb17 	bl	200027ec <load_image>
		load_image(&fireImages[2], fire3Gray, fire3Light, fireBlack);
200011be:	4b24      	ldr	r3, [pc, #144]	; (20001250 <init_fire+0x100>)
200011c0:	6819      	ldr	r1, [r3, #0]
200011c2:	4b24      	ldr	r3, [pc, #144]	; (20001254 <init_fire+0x104>)
200011c4:	681a      	ldr	r2, [r3, #0]
200011c6:	4b1e      	ldr	r3, [pc, #120]	; (20001240 <init_fire+0xf0>)
200011c8:	681b      	ldr	r3, [r3, #0]
200011ca:	4823      	ldr	r0, [pc, #140]	; (20001258 <init_fire+0x108>)
200011cc:	f001 fb0e 	bl	200027ec <load_image>
		load_image(&fireImages[3], fire4Gray, fire4Light, fireBlack);
200011d0:	4b22      	ldr	r3, [pc, #136]	; (2000125c <init_fire+0x10c>)
200011d2:	6819      	ldr	r1, [r3, #0]
200011d4:	4b22      	ldr	r3, [pc, #136]	; (20001260 <init_fire+0x110>)
200011d6:	681a      	ldr	r2, [r3, #0]
200011d8:	4b19      	ldr	r3, [pc, #100]	; (20001240 <init_fire+0xf0>)
200011da:	681b      	ldr	r3, [r3, #0]
200011dc:	4821      	ldr	r0, [pc, #132]	; (20001264 <init_fire+0x114>)
200011de:	f001 fb05 	bl	200027ec <load_image>
		load_image(&fireImages[4], fire5Gray, fire5Light, fireBlack);
200011e2:	4b21      	ldr	r3, [pc, #132]	; (20001268 <init_fire+0x118>)
200011e4:	6819      	ldr	r1, [r3, #0]
200011e6:	4b21      	ldr	r3, [pc, #132]	; (2000126c <init_fire+0x11c>)
200011e8:	681a      	ldr	r2, [r3, #0]
200011ea:	4b15      	ldr	r3, [pc, #84]	; (20001240 <init_fire+0xf0>)
200011ec:	681b      	ldr	r3, [r3, #0]
200011ee:	4820      	ldr	r0, [pc, #128]	; (20001270 <init_fire+0x120>)
200011f0:	f001 fafc 	bl	200027ec <load_image>
	}
	
	fireObj->images = fireImages;
200011f4:	687b      	ldr	r3, [r7, #4]
200011f6:	4a0a      	ldr	r2, [pc, #40]	; (20001220 <init_fire+0xd0>)
200011f8:	601a      	str	r2, [r3, #0]

	fireObj->current_frame = 0;
200011fa:	687b      	ldr	r3, [r7, #4]
200011fc:	2200      	movs	r2, #0
200011fe:	615a      	str	r2, [r3, #20]
	fireObj->n_frames = 5;
20001200:	687b      	ldr	r3, [r7, #4]
20001202:	2205      	movs	r2, #5
20001204:	619a      	str	r2, [r3, #24]
	fireObj->animation_speed = 1;
20001206:	687b      	ldr	r3, [r7, #4]
20001208:	2201      	movs	r2, #1
2000120a:	61da      	str	r2, [r3, #28]
	fireObj->animation_counter = 0;
2000120c:	687b      	ldr	r3, [r7, #4]
2000120e:	2200      	movs	r2, #0
20001210:	621a      	str	r2, [r3, #32]
}
20001212:	46c0      	nop			; (mov r8, r8)
20001214:	46bd      	mov	sp, r7
20001216:	b003      	add	sp, #12
20001218:	bd90      	pop	{r4, r7, pc}
2000121a:	46c0      	nop			; (mov r8, r8)
2000121c:	20006d28 	andcs	r6, r0, r8, lsr #26
20001220:	20003524 	andcs	r3, r0, r4, lsr #10
20001224:	200034e4 	andcs	r3, r0, r4, ror #9
20001228:	200034a8 	andcs	r3, r0, r8, lsr #9
2000122c:	200034cc 	andcs	r3, r0, ip, asr #9
20001230:	20003578 	andcs	r3, r0, r8, ror r5
20001234:	20003518 	andcs	r3, r0, r8, lsl r5
20001238:	200035d0 	ldrdcs	r3, [r0], -r0
2000123c:	20003488 	andcs	r3, r0, r8, lsl #9
20001240:	200035b8 			; <UNDEFINED> instruction: 0x200035b8
20001244:	200035cc 	andcs	r3, r0, ip, asr #11
20001248:	200035a4 	andcs	r3, r0, r4, lsr #11
2000124c:	20003530 	andcs	r3, r0, r0, lsr r5
20001250:	20003498 	mulcs	r0, r8, r4
20001254:	200035c8 	andcs	r3, r0, r8, asr #11
20001258:	2000353c 	andcs	r3, r0, ip, lsr r5
2000125c:	20003584 	andcs	r3, r0, r4, lsl #11
20001260:	200034f0 	strdcs	r3, [r0], -r0
20001264:	20003548 	andcs	r3, r0, r8, asr #10
20001268:	200035a0 	andcs	r3, r0, r0, lsr #11
2000126c:	200035a8 	andcs	r3, r0, r8, lsr #11
20001270:	20003554 	andcs	r3, r0, r4, asr r5

20001274 <playerUpdate>:
#include "gpio.h"
#include "controls.h"
#include "gameobject.h"
#include "player.h"

void playerUpdate(GameObject *this) {
20001274:	b580      	push	{r7, lr}
20001276:	b082      	sub	sp, #8
20001278:	af00      	add	r7, sp, #0
2000127a:	6078      	str	r0, [r7, #4]
	
	// Animate
	this->animation_counter++;
2000127c:	687b      	ldr	r3, [r7, #4]
2000127e:	6a1b      	ldr	r3, [r3, #32]
20001280:	1c5a      	adds	r2, r3, #1
20001282:	687b      	ldr	r3, [r7, #4]
20001284:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
20001286:	687b      	ldr	r3, [r7, #4]
20001288:	6a1a      	ldr	r2, [r3, #32]
2000128a:	687b      	ldr	r3, [r7, #4]
2000128c:	69db      	ldr	r3, [r3, #28]
2000128e:	429a      	cmp	r2, r3
20001290:	d10f      	bne.n	200012b2 <playerUpdate+0x3e>
		this->animation_counter = 0;
20001292:	687b      	ldr	r3, [r7, #4]
20001294:	2200      	movs	r2, #0
20001296:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20001298:	687b      	ldr	r3, [r7, #4]
2000129a:	695b      	ldr	r3, [r3, #20]
2000129c:	1c5a      	adds	r2, r3, #1
2000129e:	687b      	ldr	r3, [r7, #4]
200012a0:	699b      	ldr	r3, [r3, #24]
200012a2:	0019      	movs	r1, r3
200012a4:	0010      	movs	r0, r2
200012a6:	f001 ffa7 	bl	200031f8 <__aeabi_idivmod>
200012aa:	000b      	movs	r3, r1
200012ac:	001a      	movs	r2, r3
200012ae:	687b      	ldr	r3, [r7, #4]
200012b0:	615a      	str	r2, [r3, #20]
	static xSpeed = 0;
	static ySpeed = 0;
	
	// Y position changes
	
	if (lastJumpValue != read_DIL_single(JUMP_TRIGGER) && (this->yPos == LIMIT_DOWN || this->yPos == PLATFORM_Y - PLAYER_HEIGHT)){
200012b2:	2005      	movs	r0, #5
200012b4:	f001 fade 	bl	20002874 <read_DIL_single>
200012b8:	0002      	movs	r2, r0
200012ba:	4b4f      	ldr	r3, [pc, #316]	; (200013f8 <playerUpdate+0x184>)
200012bc:	681b      	ldr	r3, [r3, #0]
200012be:	429a      	cmp	r2, r3
200012c0:	d00b      	beq.n	200012da <playerUpdate+0x66>
200012c2:	687b      	ldr	r3, [r7, #4]
200012c4:	689b      	ldr	r3, [r3, #8]
200012c6:	2b27      	cmp	r3, #39	; 0x27
200012c8:	d003      	beq.n	200012d2 <playerUpdate+0x5e>
200012ca:	687b      	ldr	r3, [r7, #4]
200012cc:	689b      	ldr	r3, [r3, #8]
200012ce:	2b04      	cmp	r3, #4
200012d0:	d103      	bne.n	200012da <playerUpdate+0x66>
		ySpeed = -(SPEED_ADD_Y);
200012d2:	4b4a      	ldr	r3, [pc, #296]	; (200013fc <playerUpdate+0x188>)
200012d4:	2204      	movs	r2, #4
200012d6:	4252      	negs	r2, r2
200012d8:	601a      	str	r2, [r3, #0]
	}
	
	if (this->yPos + ySpeed > LIMIT_DOWN){
200012da:	687b      	ldr	r3, [r7, #4]
200012dc:	689a      	ldr	r2, [r3, #8]
200012de:	4b47      	ldr	r3, [pc, #284]	; (200013fc <playerUpdate+0x188>)
200012e0:	681b      	ldr	r3, [r3, #0]
200012e2:	18d3      	adds	r3, r2, r3
200012e4:	2b27      	cmp	r3, #39	; 0x27
200012e6:	dd06      	ble.n	200012f6 <playerUpdate+0x82>
		this->yPos = LIMIT_DOWN;
200012e8:	687b      	ldr	r3, [r7, #4]
200012ea:	2227      	movs	r2, #39	; 0x27
200012ec:	609a      	str	r2, [r3, #8]
		ySpeed = 0;
200012ee:	4b43      	ldr	r3, [pc, #268]	; (200013fc <playerUpdate+0x188>)
200012f0:	2200      	movs	r2, #0
200012f2:	601a      	str	r2, [r3, #0]
200012f4:	e020      	b.n	20001338 <playerUpdate+0xc4>
	}
	else if (this->yPos + ySpeed > PLATFORM_Y - PLAYER_HEIGHT && this->yPos + ySpeed < PLATFORM_Y - PLAYER_HEIGHT + SPEED_ADD_Y){
200012f6:	687b      	ldr	r3, [r7, #4]
200012f8:	689a      	ldr	r2, [r3, #8]
200012fa:	4b40      	ldr	r3, [pc, #256]	; (200013fc <playerUpdate+0x188>)
200012fc:	681b      	ldr	r3, [r3, #0]
200012fe:	18d3      	adds	r3, r2, r3
20001300:	2b04      	cmp	r3, #4
20001302:	dd0d      	ble.n	20001320 <playerUpdate+0xac>
20001304:	687b      	ldr	r3, [r7, #4]
20001306:	689a      	ldr	r2, [r3, #8]
20001308:	4b3c      	ldr	r3, [pc, #240]	; (200013fc <playerUpdate+0x188>)
2000130a:	681b      	ldr	r3, [r3, #0]
2000130c:	18d3      	adds	r3, r2, r3
2000130e:	2b07      	cmp	r3, #7
20001310:	dc06      	bgt.n	20001320 <playerUpdate+0xac>
		this->yPos = PLATFORM_Y - PLAYER_HEIGHT;
20001312:	687b      	ldr	r3, [r7, #4]
20001314:	2204      	movs	r2, #4
20001316:	609a      	str	r2, [r3, #8]
		ySpeed = 0;
20001318:	4b38      	ldr	r3, [pc, #224]	; (200013fc <playerUpdate+0x188>)
2000131a:	2200      	movs	r2, #0
2000131c:	601a      	str	r2, [r3, #0]
2000131e:	e00b      	b.n	20001338 <playerUpdate+0xc4>
	}
	else{
		this->yPos+=ySpeed;
20001320:	687b      	ldr	r3, [r7, #4]
20001322:	689a      	ldr	r2, [r3, #8]
20001324:	4b35      	ldr	r3, [pc, #212]	; (200013fc <playerUpdate+0x188>)
20001326:	681b      	ldr	r3, [r3, #0]
20001328:	18d2      	adds	r2, r2, r3
2000132a:	687b      	ldr	r3, [r7, #4]
2000132c:	609a      	str	r2, [r3, #8]
		ySpeed++;
2000132e:	4b33      	ldr	r3, [pc, #204]	; (200013fc <playerUpdate+0x188>)
20001330:	681b      	ldr	r3, [r3, #0]
20001332:	1c5a      	adds	r2, r3, #1
20001334:	4b31      	ldr	r3, [pc, #196]	; (200013fc <playerUpdate+0x188>)
20001336:	601a      	str	r2, [r3, #0]
	
	
	
	// X position changes
	
	if (!lastRightValue && read_DIL_single(RIGHT_TRIGGER)){
20001338:	4b31      	ldr	r3, [pc, #196]	; (20001400 <playerUpdate+0x18c>)
2000133a:	681b      	ldr	r3, [r3, #0]
2000133c:	2b00      	cmp	r3, #0
2000133e:	d109      	bne.n	20001354 <playerUpdate+0xe0>
20001340:	2000      	movs	r0, #0
20001342:	f001 fa97 	bl	20002874 <read_DIL_single>
20001346:	1e03      	subs	r3, r0, #0
20001348:	d004      	beq.n	20001354 <playerUpdate+0xe0>
		xSpeed += SPEED_ADD_X;
2000134a:	4b2e      	ldr	r3, [pc, #184]	; (20001404 <playerUpdate+0x190>)
2000134c:	681b      	ldr	r3, [r3, #0]
2000134e:	1cda      	adds	r2, r3, #3
20001350:	4b2c      	ldr	r3, [pc, #176]	; (20001404 <playerUpdate+0x190>)
20001352:	601a      	str	r2, [r3, #0]
	}
	
	if (!lastLeftValue && read_DIL_single(LEFT_TRIGGER)){
20001354:	4b2c      	ldr	r3, [pc, #176]	; (20001408 <playerUpdate+0x194>)
20001356:	681b      	ldr	r3, [r3, #0]
20001358:	2b00      	cmp	r3, #0
2000135a:	d109      	bne.n	20001370 <playerUpdate+0xfc>
2000135c:	2007      	movs	r0, #7
2000135e:	f001 fa89 	bl	20002874 <read_DIL_single>
20001362:	1e03      	subs	r3, r0, #0
20001364:	d004      	beq.n	20001370 <playerUpdate+0xfc>
		xSpeed -= SPEED_ADD_X;
20001366:	4b27      	ldr	r3, [pc, #156]	; (20001404 <playerUpdate+0x190>)
20001368:	681b      	ldr	r3, [r3, #0]
2000136a:	1eda      	subs	r2, r3, #3
2000136c:	4b25      	ldr	r3, [pc, #148]	; (20001404 <playerUpdate+0x190>)
2000136e:	601a      	str	r2, [r3, #0]
	}
	
	if (this->xPos + xSpeed > LIMIT_RIGHT || this->xPos + xSpeed < LIMIT_LEFT){
20001370:	687b      	ldr	r3, [r7, #4]
20001372:	685a      	ldr	r2, [r3, #4]
20001374:	4b23      	ldr	r3, [pc, #140]	; (20001404 <playerUpdate+0x190>)
20001376:	681b      	ldr	r3, [r3, #0]
20001378:	18d3      	adds	r3, r2, r3
2000137a:	2b6e      	cmp	r3, #110	; 0x6e
2000137c:	dc06      	bgt.n	2000138c <playerUpdate+0x118>
2000137e:	687b      	ldr	r3, [r7, #4]
20001380:	685a      	ldr	r2, [r3, #4]
20001382:	4b20      	ldr	r3, [pc, #128]	; (20001404 <playerUpdate+0x190>)
20001384:	681b      	ldr	r3, [r3, #0]
20001386:	18d3      	adds	r3, r2, r3
20001388:	2b00      	cmp	r3, #0
2000138a:	da04      	bge.n	20001396 <playerUpdate+0x122>
		xSpeed *= -1;	
2000138c:	4b1d      	ldr	r3, [pc, #116]	; (20001404 <playerUpdate+0x190>)
2000138e:	681b      	ldr	r3, [r3, #0]
20001390:	425a      	negs	r2, r3
20001392:	4b1c      	ldr	r3, [pc, #112]	; (20001404 <playerUpdate+0x190>)
20001394:	601a      	str	r2, [r3, #0]
	}
	
	this->xPos += xSpeed;	
20001396:	687b      	ldr	r3, [r7, #4]
20001398:	685a      	ldr	r2, [r3, #4]
2000139a:	4b1a      	ldr	r3, [pc, #104]	; (20001404 <playerUpdate+0x190>)
2000139c:	681b      	ldr	r3, [r3, #0]
2000139e:	18d2      	adds	r2, r2, r3
200013a0:	687b      	ldr	r3, [r7, #4]
200013a2:	605a      	str	r2, [r3, #4]
	
	if (xSpeed > 0){
200013a4:	4b17      	ldr	r3, [pc, #92]	; (20001404 <playerUpdate+0x190>)
200013a6:	681b      	ldr	r3, [r3, #0]
200013a8:	2b00      	cmp	r3, #0
200013aa:	dd05      	ble.n	200013b8 <playerUpdate+0x144>
		xSpeed--;
200013ac:	4b15      	ldr	r3, [pc, #84]	; (20001404 <playerUpdate+0x190>)
200013ae:	681b      	ldr	r3, [r3, #0]
200013b0:	1e5a      	subs	r2, r3, #1
200013b2:	4b14      	ldr	r3, [pc, #80]	; (20001404 <playerUpdate+0x190>)
200013b4:	601a      	str	r2, [r3, #0]
200013b6:	e008      	b.n	200013ca <playerUpdate+0x156>
	}
	else if (xSpeed < 0){
200013b8:	4b12      	ldr	r3, [pc, #72]	; (20001404 <playerUpdate+0x190>)
200013ba:	681b      	ldr	r3, [r3, #0]
200013bc:	2b00      	cmp	r3, #0
200013be:	da04      	bge.n	200013ca <playerUpdate+0x156>
		xSpeed++;
200013c0:	4b10      	ldr	r3, [pc, #64]	; (20001404 <playerUpdate+0x190>)
200013c2:	681b      	ldr	r3, [r3, #0]
200013c4:	1c5a      	adds	r2, r3, #1
200013c6:	4b0f      	ldr	r3, [pc, #60]	; (20001404 <playerUpdate+0x190>)
200013c8:	601a      	str	r2, [r3, #0]
	}
	
	// Prepare values
	lastRightValue = read_DIL_single(RIGHT_TRIGGER);
200013ca:	2000      	movs	r0, #0
200013cc:	f001 fa52 	bl	20002874 <read_DIL_single>
200013d0:	0002      	movs	r2, r0
200013d2:	4b0b      	ldr	r3, [pc, #44]	; (20001400 <playerUpdate+0x18c>)
200013d4:	601a      	str	r2, [r3, #0]
	lastLeftValue = read_DIL_single(LEFT_TRIGGER);
200013d6:	2007      	movs	r0, #7
200013d8:	f001 fa4c 	bl	20002874 <read_DIL_single>
200013dc:	0002      	movs	r2, r0
200013de:	4b0a      	ldr	r3, [pc, #40]	; (20001408 <playerUpdate+0x194>)
200013e0:	601a      	str	r2, [r3, #0]
	lastJumpValue = read_DIL_single(JUMP_TRIGGER);
200013e2:	2005      	movs	r0, #5
200013e4:	f001 fa46 	bl	20002874 <read_DIL_single>
200013e8:	0002      	movs	r2, r0
200013ea:	4b03      	ldr	r3, [pc, #12]	; (200013f8 <playerUpdate+0x184>)
200013ec:	601a      	str	r2, [r3, #0]
	
200013ee:	46c0      	nop			; (mov r8, r8)
200013f0:	46bd      	mov	sp, r7
200013f2:	b002      	add	sp, #8
200013f4:	bd80      	pop	{r7, pc}
200013f6:	46c0      	nop			; (mov r8, r8)
200013f8:	20003210 	andcs	r3, r0, r0, lsl r2
200013fc:	20003214 	andcs	r3, r0, r4, lsl r2
20001400:	20003218 	andcs	r3, r0, r8, lsl r2
20001404:	2000321c 	andcs	r3, r0, ip, lsl r2
20001408:	20003220 	andcs	r3, r0, r0, lsr #4

2000140c <initSprites>:
Image bird5Image;
Image bird6Image;
//Image bird7Image;
//Image bird8Image;
Image birdImages[6];
static void initSprites( void ) {	
2000140c:	b580      	push	{r7, lr}
2000140e:	b090      	sub	sp, #64	; 0x40
20001410:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempBirdLight;
20001412:	4b54      	ldr	r3, [pc, #336]	; (20001564 <initSprites+0x158>)
20001414:	63fb      	str	r3, [r7, #60]	; 0x3c
	load_sprite(pointer11, bird1_light_bits, bird1_black_width, bird1_black_height);
20001416:	4954      	ldr	r1, [pc, #336]	; (20001568 <initSprites+0x15c>)
20001418:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
2000141a:	2319      	movs	r3, #25
2000141c:	2219      	movs	r2, #25
2000141e:	f001 f9f9 	bl	20002814 <load_sprite>
	bird1Light = pointer11;
20001422:	4b52      	ldr	r3, [pc, #328]	; (2000156c <initSprites+0x160>)
20001424:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20001426:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempBirdGray;
20001428:	4b51      	ldr	r3, [pc, #324]	; (20001570 <initSprites+0x164>)
2000142a:	63bb      	str	r3, [r7, #56]	; 0x38
	load_sprite(pointer12, bird1_gray_bits, bird1_black_width, bird1_black_height);
2000142c:	4951      	ldr	r1, [pc, #324]	; (20001574 <initSprites+0x168>)
2000142e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20001430:	2319      	movs	r3, #25
20001432:	2219      	movs	r2, #25
20001434:	f001 f9ee 	bl	20002814 <load_sprite>
	bird1Gray = pointer12;
20001438:	4b4f      	ldr	r3, [pc, #316]	; (20001578 <initSprites+0x16c>)
2000143a:	6bba      	ldr	r2, [r7, #56]	; 0x38
2000143c:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempBirdBlack;
2000143e:	4b4f      	ldr	r3, [pc, #316]	; (2000157c <initSprites+0x170>)
20001440:	637b      	str	r3, [r7, #52]	; 0x34
	load_sprite(pointer13, bird1_black_bits, bird1_black_width, bird1_black_height);
20001442:	494f      	ldr	r1, [pc, #316]	; (20001580 <initSprites+0x174>)
20001444:	6b78      	ldr	r0, [r7, #52]	; 0x34
20001446:	2319      	movs	r3, #25
20001448:	2219      	movs	r2, #25
2000144a:	f001 f9e3 	bl	20002814 <load_sprite>
	bird1Black = pointer13;	
2000144e:	4b4d      	ldr	r3, [pc, #308]	; (20001584 <initSprites+0x178>)
20001450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20001452:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempBird2Light;
20001454:	4b4c      	ldr	r3, [pc, #304]	; (20001588 <initSprites+0x17c>)
20001456:	633b      	str	r3, [r7, #48]	; 0x30
	load_sprite(pointer14, bird2_light_bits, bird2_black_width, bird2_black_height);
20001458:	494c      	ldr	r1, [pc, #304]	; (2000158c <initSprites+0x180>)
2000145a:	6b38      	ldr	r0, [r7, #48]	; 0x30
2000145c:	2319      	movs	r3, #25
2000145e:	2219      	movs	r2, #25
20001460:	f001 f9d8 	bl	20002814 <load_sprite>
	bird2Light = pointer14;
20001464:	4b4a      	ldr	r3, [pc, #296]	; (20001590 <initSprites+0x184>)
20001466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001468:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempBird2Gray;
2000146a:	4b4a      	ldr	r3, [pc, #296]	; (20001594 <initSprites+0x188>)
2000146c:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer15, bird2_gray_bits, bird2_black_width, bird2_black_height);
2000146e:	494a      	ldr	r1, [pc, #296]	; (20001598 <initSprites+0x18c>)
20001470:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001472:	2319      	movs	r3, #25
20001474:	2219      	movs	r2, #25
20001476:	f001 f9cd 	bl	20002814 <load_sprite>
	bird2Gray = pointer15;
2000147a:	4b48      	ldr	r3, [pc, #288]	; (2000159c <initSprites+0x190>)
2000147c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000147e:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempBird2Black;
20001480:	4b47      	ldr	r3, [pc, #284]	; (200015a0 <initSprites+0x194>)
20001482:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer16, bird2_black_bits, bird2_black_width, bird2_black_height);
20001484:	4947      	ldr	r1, [pc, #284]	; (200015a4 <initSprites+0x198>)
20001486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001488:	2319      	movs	r3, #25
2000148a:	2219      	movs	r2, #25
2000148c:	f001 f9c2 	bl	20002814 <load_sprite>
	bird2Black = pointer16;
20001490:	4b45      	ldr	r3, [pc, #276]	; (200015a8 <initSprites+0x19c>)
20001492:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001494:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempBird3Light;
20001496:	4b45      	ldr	r3, [pc, #276]	; (200015ac <initSprites+0x1a0>)
20001498:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(finalPointer, bird3_light_bits, bird3_black_width, bird3_black_height);
2000149a:	4945      	ldr	r1, [pc, #276]	; (200015b0 <initSprites+0x1a4>)
2000149c:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000149e:	2319      	movs	r3, #25
200014a0:	2219      	movs	r2, #25
200014a2:	f001 f9b7 	bl	20002814 <load_sprite>
	bird3Light = finalPointer;
200014a6:	4b43      	ldr	r3, [pc, #268]	; (200015b4 <initSprites+0x1a8>)
200014a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200014aa:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempBird3Gray;
200014ac:	4b42      	ldr	r3, [pc, #264]	; (200015b8 <initSprites+0x1ac>)
200014ae:	623b      	str	r3, [r7, #32]
	load_sprite(pointer17, bird3_gray_bits, bird3_black_width, bird3_black_height);
200014b0:	4942      	ldr	r1, [pc, #264]	; (200015bc <initSprites+0x1b0>)
200014b2:	6a38      	ldr	r0, [r7, #32]
200014b4:	2319      	movs	r3, #25
200014b6:	2219      	movs	r2, #25
200014b8:	f001 f9ac 	bl	20002814 <load_sprite>
	bird3Gray = pointer17;
200014bc:	4b40      	ldr	r3, [pc, #256]	; (200015c0 <initSprites+0x1b4>)
200014be:	6a3a      	ldr	r2, [r7, #32]
200014c0:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempBird3Black;
200014c2:	4b40      	ldr	r3, [pc, #256]	; (200015c4 <initSprites+0x1b8>)
200014c4:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer18, bird3_black_bits, bird3_black_width, bird3_black_height);
200014c6:	4940      	ldr	r1, [pc, #256]	; (200015c8 <initSprites+0x1bc>)
200014c8:	69f8      	ldr	r0, [r7, #28]
200014ca:	2319      	movs	r3, #25
200014cc:	2219      	movs	r2, #25
200014ce:	f001 f9a1 	bl	20002814 <load_sprite>
	bird3Black = pointer18;	
200014d2:	4b3e      	ldr	r3, [pc, #248]	; (200015cc <initSprites+0x1c0>)
200014d4:	69fa      	ldr	r2, [r7, #28]
200014d6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempBird4Light;
200014d8:	4b3d      	ldr	r3, [pc, #244]	; (200015d0 <initSprites+0x1c4>)
200014da:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer19, bird4_light_bits, bird4_black_width, bird4_black_height);
200014dc:	493d      	ldr	r1, [pc, #244]	; (200015d4 <initSprites+0x1c8>)
200014de:	69b8      	ldr	r0, [r7, #24]
200014e0:	2319      	movs	r3, #25
200014e2:	2219      	movs	r2, #25
200014e4:	f001 f996 	bl	20002814 <load_sprite>
	bird4Light = pointer19;
200014e8:	4b3b      	ldr	r3, [pc, #236]	; (200015d8 <initSprites+0x1cc>)
200014ea:	69ba      	ldr	r2, [r7, #24]
200014ec:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempBird4Gray;
200014ee:	4b3b      	ldr	r3, [pc, #236]	; (200015dc <initSprites+0x1d0>)
200014f0:	617b      	str	r3, [r7, #20]
	load_sprite(pointer20, bird4_gray_bits, bird4_black_width, bird4_black_height);
200014f2:	493b      	ldr	r1, [pc, #236]	; (200015e0 <initSprites+0x1d4>)
200014f4:	6978      	ldr	r0, [r7, #20]
200014f6:	2319      	movs	r3, #25
200014f8:	2219      	movs	r2, #25
200014fa:	f001 f98b 	bl	20002814 <load_sprite>
	bird4Gray = pointer20;
200014fe:	4b39      	ldr	r3, [pc, #228]	; (200015e4 <initSprites+0x1d8>)
20001500:	697a      	ldr	r2, [r7, #20]
20001502:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempBird4Black;
20001504:	4b38      	ldr	r3, [pc, #224]	; (200015e8 <initSprites+0x1dc>)
20001506:	613b      	str	r3, [r7, #16]
	load_sprite(pointer21, bird4_black_bits, bird4_black_width, bird4_black_height);
20001508:	4938      	ldr	r1, [pc, #224]	; (200015ec <initSprites+0x1e0>)
2000150a:	6938      	ldr	r0, [r7, #16]
2000150c:	2319      	movs	r3, #25
2000150e:	2219      	movs	r2, #25
20001510:	f001 f980 	bl	20002814 <load_sprite>
	bird4Black = pointer21;	
20001514:	4b36      	ldr	r3, [pc, #216]	; (200015f0 <initSprites+0x1e4>)
20001516:	693a      	ldr	r2, [r7, #16]
20001518:	601a      	str	r2, [r3, #0]
	
	sprite *pointer22 = &tempBird5Light;
2000151a:	4b36      	ldr	r3, [pc, #216]	; (200015f4 <initSprites+0x1e8>)
2000151c:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer22, bird5_light_bits, bird5_black_width, bird5_black_height);
2000151e:	4936      	ldr	r1, [pc, #216]	; (200015f8 <initSprites+0x1ec>)
20001520:	68f8      	ldr	r0, [r7, #12]
20001522:	2319      	movs	r3, #25
20001524:	2219      	movs	r2, #25
20001526:	f001 f975 	bl	20002814 <load_sprite>
	bird5Light = pointer22;
2000152a:	4b34      	ldr	r3, [pc, #208]	; (200015fc <initSprites+0x1f0>)
2000152c:	68fa      	ldr	r2, [r7, #12]
2000152e:	601a      	str	r2, [r3, #0]
	sprite *pointer23 = &tempBird5Gray;
20001530:	4b33      	ldr	r3, [pc, #204]	; (20001600 <initSprites+0x1f4>)
20001532:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer23, bird5_gray_bits, bird5_black_width, bird5_black_height);
20001534:	4933      	ldr	r1, [pc, #204]	; (20001604 <initSprites+0x1f8>)
20001536:	68b8      	ldr	r0, [r7, #8]
20001538:	2319      	movs	r3, #25
2000153a:	2219      	movs	r2, #25
2000153c:	f001 f96a 	bl	20002814 <load_sprite>
	bird5Gray = pointer23;
20001540:	4b31      	ldr	r3, [pc, #196]	; (20001608 <initSprites+0x1fc>)
20001542:	68ba      	ldr	r2, [r7, #8]
20001544:	601a      	str	r2, [r3, #0]
	sprite *pointer24 = &tempBird5Black;
20001546:	4b31      	ldr	r3, [pc, #196]	; (2000160c <initSprites+0x200>)
20001548:	607b      	str	r3, [r7, #4]
	load_sprite(pointer24, bird5_black_bits, bird5_black_width, bird5_black_height);
2000154a:	4931      	ldr	r1, [pc, #196]	; (20001610 <initSprites+0x204>)
2000154c:	6878      	ldr	r0, [r7, #4]
2000154e:	2319      	movs	r3, #25
20001550:	2219      	movs	r2, #25
20001552:	f001 f95f 	bl	20002814 <load_sprite>
	bird5Black = pointer24;
20001556:	4b2f      	ldr	r3, [pc, #188]	; (20001614 <initSprites+0x208>)
20001558:	687a      	ldr	r2, [r7, #4]
2000155a:	601a      	str	r2, [r3, #0]
}
2000155c:	46c0      	nop			; (mov r8, r8)
2000155e:	46bd      	mov	sp, r7
20001560:	b010      	add	sp, #64	; 0x40
20001562:	bd80      	pop	{r7, pc}
20001564:	200036c4 	andcs	r3, r0, r4, asr #13
20001568:	20006df4 	strdcs	r6, [r0], -r4
2000156c:	200036d0 	ldrdcs	r3, [r0], -r0
20001570:	20003660 	andcs	r3, r0, r0, ror #12
20001574:	20006d90 	mulcs	r0, r0, sp
20001578:	200035d8 	ldrdcs	r3, [r0], -r8
2000157c:	20003650 	andcs	r3, r0, r0, asr r6
20001580:	20006d2c 	andcs	r6, r0, ip, lsr #26
20001584:	20003640 	andcs	r3, r0, r0, asr #12
20001588:	200036d4 	ldrdcs	r3, [r0], -r4
2000158c:	20006f20 	andcs	r6, r0, r0, lsr #30
20001590:	20003774 	andcs	r3, r0, r4, ror r7
20001594:	2000367c 	andcs	r3, r0, ip, ror r6
20001598:	20006ebc 			; <UNDEFINED> instruction: 0x20006ebc
2000159c:	200036c0 	andcs	r3, r0, r0, asr #13
200015a0:	2000375c 	andcs	r3, r0, ip, asr r7
200015a4:	20006e58 	andcs	r6, r0, r8, asr lr
200015a8:	2000363c 	andcs	r3, r0, ip, lsr r6
200015ac:	200036f8 	strdcs	r3, [r0], -r8
200015b0:	2000704c 	andcs	r7, r0, ip, asr #32
200015b4:	20003688 	andcs	r3, r0, r8, lsl #13
200015b8:	20003704 	andcs	r3, r0, r4, lsl #14
200015bc:	20006fe8 	andcs	r6, r0, r8, ror #31
200015c0:	2000365c 	andcs	r3, r0, ip, asr r6
200015c4:	200036b4 			; <UNDEFINED> instruction: 0x200036b4
200015c8:	20006f84 	andcs	r6, r0, r4, lsl #31
200015cc:	20003634 	andcs	r3, r0, r4, lsr r6
200015d0:	200036ec 	andcs	r3, r0, ip, ror #13
200015d4:	20007178 	andcs	r7, r0, r8, ror r1
200015d8:	200035d4 	ldrdcs	r3, [r0], -r4
200015dc:	20003768 	andcs	r3, r0, r8, ror #14
200015e0:	20007114 	andcs	r7, r0, r4, lsl r1
200015e4:	20003638 	andcs	r3, r0, r8, lsr r6
200015e8:	200035ec 	andcs	r3, r0, ip, ror #11
200015ec:	200070b0 	strhcs	r7, [r0], -r0
200015f0:	20003758 	andcs	r3, r0, r8, asr r7
200015f4:	20003670 	andcs	r3, r0, r0, ror r6
200015f8:	200072a4 	andcs	r7, r0, r4, lsr #5
200015fc:	200036b0 			; <UNDEFINED> instruction: 0x200036b0
20001600:	2000368c 	andcs	r3, r0, ip, lsl #13
20001604:	20007240 	andcs	r7, r0, r0, asr #4
20001608:	2000366c 	andcs	r3, r0, ip, ror #12
2000160c:	20003698 	mulcs	r0, r8, r6
20001610:	200071dc 	ldrdcs	r7, [r0], -ip
20001614:	200035e8 	andcs	r3, r0, r8, ror #11

20001618 <init_bird>:
	
void init_bird( GameObject *birdObj ) {
20001618:	b590      	push	{r4, r7, lr}
2000161a:	b083      	sub	sp, #12
2000161c:	af00      	add	r7, sp, #0
2000161e:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001620:	4b37      	ldr	r3, [pc, #220]	; (20001700 <init_bird+0xe8>)
20001622:	681b      	ldr	r3, [r3, #0]
20001624:	2b00      	cmp	r3, #0
20001626:	d057      	beq.n	200016d8 <init_bird+0xc0>
		initSprites();
20001628:	f7ff fef0 	bl	2000140c <initSprites>
		firstTime = 0;			
2000162c:	4b34      	ldr	r3, [pc, #208]	; (20001700 <init_bird+0xe8>)
2000162e:	2200      	movs	r2, #0
20001630:	601a      	str	r2, [r3, #0]

		birdImages[0] = bird1Image;
20001632:	4b34      	ldr	r3, [pc, #208]	; (20001704 <init_bird+0xec>)
20001634:	4a34      	ldr	r2, [pc, #208]	; (20001708 <init_bird+0xf0>)
20001636:	ca13      	ldmia	r2!, {r0, r1, r4}
20001638:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[1] = bird2Image;
2000163a:	4b32      	ldr	r3, [pc, #200]	; (20001704 <init_bird+0xec>)
2000163c:	4a33      	ldr	r2, [pc, #204]	; (2000170c <init_bird+0xf4>)
2000163e:	330c      	adds	r3, #12
20001640:	ca13      	ldmia	r2!, {r0, r1, r4}
20001642:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[2] = bird3Image;
20001644:	4b2f      	ldr	r3, [pc, #188]	; (20001704 <init_bird+0xec>)
20001646:	4a32      	ldr	r2, [pc, #200]	; (20001710 <init_bird+0xf8>)
20001648:	3318      	adds	r3, #24
2000164a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000164c:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[3] = bird4Image;
2000164e:	4b2d      	ldr	r3, [pc, #180]	; (20001704 <init_bird+0xec>)
20001650:	4a30      	ldr	r2, [pc, #192]	; (20001714 <init_bird+0xfc>)
20001652:	3324      	adds	r3, #36	; 0x24
20001654:	ca13      	ldmia	r2!, {r0, r1, r4}
20001656:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[4] = bird5Image;
20001658:	4b2a      	ldr	r3, [pc, #168]	; (20001704 <init_bird+0xec>)
2000165a:	4a2f      	ldr	r2, [pc, #188]	; (20001718 <init_bird+0x100>)
2000165c:	3330      	adds	r3, #48	; 0x30
2000165e:	ca13      	ldmia	r2!, {r0, r1, r4}
20001660:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[5] = bird6Image;
20001662:	4b28      	ldr	r3, [pc, #160]	; (20001704 <init_bird+0xec>)
20001664:	4a2d      	ldr	r2, [pc, #180]	; (2000171c <init_bird+0x104>)
20001666:	333c      	adds	r3, #60	; 0x3c
20001668:	ca13      	ldmia	r2!, {r0, r1, r4}
2000166a:	c313      	stmia	r3!, {r0, r1, r4}
//		birdImages[6] = bird7Image;
		//birdImages[7] = bird8Image;
		
		load_image(&birdImages[0], bird1Black, bird1Gray, bird1Light);
2000166c:	4b2c      	ldr	r3, [pc, #176]	; (20001720 <init_bird+0x108>)
2000166e:	6819      	ldr	r1, [r3, #0]
20001670:	4b2c      	ldr	r3, [pc, #176]	; (20001724 <init_bird+0x10c>)
20001672:	681a      	ldr	r2, [r3, #0]
20001674:	4b2c      	ldr	r3, [pc, #176]	; (20001728 <init_bird+0x110>)
20001676:	681b      	ldr	r3, [r3, #0]
20001678:	4822      	ldr	r0, [pc, #136]	; (20001704 <init_bird+0xec>)
2000167a:	f001 f8b7 	bl	200027ec <load_image>
		load_image(&birdImages[1], bird2Black, bird2Gray, bird2Light);
2000167e:	4b2b      	ldr	r3, [pc, #172]	; (2000172c <init_bird+0x114>)
20001680:	6819      	ldr	r1, [r3, #0]
20001682:	4b2b      	ldr	r3, [pc, #172]	; (20001730 <init_bird+0x118>)
20001684:	681a      	ldr	r2, [r3, #0]
20001686:	4b2b      	ldr	r3, [pc, #172]	; (20001734 <init_bird+0x11c>)
20001688:	681b      	ldr	r3, [r3, #0]
2000168a:	482b      	ldr	r0, [pc, #172]	; (20001738 <init_bird+0x120>)
2000168c:	f001 f8ae 	bl	200027ec <load_image>
		load_image(&birdImages[2], bird3Black, bird3Gray, bird3Light);
20001690:	4b2a      	ldr	r3, [pc, #168]	; (2000173c <init_bird+0x124>)
20001692:	6819      	ldr	r1, [r3, #0]
20001694:	4b2a      	ldr	r3, [pc, #168]	; (20001740 <init_bird+0x128>)
20001696:	681a      	ldr	r2, [r3, #0]
20001698:	4b2a      	ldr	r3, [pc, #168]	; (20001744 <init_bird+0x12c>)
2000169a:	681b      	ldr	r3, [r3, #0]
2000169c:	482a      	ldr	r0, [pc, #168]	; (20001748 <init_bird+0x130>)
2000169e:	f001 f8a5 	bl	200027ec <load_image>
		load_image(&birdImages[3], bird4Black, bird4Gray, bird4Light);
200016a2:	4b2a      	ldr	r3, [pc, #168]	; (2000174c <init_bird+0x134>)
200016a4:	6819      	ldr	r1, [r3, #0]
200016a6:	4b2a      	ldr	r3, [pc, #168]	; (20001750 <init_bird+0x138>)
200016a8:	681a      	ldr	r2, [r3, #0]
200016aa:	4b2a      	ldr	r3, [pc, #168]	; (20001754 <init_bird+0x13c>)
200016ac:	681b      	ldr	r3, [r3, #0]
200016ae:	482a      	ldr	r0, [pc, #168]	; (20001758 <init_bird+0x140>)
200016b0:	f001 f89c 	bl	200027ec <load_image>
		load_image(&birdImages[4], bird5Black, bird5Gray, bird5Light);
200016b4:	4b29      	ldr	r3, [pc, #164]	; (2000175c <init_bird+0x144>)
200016b6:	6819      	ldr	r1, [r3, #0]
200016b8:	4b29      	ldr	r3, [pc, #164]	; (20001760 <init_bird+0x148>)
200016ba:	681a      	ldr	r2, [r3, #0]
200016bc:	4b29      	ldr	r3, [pc, #164]	; (20001764 <init_bird+0x14c>)
200016be:	681b      	ldr	r3, [r3, #0]
200016c0:	4829      	ldr	r0, [pc, #164]	; (20001768 <init_bird+0x150>)
200016c2:	f001 f893 	bl	200027ec <load_image>
		
		//load_image(&birdImages[7], bird2Black, bird2Gray, bird2Light);
		load_image(&birdImages[5], bird3Black, bird3Gray, bird3Light);
200016c6:	4b1d      	ldr	r3, [pc, #116]	; (2000173c <init_bird+0x124>)
200016c8:	6819      	ldr	r1, [r3, #0]
200016ca:	4b1d      	ldr	r3, [pc, #116]	; (20001740 <init_bird+0x128>)
200016cc:	681a      	ldr	r2, [r3, #0]
200016ce:	4b1d      	ldr	r3, [pc, #116]	; (20001744 <init_bird+0x12c>)
200016d0:	681b      	ldr	r3, [r3, #0]
200016d2:	4826      	ldr	r0, [pc, #152]	; (2000176c <init_bird+0x154>)
200016d4:	f001 f88a 	bl	200027ec <load_image>
		//load_image(&birdImages[5], bird4Black, bird4Gray, bird4Light);
	}
	
	birdObj->images = birdImages;
200016d8:	687b      	ldr	r3, [r7, #4]
200016da:	4a0a      	ldr	r2, [pc, #40]	; (20001704 <init_bird+0xec>)
200016dc:	601a      	str	r2, [r3, #0]

	birdObj->current_frame = 0;
200016de:	687b      	ldr	r3, [r7, #4]
200016e0:	2200      	movs	r2, #0
200016e2:	615a      	str	r2, [r3, #20]
	birdObj->n_frames = 6;
200016e4:	687b      	ldr	r3, [r7, #4]
200016e6:	2206      	movs	r2, #6
200016e8:	619a      	str	r2, [r3, #24]
	birdObj->animation_speed = 1;
200016ea:	687b      	ldr	r3, [r7, #4]
200016ec:	2201      	movs	r2, #1
200016ee:	61da      	str	r2, [r3, #28]
	birdObj->animation_counter = 0;
200016f0:	687b      	ldr	r3, [r7, #4]
200016f2:	2200      	movs	r2, #0
200016f4:	621a      	str	r2, [r3, #32]
}
200016f6:	46c0      	nop			; (mov r8, r8)
200016f8:	46bd      	mov	sp, r7
200016fa:	b003      	add	sp, #12
200016fc:	bd90      	pop	{r4, r7, pc}
200016fe:	46c0      	nop			; (mov r8, r8)
20001700:	20007308 	andcs	r7, r0, r8, lsl #6
20001704:	20003710 	andcs	r3, r0, r0, lsl r7
20001708:	20003628 	andcs	r3, r0, r8, lsr #12
2000170c:	200035f8 	strdcs	r3, [r0], -r8
20001710:	200036e0 	andcs	r3, r0, r0, ror #13
20001714:	20003644 	andcs	r3, r0, r4, asr #12
20001718:	200036a4 	andcs	r3, r0, r4, lsr #13
2000171c:	200035dc 	ldrdcs	r3, [r0], -ip
20001720:	20003640 	andcs	r3, r0, r0, asr #12
20001724:	200035d8 	ldrdcs	r3, [r0], -r8
20001728:	200036d0 	ldrdcs	r3, [r0], -r0
2000172c:	2000363c 	andcs	r3, r0, ip, lsr r6
20001730:	200036c0 	andcs	r3, r0, r0, asr #13
20001734:	20003774 	andcs	r3, r0, r4, ror r7
20001738:	2000371c 	andcs	r3, r0, ip, lsl r7
2000173c:	20003634 	andcs	r3, r0, r4, lsr r6
20001740:	2000365c 	andcs	r3, r0, ip, asr r6
20001744:	20003688 	andcs	r3, r0, r8, lsl #13
20001748:	20003728 	andcs	r3, r0, r8, lsr #14
2000174c:	20003758 	andcs	r3, r0, r8, asr r7
20001750:	20003638 	andcs	r3, r0, r8, lsr r6
20001754:	200035d4 	ldrdcs	r3, [r0], -r4
20001758:	20003734 	andcs	r3, r0, r4, lsr r7
2000175c:	200035e8 	andcs	r3, r0, r8, ror #11
20001760:	2000366c 	andcs	r3, r0, ip, ror #12
20001764:	200036b0 			; <UNDEFINED> instruction: 0x200036b0
20001768:	20003740 	andcs	r3, r0, r0, asr #14
2000176c:	2000374c 	andcs	r3, r0, ip, asr #14

20001770 <initSprites>:
Image witch1Image;
Image witch2Image;
Image witch3Image;
Image witch4Image;
Image witchImages[4];
static void initSprites( void ) {	
20001770:	b580      	push	{r7, lr}
20001772:	b08a      	sub	sp, #40	; 0x28
20001774:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempWitchLight;
20001776:	4b33      	ldr	r3, [pc, #204]	; (20001844 <initSprites+0xd4>)
20001778:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer11, witch1_light_bits, witch1_black_width, witch1_black_height);
2000177a:	4933      	ldr	r1, [pc, #204]	; (20001848 <initSprites+0xd8>)
2000177c:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000177e:	2312      	movs	r3, #18
20001780:	2212      	movs	r2, #18
20001782:	f001 f847 	bl	20002814 <load_sprite>
	witch1Light = pointer11;
20001786:	4b31      	ldr	r3, [pc, #196]	; (2000184c <initSprites+0xdc>)
20001788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000178a:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempWitchGray;
2000178c:	4b30      	ldr	r3, [pc, #192]	; (20001850 <initSprites+0xe0>)
2000178e:	623b      	str	r3, [r7, #32]
	load_sprite(pointer12, witch1_gray_bits, witch1_black_width, witch1_black_height);
20001790:	4930      	ldr	r1, [pc, #192]	; (20001854 <initSprites+0xe4>)
20001792:	6a38      	ldr	r0, [r7, #32]
20001794:	2312      	movs	r3, #18
20001796:	2212      	movs	r2, #18
20001798:	f001 f83c 	bl	20002814 <load_sprite>
	witch1Gray = pointer12;
2000179c:	4b2e      	ldr	r3, [pc, #184]	; (20001858 <initSprites+0xe8>)
2000179e:	6a3a      	ldr	r2, [r7, #32]
200017a0:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempWitchBlack;
200017a2:	4b2e      	ldr	r3, [pc, #184]	; (2000185c <initSprites+0xec>)
200017a4:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer13, witch1_black_bits, witch1_black_width, witch1_black_height);
200017a6:	492e      	ldr	r1, [pc, #184]	; (20001860 <initSprites+0xf0>)
200017a8:	69f8      	ldr	r0, [r7, #28]
200017aa:	2312      	movs	r3, #18
200017ac:	2212      	movs	r2, #18
200017ae:	f001 f831 	bl	20002814 <load_sprite>
	witch1Black = pointer13;	
200017b2:	4b2c      	ldr	r3, [pc, #176]	; (20001864 <initSprites+0xf4>)
200017b4:	69fa      	ldr	r2, [r7, #28]
200017b6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempWitch2Light;
200017b8:	4b2b      	ldr	r3, [pc, #172]	; (20001868 <initSprites+0xf8>)
200017ba:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer14, witch2_light_bits, witch2_black_width, witch2_black_height);
200017bc:	492b      	ldr	r1, [pc, #172]	; (2000186c <initSprites+0xfc>)
200017be:	69b8      	ldr	r0, [r7, #24]
200017c0:	2312      	movs	r3, #18
200017c2:	2212      	movs	r2, #18
200017c4:	f001 f826 	bl	20002814 <load_sprite>
	witch2Light = pointer14;
200017c8:	4b29      	ldr	r3, [pc, #164]	; (20001870 <initSprites+0x100>)
200017ca:	69ba      	ldr	r2, [r7, #24]
200017cc:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempWitch2Gray;
200017ce:	4b29      	ldr	r3, [pc, #164]	; (20001874 <initSprites+0x104>)
200017d0:	617b      	str	r3, [r7, #20]
	load_sprite(pointer15, witch2_gray_bits, witch2_black_width, witch2_black_height);
200017d2:	4929      	ldr	r1, [pc, #164]	; (20001878 <initSprites+0x108>)
200017d4:	6978      	ldr	r0, [r7, #20]
200017d6:	2312      	movs	r3, #18
200017d8:	2212      	movs	r2, #18
200017da:	f001 f81b 	bl	20002814 <load_sprite>
	witch2Gray = pointer15;
200017de:	4b27      	ldr	r3, [pc, #156]	; (2000187c <initSprites+0x10c>)
200017e0:	697a      	ldr	r2, [r7, #20]
200017e2:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempWitch2Black;
200017e4:	4b26      	ldr	r3, [pc, #152]	; (20001880 <initSprites+0x110>)
200017e6:	613b      	str	r3, [r7, #16]
	load_sprite(pointer16, witch2_black_bits, witch2_black_width, witch2_black_height);
200017e8:	4926      	ldr	r1, [pc, #152]	; (20001884 <initSprites+0x114>)
200017ea:	6938      	ldr	r0, [r7, #16]
200017ec:	2312      	movs	r3, #18
200017ee:	2212      	movs	r2, #18
200017f0:	f001 f810 	bl	20002814 <load_sprite>
	witch2Black = pointer16;
200017f4:	4b24      	ldr	r3, [pc, #144]	; (20001888 <initSprites+0x118>)
200017f6:	693a      	ldr	r2, [r7, #16]
200017f8:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempWitch3Light;
200017fa:	4b24      	ldr	r3, [pc, #144]	; (2000188c <initSprites+0x11c>)
200017fc:	60fb      	str	r3, [r7, #12]
	load_sprite(finalPointer, witch3_light_bits, witch3_black_width, witch3_black_height);
200017fe:	4924      	ldr	r1, [pc, #144]	; (20001890 <initSprites+0x120>)
20001800:	68f8      	ldr	r0, [r7, #12]
20001802:	2312      	movs	r3, #18
20001804:	2212      	movs	r2, #18
20001806:	f001 f805 	bl	20002814 <load_sprite>
	witch3Light = finalPointer;
2000180a:	4b22      	ldr	r3, [pc, #136]	; (20001894 <initSprites+0x124>)
2000180c:	68fa      	ldr	r2, [r7, #12]
2000180e:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempWitch3Gray;
20001810:	4b21      	ldr	r3, [pc, #132]	; (20001898 <initSprites+0x128>)
20001812:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer17, witch3_gray_bits, witch3_black_width, witch3_black_height);
20001814:	4921      	ldr	r1, [pc, #132]	; (2000189c <initSprites+0x12c>)
20001816:	68b8      	ldr	r0, [r7, #8]
20001818:	2312      	movs	r3, #18
2000181a:	2212      	movs	r2, #18
2000181c:	f000 fffa 	bl	20002814 <load_sprite>
	witch3Gray = pointer17;
20001820:	4b1f      	ldr	r3, [pc, #124]	; (200018a0 <initSprites+0x130>)
20001822:	68ba      	ldr	r2, [r7, #8]
20001824:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempWitch3Black;
20001826:	4b1f      	ldr	r3, [pc, #124]	; (200018a4 <initSprites+0x134>)
20001828:	607b      	str	r3, [r7, #4]
	load_sprite(pointer18, witch3_black_bits, witch3_black_width, witch3_black_height);
2000182a:	491f      	ldr	r1, [pc, #124]	; (200018a8 <initSprites+0x138>)
2000182c:	6878      	ldr	r0, [r7, #4]
2000182e:	2312      	movs	r3, #18
20001830:	2212      	movs	r2, #18
20001832:	f000 ffef 	bl	20002814 <load_sprite>
	witch3Black = pointer18;	
20001836:	4b1d      	ldr	r3, [pc, #116]	; (200018ac <initSprites+0x13c>)
20001838:	687a      	ldr	r2, [r7, #4]
2000183a:	601a      	str	r2, [r3, #0]
	
}
2000183c:	46c0      	nop			; (mov r8, r8)
2000183e:	46bd      	mov	sp, r7
20001840:	b00a      	add	sp, #40	; 0x28
20001842:	bd80      	pop	{r7, pc}
20001844:	20003860 	andcs	r3, r0, r0, ror #16
20001848:	2000737c 	andcs	r7, r0, ip, ror r3
2000184c:	20003878 	andcs	r3, r0, r8, ror r8
20001850:	200037f0 	strdcs	r3, [r0], -r0
20001854:	20007344 	andcs	r7, r0, r4, asr #6
20001858:	20003778 	andcs	r3, r0, r8, ror r7
2000185c:	200037c8 	andcs	r3, r0, r8, asr #15
20001860:	2000730c 	andcs	r7, r0, ip, lsl #6
20001864:	2000384c 	andcs	r3, r0, ip, asr #16
20001868:	2000386c 	andcs	r3, r0, ip, ror #16
2000186c:	20007424 	andcs	r7, r0, r4, lsr #8
20001870:	2000377c 	andcs	r3, r0, ip, ror r7
20001874:	20003808 	andcs	r3, r0, r8, lsl #16
20001878:	200073ec 	andcs	r7, r0, ip, ror #7
2000187c:	200037ec 	andcs	r3, r0, ip, ror #15
20001880:	200037bc 			; <UNDEFINED> instruction: 0x200037bc
20001884:	200073b4 			; <UNDEFINED> instruction: 0x200073b4
20001888:	20003888 	andcs	r3, r0, r8, lsl #17
2000188c:	200037d4 	ldrdcs	r3, [r0], -r4
20001890:	200074cc 	andcs	r7, r0, ip, asr #9
20001894:	2000383c 	andcs	r3, r0, ip, lsr r8
20001898:	20003840 	andcs	r3, r0, r0, asr #16
2000189c:	20007494 	mulcs	r0, r4, r4
200018a0:	20003850 	andcs	r3, r0, r0, asr r8
200018a4:	200037fc 	strdcs	r3, [r0], -ip
200018a8:	2000745c 	andcs	r7, r0, ip, asr r4
200018ac:	20003814 	andcs	r3, r0, r4, lsl r8

200018b0 <init_witch>:
	
void init_witch( GameObject *witchObj ) {
200018b0:	b590      	push	{r4, r7, lr}
200018b2:	b083      	sub	sp, #12
200018b4:	af00      	add	r7, sp, #0
200018b6:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
200018b8:	4b29      	ldr	r3, [pc, #164]	; (20001960 <init_witch+0xb0>)
200018ba:	681b      	ldr	r3, [r3, #0]
200018bc:	2b00      	cmp	r3, #0
200018be:	d03b      	beq.n	20001938 <init_witch+0x88>
		initSprites();
200018c0:	f7ff ff56 	bl	20001770 <initSprites>
		firstTime = 0;			
200018c4:	4b26      	ldr	r3, [pc, #152]	; (20001960 <init_witch+0xb0>)
200018c6:	2200      	movs	r2, #0
200018c8:	601a      	str	r2, [r3, #0]

		witchImages[0] = witch1Image;
200018ca:	4b26      	ldr	r3, [pc, #152]	; (20001964 <init_witch+0xb4>)
200018cc:	4a26      	ldr	r2, [pc, #152]	; (20001968 <init_witch+0xb8>)
200018ce:	ca13      	ldmia	r2!, {r0, r1, r4}
200018d0:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[1] = witch2Image;
200018d2:	4b24      	ldr	r3, [pc, #144]	; (20001964 <init_witch+0xb4>)
200018d4:	4a25      	ldr	r2, [pc, #148]	; (2000196c <init_witch+0xbc>)
200018d6:	330c      	adds	r3, #12
200018d8:	ca13      	ldmia	r2!, {r0, r1, r4}
200018da:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[2] = witch3Image;
200018dc:	4b21      	ldr	r3, [pc, #132]	; (20001964 <init_witch+0xb4>)
200018de:	4a24      	ldr	r2, [pc, #144]	; (20001970 <init_witch+0xc0>)
200018e0:	3318      	adds	r3, #24
200018e2:	ca13      	ldmia	r2!, {r0, r1, r4}
200018e4:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[3] = witch4Image;
200018e6:	4b1f      	ldr	r3, [pc, #124]	; (20001964 <init_witch+0xb4>)
200018e8:	4a22      	ldr	r2, [pc, #136]	; (20001974 <init_witch+0xc4>)
200018ea:	3324      	adds	r3, #36	; 0x24
200018ec:	ca13      	ldmia	r2!, {r0, r1, r4}
200018ee:	c313      	stmia	r3!, {r0, r1, r4}
		
		
		load_image(&witchImages[0], witch1Black, witch1Gray, witch1Light);
200018f0:	4b21      	ldr	r3, [pc, #132]	; (20001978 <init_witch+0xc8>)
200018f2:	6819      	ldr	r1, [r3, #0]
200018f4:	4b21      	ldr	r3, [pc, #132]	; (2000197c <init_witch+0xcc>)
200018f6:	681a      	ldr	r2, [r3, #0]
200018f8:	4b21      	ldr	r3, [pc, #132]	; (20001980 <init_witch+0xd0>)
200018fa:	681b      	ldr	r3, [r3, #0]
200018fc:	4819      	ldr	r0, [pc, #100]	; (20001964 <init_witch+0xb4>)
200018fe:	f000 ff75 	bl	200027ec <load_image>
		load_image(&witchImages[1], witch2Black, witch2Gray, witch2Light);
20001902:	4b20      	ldr	r3, [pc, #128]	; (20001984 <init_witch+0xd4>)
20001904:	6819      	ldr	r1, [r3, #0]
20001906:	4b20      	ldr	r3, [pc, #128]	; (20001988 <init_witch+0xd8>)
20001908:	681a      	ldr	r2, [r3, #0]
2000190a:	4b20      	ldr	r3, [pc, #128]	; (2000198c <init_witch+0xdc>)
2000190c:	681b      	ldr	r3, [r3, #0]
2000190e:	4820      	ldr	r0, [pc, #128]	; (20001990 <init_witch+0xe0>)
20001910:	f000 ff6c 	bl	200027ec <load_image>
		load_image(&witchImages[2], witch3Black, witch3Gray, witch3Light);
20001914:	4b1f      	ldr	r3, [pc, #124]	; (20001994 <init_witch+0xe4>)
20001916:	6819      	ldr	r1, [r3, #0]
20001918:	4b1f      	ldr	r3, [pc, #124]	; (20001998 <init_witch+0xe8>)
2000191a:	681a      	ldr	r2, [r3, #0]
2000191c:	4b1f      	ldr	r3, [pc, #124]	; (2000199c <init_witch+0xec>)
2000191e:	681b      	ldr	r3, [r3, #0]
20001920:	481f      	ldr	r0, [pc, #124]	; (200019a0 <init_witch+0xf0>)
20001922:	f000 ff63 	bl	200027ec <load_image>
		load_image(&witchImages[3], witch2Black, witch2Gray, witch2Light);
20001926:	4b17      	ldr	r3, [pc, #92]	; (20001984 <init_witch+0xd4>)
20001928:	6819      	ldr	r1, [r3, #0]
2000192a:	4b17      	ldr	r3, [pc, #92]	; (20001988 <init_witch+0xd8>)
2000192c:	681a      	ldr	r2, [r3, #0]
2000192e:	4b17      	ldr	r3, [pc, #92]	; (2000198c <init_witch+0xdc>)
20001930:	681b      	ldr	r3, [r3, #0]
20001932:	481c      	ldr	r0, [pc, #112]	; (200019a4 <init_witch+0xf4>)
20001934:	f000 ff5a 	bl	200027ec <load_image>
		
	}
	
	witchObj->images = witchImages;
20001938:	687b      	ldr	r3, [r7, #4]
2000193a:	4a0a      	ldr	r2, [pc, #40]	; (20001964 <init_witch+0xb4>)
2000193c:	601a      	str	r2, [r3, #0]

	witchObj->current_frame = 0;
2000193e:	687b      	ldr	r3, [r7, #4]
20001940:	2200      	movs	r2, #0
20001942:	615a      	str	r2, [r3, #20]
	witchObj->n_frames = 4;
20001944:	687b      	ldr	r3, [r7, #4]
20001946:	2204      	movs	r2, #4
20001948:	619a      	str	r2, [r3, #24]
	witchObj->animation_speed = 1;
2000194a:	687b      	ldr	r3, [r7, #4]
2000194c:	2201      	movs	r2, #1
2000194e:	61da      	str	r2, [r3, #28]
	witchObj->animation_counter = 0;
20001950:	687b      	ldr	r3, [r7, #4]
20001952:	2200      	movs	r2, #0
20001954:	621a      	str	r2, [r3, #32]
}
20001956:	46c0      	nop			; (mov r8, r8)
20001958:	46bd      	mov	sp, r7
2000195a:	b003      	add	sp, #12
2000195c:	bd90      	pop	{r4, r7, pc}
2000195e:	46c0      	nop			; (mov r8, r8)
20001960:	20007504 	andcs	r7, r0, r4, lsl #10
20001964:	20003780 	andcs	r3, r0, r0, lsl #15
20001968:	20003854 	andcs	r3, r0, r4, asr r8
2000196c:	200037b0 			; <UNDEFINED> instruction: 0x200037b0
20001970:	2000387c 	andcs	r3, r0, ip, ror r8
20001974:	200037e0 	andcs	r3, r0, r0, ror #15
20001978:	2000384c 	andcs	r3, r0, ip, asr #16
2000197c:	20003778 	andcs	r3, r0, r8, ror r7
20001980:	20003878 	andcs	r3, r0, r8, ror r8
20001984:	20003888 	andcs	r3, r0, r8, lsl #17
20001988:	200037ec 	andcs	r3, r0, ip, ror #15
2000198c:	2000377c 	andcs	r3, r0, ip, ror r7
20001990:	2000378c 	andcs	r3, r0, ip, lsl #15
20001994:	20003814 	andcs	r3, r0, r4, lsl r8
20001998:	20003850 	andcs	r3, r0, r0, asr r8
2000199c:	2000383c 	andcs	r3, r0, ip, lsr r8
200019a0:	20003798 	mulcs	r0, r8, r7
200019a4:	200037a4 	andcs	r3, r0, r4, lsr #15

200019a8 <delay_250ns>:
#include "graphics.h"


void delay_250ns(void){
200019a8:	b580      	push	{r7, lr}
200019aa:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
200019ac:	4b0c      	ldr	r3, [pc, #48]	; (200019e0 <delay_250ns+0x38>)
200019ae:	2200      	movs	r2, #0
200019b0:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1);
200019b2:	4b0c      	ldr	r3, [pc, #48]	; (200019e4 <delay_250ns+0x3c>)
200019b4:	2229      	movs	r2, #41	; 0x29
200019b6:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200019b8:	4b0b      	ldr	r3, [pc, #44]	; (200019e8 <delay_250ns+0x40>)
200019ba:	2200      	movs	r2, #0
200019bc:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200019be:	4b08      	ldr	r3, [pc, #32]	; (200019e0 <delay_250ns+0x38>)
200019c0:	2205      	movs	r2, #5
200019c2:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
200019c4:	46c0      	nop			; (mov r8, r8)
200019c6:	4b06      	ldr	r3, [pc, #24]	; (200019e0 <delay_250ns+0x38>)
200019c8:	681a      	ldr	r2, [r3, #0]
200019ca:	2380      	movs	r3, #128	; 0x80
200019cc:	025b      	lsls	r3, r3, #9
200019ce:	4013      	ands	r3, r2
200019d0:	d0f9      	beq.n	200019c6 <delay_250ns+0x1e>
	*STK_CTRL = 0;
200019d2:	4b03      	ldr	r3, [pc, #12]	; (200019e0 <delay_250ns+0x38>)
200019d4:	2200      	movs	r2, #0
200019d6:	601a      	str	r2, [r3, #0]
}
200019d8:	46c0      	nop			; (mov r8, r8)
200019da:	46bd      	mov	sp, r7
200019dc:	bd80      	pop	{r7, pc}
200019de:	46c0      	nop			; (mov r8, r8)
200019e0:	e000e010 	and	lr, r0, r0, lsl r0
200019e4:	e000e014 	and	lr, r0, r4, lsl r0
200019e8:	e000e018 	and	lr, r0, r8, lsl r0

200019ec <delay_500ns>:

void delay_500ns(void){
200019ec:	b580      	push	{r7, lr}
200019ee:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
200019f0:	4b0c      	ldr	r3, [pc, #48]	; (20001a24 <delay_500ns+0x38>)
200019f2:	2200      	movs	r2, #0
200019f4:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/2) -1);
200019f6:	4b0c      	ldr	r3, [pc, #48]	; (20001a28 <delay_500ns+0x3c>)
200019f8:	2253      	movs	r2, #83	; 0x53
200019fa:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200019fc:	4b0b      	ldr	r3, [pc, #44]	; (20001a2c <delay_500ns+0x40>)
200019fe:	2200      	movs	r2, #0
20001a00:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20001a02:	4b08      	ldr	r3, [pc, #32]	; (20001a24 <delay_500ns+0x38>)
20001a04:	2205      	movs	r2, #5
20001a06:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
20001a08:	46c0      	nop			; (mov r8, r8)
20001a0a:	4b06      	ldr	r3, [pc, #24]	; (20001a24 <delay_500ns+0x38>)
20001a0c:	681a      	ldr	r2, [r3, #0]
20001a0e:	2380      	movs	r3, #128	; 0x80
20001a10:	025b      	lsls	r3, r3, #9
20001a12:	4013      	ands	r3, r2
20001a14:	d0f9      	beq.n	20001a0a <delay_500ns+0x1e>
	*STK_CTRL = 0;
20001a16:	4b03      	ldr	r3, [pc, #12]	; (20001a24 <delay_500ns+0x38>)
20001a18:	2200      	movs	r2, #0
20001a1a:	601a      	str	r2, [r3, #0]
}
20001a1c:	46c0      	nop			; (mov r8, r8)
20001a1e:	46bd      	mov	sp, r7
20001a20:	bd80      	pop	{r7, pc}
20001a22:	46c0      	nop			; (mov r8, r8)
20001a24:	e000e010 	and	lr, r0, r0, lsl r0
20001a28:	e000e014 	and	lr, r0, r4, lsl r0
20001a2c:	e000e018 	and	lr, r0, r8, lsl r0

20001a30 <delay_micro>:

void delay_micro(unsigned int us){
20001a30:	b580      	push	{r7, lr}
20001a32:	b082      	sub	sp, #8
20001a34:	af00      	add	r7, sp, #0
20001a36:	6078      	str	r0, [r7, #4]
	while(us--) {
20001a38:	e007      	b.n	20001a4a <delay_micro+0x1a>
		delay_250ns();
20001a3a:	f7ff ffb5 	bl	200019a8 <delay_250ns>
		delay_250ns();
20001a3e:	f7ff ffb3 	bl	200019a8 <delay_250ns>
		delay_250ns();
20001a42:	f7ff ffb1 	bl	200019a8 <delay_250ns>
		delay_250ns();
20001a46:	f7ff ffaf 	bl	200019a8 <delay_250ns>
	while(us--) {
20001a4a:	687b      	ldr	r3, [r7, #4]
20001a4c:	1e5a      	subs	r2, r3, #1
20001a4e:	607a      	str	r2, [r7, #4]
20001a50:	2b00      	cmp	r3, #0
20001a52:	d1f2      	bne.n	20001a3a <delay_micro+0xa>
	}
}
20001a54:	46c0      	nop			; (mov r8, r8)
20001a56:	46bd      	mov	sp, r7
20001a58:	b002      	add	sp, #8
20001a5a:	bd80      	pop	{r7, pc}

20001a5c <delay_milli>:

void delay_milli(unsigned int ms){
20001a5c:	b580      	push	{r7, lr}
20001a5e:	b082      	sub	sp, #8
20001a60:	af00      	add	r7, sp, #0
20001a62:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		while(ms--)
			delay_micro(1);
	#else
		while(ms--)
20001a64:	e004      	b.n	20001a70 <delay_milli+0x14>
			delay_micro(1000);
20001a66:	23fa      	movs	r3, #250	; 0xfa
20001a68:	009b      	lsls	r3, r3, #2
20001a6a:	0018      	movs	r0, r3
20001a6c:	f7ff ffe0 	bl	20001a30 <delay_micro>
		while(ms--)
20001a70:	687b      	ldr	r3, [r7, #4]
20001a72:	1e5a      	subs	r2, r3, #1
20001a74:	607a      	str	r2, [r7, #4]
20001a76:	2b00      	cmp	r3, #0
20001a78:	d1f5      	bne.n	20001a66 <delay_milli+0xa>
	#endif
}
20001a7a:	46c0      	nop			; (mov r8, r8)
20001a7c:	46bd      	mov	sp, r7
20001a7e:	b002      	add	sp, #8
20001a80:	bd80      	pop	{r7, pc}

20001a82 <clear_thisBackBuffer>:
uint8_t draw_buffer_black_light[1024]; // 128 * 64 / 8
uint8_t draw_buffer_black_gray_light[1024]; // 128 * 64 / 8
uint8_t backBuffer[1024]; // 128 * 64 / 8
uint8_t backBufferGray[1024]; // 128 * 64 / 8
uint8_t backBufferLight[1024]; // 128 * 64 / 8
void clear_thisBackBuffer(uint8_t *buffer) {
20001a82:	b580      	push	{r7, lr}
20001a84:	b084      	sub	sp, #16
20001a86:	af00      	add	r7, sp, #0
20001a88:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < 1024; i++)
20001a8a:	2300      	movs	r3, #0
20001a8c:	60fb      	str	r3, [r7, #12]
20001a8e:	e007      	b.n	20001aa0 <clear_thisBackBuffer+0x1e>
		buffer[i] = 0;
20001a90:	68fb      	ldr	r3, [r7, #12]
20001a92:	687a      	ldr	r2, [r7, #4]
20001a94:	18d3      	adds	r3, r2, r3
20001a96:	2200      	movs	r2, #0
20001a98:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
20001a9a:	68fb      	ldr	r3, [r7, #12]
20001a9c:	3301      	adds	r3, #1
20001a9e:	60fb      	str	r3, [r7, #12]
20001aa0:	68fb      	ldr	r3, [r7, #12]
20001aa2:	4a03      	ldr	r2, [pc, #12]	; (20001ab0 <clear_thisBackBuffer+0x2e>)
20001aa4:	4293      	cmp	r3, r2
20001aa6:	ddf3      	ble.n	20001a90 <clear_thisBackBuffer+0xe>
}
20001aa8:	46c0      	nop			; (mov r8, r8)
20001aaa:	46bd      	mov	sp, r7
20001aac:	b004      	add	sp, #16
20001aae:	bd80      	pop	{r7, pc}
20001ab0:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20001ab4 <clear_backBuffer>:
void clear_backBuffer() {
20001ab4:	b580      	push	{r7, lr}
20001ab6:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20001ab8:	4b03      	ldr	r3, [pc, #12]	; (20001ac8 <clear_backBuffer+0x14>)
20001aba:	0018      	movs	r0, r3
20001abc:	f7ff ffe1 	bl	20001a82 <clear_thisBackBuffer>
}
20001ac0:	46c0      	nop			; (mov r8, r8)
20001ac2:	46bd      	mov	sp, r7
20001ac4:	bd80      	pop	{r7, pc}
20001ac6:	46c0      	nop			; (mov r8, r8)
20001ac8:	2000408c 	andcs	r4, r0, ip, lsl #1

20001acc <clear_all_backBuffers>:
void clear_all_backBuffers() {
20001acc:	b580      	push	{r7, lr}
20001ace:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20001ad0:	4b07      	ldr	r3, [pc, #28]	; (20001af0 <clear_all_backBuffers+0x24>)
20001ad2:	0018      	movs	r0, r3
20001ad4:	f7ff ffd5 	bl	20001a82 <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferGray);
20001ad8:	4b06      	ldr	r3, [pc, #24]	; (20001af4 <clear_all_backBuffers+0x28>)
20001ada:	0018      	movs	r0, r3
20001adc:	f7ff ffd1 	bl	20001a82 <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferLight);
20001ae0:	4b05      	ldr	r3, [pc, #20]	; (20001af8 <clear_all_backBuffers+0x2c>)
20001ae2:	0018      	movs	r0, r3
20001ae4:	f7ff ffcd 	bl	20001a82 <clear_thisBackBuffer>
}
20001ae8:	46c0      	nop			; (mov r8, r8)
20001aea:	46bd      	mov	sp, r7
20001aec:	bd80      	pop	{r7, pc}
20001aee:	46c0      	nop			; (mov r8, r8)
20001af0:	2000408c 	andcs	r4, r0, ip, lsl #1
20001af4:	2000388c 	andcs	r3, r0, ip, lsl #17
20001af8:	2000508c 	andcs	r5, r0, ip, lsl #1

20001afc <graphic_ctrl_bit_set>:

/* välj grafik-display och ettställ de bitar som är 1 i x */
static void graphic_ctrl_bit_set( uint8_t x) {
20001afc:	b580      	push	{r7, lr}
20001afe:	b084      	sub	sp, #16
20001b00:	af00      	add	r7, sp, #0
20001b02:	0002      	movs	r2, r0
20001b04:	1dfb      	adds	r3, r7, #7
20001b06:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20001b08:	4a0f      	ldr	r2, [pc, #60]	; (20001b48 <graphic_ctrl_bit_set+0x4c>)
20001b0a:	230f      	movs	r3, #15
20001b0c:	18fb      	adds	r3, r7, r3
20001b0e:	7812      	ldrb	r2, [r2, #0]
20001b10:	701a      	strb	r2, [r3, #0]
	c |= x;
20001b12:	230f      	movs	r3, #15
20001b14:	18fb      	adds	r3, r7, r3
20001b16:	220f      	movs	r2, #15
20001b18:	18b9      	adds	r1, r7, r2
20001b1a:	1dfa      	adds	r2, r7, #7
20001b1c:	7809      	ldrb	r1, [r1, #0]
20001b1e:	7812      	ldrb	r2, [r2, #0]
20001b20:	430a      	orrs	r2, r1
20001b22:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
20001b24:	230f      	movs	r3, #15
20001b26:	18fb      	adds	r3, r7, r3
20001b28:	220f      	movs	r2, #15
20001b2a:	18ba      	adds	r2, r7, r2
20001b2c:	7812      	ldrb	r2, [r2, #0]
20001b2e:	2104      	movs	r1, #4
20001b30:	438a      	bics	r2, r1
20001b32:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20001b34:	4a04      	ldr	r2, [pc, #16]	; (20001b48 <graphic_ctrl_bit_set+0x4c>)
20001b36:	230f      	movs	r3, #15
20001b38:	18fb      	adds	r3, r7, r3
20001b3a:	781b      	ldrb	r3, [r3, #0]
20001b3c:	7013      	strb	r3, [r2, #0]
}
20001b3e:	46c0      	nop			; (mov r8, r8)
20001b40:	46bd      	mov	sp, r7
20001b42:	b004      	add	sp, #16
20001b44:	bd80      	pop	{r7, pc}
20001b46:	46c0      	nop			; (mov r8, r8)
20001b48:	40021014 	andmi	r1, r2, r4, lsl r0

20001b4c <graphic_ctrl_bit_clear>:
/* välj grafik-display och nollställ de bitar som är 1 i x */
static void graphic_ctrl_bit_clear( uint8_t x) {
20001b4c:	b580      	push	{r7, lr}
20001b4e:	b084      	sub	sp, #16
20001b50:	af00      	add	r7, sp, #0
20001b52:	0002      	movs	r2, r0
20001b54:	1dfb      	adds	r3, r7, #7
20001b56:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20001b58:	4a11      	ldr	r2, [pc, #68]	; (20001ba0 <graphic_ctrl_bit_clear+0x54>)
20001b5a:	230f      	movs	r3, #15
20001b5c:	18fb      	adds	r3, r7, r3
20001b5e:	7812      	ldrb	r2, [r2, #0]
20001b60:	701a      	strb	r2, [r3, #0]
	c &= ~x;
20001b62:	1dfb      	adds	r3, r7, #7
20001b64:	781b      	ldrb	r3, [r3, #0]
20001b66:	b25b      	sxtb	r3, r3
20001b68:	43db      	mvns	r3, r3
20001b6a:	b25b      	sxtb	r3, r3
20001b6c:	220f      	movs	r2, #15
20001b6e:	18ba      	adds	r2, r7, r2
20001b70:	7812      	ldrb	r2, [r2, #0]
20001b72:	b252      	sxtb	r2, r2
20001b74:	4013      	ands	r3, r2
20001b76:	b25a      	sxtb	r2, r3
20001b78:	230f      	movs	r3, #15
20001b7a:	18fb      	adds	r3, r7, r3
20001b7c:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
20001b7e:	230f      	movs	r3, #15
20001b80:	18fb      	adds	r3, r7, r3
20001b82:	220f      	movs	r2, #15
20001b84:	18ba      	adds	r2, r7, r2
20001b86:	7812      	ldrb	r2, [r2, #0]
20001b88:	2104      	movs	r1, #4
20001b8a:	438a      	bics	r2, r1
20001b8c:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20001b8e:	4a04      	ldr	r2, [pc, #16]	; (20001ba0 <graphic_ctrl_bit_clear+0x54>)
20001b90:	230f      	movs	r3, #15
20001b92:	18fb      	adds	r3, r7, r3
20001b94:	781b      	ldrb	r3, [r3, #0]
20001b96:	7013      	strb	r3, [r2, #0]
}
20001b98:	46c0      	nop			; (mov r8, r8)
20001b9a:	46bd      	mov	sp, r7
20001b9c:	b004      	add	sp, #16
20001b9e:	bd80      	pop	{r7, pc}
20001ba0:	40021014 	andmi	r1, r2, r4, lsl r0

20001ba4 <select_controller>:
void select_controller( uint8_t controller) {
20001ba4:	b580      	push	{r7, lr}
20001ba6:	b082      	sub	sp, #8
20001ba8:	af00      	add	r7, sp, #0
20001baa:	0002      	movs	r2, r0
20001bac:	1dfb      	adds	r3, r7, #7
20001bae:	701a      	strb	r2, [r3, #0]
	switch (controller) {
20001bb0:	1dfb      	adds	r3, r7, #7
20001bb2:	781b      	ldrb	r3, [r3, #0]
20001bb4:	2b08      	cmp	r3, #8
20001bb6:	d00f      	beq.n	20001bd8 <select_controller+0x34>
20001bb8:	dc02      	bgt.n	20001bc0 <select_controller+0x1c>
20001bba:	2b00      	cmp	r3, #0
20001bbc:	d005      	beq.n	20001bca <select_controller+0x26>
		case (B_CS1|B_CS2): 
			graphic_ctrl_bit_set(B_CS1); 
			graphic_ctrl_bit_set(B_CS2); 
			break;
	}
}
20001bbe:	e020      	b.n	20001c02 <select_controller+0x5e>
	switch (controller) {
20001bc0:	2b10      	cmp	r3, #16
20001bc2:	d010      	beq.n	20001be6 <select_controller+0x42>
20001bc4:	2b18      	cmp	r3, #24
20001bc6:	d015      	beq.n	20001bf4 <select_controller+0x50>
}
20001bc8:	e01b      	b.n	20001c02 <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20001bca:	2008      	movs	r0, #8
20001bcc:	f7ff ffbe 	bl	20001b4c <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_clear(B_CS2); 
20001bd0:	2010      	movs	r0, #16
20001bd2:	f7ff ffbb 	bl	20001b4c <graphic_ctrl_bit_clear>
			break;
20001bd6:	e014      	b.n	20001c02 <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
20001bd8:	2008      	movs	r0, #8
20001bda:	f7ff ff8f 	bl	20001afc <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2); 
20001bde:	2010      	movs	r0, #16
20001be0:	f7ff ffb4 	bl	20001b4c <graphic_ctrl_bit_clear>
			break;
20001be4:	e00d      	b.n	20001c02 <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20001be6:	2008      	movs	r0, #8
20001be8:	f7ff ffb0 	bl	20001b4c <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2); 
20001bec:	2010      	movs	r0, #16
20001bee:	f7ff ff85 	bl	20001afc <graphic_ctrl_bit_set>
			break;
20001bf2:	e006      	b.n	20001c02 <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
20001bf4:	2008      	movs	r0, #8
20001bf6:	f7ff ff81 	bl	20001afc <graphic_ctrl_bit_set>
			graphic_ctrl_bit_set(B_CS2); 
20001bfa:	2010      	movs	r0, #16
20001bfc:	f7ff ff7e 	bl	20001afc <graphic_ctrl_bit_set>
			break;
20001c00:	46c0      	nop			; (mov r8, r8)
}
20001c02:	46c0      	nop			; (mov r8, r8)
20001c04:	46bd      	mov	sp, r7
20001c06:	b002      	add	sp, #8
20001c08:	bd80      	pop	{r7, pc}

20001c0a <graphic_wait_ready>:

void graphic_wait_ready( void ) {
20001c0a:	b580      	push	{r7, lr}
20001c0c:	b082      	sub	sp, #8
20001c0e:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20001c10:	2040      	movs	r0, #64	; 0x40
20001c12:	f7ff ff9b 	bl	20001b4c <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20001c16:	4b14      	ldr	r3, [pc, #80]	; (20001c68 <graphic_wait_ready+0x5e>)
20001c18:	4a14      	ldr	r2, [pc, #80]	; (20001c6c <graphic_wait_ready+0x62>)
20001c1a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20001c1c:	2001      	movs	r0, #1
20001c1e:	f7ff ff95 	bl	20001b4c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20001c22:	2002      	movs	r0, #2
20001c24:	f7ff ff6a 	bl	20001afc <graphic_ctrl_bit_set>
	delay_500ns();
20001c28:	f7ff fee0 	bl	200019ec <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
20001c2c:	2040      	movs	r0, #64	; 0x40
20001c2e:	f7ff ff65 	bl	20001afc <graphic_ctrl_bit_set>
		delay_500ns();
20001c32:	f7ff fedb 	bl	200019ec <delay_500ns>
		c = *portIdrHigh & LCD_BUSY; //...
20001c36:	4b0e      	ldr	r3, [pc, #56]	; (20001c70 <graphic_wait_ready+0x66>)
20001c38:	781b      	ldrb	r3, [r3, #0]
20001c3a:	b2da      	uxtb	r2, r3
20001c3c:	1dfb      	adds	r3, r7, #7
20001c3e:	217f      	movs	r1, #127	; 0x7f
20001c40:	438a      	bics	r2, r1
20001c42:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20001c44:	2040      	movs	r0, #64	; 0x40
20001c46:	f7ff ff81 	bl	20001b4c <graphic_ctrl_bit_clear>
		delay_500ns();
20001c4a:	f7ff fecf 	bl	200019ec <delay_500ns>
		/*if (*portIdrHigh & 0x80 == 0x80) {
			break; }*/
		if (c == 0) break;
20001c4e:	1dfb      	adds	r3, r7, #7
20001c50:	781b      	ldrb	r3, [r3, #0]
20001c52:	2b00      	cmp	r3, #0
20001c54:	d000      	beq.n	20001c58 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
20001c56:	e7e9      	b.n	20001c2c <graphic_wait_ready+0x22>
		if (c == 0) break;
20001c58:	46c0      	nop			; (mov r8, r8)
	}
	//graphic_ctrl_bit_set(B_E); //<--
	*portModer = 0x55555555;	
20001c5a:	4b03      	ldr	r3, [pc, #12]	; (20001c68 <graphic_wait_ready+0x5e>)
20001c5c:	4a05      	ldr	r2, [pc, #20]	; (20001c74 <graphic_wait_ready+0x6a>)
20001c5e:	601a      	str	r2, [r3, #0]
}
20001c60:	46c0      	nop			; (mov r8, r8)
20001c62:	46bd      	mov	sp, r7
20001c64:	b002      	add	sp, #8
20001c66:	bd80      	pop	{r7, pc}
20001c68:	40021000 	andmi	r1, r2, r0
20001c6c:	00005555 	andeq	r5, r0, r5, asr r5
20001c70:	40021011 	andmi	r1, r2, r1, lsl r0
20001c74:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20001c78 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20001c78:	b580      	push	{r7, lr}
20001c7a:	b084      	sub	sp, #16
20001c7c:	af00      	add	r7, sp, #0
20001c7e:	0002      	movs	r2, r0
20001c80:	1dfb      	adds	r3, r7, #7
20001c82:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001c84:	2040      	movs	r0, #64	; 0x40
20001c86:	f7ff ff61 	bl	20001b4c <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20001c8a:	4b1c      	ldr	r3, [pc, #112]	; (20001cfc <graphic_read+0x84>)
20001c8c:	4a1c      	ldr	r2, [pc, #112]	; (20001d00 <graphic_read+0x88>)
20001c8e:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
20001c90:	2001      	movs	r0, #1
20001c92:	f7ff ff33 	bl	20001afc <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW);
20001c96:	2002      	movs	r0, #2
20001c98:	f7ff ff30 	bl	20001afc <graphic_ctrl_bit_set>
	select_controller(controller);
20001c9c:	1dfb      	adds	r3, r7, #7
20001c9e:	781b      	ldrb	r3, [r3, #0]
20001ca0:	0018      	movs	r0, r3
20001ca2:	f7ff ff7f 	bl	20001ba4 <select_controller>
	delay_500ns();
20001ca6:	f7ff fea1 	bl	200019ec <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20001caa:	2040      	movs	r0, #64	; 0x40
20001cac:	f7ff ff26 	bl	20001afc <graphic_ctrl_bit_set>
	delay_500ns();
20001cb0:	f7ff fe9c 	bl	200019ec <delay_500ns>
	unsigned char rv = *portIdrHigh;
20001cb4:	4a13      	ldr	r2, [pc, #76]	; (20001d04 <graphic_read+0x8c>)
20001cb6:	230f      	movs	r3, #15
20001cb8:	18fb      	adds	r3, r7, r3
20001cba:	7812      	ldrb	r2, [r2, #0]
20001cbc:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001cbe:	2040      	movs	r0, #64	; 0x40
20001cc0:	f7ff ff44 	bl	20001b4c <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
20001cc4:	4b0d      	ldr	r3, [pc, #52]	; (20001cfc <graphic_read+0x84>)
20001cc6:	4a10      	ldr	r2, [pc, #64]	; (20001d08 <graphic_read+0x90>)
20001cc8:	601a      	str	r2, [r3, #0]
	
	if(controller == B_CS1) {
20001cca:	1dfb      	adds	r3, r7, #7
20001ccc:	781b      	ldrb	r3, [r3, #0]
20001cce:	2b08      	cmp	r3, #8
20001cd0:	d104      	bne.n	20001cdc <graphic_read+0x64>
		select_controller(B_CS1);
20001cd2:	2008      	movs	r0, #8
20001cd4:	f7ff ff66 	bl	20001ba4 <select_controller>
		graphic_wait_ready();
20001cd8:	f7ff ff97 	bl	20001c0a <graphic_wait_ready>
	}
	if(controller == B_CS2) {
20001cdc:	1dfb      	adds	r3, r7, #7
20001cde:	781b      	ldrb	r3, [r3, #0]
20001ce0:	2b10      	cmp	r3, #16
20001ce2:	d104      	bne.n	20001cee <graphic_read+0x76>
		select_controller(B_CS2);
20001ce4:	2010      	movs	r0, #16
20001ce6:	f7ff ff5d 	bl	20001ba4 <select_controller>
		graphic_wait_ready();
20001cea:	f7ff ff8e 	bl	20001c0a <graphic_wait_ready>
	}
	
	return rv;
20001cee:	230f      	movs	r3, #15
20001cf0:	18fb      	adds	r3, r7, r3
20001cf2:	781b      	ldrb	r3, [r3, #0]
}
20001cf4:	0018      	movs	r0, r3
20001cf6:	46bd      	mov	sp, r7
20001cf8:	b004      	add	sp, #16
20001cfa:	bd80      	pop	{r7, pc}
20001cfc:	40021000 	andmi	r1, r2, r0
20001d00:	00005555 	andeq	r5, r0, r5, asr r5
20001d04:	40021011 	andmi	r1, r2, r1, lsl r0
20001d08:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20001d0c <graphic_read_data>:

graphic_read_data(uint8_t controller) {
20001d0c:	b580      	push	{r7, lr}
20001d0e:	b082      	sub	sp, #8
20001d10:	af00      	add	r7, sp, #0
20001d12:	0002      	movs	r2, r0
20001d14:	1dfb      	adds	r3, r7, #7
20001d16:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
20001d18:	1dfb      	adds	r3, r7, #7
20001d1a:	781b      	ldrb	r3, [r3, #0]
20001d1c:	0018      	movs	r0, r3
20001d1e:	f7ff ffab 	bl	20001c78 <graphic_read>
	graphic_read(controller);
20001d22:	1dfb      	adds	r3, r7, #7
20001d24:	781b      	ldrb	r3, [r3, #0]
20001d26:	0018      	movs	r0, r3
20001d28:	f7ff ffa6 	bl	20001c78 <graphic_read>
}
20001d2c:	46c0      	nop			; (mov r8, r8)
20001d2e:	0018      	movs	r0, r3
20001d30:	46bd      	mov	sp, r7
20001d32:	b002      	add	sp, #8
20001d34:	bd80      	pop	{r7, pc}

20001d36 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
20001d36:	b580      	push	{r7, lr}
20001d38:	b082      	sub	sp, #8
20001d3a:	af00      	add	r7, sp, #0
20001d3c:	0002      	movs	r2, r0
20001d3e:	1dfb      	adds	r3, r7, #7
20001d40:	701a      	strb	r2, [r3, #0]
20001d42:	1dbb      	adds	r3, r7, #6
20001d44:	1c0a      	adds	r2, r1, #0
20001d46:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value; //I
20001d48:	4a19      	ldr	r2, [pc, #100]	; (20001db0 <graphic_write+0x7a>)
20001d4a:	1dfb      	adds	r3, r7, #7
20001d4c:	781b      	ldrb	r3, [r3, #0]
20001d4e:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20001d50:	1dbb      	adds	r3, r7, #6
20001d52:	781b      	ldrb	r3, [r3, #0]
20001d54:	0018      	movs	r0, r3
20001d56:	f7ff ff25 	bl	20001ba4 <select_controller>
	delay_500ns();
20001d5a:	f7ff fe47 	bl	200019ec <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20001d5e:	2040      	movs	r0, #64	; 0x40
20001d60:	f7ff fecc 	bl	20001afc <graphic_ctrl_bit_set>
	delay_500ns();
20001d64:	f7ff fe42 	bl	200019ec <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20001d68:	2040      	movs	r0, #64	; 0x40
20001d6a:	f7ff feef 	bl	20001b4c <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
20001d6e:	1dbb      	adds	r3, r7, #6
20001d70:	781b      	ldrb	r3, [r3, #0]
20001d72:	2208      	movs	r2, #8
20001d74:	4013      	ands	r3, r2
20001d76:	d004      	beq.n	20001d82 <graphic_write+0x4c>
		select_controller(B_CS1);
20001d78:	2008      	movs	r0, #8
20001d7a:	f7ff ff13 	bl	20001ba4 <select_controller>
		graphic_wait_ready();
20001d7e:	f7ff ff44 	bl	20001c0a <graphic_wait_ready>
	}
	if(controller & B_CS2) {
20001d82:	1dbb      	adds	r3, r7, #6
20001d84:	781b      	ldrb	r3, [r3, #0]
20001d86:	2210      	movs	r2, #16
20001d88:	4013      	ands	r3, r2
20001d8a:	d004      	beq.n	20001d96 <graphic_write+0x60>
		select_controller(B_CS2);
20001d8c:	2010      	movs	r0, #16
20001d8e:	f7ff ff09 	bl	20001ba4 <select_controller>
		graphic_wait_ready();
20001d92:	f7ff ff3a 	bl	20001c0a <graphic_wait_ready>
	}
	
	*portOdrHigh = 0;	//I
20001d96:	4b06      	ldr	r3, [pc, #24]	; (20001db0 <graphic_write+0x7a>)
20001d98:	2200      	movs	r2, #0
20001d9a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20001d9c:	2040      	movs	r0, #64	; 0x40
20001d9e:	f7ff fead 	bl	20001afc <graphic_ctrl_bit_set>
	select_controller(0);
20001da2:	2000      	movs	r0, #0
20001da4:	f7ff fefe 	bl	20001ba4 <select_controller>
}
20001da8:	46c0      	nop			; (mov r8, r8)
20001daa:	46bd      	mov	sp, r7
20001dac:	b002      	add	sp, #8
20001dae:	bd80      	pop	{r7, pc}
20001db0:	40021015 	andmi	r1, r2, r5, lsl r0

20001db4 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller) {
20001db4:	b580      	push	{r7, lr}
20001db6:	b082      	sub	sp, #8
20001db8:	af00      	add	r7, sp, #0
20001dba:	0002      	movs	r2, r0
20001dbc:	1dfb      	adds	r3, r7, #7
20001dbe:	701a      	strb	r2, [r3, #0]
20001dc0:	1dbb      	adds	r3, r7, #6
20001dc2:	1c0a      	adds	r2, r1, #0
20001dc4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001dc6:	2040      	movs	r0, #64	; 0x40
20001dc8:	f7ff fec0 	bl	20001b4c <graphic_ctrl_bit_clear>
	select_controller(controller);
20001dcc:	1dbb      	adds	r3, r7, #6
20001dce:	781b      	ldrb	r3, [r3, #0]
20001dd0:	0018      	movs	r0, r3
20001dd2:	f7ff fee7 	bl	20001ba4 <select_controller>
	graphic_ctrl_bit_clear(B_RS);
20001dd6:	2001      	movs	r0, #1
20001dd8:	f7ff feb8 	bl	20001b4c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
20001ddc:	2002      	movs	r0, #2
20001dde:	f7ff feb5 	bl	20001b4c <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20001de2:	1dbb      	adds	r3, r7, #6
20001de4:	781a      	ldrb	r2, [r3, #0]
20001de6:	1dfb      	adds	r3, r7, #7
20001de8:	781b      	ldrb	r3, [r3, #0]
20001dea:	0011      	movs	r1, r2
20001dec:	0018      	movs	r0, r3
20001dee:	f7ff ffa2 	bl	20001d36 <graphic_write>
}
20001df2:	46c0      	nop			; (mov r8, r8)
20001df4:	46bd      	mov	sp, r7
20001df6:	b002      	add	sp, #8
20001df8:	bd80      	pop	{r7, pc}

20001dfa <graphic_write_data>:
void graphic_write_data(uint8_t command, uint8_t controller) {
20001dfa:	b580      	push	{r7, lr}
20001dfc:	b082      	sub	sp, #8
20001dfe:	af00      	add	r7, sp, #0
20001e00:	0002      	movs	r2, r0
20001e02:	1dfb      	adds	r3, r7, #7
20001e04:	701a      	strb	r2, [r3, #0]
20001e06:	1dbb      	adds	r3, r7, #6
20001e08:	1c0a      	adds	r2, r1, #0
20001e0a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001e0c:	2040      	movs	r0, #64	; 0x40
20001e0e:	f7ff fe9d 	bl	20001b4c <graphic_ctrl_bit_clear>
	select_controller(controller);
20001e12:	1dbb      	adds	r3, r7, #6
20001e14:	781b      	ldrb	r3, [r3, #0]
20001e16:	0018      	movs	r0, r3
20001e18:	f7ff fec4 	bl	20001ba4 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20001e1c:	2001      	movs	r0, #1
20001e1e:	f7ff fe6d 	bl	20001afc <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20001e22:	2002      	movs	r0, #2
20001e24:	f7ff fe92 	bl	20001b4c <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20001e28:	1dbb      	adds	r3, r7, #6
20001e2a:	781a      	ldrb	r2, [r3, #0]
20001e2c:	1dfb      	adds	r3, r7, #7
20001e2e:	781b      	ldrb	r3, [r3, #0]
20001e30:	0011      	movs	r1, r2
20001e32:	0018      	movs	r0, r3
20001e34:	f7ff ff7f 	bl	20001d36 <graphic_write>
}
20001e38:	46c0      	nop			; (mov r8, r8)
20001e3a:	46bd      	mov	sp, r7
20001e3c:	b002      	add	sp, #8
20001e3e:	bd80      	pop	{r7, pc}

20001e40 <graphic_initialize>:

void graphic_initialize( void ) {
20001e40:	b580      	push	{r7, lr}
20001e42:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20001e44:	2040      	movs	r0, #64	; 0x40
20001e46:	f7ff fe59 	bl	20001afc <graphic_ctrl_bit_set>
	delay_micro(10);
20001e4a:	200a      	movs	r0, #10
20001e4c:	f7ff fdf0 	bl	20001a30 <delay_micro>
	
	graphic_ctrl_bit_clear(B_CS1);
20001e50:	2008      	movs	r0, #8
20001e52:	f7ff fe7b 	bl	20001b4c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
20001e56:	2010      	movs	r0, #16
20001e58:	f7ff fe78 	bl	20001b4c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
20001e5c:	2020      	movs	r0, #32
20001e5e:	f7ff fe75 	bl	20001b4c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
20001e62:	2040      	movs	r0, #64	; 0x40
20001e64:	f7ff fe72 	bl	20001b4c <graphic_ctrl_bit_clear>
	//#define SIMULATOR
	delay_milli(30);
20001e68:	201e      	movs	r0, #30
20001e6a:	f7ff fdf7 	bl	20001a5c <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20001e6e:	2020      	movs	r0, #32
20001e70:	f7ff fe44 	bl	20001afc <graphic_ctrl_bit_set>
	delay_milli(100); //...
20001e74:	2064      	movs	r0, #100	; 0x64
20001e76:	f7ff fdf1 	bl	20001a5c <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20001e7a:	2118      	movs	r1, #24
20001e7c:	203e      	movs	r0, #62	; 0x3e
20001e7e:	f7ff ff99 	bl	20001db4 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
20001e82:	2118      	movs	r1, #24
20001e84:	203f      	movs	r0, #63	; 0x3f
20001e86:	f7ff ff95 	bl	20001db4 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20001e8a:	2118      	movs	r1, #24
20001e8c:	20c0      	movs	r0, #192	; 0xc0
20001e8e:	f7ff ff91 	bl	20001db4 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20001e92:	2118      	movs	r1, #24
20001e94:	2040      	movs	r0, #64	; 0x40
20001e96:	f7ff ff8d 	bl	20001db4 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20001e9a:	2118      	movs	r1, #24
20001e9c:	20b8      	movs	r0, #184	; 0xb8
20001e9e:	f7ff ff89 	bl	20001db4 <graphic_write_command>
	select_controller(0);
20001ea2:	2000      	movs	r0, #0
20001ea4:	f7ff fe7e 	bl	20001ba4 <select_controller>
}
20001ea8:	46c0      	nop			; (mov r8, r8)
20001eaa:	46bd      	mov	sp, r7
20001eac:	bd80      	pop	{r7, pc}

20001eae <graphic_clear_screen>:
void graphic_clear_screen( void ) {	//Annat i slidesen
20001eae:	b580      	push	{r7, lr}
20001eb0:	b082      	sub	sp, #8
20001eb2:	af00      	add	r7, sp, #0
	uint8_t page;
	for (page = 0; page < 8; page++) {
20001eb4:	1dfb      	adds	r3, r7, #7
20001eb6:	2200      	movs	r2, #0
20001eb8:	701a      	strb	r2, [r3, #0]
20001eba:	e023      	b.n	20001f04 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20001ebc:	1dfb      	adds	r3, r7, #7
20001ebe:	781b      	ldrb	r3, [r3, #0]
20001ec0:	2248      	movs	r2, #72	; 0x48
20001ec2:	4252      	negs	r2, r2
20001ec4:	4313      	orrs	r3, r2
20001ec6:	b2db      	uxtb	r3, r3
20001ec8:	2118      	movs	r1, #24
20001eca:	0018      	movs	r0, r3
20001ecc:	f7ff ff72 	bl	20001db4 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20001ed0:	2118      	movs	r1, #24
20001ed2:	2040      	movs	r0, #64	; 0x40
20001ed4:	f7ff ff6e 	bl	20001db4 <graphic_write_command>
		uint8_t add;
		for (add = 0; add < 64; add++) {
20001ed8:	1dbb      	adds	r3, r7, #6
20001eda:	2200      	movs	r2, #0
20001edc:	701a      	strb	r2, [r3, #0]
20001ede:	e008      	b.n	20001ef2 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
20001ee0:	2118      	movs	r1, #24
20001ee2:	2000      	movs	r0, #0
20001ee4:	f7ff ff89 	bl	20001dfa <graphic_write_data>
		for (add = 0; add < 64; add++) {
20001ee8:	1dbb      	adds	r3, r7, #6
20001eea:	781a      	ldrb	r2, [r3, #0]
20001eec:	1dbb      	adds	r3, r7, #6
20001eee:	3201      	adds	r2, #1
20001ef0:	701a      	strb	r2, [r3, #0]
20001ef2:	1dbb      	adds	r3, r7, #6
20001ef4:	781b      	ldrb	r3, [r3, #0]
20001ef6:	2b3f      	cmp	r3, #63	; 0x3f
20001ef8:	d9f2      	bls.n	20001ee0 <graphic_clear_screen+0x32>
	for (page = 0; page < 8; page++) {
20001efa:	1dfb      	adds	r3, r7, #7
20001efc:	781a      	ldrb	r2, [r3, #0]
20001efe:	1dfb      	adds	r3, r7, #7
20001f00:	3201      	adds	r2, #1
20001f02:	701a      	strb	r2, [r3, #0]
20001f04:	1dfb      	adds	r3, r7, #7
20001f06:	781b      	ldrb	r3, [r3, #0]
20001f08:	2b07      	cmp	r3, #7
20001f0a:	d9d7      	bls.n	20001ebc <graphic_clear_screen+0xe>
		}
	}
}
20001f0c:	46c0      	nop			; (mov r8, r8)
20001f0e:	46bd      	mov	sp, r7
20001f10:	b002      	add	sp, #8
20001f12:	bd80      	pop	{r7, pc}

20001f14 <pixel>:

/** Color: 1=light 2=gray 3=black*/
void pixel(int x, int y, int set, int color) {
20001f14:	b580      	push	{r7, lr}
20001f16:	b086      	sub	sp, #24
20001f18:	af00      	add	r7, sp, #0
20001f1a:	60f8      	str	r0, [r7, #12]
20001f1c:	60b9      	str	r1, [r7, #8]
20001f1e:	607a      	str	r2, [r7, #4]
20001f20:	603b      	str	r3, [r7, #0]
	uint8_t mask;
	int index = 0;
20001f22:	2300      	movs	r3, #0
20001f24:	613b      	str	r3, [r7, #16]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) 
20001f26:	68fb      	ldr	r3, [r7, #12]
20001f28:	2b80      	cmp	r3, #128	; 0x80
20001f2a:	dd00      	ble.n	20001f2e <pixel+0x1a>
20001f2c:	e0a6      	b.n	2000207c <pixel+0x168>
20001f2e:	68fb      	ldr	r3, [r7, #12]
20001f30:	2b00      	cmp	r3, #0
20001f32:	dc00      	bgt.n	20001f36 <pixel+0x22>
20001f34:	e0a2      	b.n	2000207c <pixel+0x168>
20001f36:	68bb      	ldr	r3, [r7, #8]
20001f38:	2b40      	cmp	r3, #64	; 0x40
20001f3a:	dd00      	ble.n	20001f3e <pixel+0x2a>
20001f3c:	e09e      	b.n	2000207c <pixel+0x168>
20001f3e:	68bb      	ldr	r3, [r7, #8]
20001f40:	2b00      	cmp	r3, #0
20001f42:	dc00      	bgt.n	20001f46 <pixel+0x32>
20001f44:	e09a      	b.n	2000207c <pixel+0x168>
		return;
	mask = 1 << ((y-1)%8);
20001f46:	68bb      	ldr	r3, [r7, #8]
20001f48:	3b01      	subs	r3, #1
20001f4a:	4a4e      	ldr	r2, [pc, #312]	; (20002084 <pixel+0x170>)
20001f4c:	4013      	ands	r3, r2
20001f4e:	d504      	bpl.n	20001f5a <pixel+0x46>
20001f50:	3b01      	subs	r3, #1
20001f52:	2208      	movs	r2, #8
20001f54:	4252      	negs	r2, r2
20001f56:	4313      	orrs	r3, r2
20001f58:	3301      	adds	r3, #1
20001f5a:	001a      	movs	r2, r3
20001f5c:	2301      	movs	r3, #1
20001f5e:	4093      	lsls	r3, r2
20001f60:	001a      	movs	r2, r3
20001f62:	2317      	movs	r3, #23
20001f64:	18fb      	adds	r3, r7, r3
20001f66:	701a      	strb	r2, [r3, #0]
	if(x > 64) {
20001f68:	68fb      	ldr	r3, [r7, #12]
20001f6a:	2b40      	cmp	r3, #64	; 0x40
20001f6c:	dd05      	ble.n	20001f7a <pixel+0x66>
		x -= 65;
20001f6e:	68fb      	ldr	r3, [r7, #12]
20001f70:	3b41      	subs	r3, #65	; 0x41
20001f72:	60fb      	str	r3, [r7, #12]
		index = 512;
20001f74:	2380      	movs	r3, #128	; 0x80
20001f76:	009b      	lsls	r3, r3, #2
20001f78:	613b      	str	r3, [r7, #16]
	}
	index += x + ((y-1)/8)*64;
20001f7a:	68bb      	ldr	r3, [r7, #8]
20001f7c:	3b01      	subs	r3, #1
20001f7e:	2b00      	cmp	r3, #0
20001f80:	da00      	bge.n	20001f84 <pixel+0x70>
20001f82:	3307      	adds	r3, #7
20001f84:	10db      	asrs	r3, r3, #3
20001f86:	019a      	lsls	r2, r3, #6
20001f88:	68fb      	ldr	r3, [r7, #12]
20001f8a:	18d3      	adds	r3, r2, r3
20001f8c:	693a      	ldr	r2, [r7, #16]
20001f8e:	18d3      	adds	r3, r2, r3
20001f90:	613b      	str	r3, [r7, #16]

	if(set == 0)
20001f92:	687b      	ldr	r3, [r7, #4]
20001f94:	2b00      	cmp	r3, #0
20001f96:	d106      	bne.n	20001fa6 <pixel+0x92>
		mask = ~mask;
20001f98:	2317      	movs	r3, #23
20001f9a:	18fb      	adds	r3, r7, r3
20001f9c:	2217      	movs	r2, #23
20001f9e:	18ba      	adds	r2, r7, r2
20001fa0:	7812      	ldrb	r2, [r2, #0]
20001fa2:	43d2      	mvns	r2, r2
20001fa4:	701a      	strb	r2, [r3, #0]

	switch (color) {
20001fa6:	683b      	ldr	r3, [r7, #0]
20001fa8:	2b02      	cmp	r3, #2
20001faa:	d024      	beq.n	20001ff6 <pixel+0xe2>
20001fac:	2b03      	cmp	r3, #3
20001fae:	d043      	beq.n	20002038 <pixel+0x124>
20001fb0:	2b01      	cmp	r3, #1
20001fb2:	d164      	bne.n	2000207e <pixel+0x16a>
		case 1:	
			if(set)
20001fb4:	687b      	ldr	r3, [r7, #4]
20001fb6:	2b00      	cmp	r3, #0
20001fb8:	d00e      	beq.n	20001fd8 <pixel+0xc4>
				backBufferLight[index] |= mask;
20001fba:	4a33      	ldr	r2, [pc, #204]	; (20002088 <pixel+0x174>)
20001fbc:	693b      	ldr	r3, [r7, #16]
20001fbe:	18d3      	adds	r3, r2, r3
20001fc0:	781a      	ldrb	r2, [r3, #0]
20001fc2:	2317      	movs	r3, #23
20001fc4:	18fb      	adds	r3, r7, r3
20001fc6:	781b      	ldrb	r3, [r3, #0]
20001fc8:	4313      	orrs	r3, r2
20001fca:	b2d9      	uxtb	r1, r3
20001fcc:	4a2e      	ldr	r2, [pc, #184]	; (20002088 <pixel+0x174>)
20001fce:	693b      	ldr	r3, [r7, #16]
20001fd0:	18d3      	adds	r3, r2, r3
20001fd2:	1c0a      	adds	r2, r1, #0
20001fd4:	701a      	strb	r2, [r3, #0]
			else
				backBufferLight[index] &= mask;
			break;
20001fd6:	e052      	b.n	2000207e <pixel+0x16a>
				backBufferLight[index] &= mask;
20001fd8:	4a2b      	ldr	r2, [pc, #172]	; (20002088 <pixel+0x174>)
20001fda:	693b      	ldr	r3, [r7, #16]
20001fdc:	18d3      	adds	r3, r2, r3
20001fde:	781b      	ldrb	r3, [r3, #0]
20001fe0:	2217      	movs	r2, #23
20001fe2:	18ba      	adds	r2, r7, r2
20001fe4:	7812      	ldrb	r2, [r2, #0]
20001fe6:	4013      	ands	r3, r2
20001fe8:	b2d9      	uxtb	r1, r3
20001fea:	4a27      	ldr	r2, [pc, #156]	; (20002088 <pixel+0x174>)
20001fec:	693b      	ldr	r3, [r7, #16]
20001fee:	18d3      	adds	r3, r2, r3
20001ff0:	1c0a      	adds	r2, r1, #0
20001ff2:	701a      	strb	r2, [r3, #0]
			break;
20001ff4:	e043      	b.n	2000207e <pixel+0x16a>
		
		case 2:	
			if(set)
20001ff6:	687b      	ldr	r3, [r7, #4]
20001ff8:	2b00      	cmp	r3, #0
20001ffa:	d00e      	beq.n	2000201a <pixel+0x106>
				backBufferGray[index] |= mask;
20001ffc:	4a23      	ldr	r2, [pc, #140]	; (2000208c <pixel+0x178>)
20001ffe:	693b      	ldr	r3, [r7, #16]
20002000:	18d3      	adds	r3, r2, r3
20002002:	781a      	ldrb	r2, [r3, #0]
20002004:	2317      	movs	r3, #23
20002006:	18fb      	adds	r3, r7, r3
20002008:	781b      	ldrb	r3, [r3, #0]
2000200a:	4313      	orrs	r3, r2
2000200c:	b2d9      	uxtb	r1, r3
2000200e:	4a1f      	ldr	r2, [pc, #124]	; (2000208c <pixel+0x178>)
20002010:	693b      	ldr	r3, [r7, #16]
20002012:	18d3      	adds	r3, r2, r3
20002014:	1c0a      	adds	r2, r1, #0
20002016:	701a      	strb	r2, [r3, #0]
			else
				backBufferGray[index] &= mask;
			break;
20002018:	e031      	b.n	2000207e <pixel+0x16a>
				backBufferGray[index] &= mask;
2000201a:	4a1c      	ldr	r2, [pc, #112]	; (2000208c <pixel+0x178>)
2000201c:	693b      	ldr	r3, [r7, #16]
2000201e:	18d3      	adds	r3, r2, r3
20002020:	781b      	ldrb	r3, [r3, #0]
20002022:	2217      	movs	r2, #23
20002024:	18ba      	adds	r2, r7, r2
20002026:	7812      	ldrb	r2, [r2, #0]
20002028:	4013      	ands	r3, r2
2000202a:	b2d9      	uxtb	r1, r3
2000202c:	4a17      	ldr	r2, [pc, #92]	; (2000208c <pixel+0x178>)
2000202e:	693b      	ldr	r3, [r7, #16]
20002030:	18d3      	adds	r3, r2, r3
20002032:	1c0a      	adds	r2, r1, #0
20002034:	701a      	strb	r2, [r3, #0]
			break;
20002036:	e022      	b.n	2000207e <pixel+0x16a>
		
		case 3:	
			if(set)
20002038:	687b      	ldr	r3, [r7, #4]
2000203a:	2b00      	cmp	r3, #0
2000203c:	d00e      	beq.n	2000205c <pixel+0x148>
				backBuffer[index] |= mask;
2000203e:	4a14      	ldr	r2, [pc, #80]	; (20002090 <pixel+0x17c>)
20002040:	693b      	ldr	r3, [r7, #16]
20002042:	18d3      	adds	r3, r2, r3
20002044:	781a      	ldrb	r2, [r3, #0]
20002046:	2317      	movs	r3, #23
20002048:	18fb      	adds	r3, r7, r3
2000204a:	781b      	ldrb	r3, [r3, #0]
2000204c:	4313      	orrs	r3, r2
2000204e:	b2d9      	uxtb	r1, r3
20002050:	4a0f      	ldr	r2, [pc, #60]	; (20002090 <pixel+0x17c>)
20002052:	693b      	ldr	r3, [r7, #16]
20002054:	18d3      	adds	r3, r2, r3
20002056:	1c0a      	adds	r2, r1, #0
20002058:	701a      	strb	r2, [r3, #0]
			else
				backBuffer[index] &= mask;
			break;
2000205a:	e010      	b.n	2000207e <pixel+0x16a>
				backBuffer[index] &= mask;
2000205c:	4a0c      	ldr	r2, [pc, #48]	; (20002090 <pixel+0x17c>)
2000205e:	693b      	ldr	r3, [r7, #16]
20002060:	18d3      	adds	r3, r2, r3
20002062:	781b      	ldrb	r3, [r3, #0]
20002064:	2217      	movs	r2, #23
20002066:	18ba      	adds	r2, r7, r2
20002068:	7812      	ldrb	r2, [r2, #0]
2000206a:	4013      	ands	r3, r2
2000206c:	b2d9      	uxtb	r1, r3
2000206e:	4a08      	ldr	r2, [pc, #32]	; (20002090 <pixel+0x17c>)
20002070:	693b      	ldr	r3, [r7, #16]
20002072:	18d3      	adds	r3, r2, r3
20002074:	1c0a      	adds	r2, r1, #0
20002076:	701a      	strb	r2, [r3, #0]
			break;
20002078:	46c0      	nop			; (mov r8, r8)
2000207a:	e000      	b.n	2000207e <pixel+0x16a>
		return;
2000207c:	46c0      	nop			; (mov r8, r8)
			
	}

}
2000207e:	46bd      	mov	sp, r7
20002080:	b006      	add	sp, #24
20002082:	bd80      	pop	{r7, pc}
20002084:	80000007 	andhi	r0, r0, r7
20002088:	2000508c 	andcs	r5, r0, ip, lsl #1
2000208c:	2000388c 	andcs	r3, r0, ip, lsl #17
20002090:	2000408c 	andcs	r4, r0, ip, lsl #1

20002094 <pixel2>:


void pixel2(int x, int y, int set) {
20002094:	b580      	push	{r7, lr}
20002096:	b088      	sub	sp, #32
20002098:	af00      	add	r7, sp, #0
2000209a:	60f8      	str	r0, [r7, #12]
2000209c:	60b9      	str	r1, [r7, #8]
2000209e:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200020a0:	68fb      	ldr	r3, [r7, #12]
200020a2:	2b00      	cmp	r3, #0
200020a4:	dc00      	bgt.n	200020a8 <pixel2+0x14>
200020a6:	e0bc      	b.n	20002222 <pixel2+0x18e>
200020a8:	68bb      	ldr	r3, [r7, #8]
200020aa:	2b00      	cmp	r3, #0
200020ac:	dc00      	bgt.n	200020b0 <pixel2+0x1c>
200020ae:	e0b8      	b.n	20002222 <pixel2+0x18e>
200020b0:	68fb      	ldr	r3, [r7, #12]
200020b2:	2b80      	cmp	r3, #128	; 0x80
200020b4:	dd00      	ble.n	200020b8 <pixel2+0x24>
200020b6:	e0b4      	b.n	20002222 <pixel2+0x18e>
200020b8:	68bb      	ldr	r3, [r7, #8]
200020ba:	2b40      	cmp	r3, #64	; 0x40
200020bc:	dd00      	ble.n	200020c0 <pixel2+0x2c>
200020be:	e0b0      	b.n	20002222 <pixel2+0x18e>
	index = (y-1)/8;
200020c0:	68bb      	ldr	r3, [r7, #8]
200020c2:	3b01      	subs	r3, #1
200020c4:	2b00      	cmp	r3, #0
200020c6:	da00      	bge.n	200020ca <pixel2+0x36>
200020c8:	3307      	adds	r3, #7
200020ca:	10db      	asrs	r3, r3, #3
200020cc:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
200020ce:	68bb      	ldr	r3, [r7, #8]
200020d0:	3b01      	subs	r3, #1
200020d2:	4a56      	ldr	r2, [pc, #344]	; (2000222c <pixel2+0x198>)
200020d4:	4013      	ands	r3, r2
200020d6:	d504      	bpl.n	200020e2 <pixel2+0x4e>
200020d8:	3b01      	subs	r3, #1
200020da:	2208      	movs	r2, #8
200020dc:	4252      	negs	r2, r2
200020de:	4313      	orrs	r3, r2
200020e0:	3301      	adds	r3, #1
200020e2:	2b07      	cmp	r3, #7
200020e4:	d82c      	bhi.n	20002140 <pixel2+0xac>
200020e6:	009a      	lsls	r2, r3, #2
200020e8:	4b51      	ldr	r3, [pc, #324]	; (20002230 <pixel2+0x19c>)
200020ea:	18d3      	adds	r3, r2, r3
200020ec:	681b      	ldr	r3, [r3, #0]
200020ee:	469f      	mov	pc, r3
		case 0: mask = 1; break;
200020f0:	231f      	movs	r3, #31
200020f2:	18fb      	adds	r3, r7, r3
200020f4:	2201      	movs	r2, #1
200020f6:	701a      	strb	r2, [r3, #0]
200020f8:	e022      	b.n	20002140 <pixel2+0xac>
		case 1: mask = 2; break;
200020fa:	231f      	movs	r3, #31
200020fc:	18fb      	adds	r3, r7, r3
200020fe:	2202      	movs	r2, #2
20002100:	701a      	strb	r2, [r3, #0]
20002102:	e01d      	b.n	20002140 <pixel2+0xac>
		case 2: mask = 4; break;
20002104:	231f      	movs	r3, #31
20002106:	18fb      	adds	r3, r7, r3
20002108:	2204      	movs	r2, #4
2000210a:	701a      	strb	r2, [r3, #0]
2000210c:	e018      	b.n	20002140 <pixel2+0xac>
		case 3: mask = 8; break;
2000210e:	231f      	movs	r3, #31
20002110:	18fb      	adds	r3, r7, r3
20002112:	2208      	movs	r2, #8
20002114:	701a      	strb	r2, [r3, #0]
20002116:	e013      	b.n	20002140 <pixel2+0xac>
		case 4: mask = 0x10; break;
20002118:	231f      	movs	r3, #31
2000211a:	18fb      	adds	r3, r7, r3
2000211c:	2210      	movs	r2, #16
2000211e:	701a      	strb	r2, [r3, #0]
20002120:	e00e      	b.n	20002140 <pixel2+0xac>
		case 5: mask = 0x20; break;
20002122:	231f      	movs	r3, #31
20002124:	18fb      	adds	r3, r7, r3
20002126:	2220      	movs	r2, #32
20002128:	701a      	strb	r2, [r3, #0]
2000212a:	e009      	b.n	20002140 <pixel2+0xac>
		case 6: mask = 0x40; break;
2000212c:	231f      	movs	r3, #31
2000212e:	18fb      	adds	r3, r7, r3
20002130:	2240      	movs	r2, #64	; 0x40
20002132:	701a      	strb	r2, [r3, #0]
20002134:	e004      	b.n	20002140 <pixel2+0xac>
		case 7: mask = 0x80; break;
20002136:	231f      	movs	r3, #31
20002138:	18fb      	adds	r3, r7, r3
2000213a:	2280      	movs	r2, #128	; 0x80
2000213c:	701a      	strb	r2, [r3, #0]
2000213e:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0)
20002140:	687b      	ldr	r3, [r7, #4]
20002142:	2b00      	cmp	r3, #0
20002144:	d106      	bne.n	20002154 <pixel2+0xc0>
		mask = ~mask;
20002146:	231f      	movs	r3, #31
20002148:	18fb      	adds	r3, r7, r3
2000214a:	221f      	movs	r2, #31
2000214c:	18ba      	adds	r2, r7, r2
2000214e:	7812      	ldrb	r2, [r2, #0]
20002150:	43d2      	mvns	r2, r2
20002152:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
20002154:	68fb      	ldr	r3, [r7, #12]
20002156:	2b40      	cmp	r3, #64	; 0x40
20002158:	dd07      	ble.n	2000216a <pixel2+0xd6>
		controller = B_CS2;
2000215a:	231e      	movs	r3, #30
2000215c:	18fb      	adds	r3, r7, r3
2000215e:	2210      	movs	r2, #16
20002160:	701a      	strb	r2, [r3, #0]
		x = x - 65;
20002162:	68fb      	ldr	r3, [r7, #12]
20002164:	3b41      	subs	r3, #65	; 0x41
20002166:	60fb      	str	r3, [r7, #12]
20002168:	e006      	b.n	20002178 <pixel2+0xe4>
	} else {
		controller = B_CS1;
2000216a:	231e      	movs	r3, #30
2000216c:	18fb      	adds	r3, r7, r3
2000216e:	2208      	movs	r2, #8
20002170:	701a      	strb	r2, [r3, #0]
		x = x-1;
20002172:	68fb      	ldr	r3, [r7, #12]
20002174:	3b01      	subs	r3, #1
20002176:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller );
20002178:	68fb      	ldr	r3, [r7, #12]
2000217a:	b25b      	sxtb	r3, r3
2000217c:	2240      	movs	r2, #64	; 0x40
2000217e:	4313      	orrs	r3, r2
20002180:	b25b      	sxtb	r3, r3
20002182:	b2da      	uxtb	r2, r3
20002184:	231e      	movs	r3, #30
20002186:	18fb      	adds	r3, r7, r3
20002188:	781b      	ldrb	r3, [r3, #0]
2000218a:	0019      	movs	r1, r3
2000218c:	0010      	movs	r0, r2
2000218e:	f7ff fe11 	bl	20001db4 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller );
20002192:	69bb      	ldr	r3, [r7, #24]
20002194:	b25b      	sxtb	r3, r3
20002196:	2248      	movs	r2, #72	; 0x48
20002198:	4252      	negs	r2, r2
2000219a:	4313      	orrs	r3, r2
2000219c:	b25b      	sxtb	r3, r3
2000219e:	b2da      	uxtb	r2, r3
200021a0:	231e      	movs	r3, #30
200021a2:	18fb      	adds	r3, r7, r3
200021a4:	781b      	ldrb	r3, [r3, #0]
200021a6:	0019      	movs	r1, r3
200021a8:	0010      	movs	r0, r2
200021aa:	f7ff fe03 	bl	20001db4 <graphic_write_command>
	
	c = graphic_read_data(controller);
200021ae:	231e      	movs	r3, #30
200021b0:	18fb      	adds	r3, r7, r3
200021b2:	781b      	ldrb	r3, [r3, #0]
200021b4:	0018      	movs	r0, r3
200021b6:	f7ff fda9 	bl	20001d0c <graphic_read_data>
200021ba:	0002      	movs	r2, r0
200021bc:	2317      	movs	r3, #23
200021be:	18fb      	adds	r3, r7, r3
200021c0:	701a      	strb	r2, [r3, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
200021c2:	68fb      	ldr	r3, [r7, #12]
200021c4:	b25b      	sxtb	r3, r3
200021c6:	2240      	movs	r2, #64	; 0x40
200021c8:	4313      	orrs	r3, r2
200021ca:	b25b      	sxtb	r3, r3
200021cc:	b2da      	uxtb	r2, r3
200021ce:	231e      	movs	r3, #30
200021d0:	18fb      	adds	r3, r7, r3
200021d2:	781b      	ldrb	r3, [r3, #0]
200021d4:	0019      	movs	r1, r3
200021d6:	0010      	movs	r0, r2
200021d8:	f7ff fdec 	bl	20001db4 <graphic_write_command>
	
	if(set)
200021dc:	687b      	ldr	r3, [r7, #4]
200021de:	2b00      	cmp	r3, #0
200021e0:	d00a      	beq.n	200021f8 <pixel2+0x164>
		mask = mask | c;
200021e2:	231f      	movs	r3, #31
200021e4:	18fb      	adds	r3, r7, r3
200021e6:	221f      	movs	r2, #31
200021e8:	18b9      	adds	r1, r7, r2
200021ea:	2217      	movs	r2, #23
200021ec:	18ba      	adds	r2, r7, r2
200021ee:	7809      	ldrb	r1, [r1, #0]
200021f0:	7812      	ldrb	r2, [r2, #0]
200021f2:	430a      	orrs	r2, r1
200021f4:	701a      	strb	r2, [r3, #0]
200021f6:	e009      	b.n	2000220c <pixel2+0x178>
	else
		mask = mask & c;
200021f8:	231f      	movs	r3, #31
200021fa:	18fb      	adds	r3, r7, r3
200021fc:	221f      	movs	r2, #31
200021fe:	18ba      	adds	r2, r7, r2
20002200:	2117      	movs	r1, #23
20002202:	1879      	adds	r1, r7, r1
20002204:	7812      	ldrb	r2, [r2, #0]
20002206:	7809      	ldrb	r1, [r1, #0]
20002208:	400a      	ands	r2, r1
2000220a:	701a      	strb	r2, [r3, #0]
	
	graphic_write_data(mask, controller);
2000220c:	231e      	movs	r3, #30
2000220e:	18fb      	adds	r3, r7, r3
20002210:	781a      	ldrb	r2, [r3, #0]
20002212:	231f      	movs	r3, #31
20002214:	18fb      	adds	r3, r7, r3
20002216:	781b      	ldrb	r3, [r3, #0]
20002218:	0011      	movs	r1, r2
2000221a:	0018      	movs	r0, r3
2000221c:	f7ff fded 	bl	20001dfa <graphic_write_data>
20002220:	e000      	b.n	20002224 <pixel2+0x190>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20002222:	46c0      	nop			; (mov r8, r8)
}
20002224:	46bd      	mov	sp, r7
20002226:	b008      	add	sp, #32
20002228:	bd80      	pop	{r7, pc}
2000222a:	46c0      	nop			; (mov r8, r8)
2000222c:	80000007 	andhi	r0, r0, r7
20002230:	20008e90 	mulcs	r0, r0, lr

20002234 <graphic_draw_screen>:

void graphic_draw_screen(uint8_t *buffer) {
20002234:	b580      	push	{r7, lr}
20002236:	b086      	sub	sp, #24
20002238:	af00      	add	r7, sp, #0
2000223a:	6078      	str	r0, [r7, #4]
	uint8_t i, j, controller, c;
	unsigned int k = 0;
2000223c:	2300      	movs	r3, #0
2000223e:	613b      	str	r3, [r7, #16]
	for(c = 0; c < 2; c++) {
20002240:	2315      	movs	r3, #21
20002242:	18fb      	adds	r3, r7, r3
20002244:	2200      	movs	r2, #0
20002246:	701a      	strb	r2, [r3, #0]
20002248:	e056      	b.n	200022f8 <graphic_draw_screen+0xc4>
		controller = (c == 0) ? B_CS1 : B_CS2;
2000224a:	2315      	movs	r3, #21
2000224c:	18fb      	adds	r3, r7, r3
2000224e:	781b      	ldrb	r3, [r3, #0]
20002250:	2b00      	cmp	r3, #0
20002252:	d101      	bne.n	20002258 <graphic_draw_screen+0x24>
20002254:	2208      	movs	r2, #8
20002256:	e000      	b.n	2000225a <graphic_draw_screen+0x26>
20002258:	2210      	movs	r2, #16
2000225a:	230f      	movs	r3, #15
2000225c:	18fb      	adds	r3, r7, r3
2000225e:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
20002260:	2316      	movs	r3, #22
20002262:	18fb      	adds	r3, r7, r3
20002264:	2200      	movs	r2, #0
20002266:	701a      	strb	r2, [r3, #0]
20002268:	e03a      	b.n	200022e0 <graphic_draw_screen+0xac>
			graphic_write_command(LCD_SET_PAGE | j, controller);
2000226a:	2316      	movs	r3, #22
2000226c:	18fb      	adds	r3, r7, r3
2000226e:	781b      	ldrb	r3, [r3, #0]
20002270:	2248      	movs	r2, #72	; 0x48
20002272:	4252      	negs	r2, r2
20002274:	4313      	orrs	r3, r2
20002276:	b2da      	uxtb	r2, r3
20002278:	230f      	movs	r3, #15
2000227a:	18fb      	adds	r3, r7, r3
2000227c:	781b      	ldrb	r3, [r3, #0]
2000227e:	0019      	movs	r1, r3
20002280:	0010      	movs	r0, r2
20002282:	f7ff fd97 	bl	20001db4 <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
20002286:	230f      	movs	r3, #15
20002288:	18fb      	adds	r3, r7, r3
2000228a:	781b      	ldrb	r3, [r3, #0]
2000228c:	0019      	movs	r1, r3
2000228e:	2040      	movs	r0, #64	; 0x40
20002290:	f7ff fd90 	bl	20001db4 <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
20002294:	2317      	movs	r3, #23
20002296:	18fb      	adds	r3, r7, r3
20002298:	2200      	movs	r2, #0
2000229a:	701a      	strb	r2, [r3, #0]
2000229c:	e014      	b.n	200022c8 <graphic_draw_screen+0x94>
				graphic_write_data(buffer[k], controller);
2000229e:	687a      	ldr	r2, [r7, #4]
200022a0:	693b      	ldr	r3, [r7, #16]
200022a2:	18d3      	adds	r3, r2, r3
200022a4:	781a      	ldrb	r2, [r3, #0]
200022a6:	230f      	movs	r3, #15
200022a8:	18fb      	adds	r3, r7, r3
200022aa:	781b      	ldrb	r3, [r3, #0]
200022ac:	0019      	movs	r1, r3
200022ae:	0010      	movs	r0, r2
200022b0:	f7ff fda3 	bl	20001dfa <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
200022b4:	2317      	movs	r3, #23
200022b6:	18fb      	adds	r3, r7, r3
200022b8:	781a      	ldrb	r2, [r3, #0]
200022ba:	2317      	movs	r3, #23
200022bc:	18fb      	adds	r3, r7, r3
200022be:	3201      	adds	r2, #1
200022c0:	701a      	strb	r2, [r3, #0]
200022c2:	693b      	ldr	r3, [r7, #16]
200022c4:	3301      	adds	r3, #1
200022c6:	613b      	str	r3, [r7, #16]
200022c8:	2317      	movs	r3, #23
200022ca:	18fb      	adds	r3, r7, r3
200022cc:	781b      	ldrb	r3, [r3, #0]
200022ce:	2b3f      	cmp	r3, #63	; 0x3f
200022d0:	d9e5      	bls.n	2000229e <graphic_draw_screen+0x6a>
		for(j = 0; j < 8; j++) {
200022d2:	2316      	movs	r3, #22
200022d4:	18fb      	adds	r3, r7, r3
200022d6:	781a      	ldrb	r2, [r3, #0]
200022d8:	2316      	movs	r3, #22
200022da:	18fb      	adds	r3, r7, r3
200022dc:	3201      	adds	r2, #1
200022de:	701a      	strb	r2, [r3, #0]
200022e0:	2316      	movs	r3, #22
200022e2:	18fb      	adds	r3, r7, r3
200022e4:	781b      	ldrb	r3, [r3, #0]
200022e6:	2b07      	cmp	r3, #7
200022e8:	d9bf      	bls.n	2000226a <graphic_draw_screen+0x36>
	for(c = 0; c < 2; c++) {
200022ea:	2315      	movs	r3, #21
200022ec:	18fb      	adds	r3, r7, r3
200022ee:	781a      	ldrb	r2, [r3, #0]
200022f0:	2315      	movs	r3, #21
200022f2:	18fb      	adds	r3, r7, r3
200022f4:	3201      	adds	r2, #1
200022f6:	701a      	strb	r2, [r3, #0]
200022f8:	2315      	movs	r3, #21
200022fa:	18fb      	adds	r3, r7, r3
200022fc:	781b      	ldrb	r3, [r3, #0]
200022fe:	2b01      	cmp	r3, #1
20002300:	d9a3      	bls.n	2000224a <graphic_draw_screen+0x16>
			}
		}
	}
}
20002302:	46c0      	nop			; (mov r8, r8)
20002304:	46bd      	mov	sp, r7
20002306:	b006      	add	sp, #24
20002308:	bd80      	pop	{r7, pc}

2000230a <draw_sprite>:


void grayScaleTest( void );


void draw_sprite(sprite* s, int x, int y, int set, int color) {
2000230a:	b5b0      	push	{r4, r5, r7, lr}
2000230c:	b08a      	sub	sp, #40	; 0x28
2000230e:	af00      	add	r7, sp, #0
20002310:	60f8      	str	r0, [r7, #12]
20002312:	60b9      	str	r1, [r7, #8]
20002314:	607a      	str	r2, [r7, #4]
20002316:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
20002318:	68fb      	ldr	r3, [r7, #12]
2000231a:	681b      	ldr	r3, [r3, #0]
2000231c:	2207      	movs	r2, #7
2000231e:	4013      	ands	r3, r2
20002320:	d104      	bne.n	2000232c <draw_sprite+0x22>
		width_in_bytes = s->width / 8;
20002322:	68fb      	ldr	r3, [r7, #12]
20002324:	681b      	ldr	r3, [r3, #0]
20002326:	08db      	lsrs	r3, r3, #3
20002328:	61bb      	str	r3, [r7, #24]
2000232a:	e004      	b.n	20002336 <draw_sprite+0x2c>
	else
		width_in_bytes = (s->width / 8) + 1;
2000232c:	68fb      	ldr	r3, [r7, #12]
2000232e:	681b      	ldr	r3, [r3, #0]
20002330:	08db      	lsrs	r3, r3, #3
20002332:	3301      	adds	r3, #1
20002334:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++)
20002336:	2300      	movs	r3, #0
20002338:	627b      	str	r3, [r7, #36]	; 0x24
2000233a:	e06a      	b.n	20002412 <draw_sprite+0x108>
		for (j = 0; j < width_in_bytes; j++) {
2000233c:	2300      	movs	r3, #0
2000233e:	623b      	str	r3, [r7, #32]
20002340:	e060      	b.n	20002404 <draw_sprite+0xfa>
			unsigned char byte = s->data[i * width_in_bytes + j];
20002342:	68fb      	ldr	r3, [r7, #12]
20002344:	689b      	ldr	r3, [r3, #8]
20002346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002348:	69b9      	ldr	r1, [r7, #24]
2000234a:	4351      	muls	r1, r2
2000234c:	6a3a      	ldr	r2, [r7, #32]
2000234e:	188a      	adds	r2, r1, r2
20002350:	189a      	adds	r2, r3, r2
20002352:	2317      	movs	r3, #23
20002354:	18fb      	adds	r3, r7, r3
20002356:	7812      	ldrb	r2, [r2, #0]
20002358:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
2000235a:	2300      	movs	r3, #0
2000235c:	61fb      	str	r3, [r7, #28]
2000235e:	e04b      	b.n	200023f8 <draw_sprite+0xee>
				if (byte & (1 << k)){
20002360:	2317      	movs	r3, #23
20002362:	18fb      	adds	r3, r7, r3
20002364:	781a      	ldrb	r2, [r3, #0]
20002366:	69fb      	ldr	r3, [r7, #28]
20002368:	411a      	asrs	r2, r3
2000236a:	0013      	movs	r3, r2
2000236c:	2201      	movs	r2, #1
2000236e:	4013      	ands	r3, r2
20002370:	d03f      	beq.n	200023f2 <draw_sprite+0xe8>
					pixel(8 * j + k + x + 1, i + y + 1, set, color);
20002372:	6a3b      	ldr	r3, [r7, #32]
20002374:	00da      	lsls	r2, r3, #3
20002376:	69fb      	ldr	r3, [r7, #28]
20002378:	18d2      	adds	r2, r2, r3
2000237a:	68bb      	ldr	r3, [r7, #8]
2000237c:	18d3      	adds	r3, r2, r3
2000237e:	1c58      	adds	r0, r3, #1
20002380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002382:	687b      	ldr	r3, [r7, #4]
20002384:	18d3      	adds	r3, r2, r3
20002386:	1c59      	adds	r1, r3, #1
20002388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000238a:	683a      	ldr	r2, [r7, #0]
2000238c:	f7ff fdc2 	bl	20001f14 <pixel>
					
					if(set) {	//Remove the other colors from this pixel
20002390:	683b      	ldr	r3, [r7, #0]
20002392:	2b00      	cmp	r3, #0
20002394:	d02d      	beq.n	200023f2 <draw_sprite+0xe8>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+1) % 3);
20002396:	6a3b      	ldr	r3, [r7, #32]
20002398:	00da      	lsls	r2, r3, #3
2000239a:	69fb      	ldr	r3, [r7, #28]
2000239c:	18d2      	adds	r2, r2, r3
2000239e:	68bb      	ldr	r3, [r7, #8]
200023a0:	18d3      	adds	r3, r2, r3
200023a2:	1c5c      	adds	r4, r3, #1
200023a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200023a6:	687b      	ldr	r3, [r7, #4]
200023a8:	18d3      	adds	r3, r2, r3
200023aa:	1c5d      	adds	r5, r3, #1
200023ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200023ae:	3301      	adds	r3, #1
200023b0:	2103      	movs	r1, #3
200023b2:	0018      	movs	r0, r3
200023b4:	f000 ff20 	bl	200031f8 <__aeabi_idivmod>
200023b8:	000b      	movs	r3, r1
200023ba:	2200      	movs	r2, #0
200023bc:	0029      	movs	r1, r5
200023be:	0020      	movs	r0, r4
200023c0:	f7ff fda8 	bl	20001f14 <pixel>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+2) % 3);
200023c4:	6a3b      	ldr	r3, [r7, #32]
200023c6:	00da      	lsls	r2, r3, #3
200023c8:	69fb      	ldr	r3, [r7, #28]
200023ca:	18d2      	adds	r2, r2, r3
200023cc:	68bb      	ldr	r3, [r7, #8]
200023ce:	18d3      	adds	r3, r2, r3
200023d0:	1c5c      	adds	r4, r3, #1
200023d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200023d4:	687b      	ldr	r3, [r7, #4]
200023d6:	18d3      	adds	r3, r2, r3
200023d8:	1c5d      	adds	r5, r3, #1
200023da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200023dc:	3302      	adds	r3, #2
200023de:	2103      	movs	r1, #3
200023e0:	0018      	movs	r0, r3
200023e2:	f000 ff09 	bl	200031f8 <__aeabi_idivmod>
200023e6:	000b      	movs	r3, r1
200023e8:	2200      	movs	r2, #0
200023ea:	0029      	movs	r1, r5
200023ec:	0020      	movs	r0, r4
200023ee:	f7ff fd91 	bl	20001f14 <pixel>
			for (k =0; k < 8; k++) {
200023f2:	69fb      	ldr	r3, [r7, #28]
200023f4:	3301      	adds	r3, #1
200023f6:	61fb      	str	r3, [r7, #28]
200023f8:	69fb      	ldr	r3, [r7, #28]
200023fa:	2b07      	cmp	r3, #7
200023fc:	ddb0      	ble.n	20002360 <draw_sprite+0x56>
		for (j = 0; j < width_in_bytes; j++) {
200023fe:	6a3b      	ldr	r3, [r7, #32]
20002400:	3301      	adds	r3, #1
20002402:	623b      	str	r3, [r7, #32]
20002404:	6a3a      	ldr	r2, [r7, #32]
20002406:	69bb      	ldr	r3, [r7, #24]
20002408:	429a      	cmp	r2, r3
2000240a:	db9a      	blt.n	20002342 <draw_sprite+0x38>
	for (i = 0; i < s->height; i++)
2000240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000240e:	3301      	adds	r3, #1
20002410:	627b      	str	r3, [r7, #36]	; 0x24
20002412:	68fb      	ldr	r3, [r7, #12]
20002414:	685a      	ldr	r2, [r3, #4]
20002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002418:	429a      	cmp	r2, r3
2000241a:	d88f      	bhi.n	2000233c <draw_sprite+0x32>
					}
				}
			}
		}
}
2000241c:	46c0      	nop			; (mov r8, r8)
2000241e:	46bd      	mov	sp, r7
20002420:	b00a      	add	sp, #40	; 0x28
20002422:	bdb0      	pop	{r4, r5, r7, pc}

20002424 <fillRectangle>:

void fillRectangle( int x, int y, int width, int height ){
20002424:	b580      	push	{r7, lr}
20002426:	b086      	sub	sp, #24
20002428:	af00      	add	r7, sp, #0
2000242a:	60f8      	str	r0, [r7, #12]
2000242c:	60b9      	str	r1, [r7, #8]
2000242e:	607a      	str	r2, [r7, #4]
20002430:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20002432:	68fb      	ldr	r3, [r7, #12]
20002434:	617b      	str	r3, [r7, #20]
20002436:	e014      	b.n	20002462 <fillRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20002438:	68bb      	ldr	r3, [r7, #8]
2000243a:	613b      	str	r3, [r7, #16]
2000243c:	e008      	b.n	20002450 <fillRectangle+0x2c>
			pixel(i, j, 1, 3);
2000243e:	6939      	ldr	r1, [r7, #16]
20002440:	6978      	ldr	r0, [r7, #20]
20002442:	2303      	movs	r3, #3
20002444:	2201      	movs	r2, #1
20002446:	f7ff fd65 	bl	20001f14 <pixel>
		for (j = y; j < y + height; j++) {
2000244a:	693b      	ldr	r3, [r7, #16]
2000244c:	3301      	adds	r3, #1
2000244e:	613b      	str	r3, [r7, #16]
20002450:	68ba      	ldr	r2, [r7, #8]
20002452:	683b      	ldr	r3, [r7, #0]
20002454:	18d2      	adds	r2, r2, r3
20002456:	693b      	ldr	r3, [r7, #16]
20002458:	429a      	cmp	r2, r3
2000245a:	dcf0      	bgt.n	2000243e <fillRectangle+0x1a>
	for (i = x; i < x + width; i++) {
2000245c:	697b      	ldr	r3, [r7, #20]
2000245e:	3301      	adds	r3, #1
20002460:	617b      	str	r3, [r7, #20]
20002462:	68fa      	ldr	r2, [r7, #12]
20002464:	687b      	ldr	r3, [r7, #4]
20002466:	18d2      	adds	r2, r2, r3
20002468:	697b      	ldr	r3, [r7, #20]
2000246a:	429a      	cmp	r2, r3
2000246c:	dce4      	bgt.n	20002438 <fillRectangle+0x14>
		}
	}
}
2000246e:	46c0      	nop			; (mov r8, r8)
20002470:	46bd      	mov	sp, r7
20002472:	b006      	add	sp, #24
20002474:	bd80      	pop	{r7, pc}

20002476 <clearRectangle>:

void clearRectangle( int x, int y, int width, int height ){
20002476:	b580      	push	{r7, lr}
20002478:	b086      	sub	sp, #24
2000247a:	af00      	add	r7, sp, #0
2000247c:	60f8      	str	r0, [r7, #12]
2000247e:	60b9      	str	r1, [r7, #8]
20002480:	607a      	str	r2, [r7, #4]
20002482:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20002484:	68fb      	ldr	r3, [r7, #12]
20002486:	617b      	str	r3, [r7, #20]
20002488:	e014      	b.n	200024b4 <clearRectangle+0x3e>
		for (j = y; j < y + height; j++) {
2000248a:	68bb      	ldr	r3, [r7, #8]
2000248c:	613b      	str	r3, [r7, #16]
2000248e:	e008      	b.n	200024a2 <clearRectangle+0x2c>
			pixel(i, j, 0, 3);
20002490:	6939      	ldr	r1, [r7, #16]
20002492:	6978      	ldr	r0, [r7, #20]
20002494:	2303      	movs	r3, #3
20002496:	2200      	movs	r2, #0
20002498:	f7ff fd3c 	bl	20001f14 <pixel>
		for (j = y; j < y + height; j++) {
2000249c:	693b      	ldr	r3, [r7, #16]
2000249e:	3301      	adds	r3, #1
200024a0:	613b      	str	r3, [r7, #16]
200024a2:	68ba      	ldr	r2, [r7, #8]
200024a4:	683b      	ldr	r3, [r7, #0]
200024a6:	18d2      	adds	r2, r2, r3
200024a8:	693b      	ldr	r3, [r7, #16]
200024aa:	429a      	cmp	r2, r3
200024ac:	dcf0      	bgt.n	20002490 <clearRectangle+0x1a>
	for (i = x; i < x + width; i++) {
200024ae:	697b      	ldr	r3, [r7, #20]
200024b0:	3301      	adds	r3, #1
200024b2:	617b      	str	r3, [r7, #20]
200024b4:	68fa      	ldr	r2, [r7, #12]
200024b6:	687b      	ldr	r3, [r7, #4]
200024b8:	18d2      	adds	r2, r2, r3
200024ba:	697b      	ldr	r3, [r7, #20]
200024bc:	429a      	cmp	r2, r3
200024be:	dce4      	bgt.n	2000248a <clearRectangle+0x14>
		}
	}
}
200024c0:	46c0      	nop			; (mov r8, r8)
200024c2:	46bd      	mov	sp, r7
200024c4:	b006      	add	sp, #24
200024c6:	bd80      	pop	{r7, pc}

200024c8 <grayScaleTest>:


void grayScaleTest( void ) {
200024c8:	b590      	push	{r4, r7, lr}
200024ca:	b087      	sub	sp, #28
200024cc:	af00      	add	r7, sp, #0
	int x = 10;
200024ce:	230a      	movs	r3, #10
200024d0:	617b      	str	r3, [r7, #20]
	int y = 10;
200024d2:	230a      	movs	r3, #10
200024d4:	613b      	str	r3, [r7, #16]
	int width = 70;
200024d6:	2346      	movs	r3, #70	; 0x46
200024d8:	60fb      	str	r3, [r7, #12]
	int height = 50;
200024da:	2332      	movs	r3, #50	; 0x32
200024dc:	60bb      	str	r3, [r7, #8]
	
	int x2 = 50;
200024de:	2332      	movs	r3, #50	; 0x32
200024e0:	607b      	str	r3, [r7, #4]
	
	fillRectangle(x, y, width, height);
200024e2:	68bb      	ldr	r3, [r7, #8]
200024e4:	68fa      	ldr	r2, [r7, #12]
200024e6:	6939      	ldr	r1, [r7, #16]
200024e8:	6978      	ldr	r0, [r7, #20]
200024ea:	f7ff ff9b 	bl	20002424 <fillRectangle>
	
	int i;
	int k = 5;
200024ee:	2305      	movs	r3, #5
200024f0:	603b      	str	r3, [r7, #0]
	while(1) {
		clear_backBuffer();
200024f2:	f7ff fadf 	bl	20001ab4 <clear_backBuffer>
		fillRectangle(x, y, width, height);
200024f6:	68bb      	ldr	r3, [r7, #8]
200024f8:	68fa      	ldr	r2, [r7, #12]
200024fa:	6939      	ldr	r1, [r7, #16]
200024fc:	6978      	ldr	r0, [r7, #20]
200024fe:	f7ff ff91 	bl	20002424 <fillRectangle>
		clearRectangle(x+2+2, y+1, width-k, height-k); //outer square
20002502:	697b      	ldr	r3, [r7, #20]
20002504:	1d18      	adds	r0, r3, #4
20002506:	693b      	ldr	r3, [r7, #16]
20002508:	1c59      	adds	r1, r3, #1
2000250a:	68fa      	ldr	r2, [r7, #12]
2000250c:	683b      	ldr	r3, [r7, #0]
2000250e:	1ad4      	subs	r4, r2, r3
20002510:	68ba      	ldr	r2, [r7, #8]
20002512:	683b      	ldr	r3, [r7, #0]
20002514:	1ad3      	subs	r3, r2, r3
20002516:	0022      	movs	r2, r4
20002518:	f7ff ffad 	bl	20002476 <clearRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
2000251c:	697b      	ldr	r3, [r7, #20]
2000251e:	1c9a      	adds	r2, r3, #2
20002520:	683b      	ldr	r3, [r7, #0]
20002522:	18d0      	adds	r0, r2, r3
20002524:	693b      	ldr	r3, [r7, #16]
20002526:	1c99      	adds	r1, r3, #2
20002528:	68fb      	ldr	r3, [r7, #12]
2000252a:	1f1a      	subs	r2, r3, #4
2000252c:	683b      	ldr	r3, [r7, #0]
2000252e:	1ad4      	subs	r4, r2, r3
20002530:	68bb      	ldr	r3, [r7, #8]
20002532:	1f1a      	subs	r2, r3, #4
20002534:	683b      	ldr	r3, [r7, #0]
20002536:	1ad3      	subs	r3, r2, r3
20002538:	0022      	movs	r2, r4
2000253a:	f7ff ff9c 	bl	20002476 <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
2000253e:	4b2d      	ldr	r3, [pc, #180]	; (200025f4 <grayScaleTest+0x12c>)
20002540:	0018      	movs	r0, r3
20002542:	f7ff fe77 	bl	20002234 <graphic_draw_screen>
		clear_backBuffer();
20002546:	f7ff fab5 	bl	20001ab4 <clear_backBuffer>
		fillRectangle(x, y, width, height);
2000254a:	68bb      	ldr	r3, [r7, #8]
2000254c:	68fa      	ldr	r2, [r7, #12]
2000254e:	6939      	ldr	r1, [r7, #16]
20002550:	6978      	ldr	r0, [r7, #20]
20002552:	f7ff ff67 	bl	20002424 <fillRectangle>
		
		fillRectangle(x+2+2, y+1, width-k, height-k); //outer white square
20002556:	697b      	ldr	r3, [r7, #20]
20002558:	1d18      	adds	r0, r3, #4
2000255a:	693b      	ldr	r3, [r7, #16]
2000255c:	1c59      	adds	r1, r3, #1
2000255e:	68fa      	ldr	r2, [r7, #12]
20002560:	683b      	ldr	r3, [r7, #0]
20002562:	1ad4      	subs	r4, r2, r3
20002564:	68ba      	ldr	r2, [r7, #8]
20002566:	683b      	ldr	r3, [r7, #0]
20002568:	1ad3      	subs	r3, r2, r3
2000256a:	0022      	movs	r2, r4
2000256c:	f7ff ff5a 	bl	20002424 <fillRectangle>
		fillRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20002570:	697b      	ldr	r3, [r7, #20]
20002572:	1c9a      	adds	r2, r3, #2
20002574:	683b      	ldr	r3, [r7, #0]
20002576:	18d0      	adds	r0, r2, r3
20002578:	693b      	ldr	r3, [r7, #16]
2000257a:	1c99      	adds	r1, r3, #2
2000257c:	68fb      	ldr	r3, [r7, #12]
2000257e:	1f1a      	subs	r2, r3, #4
20002580:	683b      	ldr	r3, [r7, #0]
20002582:	1ad4      	subs	r4, r2, r3
20002584:	68bb      	ldr	r3, [r7, #8]
20002586:	1f1a      	subs	r2, r3, #4
20002588:	683b      	ldr	r3, [r7, #0]
2000258a:	1ad3      	subs	r3, r2, r3
2000258c:	0022      	movs	r2, r4
2000258e:	f7ff ff49 	bl	20002424 <fillRectangle>
		clearRectangle(x+12, y+5, 5, 5);
20002592:	697b      	ldr	r3, [r7, #20]
20002594:	330c      	adds	r3, #12
20002596:	0018      	movs	r0, r3
20002598:	693b      	ldr	r3, [r7, #16]
2000259a:	1d59      	adds	r1, r3, #5
2000259c:	2305      	movs	r3, #5
2000259e:	2205      	movs	r2, #5
200025a0:	f7ff ff69 	bl	20002476 <clearRectangle>
		
		graphic_draw_screen(draw_buffer_black);
200025a4:	4b13      	ldr	r3, [pc, #76]	; (200025f4 <grayScaleTest+0x12c>)
200025a6:	0018      	movs	r0, r3
200025a8:	f7ff fe44 	bl	20002234 <graphic_draw_screen>
		delay_milli(20);
200025ac:	2014      	movs	r0, #20
200025ae:	f7ff fa55 	bl	20001a5c <delay_milli>
		
		clear_backBuffer();
200025b2:	f7ff fa7f 	bl	20001ab4 <clear_backBuffer>
		fillRectangle(x, y, width, height);
200025b6:	68bb      	ldr	r3, [r7, #8]
200025b8:	68fa      	ldr	r2, [r7, #12]
200025ba:	6939      	ldr	r1, [r7, #16]
200025bc:	6978      	ldr	r0, [r7, #20]
200025be:	f7ff ff31 	bl	20002424 <fillRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
200025c2:	697b      	ldr	r3, [r7, #20]
200025c4:	1c9a      	adds	r2, r3, #2
200025c6:	683b      	ldr	r3, [r7, #0]
200025c8:	18d0      	adds	r0, r2, r3
200025ca:	693b      	ldr	r3, [r7, #16]
200025cc:	1c99      	adds	r1, r3, #2
200025ce:	68fb      	ldr	r3, [r7, #12]
200025d0:	1f1a      	subs	r2, r3, #4
200025d2:	683b      	ldr	r3, [r7, #0]
200025d4:	1ad4      	subs	r4, r2, r3
200025d6:	68bb      	ldr	r3, [r7, #8]
200025d8:	1f1a      	subs	r2, r3, #4
200025da:	683b      	ldr	r3, [r7, #0]
200025dc:	1ad3      	subs	r3, r2, r3
200025de:	0022      	movs	r2, r4
200025e0:	f7ff ff49 	bl	20002476 <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
200025e4:	4b03      	ldr	r3, [pc, #12]	; (200025f4 <grayScaleTest+0x12c>)
200025e6:	0018      	movs	r0, r3
200025e8:	f7ff fe24 	bl	20002234 <graphic_draw_screen>
		
		delay_milli(20);
200025ec:	2014      	movs	r0, #20
200025ee:	f7ff fa35 	bl	20001a5c <delay_milli>
		clear_backBuffer();
200025f2:	e77e      	b.n	200024f2 <grayScaleTest+0x2a>
200025f4:	2000488c 	andcs	r4, r0, ip, lsl #17

200025f8 <set_up_draw_buffers>:
	}
}

/** Should prepare the different drawing buffers, before the drawing of each frame.*/
void set_up_draw_buffers( void ) {
200025f8:	b580      	push	{r7, lr}
200025fa:	b082      	sub	sp, #8
200025fc:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 1024; i++) {
200025fe:	2300      	movs	r3, #0
20002600:	607b      	str	r3, [r7, #4]
20002602:	e065      	b.n	200026d0 <set_up_draw_buffers+0xd8>
		draw_buffer_black[i] = backBuffer[i] & (~backBufferGray[i] & ~backBufferLight[i]); //Had to work a bit on these
20002604:	4a36      	ldr	r2, [pc, #216]	; (200026e0 <set_up_draw_buffers+0xe8>)
20002606:	687b      	ldr	r3, [r7, #4]
20002608:	18d3      	adds	r3, r2, r3
2000260a:	781b      	ldrb	r3, [r3, #0]
2000260c:	b25b      	sxtb	r3, r3
2000260e:	4935      	ldr	r1, [pc, #212]	; (200026e4 <set_up_draw_buffers+0xec>)
20002610:	687a      	ldr	r2, [r7, #4]
20002612:	188a      	adds	r2, r1, r2
20002614:	7811      	ldrb	r1, [r2, #0]
20002616:	4834      	ldr	r0, [pc, #208]	; (200026e8 <set_up_draw_buffers+0xf0>)
20002618:	687a      	ldr	r2, [r7, #4]
2000261a:	1882      	adds	r2, r0, r2
2000261c:	7812      	ldrb	r2, [r2, #0]
2000261e:	430a      	orrs	r2, r1
20002620:	b2d2      	uxtb	r2, r2
20002622:	b252      	sxtb	r2, r2
20002624:	43d2      	mvns	r2, r2
20002626:	b252      	sxtb	r2, r2
20002628:	4013      	ands	r3, r2
2000262a:	b25b      	sxtb	r3, r3
2000262c:	b2d9      	uxtb	r1, r3
2000262e:	4a2f      	ldr	r2, [pc, #188]	; (200026ec <set_up_draw_buffers+0xf4>)
20002630:	687b      	ldr	r3, [r7, #4]
20002632:	18d3      	adds	r3, r2, r3
20002634:	1c0a      	adds	r2, r1, #0
20002636:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray[i] = (backBuffer[i] | backBufferGray[i]) & ~backBufferLight[i]; //in order to make it possible
20002638:	4a29      	ldr	r2, [pc, #164]	; (200026e0 <set_up_draw_buffers+0xe8>)
2000263a:	687b      	ldr	r3, [r7, #4]
2000263c:	18d3      	adds	r3, r2, r3
2000263e:	781a      	ldrb	r2, [r3, #0]
20002640:	4928      	ldr	r1, [pc, #160]	; (200026e4 <set_up_draw_buffers+0xec>)
20002642:	687b      	ldr	r3, [r7, #4]
20002644:	18cb      	adds	r3, r1, r3
20002646:	781b      	ldrb	r3, [r3, #0]
20002648:	4313      	orrs	r3, r2
2000264a:	b2db      	uxtb	r3, r3
2000264c:	b25b      	sxtb	r3, r3
2000264e:	4926      	ldr	r1, [pc, #152]	; (200026e8 <set_up_draw_buffers+0xf0>)
20002650:	687a      	ldr	r2, [r7, #4]
20002652:	188a      	adds	r2, r1, r2
20002654:	7812      	ldrb	r2, [r2, #0]
20002656:	b252      	sxtb	r2, r2
20002658:	43d2      	mvns	r2, r2
2000265a:	b252      	sxtb	r2, r2
2000265c:	4013      	ands	r3, r2
2000265e:	b25b      	sxtb	r3, r3
20002660:	b2d9      	uxtb	r1, r3
20002662:	4a23      	ldr	r2, [pc, #140]	; (200026f0 <set_up_draw_buffers+0xf8>)
20002664:	687b      	ldr	r3, [r7, #4]
20002666:	18d3      	adds	r3, r2, r3
20002668:	1c0a      	adds	r2, r1, #0
2000266a:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_light[i] = (backBuffer[i] | backBufferLight[i]) & ~backBufferGray[i]; //to show a lighter sprite
2000266c:	4a1c      	ldr	r2, [pc, #112]	; (200026e0 <set_up_draw_buffers+0xe8>)
2000266e:	687b      	ldr	r3, [r7, #4]
20002670:	18d3      	adds	r3, r2, r3
20002672:	781a      	ldrb	r2, [r3, #0]
20002674:	491c      	ldr	r1, [pc, #112]	; (200026e8 <set_up_draw_buffers+0xf0>)
20002676:	687b      	ldr	r3, [r7, #4]
20002678:	18cb      	adds	r3, r1, r3
2000267a:	781b      	ldrb	r3, [r3, #0]
2000267c:	4313      	orrs	r3, r2
2000267e:	b2db      	uxtb	r3, r3
20002680:	b25b      	sxtb	r3, r3
20002682:	4918      	ldr	r1, [pc, #96]	; (200026e4 <set_up_draw_buffers+0xec>)
20002684:	687a      	ldr	r2, [r7, #4]
20002686:	188a      	adds	r2, r1, r2
20002688:	7812      	ldrb	r2, [r2, #0]
2000268a:	b252      	sxtb	r2, r2
2000268c:	43d2      	mvns	r2, r2
2000268e:	b252      	sxtb	r2, r2
20002690:	4013      	ands	r3, r2
20002692:	b25b      	sxtb	r3, r3
20002694:	b2d9      	uxtb	r1, r3
20002696:	4a17      	ldr	r2, [pc, #92]	; (200026f4 <set_up_draw_buffers+0xfc>)
20002698:	687b      	ldr	r3, [r7, #4]
2000269a:	18d3      	adds	r3, r2, r3
2000269c:	1c0a      	adds	r2, r1, #0
2000269e:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray_light[i] = backBuffer[i] | backBufferGray[i] | backBufferLight[i]; //on top of a darker one.
200026a0:	4a0f      	ldr	r2, [pc, #60]	; (200026e0 <set_up_draw_buffers+0xe8>)
200026a2:	687b      	ldr	r3, [r7, #4]
200026a4:	18d3      	adds	r3, r2, r3
200026a6:	781a      	ldrb	r2, [r3, #0]
200026a8:	490e      	ldr	r1, [pc, #56]	; (200026e4 <set_up_draw_buffers+0xec>)
200026aa:	687b      	ldr	r3, [r7, #4]
200026ac:	18cb      	adds	r3, r1, r3
200026ae:	781b      	ldrb	r3, [r3, #0]
200026b0:	4313      	orrs	r3, r2
200026b2:	b2da      	uxtb	r2, r3
200026b4:	490c      	ldr	r1, [pc, #48]	; (200026e8 <set_up_draw_buffers+0xf0>)
200026b6:	687b      	ldr	r3, [r7, #4]
200026b8:	18cb      	adds	r3, r1, r3
200026ba:	781b      	ldrb	r3, [r3, #0]
200026bc:	4313      	orrs	r3, r2
200026be:	b2d9      	uxtb	r1, r3
200026c0:	4a0d      	ldr	r2, [pc, #52]	; (200026f8 <set_up_draw_buffers+0x100>)
200026c2:	687b      	ldr	r3, [r7, #4]
200026c4:	18d3      	adds	r3, r2, r3
200026c6:	1c0a      	adds	r2, r1, #0
200026c8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 1024; i++) {
200026ca:	687b      	ldr	r3, [r7, #4]
200026cc:	3301      	adds	r3, #1
200026ce:	607b      	str	r3, [r7, #4]
200026d0:	687b      	ldr	r3, [r7, #4]
200026d2:	4a0a      	ldr	r2, [pc, #40]	; (200026fc <set_up_draw_buffers+0x104>)
200026d4:	4293      	cmp	r3, r2
200026d6:	dd95      	ble.n	20002604 <set_up_draw_buffers+0xc>
	}
}
200026d8:	46c0      	nop			; (mov r8, r8)
200026da:	46bd      	mov	sp, r7
200026dc:	b002      	add	sp, #8
200026de:	bd80      	pop	{r7, pc}
200026e0:	2000408c 	andcs	r4, r0, ip, lsl #1
200026e4:	2000388c 	andcs	r3, r0, ip, lsl #17
200026e8:	2000508c 	andcs	r5, r0, ip, lsl #1
200026ec:	2000488c 	andcs	r4, r0, ip, lsl #17
200026f0:	20003c8c 	andcs	r3, r0, ip, lsl #25
200026f4:	2000448c 	andcs	r4, r0, ip, lsl #9
200026f8:	20004c8c 	andcs	r4, r0, ip, lsl #25
200026fc:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20002700 <draw_game_object>:

void draw_game_object(GameObject *gObj) {
20002700:	b580      	push	{r7, lr}
20002702:	b086      	sub	sp, #24
20002704:	af02      	add	r7, sp, #8
20002706:	6078      	str	r0, [r7, #4]
	int frame = gObj->current_frame;
20002708:	687b      	ldr	r3, [r7, #4]
2000270a:	695b      	ldr	r3, [r3, #20]
2000270c:	60fb      	str	r3, [r7, #12]
	draw_sprite(gObj->images[frame].blackImage, gObj->xPos, gObj->yPos, 1, 3);
2000270e:	687b      	ldr	r3, [r7, #4]
20002710:	6819      	ldr	r1, [r3, #0]
20002712:	68fa      	ldr	r2, [r7, #12]
20002714:	0013      	movs	r3, r2
20002716:	005b      	lsls	r3, r3, #1
20002718:	189b      	adds	r3, r3, r2
2000271a:	009b      	lsls	r3, r3, #2
2000271c:	18cb      	adds	r3, r1, r3
2000271e:	6818      	ldr	r0, [r3, #0]
20002720:	687b      	ldr	r3, [r7, #4]
20002722:	6859      	ldr	r1, [r3, #4]
20002724:	687b      	ldr	r3, [r7, #4]
20002726:	689a      	ldr	r2, [r3, #8]
20002728:	2303      	movs	r3, #3
2000272a:	9300      	str	r3, [sp, #0]
2000272c:	2301      	movs	r3, #1
2000272e:	f7ff fdec 	bl	2000230a <draw_sprite>
	draw_sprite(gObj->images[frame].grayImage, gObj->xPos, gObj->yPos, 1, 2);
20002732:	687b      	ldr	r3, [r7, #4]
20002734:	6819      	ldr	r1, [r3, #0]
20002736:	68fa      	ldr	r2, [r7, #12]
20002738:	0013      	movs	r3, r2
2000273a:	005b      	lsls	r3, r3, #1
2000273c:	189b      	adds	r3, r3, r2
2000273e:	009b      	lsls	r3, r3, #2
20002740:	18cb      	adds	r3, r1, r3
20002742:	6858      	ldr	r0, [r3, #4]
20002744:	687b      	ldr	r3, [r7, #4]
20002746:	6859      	ldr	r1, [r3, #4]
20002748:	687b      	ldr	r3, [r7, #4]
2000274a:	689a      	ldr	r2, [r3, #8]
2000274c:	2302      	movs	r3, #2
2000274e:	9300      	str	r3, [sp, #0]
20002750:	2301      	movs	r3, #1
20002752:	f7ff fdda 	bl	2000230a <draw_sprite>
	draw_sprite(gObj->images[frame].lightImage, gObj->xPos, gObj->yPos, 1, 1);
20002756:	687b      	ldr	r3, [r7, #4]
20002758:	6819      	ldr	r1, [r3, #0]
2000275a:	68fa      	ldr	r2, [r7, #12]
2000275c:	0013      	movs	r3, r2
2000275e:	005b      	lsls	r3, r3, #1
20002760:	189b      	adds	r3, r3, r2
20002762:	009b      	lsls	r3, r3, #2
20002764:	18cb      	adds	r3, r1, r3
20002766:	6898      	ldr	r0, [r3, #8]
20002768:	687b      	ldr	r3, [r7, #4]
2000276a:	6859      	ldr	r1, [r3, #4]
2000276c:	687b      	ldr	r3, [r7, #4]
2000276e:	689a      	ldr	r2, [r3, #8]
20002770:	2301      	movs	r3, #1
20002772:	9300      	str	r3, [sp, #0]
20002774:	2301      	movs	r3, #1
20002776:	f7ff fdc8 	bl	2000230a <draw_sprite>
}
2000277a:	46c0      	nop			; (mov r8, r8)
2000277c:	46bd      	mov	sp, r7
2000277e:	b004      	add	sp, #16
20002780:	bd80      	pop	{r7, pc}

20002782 <show_frame>:


void show_frame(int frame_length) {
20002782:	b580      	push	{r7, lr}
20002784:	b082      	sub	sp, #8
20002786:	af00      	add	r7, sp, #0
20002788:	6078      	str	r0, [r7, #4]
	set_up_draw_buffers();
2000278a:	f7ff ff35 	bl	200025f8 <set_up_draw_buffers>
	
	while(frame_length--) {
2000278e:	e01b      	b.n	200027c8 <show_frame+0x46>
		graphic_draw_screen(draw_buffer_black_gray_light);
20002790:	4b13      	ldr	r3, [pc, #76]	; (200027e0 <show_frame+0x5e>)
20002792:	0018      	movs	r0, r3
20002794:	f7ff fd4e 	bl	20002234 <graphic_draw_screen>
		delay_milli(1);
20002798:	2001      	movs	r0, #1
2000279a:	f7ff f95f 	bl	20001a5c <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
2000279e:	4b11      	ldr	r3, [pc, #68]	; (200027e4 <show_frame+0x62>)
200027a0:	0018      	movs	r0, r3
200027a2:	f7ff fd47 	bl	20002234 <graphic_draw_screen>
		delay_milli(1);
200027a6:	2001      	movs	r0, #1
200027a8:	f7ff f958 	bl	20001a5c <delay_milli>
		
		graphic_draw_screen(draw_buffer_black_gray);
200027ac:	4b0e      	ldr	r3, [pc, #56]	; (200027e8 <show_frame+0x66>)
200027ae:	0018      	movs	r0, r3
200027b0:	f7ff fd40 	bl	20002234 <graphic_draw_screen>
		delay_milli(1);
200027b4:	2001      	movs	r0, #1
200027b6:	f7ff f951 	bl	20001a5c <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
200027ba:	4b0a      	ldr	r3, [pc, #40]	; (200027e4 <show_frame+0x62>)
200027bc:	0018      	movs	r0, r3
200027be:	f7ff fd39 	bl	20002234 <graphic_draw_screen>
		delay_milli(1);
200027c2:	2001      	movs	r0, #1
200027c4:	f7ff f94a 	bl	20001a5c <delay_milli>
	while(frame_length--) {
200027c8:	687b      	ldr	r3, [r7, #4]
200027ca:	1e5a      	subs	r2, r3, #1
200027cc:	607a      	str	r2, [r7, #4]
200027ce:	2b00      	cmp	r3, #0
200027d0:	d1de      	bne.n	20002790 <show_frame+0xe>
	}
	
	clear_all_backBuffers();	//Maybe we could be more effective by only clearing the necessary stuff,
200027d2:	f7ff f97b 	bl	20001acc <clear_all_backBuffers>
								//but let's keep it like this if it works.
200027d6:	46c0      	nop			; (mov r8, r8)
200027d8:	46bd      	mov	sp, r7
200027da:	b002      	add	sp, #8
200027dc:	bd80      	pop	{r7, pc}
200027de:	46c0      	nop			; (mov r8, r8)
200027e0:	20004c8c 	andcs	r4, r0, ip, lsl #25
200027e4:	2000488c 	andcs	r4, r0, ip, lsl #17
200027e8:	20003c8c 	andcs	r3, r0, ip, lsl #25

200027ec <load_image>:
#include "image.h"

void load_image( Image *image, sprite *blackImage, sprite *grayImage, sprite *lightImage ) {
200027ec:	b580      	push	{r7, lr}
200027ee:	b084      	sub	sp, #16
200027f0:	af00      	add	r7, sp, #0
200027f2:	60f8      	str	r0, [r7, #12]
200027f4:	60b9      	str	r1, [r7, #8]
200027f6:	607a      	str	r2, [r7, #4]
200027f8:	603b      	str	r3, [r7, #0]
	image->blackImage = blackImage;
200027fa:	68fb      	ldr	r3, [r7, #12]
200027fc:	68ba      	ldr	r2, [r7, #8]
200027fe:	601a      	str	r2, [r3, #0]
	image->grayImage = grayImage;
20002800:	68fb      	ldr	r3, [r7, #12]
20002802:	687a      	ldr	r2, [r7, #4]
20002804:	605a      	str	r2, [r3, #4]
	image->lightImage = lightImage;
20002806:	68fb      	ldr	r3, [r7, #12]
20002808:	683a      	ldr	r2, [r7, #0]
2000280a:	609a      	str	r2, [r3, #8]
}
2000280c:	46c0      	nop			; (mov r8, r8)
2000280e:	46bd      	mov	sp, r7
20002810:	b004      	add	sp, #16
20002812:	bd80      	pop	{r7, pc}

20002814 <load_sprite>:
#include "sprite.h"

void load_sprite(sprite* s, unsigned char* data, int width, int height)
{
20002814:	b580      	push	{r7, lr}
20002816:	b084      	sub	sp, #16
20002818:	af00      	add	r7, sp, #0
2000281a:	60f8      	str	r0, [r7, #12]
2000281c:	60b9      	str	r1, [r7, #8]
2000281e:	607a      	str	r2, [r7, #4]
20002820:	603b      	str	r3, [r7, #0]
	s->width = width;
20002822:	687a      	ldr	r2, [r7, #4]
20002824:	68fb      	ldr	r3, [r7, #12]
20002826:	601a      	str	r2, [r3, #0]
	s->height = height;
20002828:	683a      	ldr	r2, [r7, #0]
2000282a:	68fb      	ldr	r3, [r7, #12]
2000282c:	605a      	str	r2, [r3, #4]
	s->data = data;
2000282e:	68fb      	ldr	r3, [r7, #12]
20002830:	68ba      	ldr	r2, [r7, #8]
20002832:	609a      	str	r2, [r3, #8]
}
20002834:	46c0      	nop			; (mov r8, r8)
20002836:	46bd      	mov	sp, r7
20002838:	b004      	add	sp, #16
2000283a:	bd80      	pop	{r7, pc}

2000283c <set_up_DIL>:
#include "gpio.h"

/** Sets up PE0-7 as inports and PE8-15 as outports. */
void set_up_DIL( void ) {
2000283c:	b580      	push	{r7, lr}
2000283e:	af00      	add	r7, sp, #0
	GPIO_D.Moder = 0x55550000;
20002840:	4b02      	ldr	r3, [pc, #8]	; (2000284c <set_up_DIL+0x10>)
20002842:	4a03      	ldr	r2, [pc, #12]	; (20002850 <set_up_DIL+0x14>)
20002844:	601a      	str	r2, [r3, #0]
}
20002846:	46c0      	nop			; (mov r8, r8)
20002848:	46bd      	mov	sp, r7
2000284a:	bd80      	pop	{r7, pc}
2000284c:	40020c00 	andmi	r0, r2, r0, lsl #24
20002850:	55550000 	ldrbpl	r0, [r5, #-0]

20002854 <read_DIL>:

char read_DIL( void ) {
20002854:	b580      	push	{r7, lr}
20002856:	af00      	add	r7, sp, #0
	GPIO_D.odrHigh = GPIO_D.idrLow; //Show on bargraph
20002858:	4b05      	ldr	r3, [pc, #20]	; (20002870 <read_DIL+0x1c>)
2000285a:	4a05      	ldr	r2, [pc, #20]	; (20002870 <read_DIL+0x1c>)
2000285c:	7c12      	ldrb	r2, [r2, #16]
2000285e:	b2d2      	uxtb	r2, r2
20002860:	755a      	strb	r2, [r3, #21]
	return GPIO_D.idrLow;
20002862:	4b03      	ldr	r3, [pc, #12]	; (20002870 <read_DIL+0x1c>)
20002864:	7c1b      	ldrb	r3, [r3, #16]
20002866:	b2db      	uxtb	r3, r3
}
20002868:	0018      	movs	r0, r3
2000286a:	46bd      	mov	sp, r7
2000286c:	bd80      	pop	{r7, pc}
2000286e:	46c0      	nop			; (mov r8, r8)
20002870:	40020c00 	andmi	r0, r2, r0, lsl #24

20002874 <read_DIL_single>:


int read_DIL_single( int bit ) {
20002874:	b590      	push	{r4, r7, lr}
20002876:	b085      	sub	sp, #20
20002878:	af00      	add	r7, sp, #0
2000287a:	6078      	str	r0, [r7, #4]
	char DIL = read_DIL();
2000287c:	230f      	movs	r3, #15
2000287e:	18fc      	adds	r4, r7, r3
20002880:	f7ff ffe8 	bl	20002854 <read_DIL>
20002884:	0003      	movs	r3, r0
20002886:	7023      	strb	r3, [r4, #0]
	if (DIL & (1<<bit)) {
20002888:	230f      	movs	r3, #15
2000288a:	18fb      	adds	r3, r7, r3
2000288c:	781a      	ldrb	r2, [r3, #0]
2000288e:	687b      	ldr	r3, [r7, #4]
20002890:	411a      	asrs	r2, r3
20002892:	0013      	movs	r3, r2
20002894:	2201      	movs	r2, #1
20002896:	4013      	ands	r3, r2
20002898:	d001      	beq.n	2000289e <read_DIL_single+0x2a>
		return 1;
2000289a:	2301      	movs	r3, #1
2000289c:	e000      	b.n	200028a0 <read_DIL_single+0x2c>
	} else {
		return 0;
2000289e:	2300      	movs	r3, #0
	}
200028a0:	0018      	movs	r0, r3
200028a2:	46bd      	mov	sp, r7
200028a4:	b005      	add	sp, #20
200028a6:	bd90      	pop	{r4, r7, pc}

200028a8 <ascii_ctrl_bit_set>:
void ascii_write_data(unsigned char data);
unsigned char ascii_read_status(void);
unsigned char ascii_read_data(void);


void ascii_ctrl_bit_set(unsigned char x){
200028a8:	b580      	push	{r7, lr}
200028aa:	b084      	sub	sp, #16
200028ac:	af00      	add	r7, sp, #0
200028ae:	0002      	movs	r2, r0
200028b0:	1dfb      	adds	r3, r7, #7
200028b2:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och ettstÃƒÂ¤ll de bitar som ÃƒÂ¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
200028b4:	4a0c      	ldr	r2, [pc, #48]	; (200028e8 <ascii_ctrl_bit_set+0x40>)
200028b6:	230f      	movs	r3, #15
200028b8:	18fb      	adds	r3, r7, r3
200028ba:	7812      	ldrb	r2, [r2, #0]
200028bc:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
200028be:	1dfa      	adds	r2, r7, #7
200028c0:	230f      	movs	r3, #15
200028c2:	18fb      	adds	r3, r7, r3
200028c4:	7812      	ldrb	r2, [r2, #0]
200028c6:	781b      	ldrb	r3, [r3, #0]
200028c8:	4313      	orrs	r3, r2
200028ca:	b2da      	uxtb	r2, r3
200028cc:	230f      	movs	r3, #15
200028ce:	18fb      	adds	r3, r7, r3
200028d0:	2104      	movs	r1, #4
200028d2:	430a      	orrs	r2, r1
200028d4:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
200028d6:	4a04      	ldr	r2, [pc, #16]	; (200028e8 <ascii_ctrl_bit_set+0x40>)
200028d8:	230f      	movs	r3, #15
200028da:	18fb      	adds	r3, r7, r3
200028dc:	781b      	ldrb	r3, [r3, #0]
200028de:	7013      	strb	r3, [r2, #0]
}
200028e0:	46c0      	nop			; (mov r8, r8)
200028e2:	46bd      	mov	sp, r7
200028e4:	b004      	add	sp, #16
200028e6:	bd80      	pop	{r7, pc}
200028e8:	40021014 	andmi	r1, r2, r4, lsl r0

200028ec <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
200028ec:	b580      	push	{r7, lr}
200028ee:	b084      	sub	sp, #16
200028f0:	af00      	add	r7, sp, #0
200028f2:	0002      	movs	r2, r0
200028f4:	1dfb      	adds	r3, r7, #7
200028f6:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och nollstÃ¤ll de bitar som Ã¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
200028f8:	4a0f      	ldr	r2, [pc, #60]	; (20002938 <ascii_ctrl_bit_clear+0x4c>)
200028fa:	230f      	movs	r3, #15
200028fc:	18fb      	adds	r3, r7, r3
200028fe:	7812      	ldrb	r2, [r2, #0]
20002900:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
20002902:	1dfb      	adds	r3, r7, #7
20002904:	781b      	ldrb	r3, [r3, #0]
20002906:	b25b      	sxtb	r3, r3
20002908:	43db      	mvns	r3, r3
2000290a:	b25b      	sxtb	r3, r3
2000290c:	220f      	movs	r2, #15
2000290e:	18ba      	adds	r2, r7, r2
20002910:	7812      	ldrb	r2, [r2, #0]
20002912:	b252      	sxtb	r2, r2
20002914:	4013      	ands	r3, r2
20002916:	b25b      	sxtb	r3, r3
20002918:	2204      	movs	r2, #4
2000291a:	4313      	orrs	r3, r2
2000291c:	b25a      	sxtb	r2, r3
2000291e:	230f      	movs	r3, #15
20002920:	18fb      	adds	r3, r7, r3
20002922:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20002924:	4a04      	ldr	r2, [pc, #16]	; (20002938 <ascii_ctrl_bit_clear+0x4c>)
20002926:	230f      	movs	r3, #15
20002928:	18fb      	adds	r3, r7, r3
2000292a:	781b      	ldrb	r3, [r3, #0]
2000292c:	7013      	strb	r3, [r2, #0]
}
2000292e:	46c0      	nop			; (mov r8, r8)
20002930:	46bd      	mov	sp, r7
20002932:	b004      	add	sp, #16
20002934:	bd80      	pop	{r7, pc}
20002936:	46c0      	nop			; (mov r8, r8)
20002938:	40021014 	andmi	r1, r2, r4, lsl r0

2000293c <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
2000293c:	b580      	push	{r7, lr}
2000293e:	b082      	sub	sp, #8
20002940:	af00      	add	r7, sp, #0
20002942:	0002      	movs	r2, r0
20002944:	1dfb      	adds	r3, r7, #7
20002946:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20002948:	2001      	movs	r0, #1
2000294a:	f7ff ffcf 	bl	200028ec <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
2000294e:	2002      	movs	r0, #2
20002950:	f7ff ffcc 	bl	200028ec <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20002954:	1dfb      	adds	r3, r7, #7
20002956:	781b      	ldrb	r3, [r3, #0]
20002958:	0018      	movs	r0, r3
2000295a:	f000 f86d 	bl	20002a38 <ascii_write_controller>
}
2000295e:	46c0      	nop			; (mov r8, r8)
20002960:	46bd      	mov	sp, r7
20002962:	b002      	add	sp, #8
20002964:	bd80      	pop	{r7, pc}

20002966 <ascii_write_data>:

void ascii_write_data(unsigned char data){
20002966:	b580      	push	{r7, lr}
20002968:	b082      	sub	sp, #8
2000296a:	af00      	add	r7, sp, #0
2000296c:	0002      	movs	r2, r0
2000296e:	1dfb      	adds	r3, r7, #7
20002970:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20002972:	2001      	movs	r0, #1
20002974:	f7ff ff98 	bl	200028a8 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20002978:	2002      	movs	r0, #2
2000297a:	f7ff ffb7 	bl	200028ec <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
2000297e:	1dfb      	adds	r3, r7, #7
20002980:	781b      	ldrb	r3, [r3, #0]
20002982:	0018      	movs	r0, r3
20002984:	f000 f858 	bl	20002a38 <ascii_write_controller>
}
20002988:	46c0      	nop			; (mov r8, r8)
2000298a:	46bd      	mov	sp, r7
2000298c:	b002      	add	sp, #8
2000298e:	bd80      	pop	{r7, pc}

20002990 <ascii_read_status>:

unsigned char ascii_read_status(void){
20002990:	b590      	push	{r4, r7, lr}
20002992:	b083      	sub	sp, #12
20002994:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20002996:	4b11      	ldr	r3, [pc, #68]	; (200029dc <ascii_read_status+0x4c>)
20002998:	4a10      	ldr	r2, [pc, #64]	; (200029dc <ascii_read_status+0x4c>)
2000299a:	6812      	ldr	r2, [r2, #0]
2000299c:	0412      	lsls	r2, r2, #16
2000299e:	0c12      	lsrs	r2, r2, #16
200029a0:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
200029a2:	2001      	movs	r0, #1
200029a4:	f7ff ffa2 	bl	200028ec <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
200029a8:	2002      	movs	r0, #2
200029aa:	f7ff ff7d 	bl	200028a8 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
200029ae:	1dfc      	adds	r4, r7, #7
200029b0:	f000 f85a 	bl	20002a68 <ascii_read_controller>
200029b4:	0003      	movs	r3, r0
200029b6:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
200029b8:	4b08      	ldr	r3, [pc, #32]	; (200029dc <ascii_read_status+0x4c>)
200029ba:	4a08      	ldr	r2, [pc, #32]	; (200029dc <ascii_read_status+0x4c>)
200029bc:	6812      	ldr	r2, [r2, #0]
200029be:	0412      	lsls	r2, r2, #16
200029c0:	0c12      	lsrs	r2, r2, #16
200029c2:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
200029c4:	4b05      	ldr	r3, [pc, #20]	; (200029dc <ascii_read_status+0x4c>)
200029c6:	4a05      	ldr	r2, [pc, #20]	; (200029dc <ascii_read_status+0x4c>)
200029c8:	6812      	ldr	r2, [r2, #0]
200029ca:	4905      	ldr	r1, [pc, #20]	; (200029e0 <ascii_read_status+0x50>)
200029cc:	430a      	orrs	r2, r1
200029ce:	601a      	str	r2, [r3, #0]
	return rv;
200029d0:	1dfb      	adds	r3, r7, #7
200029d2:	781b      	ldrb	r3, [r3, #0]
}
200029d4:	0018      	movs	r0, r3
200029d6:	46bd      	mov	sp, r7
200029d8:	b003      	add	sp, #12
200029da:	bd90      	pop	{r4, r7, pc}
200029dc:	40021000 	andmi	r1, r2, r0
200029e0:	55550000 	ldrbpl	r0, [r5, #-0]

200029e4 <ascii_read_data>:

unsigned char ascii_read_data(void){
200029e4:	b590      	push	{r4, r7, lr}
200029e6:	b083      	sub	sp, #12
200029e8:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
200029ea:	4b11      	ldr	r3, [pc, #68]	; (20002a30 <ascii_read_data+0x4c>)
200029ec:	4a10      	ldr	r2, [pc, #64]	; (20002a30 <ascii_read_data+0x4c>)
200029ee:	6812      	ldr	r2, [r2, #0]
200029f0:	0412      	lsls	r2, r2, #16
200029f2:	0c12      	lsrs	r2, r2, #16
200029f4:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200029f6:	2001      	movs	r0, #1
200029f8:	f7ff ff56 	bl	200028a8 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
200029fc:	2002      	movs	r0, #2
200029fe:	f7ff ff53 	bl	200028a8 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20002a02:	1dfc      	adds	r4, r7, #7
20002a04:	f000 f830 	bl	20002a68 <ascii_read_controller>
20002a08:	0003      	movs	r3, r0
20002a0a:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20002a0c:	4b08      	ldr	r3, [pc, #32]	; (20002a30 <ascii_read_data+0x4c>)
20002a0e:	4a08      	ldr	r2, [pc, #32]	; (20002a30 <ascii_read_data+0x4c>)
20002a10:	6812      	ldr	r2, [r2, #0]
20002a12:	0412      	lsls	r2, r2, #16
20002a14:	0c12      	lsrs	r2, r2, #16
20002a16:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20002a18:	4b05      	ldr	r3, [pc, #20]	; (20002a30 <ascii_read_data+0x4c>)
20002a1a:	4a05      	ldr	r2, [pc, #20]	; (20002a30 <ascii_read_data+0x4c>)
20002a1c:	6812      	ldr	r2, [r2, #0]
20002a1e:	4905      	ldr	r1, [pc, #20]	; (20002a34 <ascii_read_data+0x50>)
20002a20:	430a      	orrs	r2, r1
20002a22:	601a      	str	r2, [r3, #0]
	return rv;
20002a24:	1dfb      	adds	r3, r7, #7
20002a26:	781b      	ldrb	r3, [r3, #0]
}
20002a28:	0018      	movs	r0, r3
20002a2a:	46bd      	mov	sp, r7
20002a2c:	b003      	add	sp, #12
20002a2e:	bd90      	pop	{r4, r7, pc}
20002a30:	40021000 	andmi	r1, r2, r0
20002a34:	55550000 	ldrbpl	r0, [r5, #-0]

20002a38 <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
20002a38:	b580      	push	{r7, lr}
20002a3a:	b082      	sub	sp, #8
20002a3c:	af00      	add	r7, sp, #0
20002a3e:	0002      	movs	r2, r0
20002a40:	1dfb      	adds	r3, r7, #7
20002a42:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20002a44:	2040      	movs	r0, #64	; 0x40
20002a46:	f7ff ff2f 	bl	200028a8 <ascii_ctrl_bit_set>
	*portOdrHigh = c;
20002a4a:	4a06      	ldr	r2, [pc, #24]	; (20002a64 <ascii_write_controller+0x2c>)
20002a4c:	1dfb      	adds	r3, r7, #7
20002a4e:	781b      	ldrb	r3, [r3, #0]
20002a50:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20002a52:	f7fe ffa9 	bl	200019a8 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
20002a56:	2040      	movs	r0, #64	; 0x40
20002a58:	f7ff ff48 	bl	200028ec <ascii_ctrl_bit_clear>
}
20002a5c:	46c0      	nop			; (mov r8, r8)
20002a5e:	46bd      	mov	sp, r7
20002a60:	b002      	add	sp, #8
20002a62:	bd80      	pop	{r7, pc}
20002a64:	40021015 	andmi	r1, r2, r5, lsl r0

20002a68 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
20002a68:	b580      	push	{r7, lr}
20002a6a:	b082      	sub	sp, #8
20002a6c:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E);
20002a6e:	2040      	movs	r0, #64	; 0x40
20002a70:	f7ff ff1a 	bl	200028a8 <ascii_ctrl_bit_set>
	delay_250ns();
20002a74:	f7fe ff98 	bl	200019a8 <delay_250ns>
	delay_250ns();
20002a78:	f7fe ff96 	bl	200019a8 <delay_250ns>
	c = *portIdrHigh;
20002a7c:	4a06      	ldr	r2, [pc, #24]	; (20002a98 <ascii_read_controller+0x30>)
20002a7e:	1dfb      	adds	r3, r7, #7
20002a80:	7812      	ldrb	r2, [r2, #0]
20002a82:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20002a84:	2040      	movs	r0, #64	; 0x40
20002a86:	f7ff ff31 	bl	200028ec <ascii_ctrl_bit_clear>
	return c;
20002a8a:	1dfb      	adds	r3, r7, #7
20002a8c:	781b      	ldrb	r3, [r3, #0]
}
20002a8e:	0018      	movs	r0, r3
20002a90:	46bd      	mov	sp, r7
20002a92:	b002      	add	sp, #8
20002a94:	bd80      	pop	{r7, pc}
20002a96:	46c0      	nop			; (mov r8, r8)
20002a98:	40021011 	andmi	r1, r2, r1, lsl r0

20002a9c <ascii_write_char>:

void ascii_write_char(unsigned char c){
20002a9c:	b580      	push	{r7, lr}
20002a9e:	b082      	sub	sp, #8
20002aa0:	af00      	add	r7, sp, #0
20002aa2:	0002      	movs	r2, r0
20002aa4:	1dfb      	adds	r3, r7, #7
20002aa6:	701a      	strb	r2, [r3, #0]
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20002aa8:	46c0      	nop			; (mov r8, r8)
20002aaa:	f7ff ff71 	bl	20002990 <ascii_read_status>
20002aae:	0003      	movs	r3, r0
20002ab0:	001a      	movs	r2, r3
20002ab2:	2380      	movs	r3, #128	; 0x80
20002ab4:	4013      	ands	r3, r2
20002ab6:	2b80      	cmp	r3, #128	; 0x80
20002ab8:	d0f7      	beq.n	20002aaa <ascii_write_char+0xe>
		delay_micro(8); //latenstid
20002aba:	2008      	movs	r0, #8
20002abc:	f7fe ffb8 	bl	20001a30 <delay_micro>
		ascii_write_data(c);
20002ac0:	1dfb      	adds	r3, r7, #7
20002ac2:	781b      	ldrb	r3, [r3, #0]
20002ac4:	0018      	movs	r0, r3
20002ac6:	f7ff ff4e 	bl	20002966 <ascii_write_data>
		delay_micro(50); //istÃƒÂ¤llet fÃƒÂ¶r 43us
20002aca:	2032      	movs	r0, #50	; 0x32
20002acc:	f7fe ffb0 	bl	20001a30 <delay_micro>
}
20002ad0:	46c0      	nop			; (mov r8, r8)
20002ad2:	46bd      	mov	sp, r7
20002ad4:	b002      	add	sp, #8
20002ad6:	bd80      	pop	{r7, pc}

20002ad8 <ascii_goToXY>:

void ascii_goToXY(unsigned char row, unsigned char column){
20002ad8:	b580      	push	{r7, lr}
20002ada:	b084      	sub	sp, #16
20002adc:	af00      	add	r7, sp, #0
20002ade:	0002      	movs	r2, r0
20002ae0:	1dfb      	adds	r3, r7, #7
20002ae2:	701a      	strb	r2, [r3, #0]
20002ae4:	1dbb      	adds	r3, r7, #6
20002ae6:	1c0a      	adds	r2, r1, #0
20002ae8:	701a      	strb	r2, [r3, #0]
	unsigned char address = row-1;
20002aea:	230f      	movs	r3, #15
20002aec:	18fb      	adds	r3, r7, r3
20002aee:	1dfa      	adds	r2, r7, #7
20002af0:	7812      	ldrb	r2, [r2, #0]
20002af2:	3a01      	subs	r2, #1
20002af4:	701a      	strb	r2, [r3, #0]
	if(column == 2){
20002af6:	1dbb      	adds	r3, r7, #6
20002af8:	781b      	ldrb	r3, [r3, #0]
20002afa:	2b02      	cmp	r3, #2
20002afc:	d106      	bne.n	20002b0c <ascii_goToXY+0x34>
		address += 0x40;
20002afe:	230f      	movs	r3, #15
20002b00:	18fb      	adds	r3, r7, r3
20002b02:	220f      	movs	r2, #15
20002b04:	18ba      	adds	r2, r7, r2
20002b06:	7812      	ldrb	r2, [r2, #0]
20002b08:	3240      	adds	r2, #64	; 0x40
20002b0a:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
20002b0c:	230f      	movs	r3, #15
20002b0e:	18fb      	adds	r3, r7, r3
20002b10:	781b      	ldrb	r3, [r3, #0]
20002b12:	2280      	movs	r2, #128	; 0x80
20002b14:	4252      	negs	r2, r2
20002b16:	4313      	orrs	r3, r2
20002b18:	b2db      	uxtb	r3, r3
20002b1a:	0018      	movs	r0, r3
20002b1c:	f7ff ff0e 	bl	2000293c <ascii_write_cmd>
}
20002b20:	46c0      	nop			; (mov r8, r8)
20002b22:	46bd      	mov	sp, r7
20002b24:	b004      	add	sp, #16
20002b26:	bd80      	pop	{r7, pc}

20002b28 <ascii_init>:

void ascii_init(void){
20002b28:	b580      	push	{r7, lr}
20002b2a:	af00      	add	r7, sp, #0
	//initiera displayen:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃ¤nta tills displayed Ã¤r redo
20002b2c:	46c0      	nop			; (mov r8, r8)
20002b2e:	f7ff ff2f 	bl	20002990 <ascii_read_status>
20002b32:	0003      	movs	r3, r0
20002b34:	001a      	movs	r2, r3
20002b36:	2380      	movs	r3, #128	; 0x80
20002b38:	4013      	ands	r3, r2
20002b3a:	2b80      	cmp	r3, #128	; 0x80
20002b3c:	d0f7      	beq.n	20002b2e <ascii_init+0x6>
		delay_micro(20); //latenstid 
20002b3e:	2014      	movs	r0, #20
20002b40:	f7fe ff76 	bl	20001a30 <delay_micro>
		ascii_write_cmd(0x38); //Function set (39us), 000011NFXX, N = antal rader = 2, F = -->0=5x8<--, 1=5x11
20002b44:	2038      	movs	r0, #56	; 0x38
20002b46:	f7ff fef9 	bl	2000293c <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20002b4a:	2064      	movs	r0, #100	; 0x64
20002b4c:	f7fe ff70 	bl	20001a30 <delay_micro>
		
	// clear display
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20002b50:	46c0      	nop			; (mov r8, r8)
20002b52:	f7ff ff1d 	bl	20002990 <ascii_read_status>
20002b56:	0003      	movs	r3, r0
20002b58:	001a      	movs	r2, r3
20002b5a:	2380      	movs	r3, #128	; 0x80
20002b5c:	4013      	ands	r3, r2
20002b5e:	2b80      	cmp	r3, #128	; 0x80
20002b60:	d0f7      	beq.n	20002b52 <ascii_init+0x2a>
		delay_micro(20); //latenstid
20002b62:	2014      	movs	r0, #20
20002b64:	f7fe ff64 	bl	20001a30 <delay_micro>
		ascii_write_cmd(0x01); 
20002b68:	2001      	movs	r0, #1
20002b6a:	f7ff fee7 	bl	2000293c <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20002b6e:	2064      	movs	r0, #100	; 0x64
20002b70:	f7fe ff5e 	bl	20001a30 <delay_micro>

	//display control:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20002b74:	46c0      	nop			; (mov r8, r8)
20002b76:	f7ff ff0b 	bl	20002990 <ascii_read_status>
20002b7a:	0003      	movs	r3, r0
20002b7c:	001a      	movs	r2, r3
20002b7e:	2380      	movs	r3, #128	; 0x80
20002b80:	4013      	ands	r3, r2
20002b82:	2b80      	cmp	r3, #128	; 0x80
20002b84:	d0f7      	beq.n	20002b76 <ascii_init+0x4e>
		delay_micro(20); //latenstid
20002b86:	2014      	movs	r0, #20
20002b88:	f7fe ff52 	bl	20001a30 <delay_micro>
		ascii_write_cmd(0x0C); //000001 + XXX. X:ena = 0:av / 1:pÃƒÂ¥ -  SkÃƒÂ¤rm/MarkÃƒÂ¶r/BlinkaMarkÃƒÂ¶ren
20002b8c:	200c      	movs	r0, #12
20002b8e:	f7ff fed5 	bl	2000293c <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20002b92:	2064      	movs	r0, #100	; 0x64
20002b94:	f7fe ff4c 	bl	20001a30 <delay_micro>
		
	// entry mode set
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20002b98:	46c0      	nop			; (mov r8, r8)
20002b9a:	f7ff fef9 	bl	20002990 <ascii_read_status>
20002b9e:	0003      	movs	r3, r0
20002ba0:	001a      	movs	r2, r3
20002ba2:	2380      	movs	r3, #128	; 0x80
20002ba4:	4013      	ands	r3, r2
20002ba6:	2b80      	cmp	r3, #128	; 0x80
20002ba8:	d0f7      	beq.n	20002b9a <ascii_init+0x72>
		delay_micro(20); //latenstid
20002baa:	2014      	movs	r0, #20
20002bac:	f7fe ff40 	bl	20001a30 <delay_micro>
		ascii_write_cmd(0x06); //00000001 + XY. X=0: markÃƒÂ¶ren vÃƒÂ¤nst. || X=1: marÃƒÂ¶kren hÃƒÂ¶g. - Y=0: skift av || Y=1: skift pÃƒÂ¥
20002bb0:	2006      	movs	r0, #6
20002bb2:	f7ff fec3 	bl	2000293c <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20002bb6:	2064      	movs	r0, #100	; 0x64
20002bb8:	f7fe ff3a 	bl	20001a30 <delay_micro>
		
		
}
20002bbc:	46c0      	nop			; (mov r8, r8)
20002bbe:	46bd      	mov	sp, r7
20002bc0:	bd80      	pop	{r7, pc}

20002bc2 <init_application>:

void init_application(void){
20002bc2:	b580      	push	{r7, lr}
20002bc4:	af00      	add	r7, sp, #0
	#ifdef USBDM
		*((unsigned long *) 0x40023830) = 0x18; //startar klockor pÃ¥ port D och E
		//__asm volatile ("LDR R0, =0x08000209\n BLX R0 \n"); //initiera PLL
	#endif
	//"initierar Port E med anvÃƒÂ¤ndning med LCD-modulen, dvs. sÃƒÂ¥vÃƒÂ¤l port E0-7 som E8-15 sÃƒÂ¤tts till utgÃƒÂ¥ngar
	* portModer = 0x55555555;
20002bc6:	4b03      	ldr	r3, [pc, #12]	; (20002bd4 <init_application+0x12>)
20002bc8:	4a03      	ldr	r2, [pc, #12]	; (20002bd8 <init_application+0x16>)
20002bca:	601a      	str	r2, [r3, #0]
}
20002bcc:	46c0      	nop			; (mov r8, r8)
20002bce:	46bd      	mov	sp, r7
20002bd0:	bd80      	pop	{r7, pc}
20002bd2:	46c0      	nop			; (mov r8, r8)
20002bd4:	40021000 	andmi	r1, r2, r0
20002bd8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20002bdc <set_up_ascii>:

void set_up_ascii( void ) {
20002bdc:	b580      	push	{r7, lr}
20002bde:	af00      	add	r7, sp, #0
	init_application();
20002be0:	f7ff ffef 	bl	20002bc2 <init_application>
	ascii_init();
20002be4:	f7ff ffa0 	bl	20002b28 <ascii_init>
}
20002be8:	46c0      	nop			; (mov r8, r8)
20002bea:	46bd      	mov	sp, r7
20002bec:	bd80      	pop	{r7, pc}

20002bee <clear_ascii>:

void clear_ascii( void ) {
20002bee:	b590      	push	{r4, r7, lr}
20002bf0:	b089      	sub	sp, #36	; 0x24
20002bf2:	af00      	add	r7, sp, #0
	char *s;
	char clear[] = "                    ";
20002bf4:	1d3b      	adds	r3, r7, #4
20002bf6:	4a17      	ldr	r2, [pc, #92]	; (20002c54 <clear_ascii+0x66>)
20002bf8:	ca13      	ldmia	r2!, {r0, r1, r4}
20002bfa:	c313      	stmia	r3!, {r0, r1, r4}
20002bfc:	ca03      	ldmia	r2!, {r0, r1}
20002bfe:	c303      	stmia	r3!, {r0, r1}
20002c00:	7812      	ldrb	r2, [r2, #0]
20002c02:	701a      	strb	r2, [r3, #0]
	
	s = clear;
20002c04:	1d3b      	adds	r3, r7, #4
20002c06:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,1);
20002c08:	2101      	movs	r1, #1
20002c0a:	2001      	movs	r0, #1
20002c0c:	f7ff ff64 	bl	20002ad8 <ascii_goToXY>
	while(*s){
20002c10:	e006      	b.n	20002c20 <clear_ascii+0x32>
		ascii_write_char(*s++);
20002c12:	69fb      	ldr	r3, [r7, #28]
20002c14:	1c5a      	adds	r2, r3, #1
20002c16:	61fa      	str	r2, [r7, #28]
20002c18:	781b      	ldrb	r3, [r3, #0]
20002c1a:	0018      	movs	r0, r3
20002c1c:	f7ff ff3e 	bl	20002a9c <ascii_write_char>
	while(*s){
20002c20:	69fb      	ldr	r3, [r7, #28]
20002c22:	781b      	ldrb	r3, [r3, #0]
20002c24:	2b00      	cmp	r3, #0
20002c26:	d1f4      	bne.n	20002c12 <clear_ascii+0x24>
	}
	s = clear;
20002c28:	1d3b      	adds	r3, r7, #4
20002c2a:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,2);
20002c2c:	2102      	movs	r1, #2
20002c2e:	2001      	movs	r0, #1
20002c30:	f7ff ff52 	bl	20002ad8 <ascii_goToXY>
	while(*s){
20002c34:	e006      	b.n	20002c44 <clear_ascii+0x56>
		ascii_write_char(*s++);
20002c36:	69fb      	ldr	r3, [r7, #28]
20002c38:	1c5a      	adds	r2, r3, #1
20002c3a:	61fa      	str	r2, [r7, #28]
20002c3c:	781b      	ldrb	r3, [r3, #0]
20002c3e:	0018      	movs	r0, r3
20002c40:	f7ff ff2c 	bl	20002a9c <ascii_write_char>
	while(*s){
20002c44:	69fb      	ldr	r3, [r7, #28]
20002c46:	781b      	ldrb	r3, [r3, #0]
20002c48:	2b00      	cmp	r3, #0
20002c4a:	d1f4      	bne.n	20002c36 <clear_ascii+0x48>
	}
}
20002c4c:	46c0      	nop			; (mov r8, r8)
20002c4e:	46bd      	mov	sp, r7
20002c50:	b009      	add	sp, #36	; 0x24
20002c52:	bd90      	pop	{r4, r7, pc}
20002c54:	20008eb0 			; <UNDEFINED> instruction: 0x20008eb0

20002c58 <ascii_write>:

void ascii_write(char *row1, char *row2) {
20002c58:	b580      	push	{r7, lr}
20002c5a:	b082      	sub	sp, #8
20002c5c:	af00      	add	r7, sp, #0
20002c5e:	6078      	str	r0, [r7, #4]
20002c60:	6039      	str	r1, [r7, #0]
	clear_ascii();
20002c62:	f7ff ffc4 	bl	20002bee <clear_ascii>
	
	ascii_goToXY(1,1);
20002c66:	2101      	movs	r1, #1
20002c68:	2001      	movs	r0, #1
20002c6a:	f7ff ff35 	bl	20002ad8 <ascii_goToXY>
	while(*row1){
20002c6e:	e006      	b.n	20002c7e <ascii_write+0x26>
		ascii_write_char(*row1++);
20002c70:	687b      	ldr	r3, [r7, #4]
20002c72:	1c5a      	adds	r2, r3, #1
20002c74:	607a      	str	r2, [r7, #4]
20002c76:	781b      	ldrb	r3, [r3, #0]
20002c78:	0018      	movs	r0, r3
20002c7a:	f7ff ff0f 	bl	20002a9c <ascii_write_char>
	while(*row1){
20002c7e:	687b      	ldr	r3, [r7, #4]
20002c80:	781b      	ldrb	r3, [r3, #0]
20002c82:	2b00      	cmp	r3, #0
20002c84:	d1f4      	bne.n	20002c70 <ascii_write+0x18>
	}	
	ascii_goToXY(1,2);
20002c86:	2102      	movs	r1, #2
20002c88:	2001      	movs	r0, #1
20002c8a:	f7ff ff25 	bl	20002ad8 <ascii_goToXY>
	while(*row2){
20002c8e:	e006      	b.n	20002c9e <ascii_write+0x46>
		ascii_write_char(*row2++);
20002c90:	683b      	ldr	r3, [r7, #0]
20002c92:	1c5a      	adds	r2, r3, #1
20002c94:	603a      	str	r2, [r7, #0]
20002c96:	781b      	ldrb	r3, [r3, #0]
20002c98:	0018      	movs	r0, r3
20002c9a:	f7ff feff 	bl	20002a9c <ascii_write_char>
	while(*row2){
20002c9e:	683b      	ldr	r3, [r7, #0]
20002ca0:	781b      	ldrb	r3, [r3, #0]
20002ca2:	2b00      	cmp	r3, #0
20002ca4:	d1f4      	bne.n	20002c90 <ascii_write+0x38>
	}
	
	ascii_goToXY(21,1);
20002ca6:	2101      	movs	r1, #1
20002ca8:	2015      	movs	r0, #21
20002caa:	f7ff ff15 	bl	20002ad8 <ascii_goToXY>
}
20002cae:	46c0      	nop			; (mov r8, r8)
20002cb0:	46bd      	mov	sp, r7
20002cb2:	b002      	add	sp, #8
20002cb4:	bd80      	pop	{r7, pc}

20002cb6 <ascii_write_part>:

void ascii_write_part(char *row1, char *row2, int limit1, int limit2) {
20002cb6:	b580      	push	{r7, lr}
20002cb8:	b086      	sub	sp, #24
20002cba:	af00      	add	r7, sp, #0
20002cbc:	60f8      	str	r0, [r7, #12]
20002cbe:	60b9      	str	r1, [r7, #8]
20002cc0:	607a      	str	r2, [r7, #4]
20002cc2:	603b      	str	r3, [r7, #0]
	clear_ascii();
20002cc4:	f7ff ff93 	bl	20002bee <clear_ascii>
	
	ascii_goToXY(1,1);
20002cc8:	2101      	movs	r1, #1
20002cca:	2001      	movs	r0, #1
20002ccc:	f7ff ff04 	bl	20002ad8 <ascii_goToXY>
	int i = 0;
20002cd0:	2300      	movs	r3, #0
20002cd2:	617b      	str	r3, [r7, #20]
	if(limit1 > 0) {
20002cd4:	687b      	ldr	r3, [r7, #4]
20002cd6:	2b00      	cmp	r3, #0
20002cd8:	dd11      	ble.n	20002cfe <ascii_write_part+0x48>
		while(*row1 && (i++ < limit1)){
20002cda:	e006      	b.n	20002cea <ascii_write_part+0x34>
			ascii_write_char(*row1++);
20002cdc:	68fb      	ldr	r3, [r7, #12]
20002cde:	1c5a      	adds	r2, r3, #1
20002ce0:	60fa      	str	r2, [r7, #12]
20002ce2:	781b      	ldrb	r3, [r3, #0]
20002ce4:	0018      	movs	r0, r3
20002ce6:	f7ff fed9 	bl	20002a9c <ascii_write_char>
		while(*row1 && (i++ < limit1)){
20002cea:	68fb      	ldr	r3, [r7, #12]
20002cec:	781b      	ldrb	r3, [r3, #0]
20002cee:	2b00      	cmp	r3, #0
20002cf0:	d005      	beq.n	20002cfe <ascii_write_part+0x48>
20002cf2:	697b      	ldr	r3, [r7, #20]
20002cf4:	1c5a      	adds	r2, r3, #1
20002cf6:	617a      	str	r2, [r7, #20]
20002cf8:	687a      	ldr	r2, [r7, #4]
20002cfa:	4293      	cmp	r3, r2
20002cfc:	dbee      	blt.n	20002cdc <ascii_write_part+0x26>
		}			
	}

	ascii_goToXY(1,2);
20002cfe:	2102      	movs	r1, #2
20002d00:	2001      	movs	r0, #1
20002d02:	f7ff fee9 	bl	20002ad8 <ascii_goToXY>
	i = 0;
20002d06:	2300      	movs	r3, #0
20002d08:	617b      	str	r3, [r7, #20]
	if(limit2 > 0) {
20002d0a:	683b      	ldr	r3, [r7, #0]
20002d0c:	2b00      	cmp	r3, #0
20002d0e:	dd11      	ble.n	20002d34 <ascii_write_part+0x7e>
		while(*row2 && (i++ < limit2)){
20002d10:	e006      	b.n	20002d20 <ascii_write_part+0x6a>
			ascii_write_char(*row2++);
20002d12:	68bb      	ldr	r3, [r7, #8]
20002d14:	1c5a      	adds	r2, r3, #1
20002d16:	60ba      	str	r2, [r7, #8]
20002d18:	781b      	ldrb	r3, [r3, #0]
20002d1a:	0018      	movs	r0, r3
20002d1c:	f7ff febe 	bl	20002a9c <ascii_write_char>
		while(*row2 && (i++ < limit2)){
20002d20:	68bb      	ldr	r3, [r7, #8]
20002d22:	781b      	ldrb	r3, [r3, #0]
20002d24:	2b00      	cmp	r3, #0
20002d26:	d005      	beq.n	20002d34 <ascii_write_part+0x7e>
20002d28:	697b      	ldr	r3, [r7, #20]
20002d2a:	1c5a      	adds	r2, r3, #1
20002d2c:	617a      	str	r2, [r7, #20]
20002d2e:	683a      	ldr	r2, [r7, #0]
20002d30:	4293      	cmp	r3, r2
20002d32:	dbee      	blt.n	20002d12 <ascii_write_part+0x5c>
		}
	}
	
	ascii_goToXY(21,1);
20002d34:	2101      	movs	r1, #1
20002d36:	2015      	movs	r0, #21
20002d38:	f7ff fece 	bl	20002ad8 <ascii_goToXY>
}
20002d3c:	46c0      	nop			; (mov r8, r8)
20002d3e:	46bd      	mov	sp, r7
20002d40:	b006      	add	sp, #24
20002d42:	bd80      	pop	{r7, pc}

20002d44 <ascii_test>:



void ascii_test(void) {
20002d44:	b590      	push	{r4, r7, lr}
20002d46:	b08b      	sub	sp, #44	; 0x2c
20002d48:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Alfanumerisk";
20002d4a:	2314      	movs	r3, #20
20002d4c:	18fb      	adds	r3, r7, r3
20002d4e:	4a1c      	ldr	r2, [pc, #112]	; (20002dc0 <ascii_test+0x7c>)
20002d50:	ca13      	ldmia	r2!, {r0, r1, r4}
20002d52:	c313      	stmia	r3!, {r0, r1, r4}
20002d54:	7812      	ldrb	r2, [r2, #0]
20002d56:	701a      	strb	r2, [r3, #0]
	char test2[] = "hardåäöare suger";
20002d58:	003b      	movs	r3, r7
20002d5a:	4a1a      	ldr	r2, [pc, #104]	; (20002dc4 <ascii_test+0x80>)
20002d5c:	ca13      	ldmia	r2!, {r0, r1, r4}
20002d5e:	c313      	stmia	r3!, {r0, r1, r4}
20002d60:	ca03      	ldmia	r2!, {r0, r1}
20002d62:	c303      	stmia	r3!, {r0, r1}
	
	init_application();
20002d64:	f7ff ff2d 	bl	20002bc2 <init_application>
	ascii_init();
20002d68:	f7ff fede 	bl	20002b28 <ascii_init>
	ascii_goToXY(1,1);
20002d6c:	2101      	movs	r1, #1
20002d6e:	2001      	movs	r0, #1
20002d70:	f7ff feb2 	bl	20002ad8 <ascii_goToXY>
	s = test1;
20002d74:	2314      	movs	r3, #20
20002d76:	18fb      	adds	r3, r7, r3
20002d78:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20002d7a:	e006      	b.n	20002d8a <ascii_test+0x46>
		ascii_write_char(*s++);
20002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002d7e:	1c5a      	adds	r2, r3, #1
20002d80:	627a      	str	r2, [r7, #36]	; 0x24
20002d82:	781b      	ldrb	r3, [r3, #0]
20002d84:	0018      	movs	r0, r3
20002d86:	f7ff fe89 	bl	20002a9c <ascii_write_char>
	while(*s){
20002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002d8c:	781b      	ldrb	r3, [r3, #0]
20002d8e:	2b00      	cmp	r3, #0
20002d90:	d1f4      	bne.n	20002d7c <ascii_test+0x38>
	}
	ascii_goToXY(1,2);
20002d92:	2102      	movs	r1, #2
20002d94:	2001      	movs	r0, #1
20002d96:	f7ff fe9f 	bl	20002ad8 <ascii_goToXY>
	s = test2;
20002d9a:	003b      	movs	r3, r7
20002d9c:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20002d9e:	e006      	b.n	20002dae <ascii_test+0x6a>
		ascii_write_char(*s++);
20002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002da2:	1c5a      	adds	r2, r3, #1
20002da4:	627a      	str	r2, [r7, #36]	; 0x24
20002da6:	781b      	ldrb	r3, [r3, #0]
20002da8:	0018      	movs	r0, r3
20002daa:	f7ff fe77 	bl	20002a9c <ascii_write_char>
	while(*s){
20002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002db0:	781b      	ldrb	r3, [r3, #0]
20002db2:	2b00      	cmp	r3, #0
20002db4:	d1f4      	bne.n	20002da0 <ascii_test+0x5c>
	}
	return 0;
20002db6:	46c0      	nop			; (mov r8, r8)
20002db8:	46bd      	mov	sp, r7
20002dba:	b00b      	add	sp, #44	; 0x2c
20002dbc:	bd90      	pop	{r4, r7, pc}
20002dbe:	46c0      	nop			; (mov r8, r8)
20002dc0:	20008ec8 	andcs	r8, r0, r8, asr #29
20002dc4:	20008ed8 	ldrdcs	r8, [r0], -r8	; <UNPREDICTABLE>

20002dc8 <display>:
#include "slow_text.h"
#include "ascii_display.h"

void display(SlowText *this, int length_of_row1) {
20002dc8:	b580      	push	{r7, lr}
20002dca:	b084      	sub	sp, #16
20002dcc:	af00      	add	r7, sp, #0
20002dce:	6078      	str	r0, [r7, #4]
20002dd0:	6039      	str	r1, [r7, #0]
	int limit1 = this->counter / this->speed;
20002dd2:	687b      	ldr	r3, [r7, #4]
20002dd4:	689a      	ldr	r2, [r3, #8]
20002dd6:	687b      	ldr	r3, [r7, #4]
20002dd8:	68db      	ldr	r3, [r3, #12]
20002dda:	0019      	movs	r1, r3
20002ddc:	0010      	movs	r0, r2
20002dde:	f000 f925 	bl	2000302c <__divsi3>
20002de2:	0003      	movs	r3, r0
20002de4:	60fb      	str	r3, [r7, #12]
	int limit2 = this->counter / this->speed - length_of_row1;
20002de6:	687b      	ldr	r3, [r7, #4]
20002de8:	689a      	ldr	r2, [r3, #8]
20002dea:	687b      	ldr	r3, [r7, #4]
20002dec:	68db      	ldr	r3, [r3, #12]
20002dee:	0019      	movs	r1, r3
20002df0:	0010      	movs	r0, r2
20002df2:	f000 f91b 	bl	2000302c <__divsi3>
20002df6:	0003      	movs	r3, r0
20002df8:	001a      	movs	r2, r3
20002dfa:	683b      	ldr	r3, [r7, #0]
20002dfc:	1ad3      	subs	r3, r2, r3
20002dfe:	60bb      	str	r3, [r7, #8]
	ascii_write_part(this->row1, this->row2, limit1, limit2);
20002e00:	687b      	ldr	r3, [r7, #4]
20002e02:	6818      	ldr	r0, [r3, #0]
20002e04:	687b      	ldr	r3, [r7, #4]
20002e06:	6859      	ldr	r1, [r3, #4]
20002e08:	68bb      	ldr	r3, [r7, #8]
20002e0a:	68fa      	ldr	r2, [r7, #12]
20002e0c:	f7ff ff53 	bl	20002cb6 <ascii_write_part>
	
	this->counter++;
20002e10:	687b      	ldr	r3, [r7, #4]
20002e12:	689b      	ldr	r3, [r3, #8]
20002e14:	1c5a      	adds	r2, r3, #1
20002e16:	687b      	ldr	r3, [r7, #4]
20002e18:	609a      	str	r2, [r3, #8]
}
20002e1a:	46c0      	nop			; (mov r8, r8)
20002e1c:	46bd      	mov	sp, r7
20002e1e:	b004      	add	sp, #16
20002e20:	bd80      	pop	{r7, pc}

20002e22 <init_slow_text>:

void init_slow_text(SlowText *obj, char *row1, char *row2, int speed) {
20002e22:	b580      	push	{r7, lr}
20002e24:	b084      	sub	sp, #16
20002e26:	af00      	add	r7, sp, #0
20002e28:	60f8      	str	r0, [r7, #12]
20002e2a:	60b9      	str	r1, [r7, #8]
20002e2c:	607a      	str	r2, [r7, #4]
20002e2e:	603b      	str	r3, [r7, #0]
	obj->row1 = row1;
20002e30:	68fb      	ldr	r3, [r7, #12]
20002e32:	68ba      	ldr	r2, [r7, #8]
20002e34:	601a      	str	r2, [r3, #0]
	obj->row2 = row2;
20002e36:	68fb      	ldr	r3, [r7, #12]
20002e38:	687a      	ldr	r2, [r7, #4]
20002e3a:	605a      	str	r2, [r3, #4]
	obj->speed = speed;
20002e3c:	68fb      	ldr	r3, [r7, #12]
20002e3e:	683a      	ldr	r2, [r7, #0]
20002e40:	60da      	str	r2, [r3, #12]
	obj->counter = 0;
20002e42:	68fb      	ldr	r3, [r7, #12]
20002e44:	2200      	movs	r2, #0
20002e46:	609a      	str	r2, [r3, #8]
	obj->display = display;
20002e48:	68fb      	ldr	r3, [r7, #12]
20002e4a:	4a03      	ldr	r2, [pc, #12]	; (20002e58 <init_slow_text+0x36>)
20002e4c:	611a      	str	r2, [r3, #16]
20002e4e:	46c0      	nop			; (mov r8, r8)
20002e50:	46bd      	mov	sp, r7
20002e52:	b004      	add	sp, #16
20002e54:	bd80      	pop	{r7, pc}
20002e56:	46c0      	nop			; (mov r8, r8)
20002e58:	20002dc9 	andcs	r2, r0, r9, asr #27

20002e5c <initSprites>:


GameObject indoorsObj;
Image indoorsImage;
Image indoorsImages[1];
static void initSprites( void ) {	
20002e5c:	b580      	push	{r7, lr}
20002e5e:	b084      	sub	sp, #16
20002e60:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoorsLight;
20002e62:	4b12      	ldr	r3, [pc, #72]	; (20002eac <initSprites+0x50>)
20002e64:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors_light_bits, indoors_black_width, indoors_black_height);
20002e66:	4912      	ldr	r1, [pc, #72]	; (20002eb0 <initSprites+0x54>)
20002e68:	68f8      	ldr	r0, [r7, #12]
20002e6a:	2340      	movs	r3, #64	; 0x40
20002e6c:	2280      	movs	r2, #128	; 0x80
20002e6e:	f7ff fcd1 	bl	20002814 <load_sprite>
	indoorsLight = pointer11;
20002e72:	4b10      	ldr	r3, [pc, #64]	; (20002eb4 <initSprites+0x58>)
20002e74:	68fa      	ldr	r2, [r7, #12]
20002e76:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoorsGray;
20002e78:	4b0f      	ldr	r3, [pc, #60]	; (20002eb8 <initSprites+0x5c>)
20002e7a:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors_gray_bits, indoors_black_width, indoors_black_height);
20002e7c:	490f      	ldr	r1, [pc, #60]	; (20002ebc <initSprites+0x60>)
20002e7e:	68b8      	ldr	r0, [r7, #8]
20002e80:	2340      	movs	r3, #64	; 0x40
20002e82:	2280      	movs	r2, #128	; 0x80
20002e84:	f7ff fcc6 	bl	20002814 <load_sprite>
	indoorsGray = pointer12;
20002e88:	4b0d      	ldr	r3, [pc, #52]	; (20002ec0 <initSprites+0x64>)
20002e8a:	68ba      	ldr	r2, [r7, #8]
20002e8c:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoorsBlack;
20002e8e:	4b0d      	ldr	r3, [pc, #52]	; (20002ec4 <initSprites+0x68>)
20002e90:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors_black_bits, indoors_black_width, indoors_black_height);
20002e92:	490d      	ldr	r1, [pc, #52]	; (20002ec8 <initSprites+0x6c>)
20002e94:	6878      	ldr	r0, [r7, #4]
20002e96:	2340      	movs	r3, #64	; 0x40
20002e98:	2280      	movs	r2, #128	; 0x80
20002e9a:	f7ff fcbb 	bl	20002814 <load_sprite>
	indoorsBlack = pointer13;	
20002e9e:	4b0b      	ldr	r3, [pc, #44]	; (20002ecc <initSprites+0x70>)
20002ea0:	687a      	ldr	r2, [r7, #4]
20002ea2:	601a      	str	r2, [r3, #0]
	
}
20002ea4:	46c0      	nop			; (mov r8, r8)
20002ea6:	46bd      	mov	sp, r7
20002ea8:	b004      	add	sp, #16
20002eaa:	bd80      	pop	{r7, pc}
20002eac:	20005498 	mulcs	r0, r8, r4
20002eb0:	20007d08 	andcs	r7, r0, r8, lsl #26
20002eb4:	200054f4 	strdcs	r5, [r0], -r4
20002eb8:	2000548c 	andcs	r5, r0, ip, lsl #9
20002ebc:	20007908 	andcs	r7, r0, r8, lsl #18
20002ec0:	200054b0 			; <UNDEFINED> instruction: 0x200054b0
20002ec4:	200054a4 	andcs	r5, r0, r4, lsr #9
20002ec8:	20007508 	andcs	r7, r0, r8, lsl #10
20002ecc:	200054e4 	andcs	r5, r0, r4, ror #9

20002ed0 <init_indoors>:
	
void init_indoors( GameObject *indoorsObj ) {
20002ed0:	b590      	push	{r4, r7, lr}
20002ed2:	b083      	sub	sp, #12
20002ed4:	af00      	add	r7, sp, #0
20002ed6:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20002ed8:	4b14      	ldr	r3, [pc, #80]	; (20002f2c <init_indoors+0x5c>)
20002eda:	681b      	ldr	r3, [r3, #0]
20002edc:	2b00      	cmp	r3, #0
20002ede:	d011      	beq.n	20002f04 <init_indoors+0x34>
		initSprites();
20002ee0:	f7ff ffbc 	bl	20002e5c <initSprites>
		firstTime = 0;			
20002ee4:	4b11      	ldr	r3, [pc, #68]	; (20002f2c <init_indoors+0x5c>)
20002ee6:	2200      	movs	r2, #0
20002ee8:	601a      	str	r2, [r3, #0]

		indoorsImages[0] = indoorsImage;
20002eea:	4b11      	ldr	r3, [pc, #68]	; (20002f30 <init_indoors+0x60>)
20002eec:	4a11      	ldr	r2, [pc, #68]	; (20002f34 <init_indoors+0x64>)
20002eee:	ca13      	ldmia	r2!, {r0, r1, r4}
20002ef0:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoorsImages[0], indoorsBlack, indoorsGray, indoorsLight);
20002ef2:	4b11      	ldr	r3, [pc, #68]	; (20002f38 <init_indoors+0x68>)
20002ef4:	6819      	ldr	r1, [r3, #0]
20002ef6:	4b11      	ldr	r3, [pc, #68]	; (20002f3c <init_indoors+0x6c>)
20002ef8:	681a      	ldr	r2, [r3, #0]
20002efa:	4b11      	ldr	r3, [pc, #68]	; (20002f40 <init_indoors+0x70>)
20002efc:	681b      	ldr	r3, [r3, #0]
20002efe:	480c      	ldr	r0, [pc, #48]	; (20002f30 <init_indoors+0x60>)
20002f00:	f7ff fc74 	bl	200027ec <load_image>
	}
	
	indoorsObj->images = indoorsImages;
20002f04:	687b      	ldr	r3, [r7, #4]
20002f06:	4a0a      	ldr	r2, [pc, #40]	; (20002f30 <init_indoors+0x60>)
20002f08:	601a      	str	r2, [r3, #0]

	indoorsObj->current_frame = 0;
20002f0a:	687b      	ldr	r3, [r7, #4]
20002f0c:	2200      	movs	r2, #0
20002f0e:	615a      	str	r2, [r3, #20]
	indoorsObj->n_frames = 1;
20002f10:	687b      	ldr	r3, [r7, #4]
20002f12:	2201      	movs	r2, #1
20002f14:	619a      	str	r2, [r3, #24]
	indoorsObj->animation_speed = 1;
20002f16:	687b      	ldr	r3, [r7, #4]
20002f18:	2201      	movs	r2, #1
20002f1a:	61da      	str	r2, [r3, #28]
	indoorsObj->animation_counter = 0;
20002f1c:	687b      	ldr	r3, [r7, #4]
20002f1e:	2200      	movs	r2, #0
20002f20:	621a      	str	r2, [r3, #32]
}
20002f22:	46c0      	nop			; (mov r8, r8)
20002f24:	46bd      	mov	sp, r7
20002f26:	b003      	add	sp, #12
20002f28:	bd90      	pop	{r4, r7, pc}
20002f2a:	46c0      	nop			; (mov r8, r8)
20002f2c:	20008108 	andcs	r8, r0, r8, lsl #2
20002f30:	200054d8 	ldrdcs	r5, [r0], -r8
20002f34:	200054e8 	andcs	r5, r0, r8, ror #9
20002f38:	200054e4 	andcs	r5, r0, r4, ror #9
20002f3c:	200054b0 			; <UNDEFINED> instruction: 0x200054b0
20002f40:	200054f4 	strdcs	r5, [r0], -r4

20002f44 <initSprites>:


GameObject indoors2Obj;
Image indoors2Image;
Image indoors2Images[1];
static void initSprites( void ) {	
20002f44:	b580      	push	{r7, lr}
20002f46:	b084      	sub	sp, #16
20002f48:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoors2Light;
20002f4a:	4b12      	ldr	r3, [pc, #72]	; (20002f94 <initSprites+0x50>)
20002f4c:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors2_light_bits, indoors2_black_width, indoors2_black_height);
20002f4e:	4912      	ldr	r1, [pc, #72]	; (20002f98 <initSprites+0x54>)
20002f50:	68f8      	ldr	r0, [r7, #12]
20002f52:	2340      	movs	r3, #64	; 0x40
20002f54:	2280      	movs	r2, #128	; 0x80
20002f56:	f7ff fc5d 	bl	20002814 <load_sprite>
	indoors2Light = pointer11;
20002f5a:	4b10      	ldr	r3, [pc, #64]	; (20002f9c <initSprites+0x58>)
20002f5c:	68fa      	ldr	r2, [r7, #12]
20002f5e:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoors2Gray;
20002f60:	4b0f      	ldr	r3, [pc, #60]	; (20002fa0 <initSprites+0x5c>)
20002f62:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors2_gray_bits, indoors2_black_width, indoors2_black_height);
20002f64:	490f      	ldr	r1, [pc, #60]	; (20002fa4 <initSprites+0x60>)
20002f66:	68b8      	ldr	r0, [r7, #8]
20002f68:	2340      	movs	r3, #64	; 0x40
20002f6a:	2280      	movs	r2, #128	; 0x80
20002f6c:	f7ff fc52 	bl	20002814 <load_sprite>
	indoors2Gray = pointer12;
20002f70:	4b0d      	ldr	r3, [pc, #52]	; (20002fa8 <initSprites+0x64>)
20002f72:	68ba      	ldr	r2, [r7, #8]
20002f74:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoors2Black;
20002f76:	4b0d      	ldr	r3, [pc, #52]	; (20002fac <initSprites+0x68>)
20002f78:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors2_black_bits, indoors2_black_width, indoors2_black_height);
20002f7a:	490d      	ldr	r1, [pc, #52]	; (20002fb0 <initSprites+0x6c>)
20002f7c:	6878      	ldr	r0, [r7, #4]
20002f7e:	2340      	movs	r3, #64	; 0x40
20002f80:	2280      	movs	r2, #128	; 0x80
20002f82:	f7ff fc47 	bl	20002814 <load_sprite>
	indoors2Black = pointer13;	
20002f86:	4b0b      	ldr	r3, [pc, #44]	; (20002fb4 <initSprites+0x70>)
20002f88:	687a      	ldr	r2, [r7, #4]
20002f8a:	601a      	str	r2, [r3, #0]
	
}
20002f8c:	46c0      	nop			; (mov r8, r8)
20002f8e:	46bd      	mov	sp, r7
20002f90:	b004      	add	sp, #16
20002f92:	bd80      	pop	{r7, pc}
20002f94:	20005554 	andcs	r5, r0, r4, asr r5
20002f98:	2000890c 	andcs	r8, r0, ip, lsl #18
20002f9c:	20005544 	andcs	r5, r0, r4, asr #10
20002fa0:	20005538 	andcs	r5, r0, r8, lsr r5
20002fa4:	2000850c 	andcs	r8, r0, ip, lsl #10
20002fa8:	2000551c 	andcs	r5, r0, ip, lsl r5
20002fac:	20005548 	andcs	r5, r0, r8, asr #10
20002fb0:	2000810c 	andcs	r8, r0, ip, lsl #2
20002fb4:	20005560 	andcs	r5, r0, r0, ror #10

20002fb8 <init_indoors2>:
	
void init_indoors2( GameObject *indoors2Obj ) {
20002fb8:	b590      	push	{r4, r7, lr}
20002fba:	b083      	sub	sp, #12
20002fbc:	af00      	add	r7, sp, #0
20002fbe:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20002fc0:	4b14      	ldr	r3, [pc, #80]	; (20003014 <init_indoors2+0x5c>)
20002fc2:	681b      	ldr	r3, [r3, #0]
20002fc4:	2b00      	cmp	r3, #0
20002fc6:	d011      	beq.n	20002fec <init_indoors2+0x34>
		initSprites();
20002fc8:	f7ff ffbc 	bl	20002f44 <initSprites>
		firstTime = 0;			
20002fcc:	4b11      	ldr	r3, [pc, #68]	; (20003014 <init_indoors2+0x5c>)
20002fce:	2200      	movs	r2, #0
20002fd0:	601a      	str	r2, [r3, #0]

		indoors2Images[0] = indoors2Image;
20002fd2:	4b11      	ldr	r3, [pc, #68]	; (20003018 <init_indoors2+0x60>)
20002fd4:	4a11      	ldr	r2, [pc, #68]	; (2000301c <init_indoors2+0x64>)
20002fd6:	ca13      	ldmia	r2!, {r0, r1, r4}
20002fd8:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoors2Images[0], indoors2Black, indoors2Gray, indoors2Light);
20002fda:	4b11      	ldr	r3, [pc, #68]	; (20003020 <init_indoors2+0x68>)
20002fdc:	6819      	ldr	r1, [r3, #0]
20002fde:	4b11      	ldr	r3, [pc, #68]	; (20003024 <init_indoors2+0x6c>)
20002fe0:	681a      	ldr	r2, [r3, #0]
20002fe2:	4b11      	ldr	r3, [pc, #68]	; (20003028 <init_indoors2+0x70>)
20002fe4:	681b      	ldr	r3, [r3, #0]
20002fe6:	480c      	ldr	r0, [pc, #48]	; (20003018 <init_indoors2+0x60>)
20002fe8:	f7ff fc00 	bl	200027ec <load_image>
	}
	
	indoors2Obj->images = indoors2Images;
20002fec:	687b      	ldr	r3, [r7, #4]
20002fee:	4a0a      	ldr	r2, [pc, #40]	; (20003018 <init_indoors2+0x60>)
20002ff0:	601a      	str	r2, [r3, #0]

	indoors2Obj->current_frame = 0;
20002ff2:	687b      	ldr	r3, [r7, #4]
20002ff4:	2200      	movs	r2, #0
20002ff6:	615a      	str	r2, [r3, #20]
	indoors2Obj->n_frames = 1;
20002ff8:	687b      	ldr	r3, [r7, #4]
20002ffa:	2201      	movs	r2, #1
20002ffc:	619a      	str	r2, [r3, #24]
	indoors2Obj->animation_speed = 1;
20002ffe:	687b      	ldr	r3, [r7, #4]
20003000:	2201      	movs	r2, #1
20003002:	61da      	str	r2, [r3, #28]
	indoors2Obj->animation_counter = 0;
20003004:	687b      	ldr	r3, [r7, #4]
20003006:	2200      	movs	r2, #0
20003008:	621a      	str	r2, [r3, #32]
}
2000300a:	46c0      	nop			; (mov r8, r8)
2000300c:	46bd      	mov	sp, r7
2000300e:	b003      	add	sp, #12
20003010:	bd90      	pop	{r4, r7, pc}
20003012:	46c0      	nop			; (mov r8, r8)
20003014:	20008d0c 	andcs	r8, r0, ip, lsl #26
20003018:	20005520 	andcs	r5, r0, r0, lsr #10
2000301c:	2000552c 	andcs	r5, r0, ip, lsr #10
20003020:	20005560 	andcs	r5, r0, r0, ror #10
20003024:	2000551c 	andcs	r5, r0, ip, lsl r5
20003028:	20005544 	andcs	r5, r0, r4, asr #10

2000302c <__divsi3>:
2000302c:	4603      	mov	r3, r0
2000302e:	430b      	orrs	r3, r1
20003030:	d47f      	bmi.n	20003132 <__divsi3+0x106>
20003032:	2200      	movs	r2, #0
20003034:	0843      	lsrs	r3, r0, #1
20003036:	428b      	cmp	r3, r1
20003038:	d374      	bcc.n	20003124 <__divsi3+0xf8>
2000303a:	0903      	lsrs	r3, r0, #4
2000303c:	428b      	cmp	r3, r1
2000303e:	d35f      	bcc.n	20003100 <__divsi3+0xd4>
20003040:	0a03      	lsrs	r3, r0, #8
20003042:	428b      	cmp	r3, r1
20003044:	d344      	bcc.n	200030d0 <__divsi3+0xa4>
20003046:	0b03      	lsrs	r3, r0, #12
20003048:	428b      	cmp	r3, r1
2000304a:	d328      	bcc.n	2000309e <__divsi3+0x72>
2000304c:	0c03      	lsrs	r3, r0, #16
2000304e:	428b      	cmp	r3, r1
20003050:	d30d      	bcc.n	2000306e <__divsi3+0x42>
20003052:	22ff      	movs	r2, #255	; 0xff
20003054:	0209      	lsls	r1, r1, #8
20003056:	ba12      	rev	r2, r2
20003058:	0c03      	lsrs	r3, r0, #16
2000305a:	428b      	cmp	r3, r1
2000305c:	d302      	bcc.n	20003064 <__divsi3+0x38>
2000305e:	1212      	asrs	r2, r2, #8
20003060:	0209      	lsls	r1, r1, #8
20003062:	d065      	beq.n	20003130 <__divsi3+0x104>
20003064:	0b03      	lsrs	r3, r0, #12
20003066:	428b      	cmp	r3, r1
20003068:	d319      	bcc.n	2000309e <__divsi3+0x72>
2000306a:	e000      	b.n	2000306e <__divsi3+0x42>
2000306c:	0a09      	lsrs	r1, r1, #8
2000306e:	0bc3      	lsrs	r3, r0, #15
20003070:	428b      	cmp	r3, r1
20003072:	d301      	bcc.n	20003078 <__divsi3+0x4c>
20003074:	03cb      	lsls	r3, r1, #15
20003076:	1ac0      	subs	r0, r0, r3
20003078:	4152      	adcs	r2, r2
2000307a:	0b83      	lsrs	r3, r0, #14
2000307c:	428b      	cmp	r3, r1
2000307e:	d301      	bcc.n	20003084 <__divsi3+0x58>
20003080:	038b      	lsls	r3, r1, #14
20003082:	1ac0      	subs	r0, r0, r3
20003084:	4152      	adcs	r2, r2
20003086:	0b43      	lsrs	r3, r0, #13
20003088:	428b      	cmp	r3, r1
2000308a:	d301      	bcc.n	20003090 <__divsi3+0x64>
2000308c:	034b      	lsls	r3, r1, #13
2000308e:	1ac0      	subs	r0, r0, r3
20003090:	4152      	adcs	r2, r2
20003092:	0b03      	lsrs	r3, r0, #12
20003094:	428b      	cmp	r3, r1
20003096:	d301      	bcc.n	2000309c <__divsi3+0x70>
20003098:	030b      	lsls	r3, r1, #12
2000309a:	1ac0      	subs	r0, r0, r3
2000309c:	4152      	adcs	r2, r2
2000309e:	0ac3      	lsrs	r3, r0, #11
200030a0:	428b      	cmp	r3, r1
200030a2:	d301      	bcc.n	200030a8 <__divsi3+0x7c>
200030a4:	02cb      	lsls	r3, r1, #11
200030a6:	1ac0      	subs	r0, r0, r3
200030a8:	4152      	adcs	r2, r2
200030aa:	0a83      	lsrs	r3, r0, #10
200030ac:	428b      	cmp	r3, r1
200030ae:	d301      	bcc.n	200030b4 <__divsi3+0x88>
200030b0:	028b      	lsls	r3, r1, #10
200030b2:	1ac0      	subs	r0, r0, r3
200030b4:	4152      	adcs	r2, r2
200030b6:	0a43      	lsrs	r3, r0, #9
200030b8:	428b      	cmp	r3, r1
200030ba:	d301      	bcc.n	200030c0 <__divsi3+0x94>
200030bc:	024b      	lsls	r3, r1, #9
200030be:	1ac0      	subs	r0, r0, r3
200030c0:	4152      	adcs	r2, r2
200030c2:	0a03      	lsrs	r3, r0, #8
200030c4:	428b      	cmp	r3, r1
200030c6:	d301      	bcc.n	200030cc <__divsi3+0xa0>
200030c8:	020b      	lsls	r3, r1, #8
200030ca:	1ac0      	subs	r0, r0, r3
200030cc:	4152      	adcs	r2, r2
200030ce:	d2cd      	bcs.n	2000306c <__divsi3+0x40>
200030d0:	09c3      	lsrs	r3, r0, #7
200030d2:	428b      	cmp	r3, r1
200030d4:	d301      	bcc.n	200030da <__divsi3+0xae>
200030d6:	01cb      	lsls	r3, r1, #7
200030d8:	1ac0      	subs	r0, r0, r3
200030da:	4152      	adcs	r2, r2
200030dc:	0983      	lsrs	r3, r0, #6
200030de:	428b      	cmp	r3, r1
200030e0:	d301      	bcc.n	200030e6 <__divsi3+0xba>
200030e2:	018b      	lsls	r3, r1, #6
200030e4:	1ac0      	subs	r0, r0, r3
200030e6:	4152      	adcs	r2, r2
200030e8:	0943      	lsrs	r3, r0, #5
200030ea:	428b      	cmp	r3, r1
200030ec:	d301      	bcc.n	200030f2 <__divsi3+0xc6>
200030ee:	014b      	lsls	r3, r1, #5
200030f0:	1ac0      	subs	r0, r0, r3
200030f2:	4152      	adcs	r2, r2
200030f4:	0903      	lsrs	r3, r0, #4
200030f6:	428b      	cmp	r3, r1
200030f8:	d301      	bcc.n	200030fe <__divsi3+0xd2>
200030fa:	010b      	lsls	r3, r1, #4
200030fc:	1ac0      	subs	r0, r0, r3
200030fe:	4152      	adcs	r2, r2
20003100:	08c3      	lsrs	r3, r0, #3
20003102:	428b      	cmp	r3, r1
20003104:	d301      	bcc.n	2000310a <__divsi3+0xde>
20003106:	00cb      	lsls	r3, r1, #3
20003108:	1ac0      	subs	r0, r0, r3
2000310a:	4152      	adcs	r2, r2
2000310c:	0883      	lsrs	r3, r0, #2
2000310e:	428b      	cmp	r3, r1
20003110:	d301      	bcc.n	20003116 <__divsi3+0xea>
20003112:	008b      	lsls	r3, r1, #2
20003114:	1ac0      	subs	r0, r0, r3
20003116:	4152      	adcs	r2, r2
20003118:	0843      	lsrs	r3, r0, #1
2000311a:	428b      	cmp	r3, r1
2000311c:	d301      	bcc.n	20003122 <__divsi3+0xf6>
2000311e:	004b      	lsls	r3, r1, #1
20003120:	1ac0      	subs	r0, r0, r3
20003122:	4152      	adcs	r2, r2
20003124:	1a41      	subs	r1, r0, r1
20003126:	d200      	bcs.n	2000312a <__divsi3+0xfe>
20003128:	4601      	mov	r1, r0
2000312a:	4152      	adcs	r2, r2
2000312c:	4610      	mov	r0, r2
2000312e:	4770      	bx	lr
20003130:	e05d      	b.n	200031ee <__divsi3+0x1c2>
20003132:	0fca      	lsrs	r2, r1, #31
20003134:	d000      	beq.n	20003138 <__divsi3+0x10c>
20003136:	4249      	negs	r1, r1
20003138:	1003      	asrs	r3, r0, #32
2000313a:	d300      	bcc.n	2000313e <__divsi3+0x112>
2000313c:	4240      	negs	r0, r0
2000313e:	4053      	eors	r3, r2
20003140:	2200      	movs	r2, #0
20003142:	469c      	mov	ip, r3
20003144:	0903      	lsrs	r3, r0, #4
20003146:	428b      	cmp	r3, r1
20003148:	d32d      	bcc.n	200031a6 <__divsi3+0x17a>
2000314a:	0a03      	lsrs	r3, r0, #8
2000314c:	428b      	cmp	r3, r1
2000314e:	d312      	bcc.n	20003176 <__divsi3+0x14a>
20003150:	22fc      	movs	r2, #252	; 0xfc
20003152:	0189      	lsls	r1, r1, #6
20003154:	ba12      	rev	r2, r2
20003156:	0a03      	lsrs	r3, r0, #8
20003158:	428b      	cmp	r3, r1
2000315a:	d30c      	bcc.n	20003176 <__divsi3+0x14a>
2000315c:	0189      	lsls	r1, r1, #6
2000315e:	1192      	asrs	r2, r2, #6
20003160:	428b      	cmp	r3, r1
20003162:	d308      	bcc.n	20003176 <__divsi3+0x14a>
20003164:	0189      	lsls	r1, r1, #6
20003166:	1192      	asrs	r2, r2, #6
20003168:	428b      	cmp	r3, r1
2000316a:	d304      	bcc.n	20003176 <__divsi3+0x14a>
2000316c:	0189      	lsls	r1, r1, #6
2000316e:	d03a      	beq.n	200031e6 <__divsi3+0x1ba>
20003170:	1192      	asrs	r2, r2, #6
20003172:	e000      	b.n	20003176 <__divsi3+0x14a>
20003174:	0989      	lsrs	r1, r1, #6
20003176:	09c3      	lsrs	r3, r0, #7
20003178:	428b      	cmp	r3, r1
2000317a:	d301      	bcc.n	20003180 <__divsi3+0x154>
2000317c:	01cb      	lsls	r3, r1, #7
2000317e:	1ac0      	subs	r0, r0, r3
20003180:	4152      	adcs	r2, r2
20003182:	0983      	lsrs	r3, r0, #6
20003184:	428b      	cmp	r3, r1
20003186:	d301      	bcc.n	2000318c <__divsi3+0x160>
20003188:	018b      	lsls	r3, r1, #6
2000318a:	1ac0      	subs	r0, r0, r3
2000318c:	4152      	adcs	r2, r2
2000318e:	0943      	lsrs	r3, r0, #5
20003190:	428b      	cmp	r3, r1
20003192:	d301      	bcc.n	20003198 <__divsi3+0x16c>
20003194:	014b      	lsls	r3, r1, #5
20003196:	1ac0      	subs	r0, r0, r3
20003198:	4152      	adcs	r2, r2
2000319a:	0903      	lsrs	r3, r0, #4
2000319c:	428b      	cmp	r3, r1
2000319e:	d301      	bcc.n	200031a4 <__divsi3+0x178>
200031a0:	010b      	lsls	r3, r1, #4
200031a2:	1ac0      	subs	r0, r0, r3
200031a4:	4152      	adcs	r2, r2
200031a6:	08c3      	lsrs	r3, r0, #3
200031a8:	428b      	cmp	r3, r1
200031aa:	d301      	bcc.n	200031b0 <__divsi3+0x184>
200031ac:	00cb      	lsls	r3, r1, #3
200031ae:	1ac0      	subs	r0, r0, r3
200031b0:	4152      	adcs	r2, r2
200031b2:	0883      	lsrs	r3, r0, #2
200031b4:	428b      	cmp	r3, r1
200031b6:	d301      	bcc.n	200031bc <__divsi3+0x190>
200031b8:	008b      	lsls	r3, r1, #2
200031ba:	1ac0      	subs	r0, r0, r3
200031bc:	4152      	adcs	r2, r2
200031be:	d2d9      	bcs.n	20003174 <__divsi3+0x148>
200031c0:	0843      	lsrs	r3, r0, #1
200031c2:	428b      	cmp	r3, r1
200031c4:	d301      	bcc.n	200031ca <__divsi3+0x19e>
200031c6:	004b      	lsls	r3, r1, #1
200031c8:	1ac0      	subs	r0, r0, r3
200031ca:	4152      	adcs	r2, r2
200031cc:	1a41      	subs	r1, r0, r1
200031ce:	d200      	bcs.n	200031d2 <__divsi3+0x1a6>
200031d0:	4601      	mov	r1, r0
200031d2:	4663      	mov	r3, ip
200031d4:	4152      	adcs	r2, r2
200031d6:	105b      	asrs	r3, r3, #1
200031d8:	4610      	mov	r0, r2
200031da:	d301      	bcc.n	200031e0 <__divsi3+0x1b4>
200031dc:	4240      	negs	r0, r0
200031de:	2b00      	cmp	r3, #0
200031e0:	d500      	bpl.n	200031e4 <__divsi3+0x1b8>
200031e2:	4249      	negs	r1, r1
200031e4:	4770      	bx	lr
200031e6:	4663      	mov	r3, ip
200031e8:	105b      	asrs	r3, r3, #1
200031ea:	d300      	bcc.n	200031ee <__divsi3+0x1c2>
200031ec:	4240      	negs	r0, r0
200031ee:	b501      	push	{r0, lr}
200031f0:	2000      	movs	r0, #0
200031f2:	f000 f805 	bl	20003200 <__aeabi_idiv0>
200031f6:	bd02      	pop	{r1, pc}

200031f8 <__aeabi_idivmod>:
200031f8:	2900      	cmp	r1, #0
200031fa:	d0f8      	beq.n	200031ee <__divsi3+0x1c2>
200031fc:	e716      	b.n	2000302c <__divsi3>
200031fe:	4770      	bx	lr

20003200 <__aeabi_idiv0>:
20003200:	4770      	bx	lr
20003202:	46c0      	nop			; (mov r8, r8)

20003204 <counter>:
20003204:	00000000 	andeq	r0, r0, r0

20003208 <distance_player_fire.4288>:
20003208:	00000000 	andeq	r0, r0, r0

2000320c <nGameObjects>:
2000320c:	00000000 	andeq	r0, r0, r0

20003210 <lastJumpValue.4092>:
20003210:	00000000 	andeq	r0, r0, r0

20003214 <ySpeed.4096>:
20003214:	00000000 	andeq	r0, r0, r0

20003218 <lastRightValue.4093>:
20003218:	00000000 	andeq	r0, r0, r0

2000321c <xSpeed.4095>:
2000321c:	00000000 	andeq	r0, r0, r0

20003220 <lastLeftValue.4094>:
20003220:	00000000 	andeq	r0, r0, r0

20003224 <monster>:
20003224:	00000000 	andeq	r0, r0, r0

20003228 <tempCastleBlack>:
	...

20003234 <tempPressGray>:
	...

20003240 <tempTitleGray>:
	...

2000324c <castleBlack>:
2000324c:	00000000 	andeq	r0, r0, r0

20003250 <tempMonster>:
	...

2000325c <pressLight>:
2000325c:	00000000 	andeq	r0, r0, r0

20003260 <tempTitleBlack>:
	...

2000326c <bg>:
2000326c:	00000000 	andeq	r0, r0, r0

20003270 <tempMonsterGray>:
	...

2000327c <tempTitleLight>:
	...

20003288 <castleLight>:
20003288:	00000000 	andeq	r0, r0, r0

2000328c <tempPressLight>:
	...

20003298 <tempCastleLight>:
	...

200032a4 <pressGray>:
200032a4:	00000000 	andeq	r0, r0, r0

200032a8 <tempMonsterLight>:
	...

200032b4 <tempPressBlack>:
	...

200032c0 <titleGray>:
200032c0:	00000000 	andeq	r0, r0, r0

200032c4 <tempCastleGray>:
	...

200032d0 <monsterLight>:
200032d0:	00000000 	andeq	r0, r0, r0

200032d4 <titleLight>:
200032d4:	00000000 	andeq	r0, r0, r0

200032d8 <castleGray>:
200032d8:	00000000 	andeq	r0, r0, r0

200032dc <random_seed>:
200032dc:	00000000 	andeq	r0, r0, r0

200032e0 <pressBlack>:
200032e0:	00000000 	andeq	r0, r0, r0

200032e4 <monsterGray>:
200032e4:	00000000 	andeq	r0, r0, r0

200032e8 <tempBg>:
	...

200032f4 <titleBlack>:
200032f4:	00000000 	andeq	r0, r0, r0

200032f8 <gameObjects>:
	...

20003488 <fire1Light>:
20003488:	00000000 	andeq	r0, r0, r0

2000348c <tempFire3Light>:
	...

20003498 <fire3Gray>:
20003498:	00000000 	andeq	r0, r0, r0

2000349c <tempFire4Gray>:
	...

200034a8 <fire2Image>:
	...

200034b4 <tempFire2Gray>:
	...

200034c0 <tempFireBlack>:
	...

200034cc <fire3Image>:
	...

200034d8 <tempFire4Light>:
	...

200034e4 <fire1Image>:
	...

200034f0 <fire4Light>:
200034f0:	00000000 	andeq	r0, r0, r0

200034f4 <fireObj>:
	...

20003518 <fire5Image>:
	...

20003524 <fireImages>:
	...

20003560 <tempFire5Gray>:
	...

2000356c <tempFire3Gray>:
	...

20003578 <fire4Image>:
	...

20003584 <fire4Gray>:
20003584:	00000000 	andeq	r0, r0, r0

20003588 <tempFire1Light>:
	...

20003594 <tempFire5Light>:
	...

200035a0 <fire5Gray>:
200035a0:	00000000 	andeq	r0, r0, r0

200035a4 <fire2Light>:
200035a4:	00000000 	andeq	r0, r0, r0

200035a8 <fire5Light>:
200035a8:	00000000 	andeq	r0, r0, r0

200035ac <tempFire1Gray>:
	...

200035b8 <fireBlack>:
200035b8:	00000000 	andeq	r0, r0, r0

200035bc <tempFire2Light>:
	...

200035c8 <fire3Light>:
200035c8:	00000000 	andeq	r0, r0, r0

200035cc <fire2Gray>:
200035cc:	00000000 	andeq	r0, r0, r0

200035d0 <fire1Gray>:
200035d0:	00000000 	andeq	r0, r0, r0

200035d4 <bird4Light>:
200035d4:	00000000 	andeq	r0, r0, r0

200035d8 <bird1Gray>:
200035d8:	00000000 	andeq	r0, r0, r0

200035dc <bird6Image>:
	...

200035e8 <bird5Black>:
200035e8:	00000000 	andeq	r0, r0, r0

200035ec <tempBird4Black>:
	...

200035f8 <bird2Image>:
	...

20003604 <birdObj>:
	...

20003628 <bird1Image>:
	...

20003634 <bird3Black>:
20003634:	00000000 	andeq	r0, r0, r0

20003638 <bird4Gray>:
20003638:	00000000 	andeq	r0, r0, r0

2000363c <bird2Black>:
2000363c:	00000000 	andeq	r0, r0, r0

20003640 <bird1Black>:
20003640:	00000000 	andeq	r0, r0, r0

20003644 <bird4Image>:
	...

20003650 <tempBirdBlack>:
	...

2000365c <bird3Gray>:
2000365c:	00000000 	andeq	r0, r0, r0

20003660 <tempBirdGray>:
	...

2000366c <bird5Gray>:
2000366c:	00000000 	andeq	r0, r0, r0

20003670 <tempBird5Light>:
	...

2000367c <tempBird2Gray>:
	...

20003688 <bird3Light>:
20003688:	00000000 	andeq	r0, r0, r0

2000368c <tempBird5Gray>:
	...

20003698 <tempBird5Black>:
	...

200036a4 <bird5Image>:
	...

200036b0 <bird5Light>:
200036b0:	00000000 	andeq	r0, r0, r0

200036b4 <tempBird3Black>:
	...

200036c0 <bird2Gray>:
200036c0:	00000000 	andeq	r0, r0, r0

200036c4 <tempBirdLight>:
	...

200036d0 <bird1Light>:
200036d0:	00000000 	andeq	r0, r0, r0

200036d4 <tempBird2Light>:
	...

200036e0 <bird3Image>:
	...

200036ec <tempBird4Light>:
	...

200036f8 <tempBird3Light>:
	...

20003704 <tempBird3Gray>:
	...

20003710 <birdImages>:
	...

20003758 <bird4Black>:
20003758:	00000000 	andeq	r0, r0, r0

2000375c <tempBird2Black>:
	...

20003768 <tempBird4Gray>:
	...

20003774 <bird2Light>:
20003774:	00000000 	andeq	r0, r0, r0

20003778 <witch1Gray>:
20003778:	00000000 	andeq	r0, r0, r0

2000377c <witch2Light>:
2000377c:	00000000 	andeq	r0, r0, r0

20003780 <witchImages>:
	...

200037b0 <witch2Image>:
	...

200037bc <tempWitch2Black>:
	...

200037c8 <tempWitchBlack>:
	...

200037d4 <tempWitch3Light>:
	...

200037e0 <witch4Image>:
	...

200037ec <witch2Gray>:
200037ec:	00000000 	andeq	r0, r0, r0

200037f0 <tempWitchGray>:
	...

200037fc <tempWitch3Black>:
	...

20003808 <tempWitch2Gray>:
	...

20003814 <witch3Black>:
20003814:	00000000 	andeq	r0, r0, r0

20003818 <witchObj>:
	...

2000383c <witch3Light>:
2000383c:	00000000 	andeq	r0, r0, r0

20003840 <tempWitch3Gray>:
	...

2000384c <witch1Black>:
2000384c:	00000000 	andeq	r0, r0, r0

20003850 <witch3Gray>:
20003850:	00000000 	andeq	r0, r0, r0

20003854 <witch1Image>:
	...

20003860 <tempWitchLight>:
	...

2000386c <tempWitch2Light>:
	...

20003878 <witch1Light>:
20003878:	00000000 	andeq	r0, r0, r0

2000387c <witch3Image>:
	...

20003888 <witch2Black>:
20003888:	00000000 	andeq	r0, r0, r0

2000388c <backBufferGray>:
	...

20003c8c <draw_buffer_black_gray>:
	...

2000408c <backBuffer>:
	...

2000448c <draw_buffer_black_light>:
	...

2000488c <draw_buffer_black>:
	...

20004c8c <draw_buffer_black_gray_light>:
	...

2000508c <backBufferLight>:
	...

2000548c <tempIndoorsGray>:
	...

20005498 <tempIndoorsLight>:
	...

200054a4 <tempIndoorsBlack>:
	...

200054b0 <indoorsGray>:
200054b0:	00000000 	andeq	r0, r0, r0

200054b4 <indoorsObj>:
	...

200054d8 <indoorsImages>:
	...

200054e4 <indoorsBlack>:
200054e4:	00000000 	andeq	r0, r0, r0

200054e8 <indoorsImage>:
	...

200054f4 <indoorsLight>:
200054f4:	00000000 	andeq	r0, r0, r0

200054f8 <indoors2Obj>:
	...

2000551c <indoors2Gray>:
2000551c:	00000000 	andeq	r0, r0, r0

20005520 <indoors2Images>:
	...

2000552c <indoors2Image>:
	...

20005538 <tempIndoors2Gray>:
	...

20005544 <indoors2Light>:
20005544:	00000000 	andeq	r0, r0, r0

20005548 <tempIndoors2Black>:
	...

20005554 <tempIndoors2Light>:
	...

20005560 <indoors2Black>:
20005560:	00000000 	andeq	r0, r0, r0

20005564 <monster_black_bits>:
	...
20005574:	0001c000 	andeq	ip, r1, r0
20005578:	00023000 	andeq	r3, r2, r0
2000557c:	00021000 	andeq	r1, r2, r0
20005580:	00060800 	andeq	r0, r6, r0, lsl #16
20005584:	00040800 	andeq	r0, r4, r0, lsl #16
20005588:	00040800 	andeq	r0, r4, r0, lsl #16
2000558c:	00092800 	andeq	r2, r9, r0, lsl #16
20005590:	00092800 	andeq	r2, r9, r0, lsl #16
20005594:	00100400 	andseq	r0, r0, r0, lsl #8
20005598:	00100400 	andseq	r0, r0, r0, lsl #8
2000559c:	00200200 	eoreq	r0, r0, r0, lsl #4
200055a0:	00661b00 	rsbeq	r1, r6, r0, lsl #22
200055a4:	0043b100 	subeq	fp, r3, r0, lsl #2
200055a8:	0080e080 	addeq	lr, r0, r0, lsl #1
200055ac:	01800080 	orreq	r0, r0, r0, lsl #1
200055b0:	01000040 	tsteq	r0, r0, asr #32
200055b4:	02000040 	andeq	r0, r0, #64	; 0x40
200055b8:	02000060 	andeq	r0, r0, #96	; 0x60
200055bc:	02000020 	andeq	r0, r0, #32
200055c0:	03ff03e0 	mvnseq	r0, #224, 6	; 0x80000003
200055c4:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...

200055dc <monster_light_bits>:
	...
200055f0:	00010000 	andeq	r0, r1, r0
200055f4:	00018000 	andeq	r8, r1, r0
200055f8:	0001f000 	andeq	pc, r1, r0
200055fc:	0001f000 	andeq	pc, r1, r0
20005600:	00009000 	andeq	r9, r0, r0
20005604:	00009000 	andeq	r9, r0, r0
20005608:	0000d000 	andeq	sp, r0, r0
2000560c:	0001f800 	andeq	pc, r1, r0, lsl #16
20005610:	0003f800 	andeq	pc, r3, r0, lsl #16
20005614:	0003fc00 	andeq	pc, r3, r0, lsl #24
20005618:	0001e400 	andeq	lr, r1, r0, lsl #8
2000561c:	00044c00 	andeq	r4, r4, r0, lsl #24
20005620:	00060c00 	andeq	r0, r6, r0, lsl #24
20005624:	0006ee00 	andeq	lr, r6, r0, lsl #28
20005628:	000ffe00 	andeq	pc, pc, r0, lsl #28
2000562c:	000f3f00 	andeq	r3, pc, r0, lsl #30
20005630:	00000780 	andeq	r0, r0, r0, lsl #15
20005634:	000003c0 	andeq	r0, r0, r0, asr #7
	...

20005654 <monster_gray_bits>:
	...
20005674:	00020000 	andeq	r0, r2, r0
20005678:	00000000 	andeq	r0, r0, r0
2000567c:	00040000 	andeq	r0, r4, r0
20005680:	00060000 	andeq	r0, r6, r0
20005684:	000e0000 	andeq	r0, lr, r0
20005688:	000c0000 	andeq	r0, ip, r0
2000568c:	001c0000 	andseq	r0, ip, r0
20005690:	00180000 	andseq	r0, r8, r0
20005694:	00380000 	eorseq	r0, r8, r0
20005698:	00780000 	rsbseq	r0, r8, r0
2000569c:	00780000 	rsbseq	r0, r8, r0
200056a0:	00f00000 	rscseq	r0, r0, r0
200056a4:	01f0c000 	mvnseq	ip, r0
200056a8:	01fff800 	mvnseq	pc, r0, lsl #16
200056ac:	01fffc00 	mvnseq	pc, r0, lsl #24
200056b0:	0000fc00 	andeq	pc, r0, r0, lsl #24
	...

200056cc <press_black_bits>:
	...
20005704:	001c0000 	andseq	r0, ip, r0
20005708:	00000000 	andeq	r0, r0, r0
2000570c:	00240000 	eoreq	r0, r4, r0
20005710:	00000000 	andeq	r0, r0, r0
20005714:	00440000 	subeq	r0, r4, r0
20005718:	00000000 	andeq	r0, r0, r0
2000571c:	c5240000 	strgt	r0, [r4, #-0]!
20005720:	00000198 	muleq	r0, r8, r1
20005724:	2b1c0000 	blcs	2070572c <firstTime.4040+0x6fca20>
20005728:	00000045 	andeq	r0, r0, r5, asr #32
2000572c:	e1040000 	mrs	r0, (UNDEF: 4)
20005730:	000000cd 	andeq	r0, r0, sp, asr #1
20005734:	21040000 	mrscs	r0, (UNDEF: 4)
20005738:	00000110 	andeq	r0, r0, r0, lsl r1
2000573c:	c1040000 	mrsgt	r0, (UNDEF: 4)
20005740:	000000cc 	andeq	r0, r0, ip, asr #1
	...
20005770:	00000004 	andeq	r0, r0, r4
20005774:	00000000 	andeq	r0, r0, r0
20005778:	00000004 	andeq	r0, r0, r4
2000577c:	00000000 	andeq	r0, r0, r0
20005780:	00000004 	andeq	r0, r0, r4
20005784:	0494e000 	ldreq	lr, [r4], #0
20005788:	00009334 	andeq	r9, r0, r4, lsr r3
2000578c:	04ac9000 	strteq	r9, [ip], #0
20005790:	00009494 	muleq	r0, r4, r4
20005794:	04a49000 	strteq	r9, [r4], #0
20005798:	0000978c 	andeq	r9, r0, ip, lsl #15
2000579c:	04a49000 	strteq	r9, [r4], #0
200057a0:	00009094 	muleq	r0, r4, r0
200057a4:	07256000 	streq	r6, [r5, -r0]!
200057a8:	0000e324 	andeq	lr, r0, r4, lsr #6
200057ac:	04000000 	streq	r0, [r0], #-0
200057b0:	00008000 	andeq	r8, r0, r0
200057b4:	04000000 	streq	r0, [r0], #-0
200057b8:	00008000 	andeq	r8, r0, r0
200057bc:	03000000 	movweq	r0, #0
200057c0:	00006000 	andeq	r6, r0, r0
	...

200057e4 <press_light_bits>:
	...
20005824:	00000200 	andeq	r0, r0, r0, lsl #4
20005828:	00000000 	andeq	r0, r0, r0
2000582c:	00000700 	andeq	r0, r0, r0, lsl #14
20005830:	00000000 	andeq	r0, r0, r0
20005834:	00000200 	andeq	r0, r0, r0, lsl #4
	...
20005878:	00800000 	addeq	r0, r0, r0
2000587c:	00000000 	andeq	r0, r0, r0
20005880:	01c00000 	biceq	r0, r0, r0
20005884:	00000000 	andeq	r0, r0, r0
20005888:	00800000 	addeq	r0, r0, r0
2000588c:	00000010 	andeq	r0, r0, r0, lsl r0
20005890:	00000000 	andeq	r0, r0, r0
20005894:	00000038 	andeq	r0, r0, r8, lsr r0
20005898:	00000000 	andeq	r0, r0, r0
2000589c:	00000010 	andeq	r0, r0, r0, lsl r0
	...

200058fc <press_gray_bits>:
	...
2000593c:	00180000 	andseq	r0, r8, r0
20005940:	00000000 	andeq	r0, r0, r0
20005944:	00380000 	eorseq	r0, r8, r0
20005948:	00000000 	andeq	r0, r0, r0
2000594c:	00580000 	subseq	r0, r8, r0
20005950:	00000020 	andeq	r0, r0, r0, lsr #32
20005954:	d4200000 	strtle	r0, [r0], #-0
20005958:	0000039a 	muleq	r0, sl, r3
2000595c:	0a380000 	beq	20e05964 <firstTime.4040+0xdfcc58>
20005960:	00000102 	andeq	r0, r0, r2, lsl #2
20005964:	c2080000 	andgt	r0, r8, #0
20005968:	00000223 	andeq	r0, r0, r3, lsr #4
2000596c:	02080000 	andeq	r0, r8, #0
20005970:	00000311 	andeq	r0, r0, r1, lsl r3
20005974:	c1080000 	mrsgt	r0, (UNDEF: 8)
20005978:	000001dd 	ldrdeq	r0, [r0], -sp
	...
200059a8:	00000008 	andeq	r0, r0, r8
200059ac:	00000000 	andeq	r0, r0, r0
200059b0:	00000008 	andeq	r0, r0, r8
200059b4:	00000000 	andeq	r0, r0, r0
200059b8:	00000008 	andeq	r0, r0, r8
200059bc:	09116000 	ldmdbeq	r1, {sp, lr}
200059c0:	00012328 	andeq	r2, r1, r8, lsr #6
200059c4:	09596000 	ldmdbeq	r9, {sp, lr}^
200059c8:	00012810 	andeq	r2, r1, r0, lsl r8
200059cc:	0b492000 	bleq	2124d9d4 <firstTime.4040+0x1244cc8>
200059d0:	00012f08 	andeq	r2, r1, r8, lsl #30
200059d4:	08488000 	stmdaeq	r8, {pc}^
200059d8:	00010458 	andeq	r0, r1, r8, asr r4
200059dc:	0b6be000 	bleq	21afd9e4 <firstTime.4040+0x1af4cd8>
200059e0:	00016768 	andeq	r6, r1, r8, ror #14
200059e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
200059e8:	00010000 	andeq	r0, r1, r0
200059ec:	0c000000 	stceq	0, cr0, [r0], {-0}
200059f0:	00018000 	andeq	r8, r1, r0
200059f4:	06000000 	streq	r0, [r0], -r0
200059f8:	0000c000 	andeq	ip, r0, r0
	...

20005a14 <castle_black_bits>:
20005a14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a1c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005a20:	00000000 	andeq	r0, r0, r0
20005a24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a2c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005a30:	00000000 	andeq	r0, r0, r0
20005a34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a3c:	00000001 	andeq	r0, r0, r1
20005a40:	00000000 	andeq	r0, r0, r0
20005a44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a48:	7fffffff 	svcvc	0x00ffffff
	...
20005a54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a58:	3fffffff 	svccc	0x00ffffff
	...
20005a64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a68:	1fffffff 	svcne	0x00ffffff
	...
20005a74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a78:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
	...
20005a84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a88:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
	...
20005a94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a98:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005b9f <castle_black_bits+0x18b>	; <UNPREDICTABLE>
	...
20005aa4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005aa8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
	...
20005ab4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ab8:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
	...
20005ac4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ac8:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005ad4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ad8:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005ae4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ae8:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005af4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005af8:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20005b04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b08:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20005b14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b18:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005b24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b28:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005b34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b38:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20005b44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b48:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20005b54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b58:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20005b64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b68:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20005b74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b78:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20005b7c:	04900000 	ldreq	r0, [r0], #0
20005b80:	00000000 	andeq	r0, r0, r0
20005b84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b88:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20005b8c:	0b680000 	bleq	21a05b94 <firstTime.4040+0x19fce88>
20005b90:	00000000 	andeq	r0, r0, r0
20005b94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b98:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20005b9c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20005ba0:	00000000 	andeq	r0, r0, r0
20005ba4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ba8:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20005bac:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20005bb0:	00000092 	muleq	r0, r2, r0
20005bb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005bb8:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20005bbc:	04100000 	ldreq	r0, [r0], #-0
20005bc0:	0000016d 	andeq	r0, r0, sp, ror #2
20005bc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005bc8:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20005bcc:	04101240 	ldreq	r1, [r0], #-576	; 0xfffffdc0
20005bd0:	00000101 	andeq	r0, r0, r1, lsl #2
20005bd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005bd8:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20005bdc:	04102da0 	ldreq	r2, [r0], #-3488	; 0xfffff260
20005be0:	00000101 	andeq	r0, r0, r1, lsl #2
20005be4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005be8:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20005bec:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
20005bf0:	00000101 	andeq	r0, r0, r1, lsl #2
20005bf4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005bf8:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20005bfc:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
20005c00:	00000101 	andeq	r0, r0, r1, lsl #2
20005c04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c08:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20005c0c:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005c10:	00000082 	andeq	r0, r0, r2, lsl #1
20005c14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c18:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20005c1c:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005c20:	00000092 	muleq	r0, r2, r0
20005c24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c28:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20005c2c:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005c30:	012400a2 	smulwbeq	r4, r2, r0
20005c34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c38:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20005c3c:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005c40:	02da00a2 	sbcseq	r0, sl, #162	; 0xa2
20005c44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c48:	00004fff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
20005c4c:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005c50:	020200a2 	andeq	r0, r2, #162	; 0xa2
20005c54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c58:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005c5c:	08081040 	stmdaeq	r8, {r6, ip}
20005c60:	0202009a 	andeq	r0, r2, #154	; 0x9a
20005c64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c68:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005c6c:	08082020 	stmdaeq	r8, {r5, sp}
20005c70:	01040082 	smlabbeq	r4, r2, r0, r0
20005c74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c78:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005c7c:	48082020 	stmdami	r8, {r5, sp}
20005c80:	01040102 	tsteq	r4, r2, lsl #2
20005c84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c88:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005c8c:	b0082020 	andlt	r2, r8, r0, lsr #32
20005c90:	01040101 	tsteq	r4, r1, lsl #2
20005c94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c98:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005c9c:	00082220 	andeq	r2, r8, r0, lsr #4
20005ca0:	01040100 	mrseq	r0, (UNDEF: 20)
20005ca4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ca8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005cac:	00882420 	addeq	r2, r8, r0, lsr #8
20005cb0:	01040100 	mrseq	r0, (UNDEF: 20)
20005cb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005cb8:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005cbc:	01082420 	tsteq	r8, r0, lsr #8
20005cc0:	01045a00 	tsteq	r4, r0, lsl #20
20005cc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005cc8:	0000007f 	andeq	r0, r0, pc, ror r0
20005ccc:	01082420 	tsteq	r8, r0, lsr #8
20005cd0:	0104a400 	tsteq	r4, r0, lsl #8
20005cd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005cd8:	00000001 	andeq	r0, r0, r1
20005cdc:	010b2320 	tsteq	fp, r0, lsr #6
20005ce0:	01030001 	tsteq	r3, r1
20005ce4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ce8:	00000000 	andeq	r0, r0, r0
20005cec:	00c4c020 	sbceq	ip, r4, r0, lsr #32
20005cf0:	02000002 	andeq	r0, r0, #2
20005cf4:	3fffffff 	svccc	0x00ffffff
20005cf8:	00000000 	andeq	r0, r0, r0
20005cfc:	00000020 	andeq	r0, r0, r0, lsr #32
20005d00:	02200002 	eoreq	r0, r0, #2
20005d04:	3fffffff 	svccc	0x00ffffff
20005d08:	00000000 	andeq	r0, r0, r0
20005d0c:	00000020 	andeq	r0, r0, r0, lsr #32
20005d10:	02400002 	subeq	r0, r0, #2
20005d14:	1fffffff 	svcne	0x00ffffff
20005d18:	00000000 	andeq	r0, r0, r0
20005d1c:	80000020 	andhi	r0, r0, r0, lsr #32
20005d20:	02400001 	subeq	r0, r0, #1
20005d24:	1fffffff 	svcne	0x00ffffff
20005d28:	00000000 	andeq	r0, r0, r0
20005d2c:	00000010 	andeq	r0, r0, r0, lsl r0
20005d30:	02400000 	subeq	r0, r0, #0
20005d34:	0fffffff 	svceq	0x00ffffff
20005d38:	00000000 	andeq	r0, r0, r0
20005d3c:	00000010 	andeq	r0, r0, r0, lsl r0
20005d40:	02300000 	eorseq	r0, r0, #0
20005d44:	0fffffff 	svceq	0x00ffffff
20005d48:	00000000 	andeq	r0, r0, r0
20005d4c:	00000010 	andeq	r0, r0, r0, lsl r0
20005d50:	02000000 	andeq	r0, r0, #0
20005d54:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
20005d58:	00000000 	andeq	r0, r0, r0
20005d5c:	00000010 	andeq	r0, r0, r0, lsl r0
20005d60:	04000000 	streq	r0, [r0], #-0
20005d64:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20005d68:	00000000 	andeq	r0, r0, r0
20005d6c:	00000010 	andeq	r0, r0, r0, lsl r0
20005d70:	04000000 	streq	r0, [r0], #-0
20005d74:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005e7b <castle_gray_bits+0x67>	; <UNPREDICTABLE>
20005d78:	00000000 	andeq	r0, r0, r0
20005d7c:	00000008 	andeq	r0, r0, r8
20005d80:	04000000 	streq	r0, [r0], #-0
20005d84:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005e8b <castle_gray_bits+0x77>	; <UNPREDICTABLE>
20005d88:	00000000 	andeq	r0, r0, r0
20005d8c:	00000008 	andeq	r0, r0, r8
20005d90:	04000000 	streq	r0, [r0], #-0
20005d94:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20005d98:	00000000 	andeq	r0, r0, r0
20005d9c:	00000008 	andeq	r0, r0, r8
20005da0:	060001c0 	streq	r0, [r0], -r0, asr #3
20005da4:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20005da8:	00000000 	andeq	r0, r0, r0
20005dac:	00000008 	andeq	r0, r0, r8
20005db0:	04000220 	streq	r0, [r0], #-544	; 0xfffffde0
20005db4:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20005db8:	00000000 	andeq	r0, r0, r0
20005dbc:	00000008 	andeq	r0, r0, r8
20005dc0:	04100400 	ldreq	r0, [r0], #-1024	; 0xfffffc00
20005dc4:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
20005dc8:	00000000 	andeq	r0, r0, r0
20005dcc:	00000008 	andeq	r0, r0, r8
20005dd0:	04a00400 	strteq	r0, [r0], #1024	; 0x400
20005dd4:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
20005dd8:	00000000 	andeq	r0, r0, r0
20005ddc:	00000008 	andeq	r0, r0, r8
20005de0:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20005de4:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
20005de8:	00000000 	andeq	r0, r0, r0
20005dec:	00000008 	andeq	r0, r0, r8
20005df0:	07400400 	strbeq	r0, [r0, -r0, lsl #8]
20005df4:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20005df8:	00000000 	andeq	r0, r0, r0
20005dfc:	00000008 	andeq	r0, r0, r8
20005e00:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20005e04:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20005e08:	00000000 	andeq	r0, r0, r0
20005e0c:	00000008 	andeq	r0, r0, r8
20005e10:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00

20005e14 <castle_gray_bits>:
	...
20005e1c:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005e20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20005e2c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20005e30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20005e3c:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20005e40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005e44:	00000000 	andeq	r0, r0, r0
20005e48:	80000000 	andhi	r0, r0, r0
20005e4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005e50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005e54:	00000000 	andeq	r0, r0, r0
20005e58:	c0000000 	andgt	r0, r0, r0
20005e5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005e60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005e64:	00000000 	andeq	r0, r0, r0
20005e68:	e0000000 	and	r0, r0, r0
20005e6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005e70:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20005e74:	00000000 	andeq	r0, r0, r0
20005e78:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005e7c:	f3ffcfff 			; <UNDEFINED> instruction: 0xf3ffcfff
20005e80:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20005e84:	00000000 	andeq	r0, r0, r0
20005e88:	fc000000 	stc2	0, cr0, [r0], {-0}
20005e8c:	f1ff8fff 			; <UNDEFINED> instruction: 0xf1ff8fff
20005e90:	fff9ff3f 			; <UNDEFINED> instruction: 0xfff9ff3f
20005e94:	00000000 	andeq	r0, r0, r0
20005e98:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20005e9c:	f0ff8fef 			; <UNDEFINED> instruction: 0xf0ff8fef
20005ea0:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20005ea4:	00000000 	andeq	r0, r0, r0
20005ea8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20005eac:	e0ff87ef 	rscs	r8, pc, pc, ror #15
20005eb0:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20005eb4:	00000000 	andeq	r0, r0, r0
20005eb8:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20005ebc:	c07e07e7 	rsbsgt	r0, lr, r7, ror #15
20005ec0:	ffe0fc1f 			; <UNDEFINED> instruction: 0xffe0fc1f
20005ec4:	00000000 	andeq	r0, r0, r0
20005ec8:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20005ecc:	001c07e7 	andseq	r0, ip, r7, ror #15
20005ed0:	ffe0380e 	vcmla.f32	d19, d0, d14[0], #170
20005ed4:	00000000 	andeq	r0, r0, r0
20005ed8:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20005edc:	000003e3 	andeq	r0, r0, r3, ror #7
20005ee0:	f7c00000 			; <UNDEFINED> instruction: 0xf7c00000
20005ee4:	00000000 	andeq	r0, r0, r0
20005ee8:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20005eec:	000001c3 	andeq	r0, r0, r3, asr #3
20005ef0:	e7800000 	str	r0, [r0, r0]
20005ef4:	00000000 	andeq	r0, r0, r0
20005ef8:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20005efc:	00000003 	andeq	r0, r0, r3
20005f00:	c3800000 	orrgt	r0, r0, #0
20005f04:	00000000 	andeq	r0, r0, r0
20005f08:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20005f0c:	00000001 	andeq	r0, r0, r1
20005f10:	c0000000 	andgt	r0, r0, r0
20005f14:	00000000 	andeq	r0, r0, r0
20005f18:	9ff00000 	svcls	0x00f00000	; IMB
20005f1c:	00000001 	andeq	r0, r0, r1
20005f20:	80000000 	andhi	r0, r0, r0
20005f24:	00000000 	andeq	r0, r0, r0
20005f28:	8ff00000 	svchi	0x00f00000	; IMB
20005f2c:	00000000 	andeq	r0, r0, r0
20005f30:	80000000 	andhi	r0, r0, r0
20005f34:	00000000 	andeq	r0, r0, r0
20005f38:	8ff80000 	svchi	0x00f80000
	...
20005f48:	0ffc0000 	svceq	0x00fc0000
	...
20005f58:	0ffc0000 	svceq	0x00fc0000
	...
20005f68:	0ffc0000 	svceq	0x00fc0000
	...
20005f78:	0ffc0000 	svceq	0x00fc0000
	...
20005f88:	0ffc0000 	svceq	0x00fc0000
	...
20005f98:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20005fa8:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20005fb8:	07fe0000 	ldrbeq	r0, [lr, r0]!
20005fbc:	03800000 	orreq	r0, r0, #0
	...
20005fc8:	03fe0000 	mvnseq	r0, #0
20005fcc:	02000000 	andeq	r0, r0, #0
	...
20005fd8:	03ff0000 	mvnseq	r0, #0
20005fdc:	02000000 	andeq	r0, r0, #0
	...
20005fe8:	03ff0000 	mvnseq	r0, #0
20005fec:	02000000 	andeq	r0, r0, #0
	...
20005ff8:	03ff0000 	mvnseq	r0, #0
20005ffc:	02000000 	andeq	r0, r0, #0
	...
20006008:	03ff0000 	mvnseq	r0, #0
2000600c:	02800c00 	addeq	r0, r0, #0, 24
20006010:	00000060 	andeq	r0, r0, r0, rrx
20006014:	00000000 	andeq	r0, r0, r0
20006018:	03ff0000 	mvnseq	r0, #0
2000601c:	03000800 	movweq	r0, #2048	; 0x800
20006020:	00000040 	andeq	r0, r0, r0, asr #32
20006024:	00000000 	andeq	r0, r0, r0
20006028:	03ff0000 	mvnseq	r0, #0
2000602c:	03000800 	movweq	r0, #2048	; 0x800
20006030:	00000040 	andeq	r0, r0, r0, asr #32
20006034:	00000000 	andeq	r0, r0, r0
20006038:	03ff8000 	mvnseq	r8, #0
2000603c:	03000a00 	movweq	r0, #2560	; 0xa00
20006040:	00000040 	andeq	r0, r0, r0, asr #32
20006044:	00000000 	andeq	r0, r0, r0
20006048:	01ffb000 	mvnseq	fp, r0
2000604c:	03000c00 	movweq	r0, #3072	; 0xc00
20006050:	00000040 	andeq	r0, r0, r0, asr #32
20006054:	00000000 	andeq	r0, r0, r0
20006058:	01fff800 	mvnseq	pc, r0, lsl #16
2000605c:	07800c00 	streq	r0, [r0, r0, lsl #24]
20006060:	00000060 	andeq	r0, r0, r0, rrx
20006064:	00000000 	andeq	r0, r0, r0
20006068:	01fffc00 	mvnseq	pc, r0, lsl #24
2000606c:	04001800 	streq	r1, [r0], #-2048	; 0xfffff800
20006070:	00c00058 	sbceq	r0, r0, r8, asr r0
20006074:	00000000 	andeq	r0, r0, r0
20006078:	00fffc00 	rscseq	pc, pc, r0, lsl #24
2000607c:	06001400 	streq	r1, [r0], -r0, lsl #8
20006080:	00c000c0 	sbceq	r0, r0, r0, asr #1
20006084:	00000000 	andeq	r0, r0, r0
20006088:	007ffc00 	rsbseq	pc, pc, r0, lsl #24
2000608c:	45001000 	strmi	r1, [r0, #-0]
20006090:	008000a0 	addeq	r0, r0, r0, lsr #1
20006094:	00000000 	andeq	r0, r0, r0
20006098:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
2000609c:	80001000 	andhi	r1, r0, r0
200060a0:	008000c1 	addeq	r0, r0, r1, asr #1
200060a4:	00000000 	andeq	r0, r0, r0
200060a8:	003ffe00 	eorseq	pc, pc, r0, lsl #28
200060ac:	00001000 	andeq	r1, r0, r0
200060b0:	00a000f0 	strdeq	r0, [r0], r0	; <UNPREDICTABLE>
200060b4:	00000000 	andeq	r0, r0, r0
200060b8:	003fff00 	eorseq	pc, pc, r0, lsl #30
200060bc:	00001000 	andeq	r1, r0, r0
200060c0:	00c000e0 	sbceq	r0, r0, r0, ror #1
200060c4:	00000000 	andeq	r0, r0, r0
200060c8:	001fff80 	andseq	pc, pc, r0, lsl #31
200060cc:	02001800 	andeq	r1, r0, #0, 16
200060d0:	00c000c0 	sbceq	r0, r0, r0, asr #1
200060d4:	00000000 	andeq	r0, r0, r0
200060d8:	0019fffe 			; <UNDEFINED> instruction: 0x0019fffe
200060dc:	02001400 	andeq	r1, r0, #0, 8
200060e0:	00803000 	addeq	r3, r0, r0
200060e4:	00000000 	andeq	r0, r0, r0
200060e8:	0018ffff 			; <UNDEFINED> instruction: 0x0018ffff
200060ec:	05033f00 	streq	r3, [r3, #-3840]	; 0xfffff100
200060f0:	01000000 	mrseq	r0, (UNDEF: 0)
200060f4:	c0000000 	andgt	r0, r0, r0
200060f8:	0008ffff 	strdeq	pc, [r8], -pc	; <UNPREDICTABLE>
200060fc:	00c0e400 	sbceq	lr, r0, r0, lsl #8
20006100:	01000004 	tsteq	r0, r4
20006104:	c0000000 	andgt	r0, r0, r0
20006108:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
2000610c:	00002000 	andeq	r2, r0, r0
20006110:	01000008 	tsteq	r0, r8
20006114:	e0000000 	and	r0, r0, r0
20006118:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
2000611c:	00001000 	andeq	r1, r0, r0
20006120:	01000006 	tsteq	r0, r6
20006124:	e0000000 	and	r0, r0, r0
20006128:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
2000612c:	80000000 	andhi	r0, r0, r0
20006130:	01800001 	orreq	r0, r0, r1
20006134:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006138:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
2000613c:	00400000 	subeq	r0, r0, r0
20006140:	01400000 	mrseq	r0, (UNDEF: 64)
20006144:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006148:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
2000614c:	03800000 	orreq	r0, r0, #0
20006150:	01300000 	teqeq	r0, r0
20006154:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006158:	00001bff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
2000615c:	10e00000 	rscne	r0, r0, r0
20006160:	03000000 	movweq	r0, #0
20006164:	fc000000 	stc2	0, cr0, [r0], {-0}
20006168:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000616c:	0f800000 	svceq	0x00800000
20006170:	03900000 	orrseq	r0, r0, #0
20006174:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20006178:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000617c:	00000000 	andeq	r0, r0, r0
20006180:	03e00000 	mvneq	r0, #0
20006184:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20006188:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000618c:	00000000 	andeq	r0, r0, r0
20006190:	03f40000 	mvnseq	r0, #0
20006194:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20006198:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000619c:	00002000 	andeq	r2, r0, r0
200061a0:	01f80000 	mvnseq	r0, r0
200061a4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
200061a8:	0000007f 	andeq	r0, r0, pc, ror r0
200061ac:	0010c000 	andseq	ip, r0, r0
200061b0:	03f80000 	mvnseq	r0, #0
200061b4:	ff800000 			; <UNDEFINED> instruction: 0xff800000
200061b8:	0000003f 	andeq	r0, r0, pc, lsr r0
200061bc:	000f0000 	andeq	r0, pc, r0
200061c0:	03e000e0 	mvneq	r0, #224	; 0xe0
200061c4:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200061c8:	0000001f 	andeq	r0, r0, pc, lsl r0
200061cc:	00026000 	andeq	r6, r2, r0
200061d0:	035001f0 	cmpeq	r0, #240, 2	; 0x3c
200061d4:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200061d8:	0000001f 	andeq	r0, r0, pc, lsl r0
200061dc:	00118000 	andseq	r8, r1, r0
200061e0:	03ec01f0 	mvneq	r0, #240, 2	; 0x3c
200061e4:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
200061e8:	0000000f 	andeq	r0, r0, pc
200061ec:	200e0000 	andcs	r0, lr, r0
200061f0:	00a022f0 	strdeq	r2, [r0], r0	; <UNPREDICTABLE>
200061f4:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
200061f8:	00000007 	andeq	r0, r0, r7
200061fc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
20006200:	03c0c170 	biceq	ip, r0, #112, 2
20006204:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20006208:	00000003 	andeq	r0, r0, r3
2000620c:	e4000000 	str	r0, [r0], #-0
20006210:	03c270f3 	biceq	r7, r2, #243	; 0xf3

20006214 <castle_light_bits>:
	...
20006270:	00000040 	andeq	r0, r0, r0, asr #32
	...
2000627c:	0c003000 	stceq	0, cr3, [r0], {-0}
20006280:	00000040 	andeq	r0, r0, r0, asr #32
	...
2000628c:	0e007000 	cdpeq	0, 0, cr7, cr0, cr0, {0}
20006290:	000600c0 	andeq	r0, r6, r0, asr #1
	...
2000629c:	0f007010 	svceq	0x00007010
200062a0:	000601e0 	andeq	r0, r6, r0, ror #3
	...
200062ac:	1f007810 	svcne	0x00007810
200062b0:	000601e0 	andeq	r0, r6, r0, ror #3
	...
200062bc:	3f81f818 	svccc	0x0081f818
200062c0:	001f03e0 	andseq	r0, pc, r0, ror #7
	...
200062cc:	ffe3f818 			; <UNDEFINED> instruction: 0xffe3f818
200062d0:	001fc7f1 			; <UNDEFINED> instruction: 0x001fc7f1
	...
200062dc:	fffffc1c 			; <UNDEFINED> instruction: 0xfffffc1c
200062e0:	083fffff 	ldmdaeq	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
	...
200062ec:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
200062f0:	187fffff 	ldmdane	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
	...
200062fc:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20006300:	3c7fffff 	ldclcc	15, cr15, [pc], #-1020	; 20005f0c <castle_gray_bits+0xf8>
	...
2000630c:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20006310:	3fffffff 	svccc	0x00ffffff
20006314:	00000000 	andeq	r0, r0, r0
20006318:	60000000 	andvs	r0, r0, r0
2000631c:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20006320:	7fffffff 	svcvc	0x00ffffff
20006324:	00000000 	andeq	r0, r0, r0
20006328:	70000000 	andvc	r0, r0, r0
2000632c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006330:	7fffffff 	svcvc	0x00ffffff
20006334:	00000000 	andeq	r0, r0, r0
20006338:	70000000 	andvc	r0, r0, r0
2000633c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006340:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006344:	00000000 	andeq	r0, r0, r0
20006348:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000634c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006350:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006354:	00000000 	andeq	r0, r0, r0
20006358:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000635c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006360:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006364:	00000000 	andeq	r0, r0, r0
20006368:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000636c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006370:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006374:	00000000 	andeq	r0, r0, r0
20006378:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000637c:	fb6fffff 	blx	21c06382 <firstTime.4040+0x1bfd676>
20006380:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006384:	00000000 	andeq	r0, r0, r0
20006388:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000638c:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
20006390:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006394:	00000000 	andeq	r0, r0, r0
20006398:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000639c:	f407ffff 			; <UNDEFINED> instruction: 0xf407ffff
200063a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200063a4:	00000000 	andeq	r0, r0, r0
200063a8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200063ac:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
200063b0:	ffffff6d 			; <UNDEFINED> instruction: 0xffffff6d
200063b4:	00000000 	andeq	r0, r0, r0
200063b8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200063bc:	f80fffff 			; <UNDEFINED> instruction: 0xf80fffff
200063c0:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200063c4:	00000000 	andeq	r0, r0, r0
200063c8:	fc000000 	stc2	0, cr0, [r0], {-0}
200063cc:	f80fedbf 			; <UNDEFINED> instruction: 0xf80fedbf
200063d0:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200063d4:	00000000 	andeq	r0, r0, r0
200063d8:	fc000000 	stc2	0, cr0, [r0], {-0}
200063dc:	f80fc01f 			; <UNDEFINED> instruction: 0xf80fc01f
200063e0:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
200063e4:	00000000 	andeq	r0, r0, r0
200063e8:	fc000000 	stc2	0, cr0, [r0], {-0}
200063ec:	f90fc81f 			; <UNDEFINED> instruction: 0xf90fc81f
200063f0:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
200063f4:	00000000 	andeq	r0, r0, r0
200063f8:	fc000000 	stc2	0, cr0, [r0], {-0}
200063fc:	f90fd41f 			; <UNDEFINED> instruction: 0xf90fd41f
20006400:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006404:	00000000 	andeq	r0, r0, r0
20006408:	fc000000 	stc2	0, cr0, [r0], {-0}
2000640c:	f90fe03f 			; <UNDEFINED> instruction: 0xf90fe03f
20006410:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20006414:	00000000 	andeq	r0, r0, r0
20006418:	fc000000 	stc2	0, cr0, [r0], {-0}
2000641c:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20006420:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20006424:	00000000 	andeq	r0, r0, r0
20006428:	fc000000 	stc2	0, cr0, [r0], {-0}
2000642c:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20006430:	fedbff19 	mrc2	15, 6, pc, cr11, cr9, {0}
20006434:	00000000 	andeq	r0, r0, r0
20006438:	fc000000 	stc2	0, cr0, [r0], {-0}
2000643c:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20006440:	fd01ff11 	stc2	15, cr15, [r1, #-68]	; 0xffffffbc
20006444:	00000000 	andeq	r0, r0, r0
20006448:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
2000644c:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20006450:	fd01ff19 	stc2	15, cr15, [r1, #-100]	; 0xffffff9c
20006454:	00000000 	andeq	r0, r0, r0
20006458:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
2000645c:	f007e03f 			; <UNDEFINED> instruction: 0xf007e03f
20006460:	fc01ff01 	stc2	15, cr15, [r1], {1}
20006464:	00000000 	andeq	r0, r0, r0
20006468:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
2000646c:	f007c01f 			; <UNDEFINED> instruction: 0xf007c01f
20006470:	fe03ff01 	cdp2	15, 0, cr15, cr3, cr1, {0}
20006474:	00000000 	andeq	r0, r0, r0
20006478:	ff000000 			; <UNDEFINED> instruction: 0xff000000
2000647c:	b007c01f 	andlt	ip, r7, pc, lsl r0
20006480:	fe03fe01 	cdp2	14, 0, cr15, cr3, cr1, {0}
20006484:	00000000 	andeq	r0, r0, r0
20006488:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000648c:	0007c01f 	andeq	ip, r7, pc, lsl r0
20006490:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20006494:	00000000 	andeq	r0, r0, r0
20006498:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000649c:	0007c01f 	andeq	ip, r7, pc, lsl r0
200064a0:	fe03fe10 	mcr2	14, 0, pc, cr3, cr0, {0}	; <UNPREDICTABLE>
200064a4:	00000000 	andeq	r0, r0, r0
200064a8:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200064ac:	0007c21f 	andeq	ip, r7, pc, lsl r2
200064b0:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
200064b4:	00000000 	andeq	r0, r0, r0
200064b8:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200064bc:	0087c31f 	addeq	ip, r7, pc, lsl r3
200064c0:	fe03a400 	cdp2	4, 0, cr10, cr3, cr0, {0}
200064c4:	00000000 	andeq	r0, r0, r0
200064c8:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200064cc:	00c7c31f 	sbceq	ip, r7, pc, lsl r3
200064d0:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
200064d4:	00000000 	andeq	r0, r0, r0
200064d8:	ffe60000 			; <UNDEFINED> instruction: 0xffe60000
200064dc:	00c4c01f 	sbceq	ip, r4, pc, lsl r0
200064e0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
200064e4:	00000000 	andeq	r0, r0, r0
200064e8:	ffe70000 			; <UNDEFINED> instruction: 0xffe70000
200064ec:	8000001f 	andhi	r0, r0, pc, lsl r0
200064f0:	fc000001 	stc2	0, cr0, [r0], {1}
200064f4:	00000000 	andeq	r0, r0, r0
200064f8:	fff70000 			; <UNDEFINED> instruction: 0xfff70000
200064fc:	8000001f 	andhi	r0, r0, pc, lsl r0
20006500:	fc000009 	stc2	0, cr0, [r0], {9}
20006504:	00000000 	andeq	r0, r0, r0
20006508:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
2000650c:	8000001f 	andhi	r0, r0, pc, lsl r0
20006510:	fc200001 	stc2	0, cr0, [r0], #-4
20006514:	00000000 	andeq	r0, r0, r0
20006518:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
2000651c:	0000001f 	andeq	r0, r0, pc, lsl r0
20006520:	fc300000 	ldc2	0, cr0, [r0], #-0
20006524:	00000000 	andeq	r0, r0, r0
20006528:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
2000652c:	0000000f 	andeq	r0, r0, pc
20006530:	fc300000 	ldc2	0, cr0, [r0], #-0
20006534:	00000000 	andeq	r0, r0, r0
20006538:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
2000653c:	0000000f 	andeq	r0, r0, pc
20006540:	fc000000 	stc2	0, cr0, [r0], {-0}
20006544:	00000000 	andeq	r0, r0, r0
20006548:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
2000654c:	1000000f 	andne	r0, r0, pc
20006550:	fc000000 	stc2	0, cr0, [r0], {-0}
20006554:	00000000 	andeq	r0, r0, r0
20006558:	ffffe400 			; <UNDEFINED> instruction: 0xffffe400
2000655c:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
20006560:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
20006564:	00000000 	andeq	r0, r0, r0
20006568:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
2000656c:	0000000f 	andeq	r0, r0, pc
20006570:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006574:	00000000 	andeq	r0, r0, r0
20006578:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
2000657c:	00000007 	andeq	r0, r0, r7
20006580:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20006584:	00000000 	andeq	r0, r0, r0
20006588:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
2000658c:	00000007 	andeq	r0, r0, r7
20006590:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20006594:	00000000 	andeq	r0, r0, r0
20006598:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
2000659c:	00100007 	andseq	r0, r0, r7
200065a0:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
200065a4:	00000000 	andeq	r0, r0, r0
200065a8:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
200065ac:	00080007 	andeq	r0, r8, r7
200065b0:	f80001c0 			; <UNDEFINED> instruction: 0xf80001c0
200065b4:	00000000 	andeq	r0, r0, r0
200065b8:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
200065bc:	00000007 	andeq	r0, r0, r7
200065c0:	f8080300 			; <UNDEFINED> instruction: 0xf8080300
200065c4:	00000000 	andeq	r0, r0, r0
200065c8:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
200065cc:	00200007 	eoreq	r0, r0, r7
200065d0:	f8080200 			; <UNDEFINED> instruction: 0xf8080200
200065d4:	00000000 	andeq	r0, r0, r0
200065d8:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
200065dc:	00000007 	andeq	r0, r0, r7
200065e0:	f8000200 			; <UNDEFINED> instruction: 0xf8000200
200065e4:	00000000 	andeq	r0, r0, r0
200065e8:	fffffff0 			; <UNDEFINED> instruction: 0xfffffff0
200065ec:	00000007 	andeq	r0, r0, r7
200065f0:	f8000100 			; <UNDEFINED> instruction: 0xf8000100
200065f4:	00000000 	andeq	r0, r0, r0
200065f8:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
200065fc:	01000007 	tsteq	r0, r7
20006600:	f8100280 			; <UNDEFINED> instruction: 0xf8100280
20006604:	00000000 	andeq	r0, r0, r0
20006608:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
2000660c:	02000007 	andeq	r0, r0, #7
20006610:	f8000300 			; <UNDEFINED> instruction: 0xf8000300

20006614 <title_light_bits>:
	...
20006630:	00000400 	andeq	r0, r0, r0, lsl #8
20006634:	30000000 	andcc	r0, r0, r0
20006638:	f80f9e06 			; <UNDEFINED> instruction: 0xf80f9e06
2000663c:	06300000 	ldrteq	r0, [r0], -r0
20006640:	00cb8cba 	strheq	r8, [fp], #202	; 0xca
20006644:	ba033000 	blt	200d264c <firstTime.4040+0xc9940>
20006648:	0000eb4f 	andeq	lr, r0, pc, asr #22
2000664c:	439ef3f0 	orrsmi	pc, lr, #240, 6	; 0xc0000003
20006650:	f000003a 			; <UNDEFINED> instruction: 0xf000003a
20006654:	5a478e9b 	bpl	211ea0c8 <firstTime.4040+0x11e13bc>
20006658:	9b300000 	blls	20c06660 <firstTime.4040+0xbfd954>
2000665c:	019bcd36 	orrseq	ip, fp, r6, lsr sp
20006660:	66db3000 	ldrbvs	r3, [fp], r0
20006664:	000319d9 	ldrdeq	r1, [r3], -r9
20006668:	19667330 	stmdbne	r6!, {r4, r5, r8, r9, ip, sp, lr}^
2000666c:	30000310 	andcc	r0, r0, r0, lsl r3
20006670:	00000001 	andeq	r0, r0, r1
20006674:	80000000 	andhi	r0, r0, r0
20006678:	001d3e7b 	andseq	r3, sp, fp, ror lr
2000667c:	0ac00000 	beq	1f006684 <startup-0xff997c>
20006680:	00000528 	andeq	r0, r0, r8, lsr #10
20006684:	ec3a4000 	ldc	0, cr4, [sl], #-0
20006688:	0000000d 	andeq	r0, r0, sp
2000668c:	05240bc0 	streq	r0, [r4, #-3008]!	; 0xfffff440
20006690:	00f00000 	rscseq	r0, r0, r0
20006694:	001c0000 	andseq	r0, ip, r0
20006698:	03ebb000 	mvneq	fp, #0
2000669c:	00000000 	andeq	r0, r0, r0
200066a0:	0c032330 	stceq	3, cr2, [r3], {48}	; 0x30
200066a4:	300123e4 	andcc	r2, r1, r4, ror #7
200066a8:	940c1b2a 	strls	r1, [ip], #-2858	; 0xfffff4d6
200066ac:	ea300120 	b	20c06b34 <firstTime.4040+0xbfde28>
200066b0:	ec860c3d 	stc	12, cr0, [r6], {61}	; 0x3d
200066b4:	06ea3001 	strbteq	r3, [sl], r1
200066b8:	01e69648 	mvneq	r9, r8, asr #12
200066bc:	4b9e6b30 	blmi	1e7a1384 <startup-0x185ec7c>
200066c0:	30012696 	mulcc	r1, r6, r6
200066c4:	92bbb06b 	adcsls	fp, fp, #107	; 0x6b
200066c8:	69f00126 	ldmibvs	r0!, {r1, r2, r5, r8}^
200066cc:	2691b832 			; <UNDEFINED> instruction: 0x2691b832
200066d0:	1e687001 	cdpne	0, 6, cr7, cr8, cr1, {0}
200066d4:	010e9110 	tsteq	lr, r0, lsl r1
	...

200066e8 <title_gray_bits>:
	...
200066f0:	40000000 	andmi	r0, r0, r0
200066f4:	0f840000 	svceq	0x00840000
200066f8:	00b0c3fe 	ldrshteq	ip, [r0], lr
200066fc:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006700:	001f8f1f 	andseq	r8, pc, pc, lsl pc	; <UNPREDICTABLE>
20006704:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
20006708:	c8001fff 	stmdagt	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
2000670c:	07f061f9 			; <UNDEFINED> instruction: 0x07f061f9
20006710:	f1cc001f 			; <UNDEFINED> instruction: 0xf1cc001f
20006714:	be347305 	cdplt	3, 3, cr7, cr4, cr5, {0}
20006718:	05f0ce00 	ldrbeq	ip, [r0, #3584]!	; 0xe00
2000671c:	007e1430 	rsbseq	r1, lr, r0, lsr r4
20006720:	2041080f 	subcs	r0, r1, pc, lsl #16
20006724:	0e003e01 	cdpeq	14, 0, cr3, cr0, cr1, {0}
20006728:	01384060 	teqeq	r8, r0, rrx
2000672c:	600c001e 	andvs	r0, ip, lr, lsl r0
20006730:	1c4030c0 	mcrrne	0, 12, r3, r0, cr0
20006734:	10208c00 	eorne	r8, r0, r0, lsl #24
20006738:	0038c024 	eorseq	ip, r8, r4, lsr #32
2000673c:	0411088c 	ldreq	r0, [r1], #-2188	; 0xfffff774
20006740:	c800f8ce 	stmdagt	r0, {r1, r2, r3, r6, r7, fp, ip, sp, lr, pc}
20006744:	ffe6990c 			; <UNDEFINED> instruction: 0xffe6990c
20006748:	7cfa0178 	ldfvce	f0, [sl], #480	; 0x1e0
2000674c:	3fe0c184 	svccc	0x00e0c184
20006750:	013ff400 	teqeq	pc, r0, lsl #8	; <UNPREDICTABLE>
20006754:	001fc0c7 	andseq	ip, pc, r7, asr #1
20006758:	03c03ff0 	biceq	r3, r0, #240, 30	; 0x3c0
2000675c:	fc0007e0 	stc2	7, cr0, [r0], {224}	; 0xe0
20006760:	e003803f 	and	r8, r3, pc, lsr r0
20006764:	7f0c009f 	svcvc	0x000c009f
20006768:	ffc1fbe4 			; <UNDEFINED> instruction: 0xffc1fbe4
2000676c:	fc140c03 	ldc2	12, cr0, [r4], {3}
20006770:	03ffc7ff 	mvnseq	ip, #66846720	; 0x3fc0000
20006774:	f3fc1c0c 	vdup.32	d17, d12[1]
20006778:	0e02dc1b 	mcreq	12, 0, sp, cr2, cr11, {0}
2000677c:	63f3e490 	mvnsvs	lr, #144, 8	; 0x90000000
20006780:	018e0218 	orreq	r0, lr, r8, lsl r2
20006784:	1251e382 	subsne	lr, r1, #134217730	; 0x8000002
20006788:	88018e02 	stmdahi	r1, {r1, r9, sl, fp, pc}
2000678c:	020061a7 	andeq	r6, r0, #-1073741783	; 0xc0000029
20006790:	2460008e 	strbtcs	r0, [r0], #-142	; 0xffffff72
20006794:	8e021041 	cdphi	0, 0, cr1, cr2, cr1, {2}
20006798:	41000300 	mrsmi	r0, LR_irq
2000679c:	000e0290 	muleq	lr, r0, r2
200067a0:	9048008d 	subls	r0, r8, sp, lsl #1
200067a4:	81040c02 	tsthi	r4, r2, lsl #24
200067a8:	02a04c87 	adceq	r4, r0, #34560	; 0x8700
200067ac:	cffffffc 	svcgt	0x00fffffc
200067b0:	8203e2fc 	andhi	lr, r3, #252, 4	; 0xc000000f
200067b4:	e3f81c07 	mvns	r1, #1792	; 0x700
200067b8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200067bc <title_black_bits>:
	...
200067e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
200067e8:	01000040 	tsteq	r0, r0, asr #32
200067ec:	400c0000 	andmi	r0, ip, r0
200067f0:	00010080 	andeq	r0, r1, r0, lsl #1
200067f4:	9c200400 	cfstrsls	mvf0, [r0], #-0
200067f8:	000001c4 	andeq	r0, r0, r4, asr #3
200067fc:	a4803104 	strge	r3, [r0], #260	; 0x104
20006800:	04c00001 	strbeq	r0, [r0], #1
20006804:	02240209 	eoreq	r0, r4, #-1879048192	; 0x90000000
20006808:	89044000 	stmdbhi	r4, {lr}
2000680c:	00042602 	andeq	r2, r4, r2, lsl #12
20006810:	e2888440 	add	r8, r8, #64, 8	; 0x40000000
20006814:	00000421 	andeq	r0, r0, r1, lsr #8
20006818:	001966f2 			; <UNDEFINED> instruction: 0x001966f2
2000681c:	03000007 	movweq	r0, #7
20006820:	00020000 	andeq	r0, r2, r0
20006824:	f4000000 	vst4.8	{d0-d3}, [r0], r0
20006828:	00003a10 	andeq	r3, r0, r0, lsl sl
2000682c:	10058000 	andne	r8, r5, r0
20006830:	00000012 	andeq	r0, r0, r2, lsl r0
20006834:	1ad87400 	bne	1f62383c <startup-0x9dc7c4>
20006838:	80000000 	andhi	r0, r0, r0
2000683c:	0022041b 	eoreq	r0, r2, fp, lsl r4
20006840:	00004000 	andeq	r4, r0, r0
20006844:	00003800 	andeq	r3, r0, r0, lsl #16
20006848:	0000c0c0 	andeq	ip, r0, r0, asr #1
2000684c:	c0000000 	andgt	r0, r0, r0
20006850:	08000045 	stmdaeq	r0, {r0, r2, r6}
20006854:	144000c7 	strbne	r0, [r0], #-199	; 0xffffff39
20006858:	01281040 			; <UNDEFINED> instruction: 0x01281040
2000685c:	71144000 	tstvc	r4, r0
20006860:	00190810 	andseq	r0, r9, r0, lsl r8
20006864:	90019440 	andls	r9, r1, r0, asr #8
20006868:	4000c928 	andmi	ip, r0, r8, lsr #18
2000686c:	2c444c94 	mcrrcs	12, 9, r4, r4, cr4
20006870:	96000049 	strls	r0, [r0], -r9, asr #32
20006874:	49264740 	stmdbmi	r6!, {r6, r8, r9, sl, lr}
20006878:	60938000 	addsvs	r8, r3, r0
2000687c:	00512268 	subseq	r2, r1, r8, ror #4
20006880:	30000000 	andcc	r0, r0, r0
20006884:	00001d03 	andeq	r1, r0, r3, lsl #26
	...

20006890 <bg_bits>:
	...
200068a0:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
200068a4:	0000001f 	andeq	r0, r0, pc, lsl r0
	...
200068b0:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
200068b4:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
200068c0:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
200068c4:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
200068d0:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200068d4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
200068e0:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200068e4:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
200068f0:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200068f4:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20006900:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20006904:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006a0b <bg_bits+0x17b>	; <UNPREDICTABLE>
20006908:	0001f000 	andeq	pc, r1, r0
2000690c:	00000000 	andeq	r0, r0, r0
20006910:	007fe000 	rsbseq	lr, pc, r0
20006914:	0ffffffe 	svceq	0x00fffffe
20006918:	0003f800 	andeq	pc, r3, r0, lsl #16
2000691c:	00000000 	andeq	r0, r0, r0
20006920:	003fe000 	eorseq	lr, pc, r0
20006924:	7fffffc0 	svcvc	0x00ffffc0
20006928:	0003f800 	andeq	pc, r3, r0, lsl #16
2000692c:	001f8000 	andseq	r8, pc, r0
20006930:	001fe000 	andseq	lr, pc, r0
20006934:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006938:	0003f801 	andeq	pc, r3, r1, lsl #16
2000693c:	003fc000 	eorseq	ip, pc, r0
20006940:	003fe000 	eorseq	lr, pc, r0
20006944:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20006948:	3f83f807 	svccc	0x0083f807
2000694c:	003fe000 	eorseq	lr, pc, r0
20006950:	01ffe000 	mvnseq	lr, r0
20006954:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20006958:	7fc3f80f 	svcvc	0x00c3f80f
2000695c:	003fe7f8 	ldrshteq	lr, [pc], -r8
20006960:	07ffe000 	ldrbeq	lr, [pc, r0]!
20006964:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
20006968:	7fe1f01f 	svcvc	0x00e1f01f
2000696c:	003ffffc 	ldrshteq	pc, [pc], -ip	; <UNPREDICTABLE>
20006970:	3fffc000 	svccc	0x00ffc000
20006974:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20006978:	7ff0003f 	svcvc	0x00f0003f
2000697c:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
20006980:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20006984:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20006988:	7ff8007f 	svcvc	0x00f8007f
2000698c:	3ffffffc 	svccc	0x00fffffc
20006990:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20006994:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
20006998:	7ffc00ff 	svcvc	0x00fc00ff
2000699c:	7ffffffc 	svcvc	0x00fffffc
200069a0:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200069a4:	e000000f 	and	r0, r0, pc
200069a8:	7ffe01ff 	svcvc	0x00fe01ff
200069ac:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200069b0:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
200069b4:	8000001f 	andhi	r0, r0, pc, lsl r0
200069b8:	7fff01ff 	svcvc	0x00ff01ff
200069bc:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200069c0:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200069c4:	0000007f 	andeq	r0, r0, pc, ror r0
200069c8:	7fff83ff 	svcvc	0x00ff83ff
200069cc:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
200069d0:	ff800000 			; <UNDEFINED> instruction: 0xff800000
200069d4:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200069d8:	7fffc3fe 	svcvc	0x00ffc3fe
200069dc:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
200069e0:	fc7ffff0 	ldc2l	15, cr15, [pc], #-960	; 20006628 <title_light_bits+0x14>
200069e4:	07c001ff 			; <UNDEFINED> instruction: 0x07c001ff
200069e8:	7fffe7fc 	svcvc	0x00ffe7fc
200069ec:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
200069f0:	f0fffffe 			; <UNDEFINED> instruction: 0xf0fffffe
200069f4:	0fe007ff 	svceq	0x00e007ff
200069f8:	7ffff7fc 	svcvc	0x00fff7fc
200069fc:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
20006a00:	c0ffffff 	ldrshtgt	pc, [pc], #255	; <UNPREDICTABLE>
20006a04:	0fe00fff 	svceq	0x00e00fff
20006a08:	7ffffff8 	svcvc	0x00fffff8
20006a0c:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20006a10:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006b17 <bg_bits+0x287>	; <UNPREDICTABLE>
20006a14:	0fe01fff 	svceq	0x00e01fff
20006a18:	7ffffff8 	svcvc	0x00fffff8
20006a1c:	7ffffc00 	svcvc	0x00fffc00
20006a20:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006b27 <bg_bits+0x297>	; <UNPREDICTABLE>
20006a24:	0fe03ffe 	svceq	0x00e03ffe
20006a28:	3fdffff0 	svccc	0x00dffff0
20006a2c:	3ffffe00 	svccc	0x00fffe00
20006a30:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006b37 <bg_bits+0x2a7>	; <UNPREDICTABLE>
20006a34:	0fe03ff8 	svceq	0x00e03ff8
20006a38:	3fe7fff0 	svccc	0x00e7fff0
20006a3c:	07fffe00 	ldrbeq	pc, [pc, r0, lsl #28]!	; <UNPREDICTABLE>
20006a40:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20006a44:	07c07ff0 			; <UNDEFINED> instruction: 0x07c07ff0
20006a48:	1fe7fff0 	svcne	0x00e7fff0
20006a4c:	0ffffe00 	svceq	0x00fffe00
20006a50:	03fc00ff 	mvnseq	r0, #255	; 0xff
20006a54:	0000ffe0 	andeq	pc, r0, r0, ror #31
20006a58:	1ff3ffe0 	svcne	0x00f3ffe0
20006a5c:	1ffffe00 	svcne	0x00fffe00
20006a60:	03fc001f 	mvnseq	r0, #31
20006a64:	0001ff80 	andeq	pc, r1, r0, lsl #31
20006a68:	1ff9ffe0 	svcne	0x00f9ffe0
20006a6c:	3ffffe00 	svccc	0x00fffe00
20006a70:	03fc0007 	mvnseq	r0, #7
20006a74:	0001ff80 	andeq	pc, r1, r0, lsl #31
20006a78:	0ffcffe0 	svceq	0x00fcffe0
20006a7c:	3ffdfe00 	svccc	0x00fdfe00
20006a80:	07f80007 	ldrbeq	r0, [r8, r7]!
20006a84:	0003ff00 	andeq	pc, r3, r0, lsl #30
20006a88:	0ffe7ff0 	svceq	0x00fe7ff0
20006a8c:	3ffcfe00 	svccc	0x00fcfe00
20006a90:	07f80003 	ldrbeq	r0, [r8, r3]!
20006a94:	0007fe00 	andeq	pc, r7, r0, lsl #28
20006a98:	07fe7ff8 			; <UNDEFINED> instruction: 0x07fe7ff8
20006a9c:	3ff8fe00 	svccc	0x00f8fe00
20006aa0:	0ff80003 	svceq	0x00f80003
20006aa4:	0007fc00 	andeq	pc, r7, r0, lsl #24
20006aa8:	03fffffc 	mvnseq	pc, #252, 30	; 0x3f0
20006aac:	3ff87c00 	svccc	0x00f87c00
20006ab0:	0ff80003 	svceq	0x00f80003
20006ab4:	0007fc00 	andeq	pc, r7, r0, lsl #24
20006ab8:	01fffffe 	ldrsheq	pc, [pc, #254]	; 20006bbe <bg_bits+0x32e>	; <UNPREDICTABLE>
20006abc:	1ff00000 	svcne	0x00f00000	; IMB
20006ac0:	0ff00007 	svceq	0x00f00007
20006ac4:	000ff800 	andeq	pc, pc, r0, lsl #16
20006ac8:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006bcf <bg_bits+0x33f>	; <UNPREDICTABLE>
20006acc:	07f0003e 			; <UNDEFINED> instruction: 0x07f0003e
20006ad0:	0ff00007 	svceq	0x00f00007
20006ad4:	800ff000 	andhi	pc, pc, r0
20006ad8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20006adc:	03e0007f 	mvneq	r0, #127	; 0x7f
20006ae0:	0fe00007 	svceq	0x00e00007
20006ae4:	c00ff000 	andgt	pc, pc, r0
20006ae8:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20006aec:	0000007f 	andeq	r0, r0, pc, ror r0
20006af0:	0fe00007 	svceq	0x00e00007
20006af4:	e00ff000 	and	pc, pc, r0
20006af8:	007ffeff 	ldrshteq	pc, [pc], #-239	; <UNPREDICTABLE>
20006afc:	0000007f 	andeq	r0, r0, pc, ror r0
20006b00:	0fe00007 	svceq	0x00e00007
20006b04:	f00ff000 			; <UNDEFINED> instruction: 0xf00ff000
20006b08:	003ffe7f 	eorseq	pc, pc, pc, ror lr	; <UNPREDICTABLE>
20006b0c:	0000007f 	andeq	r0, r0, pc, ror r0
20006b10:	0fe00007 	svceq	0x00e00007
20006b14:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
20006b18:	001ffc3f 	andseq	pc, pc, pc, lsr ip	; <UNPREDICTABLE>
20006b1c:	0000007f 	andeq	r0, r0, pc, ror r0
20006b20:	1fe0000f 	svcne	0x00e0000f
20006b24:	fc0ff000 	stc2	0, cr15, [pc], {-0}
20006b28:	000ff81f 	andeq	pc, pc, pc, lsl r8	; <UNPREDICTABLE>
20006b2c:	0000003e 	andeq	r0, r0, lr, lsr r0
20006b30:	1fe0000f 	svcne	0x00e0000f
20006b34:	fc07f000 	stc2	0, cr15, [r7], {-0}
20006b38:	0007f00f 	andeq	pc, r7, pc
20006b3c:	00000000 	andeq	r0, r0, r0
20006b40:	1fe0000f 	svcne	0x00e0000f
20006b44:	fc07f000 	stc2	0, cr15, [r7], {-0}
20006b48:	00000007 	andeq	r0, r0, r7
20006b4c:	00000000 	andeq	r0, r0, r0
20006b50:	1fe0000f 	svcne	0x00e0000f
20006b54:	fc07f800 	stc2	8, cr15, [r7], {-0}
20006b58:	00000003 	andeq	r0, r0, r3
20006b5c:	000ff800 	andeq	pc, pc, r0, lsl #16
20006b60:	1fc0001f 	svcne	0x00c0001f
20006b64:	fc07fc00 	stc2	12, cr15, [r7], {-0}
20006b68:	00000001 	andeq	r0, r0, r1
20006b6c:	001ffc00 	andseq	pc, pc, r0, lsl #24
20006b70:	1fc0003f 	svcne	0x00c0003f
20006b74:	fc07ff80 	stc2	15, cr15, [r7], {128}	; 0x80
20006b78:	00000001 	andeq	r0, r0, r1
20006b7c:	003fff00 	eorseq	pc, pc, r0, lsl #30
20006b80:	3fc0003f 	svccc	0x00c0003f
20006b84:	fc07fffc 	stc2	15, cr15, [r7], {252}	; 0xfc
20006b88:	00000001 	andeq	r0, r0, r1
20006b8c:	007fff80 	rsbseq	pc, pc, r0, lsl #31
20006b90:	ffc0003f 			; <UNDEFINED> instruction: 0xffc0003f
20006b94:	fc03ffff 	stc2	15, cr15, [r3], {255}	; 0xff
20006b98:	00000001 	andeq	r0, r0, r1
20006b9c:	00ffffe0 	rscseq	pc, pc, r0, ror #31
20006ba0:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20006ba4:	fc01ffff 	stc2	15, cr15, [r1], {255}	; 0xff
20006ba8:	00000007 	andeq	r0, r0, r7
20006bac:	03fffff0 	mvnseq	pc, #240, 30	; 0x3c0
20006bb0:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20006bb4:	fc00ffff 	stc2	15, cr15, [r0], {255}	; 0xff
20006bb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006bbc:	07fffff8 			; <UNDEFINED> instruction: 0x07fffff8
20006bc0:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20006bc4:	fc007fff 	stc2	15, cr7, [r0], {255}	; 0xff
20006bc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006bcc:	07ff7ffd 			; <UNDEFINED> instruction: 0x07ff7ffd
20006bd0:	ff80007f 			; <UNDEFINED> instruction: 0xff80007f
20006bd4:	fc003fff 	stc2	15, cr3, [r0], {255}	; 0xff
20006bd8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006bdc:	0ffe3fff 	svceq	0x00fe3fff
20006be0:	ff1f007f 			; <UNDEFINED> instruction: 0xff1f007f
20006be4:	f80007ff 			; <UNDEFINED> instruction: 0xf80007ff
20006be8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006bec:	1ffc3fff 	svcne	0x00fc3fff
20006bf0:	fc3f807f 	ldc2	0, cr8, [pc], #-508	; 200069fc <bg_bits+0x16c>
20006bf4:	f800003f 			; <UNDEFINED> instruction: 0xf800003f
20006bf8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006bfc:	1ff83fff 	svcne	0x00f83fff
20006c00:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20006c04:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006c08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006c0c:	3ff03fff 	svccc	0x00f03fff
20006c10:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20006c14:	c0000000 	andgt	r0, r0, r0
20006c18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006c1c:	7fe03fff 	svcvc	0x00e03fff
20006c20:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20006c24:	00000000 	andeq	r0, r0, r0
20006c28:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006c2c:	7fc03fff 	svcvc	0x00c03fff
20006c30:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20006c34:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20006c38:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
20006c3c:	ffc01fff 			; <UNDEFINED> instruction: 0xffc01fff
20006c40:	001f003f 	andseq	r0, pc, pc, lsr r0	; <UNPREDICTABLE>
20006c44:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006c48:	f8007fff 			; <UNDEFINED> instruction: 0xf8007fff
20006c4c:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20006c50:	0000003f 	andeq	r0, r0, pc, lsr r0
20006c54:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006c58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006c5c:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20006c60:	0000003f 	andeq	r0, r0, pc, lsr r0
20006c64:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006c68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006c6c:	ff001fff 			; <UNDEFINED> instruction: 0xff001fff
20006c70:	0000003f 	andeq	r0, r0, pc, lsr r0
20006c74:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006c78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006c7c:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}
20006c80:	0000003f 	andeq	r0, r0, pc, lsr r0
20006c84:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006c88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006c8c:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}

20006c90 <current_screen>:
20006c90:	00000001 	andeq	r0, r0, r1

20006c94 <delay_until_text.4285>:
20006c94:	00000082 	andeq	r0, r0, r2, lsl #1

20006c98 <long_text.4283>:
20006c98:	00000028 	andeq	r0, r0, r8, lsr #32

20006c9c <short_text.4284>:
20006c9c:	00000014 	andeq	r0, r0, r4, lsl r0

20006ca0 <last_climb_value.4287>:
20006ca0:	00000064 	andeq	r0, r0, r4, rrx

20006ca4 <fire_black_2_bits>:
	...
20006cac:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>

20006cb0 <fire1_gray_bits>:
20006cb0:	00000000 	andeq	r0, r0, r0
20006cb4:	06000804 	streq	r0, [r0], -r4, lsl #16
20006cb8:	02494204 	subeq	r4, r9, #4, 4	; 0x40000000

20006cbc <fire1_light_bits>:
20006cbc:	00002000 	andeq	r2, r0, r0
20006cc0:	48000010 	stmdami	r0, {r4}
20006cc4:	2c243020 	stccs	0, cr3, [r4], #-128	; 0xffffff80

20006cc8 <fire2_gray_bits>:
20006cc8:	00000000 	andeq	r0, r0, r0
20006ccc:	10220000 	eorne	r0, r2, r0
20006cd0:	00420444 	subeq	r0, r2, r4, asr #8

20006cd4 <fire2_light_bits>:
20006cd4:	04200000 	strteq	r0, [r0], #-0
20006cd8:	240c0010 	strcs	r0, [ip], #-16
20006cdc:	123c6008 	eorsne	r6, ip, #8

20006ce0 <fire3_gray_bits>:
20006ce0:	00000000 	andeq	r0, r0, r0
20006ce4:	24100802 	ldrcs	r0, [r0], #-2050	; 0xfffff7fe
20006ce8:	00020260 	andeq	r0, r2, r0, ror #4

20006cec <fire3_light_bits>:
20006cec:	10200000 	eorne	r0, r0, r0
20006cf0:	18040400 	stmdane	r4, {sl}
20006cf4:	143c5812 	ldrtne	r5, [ip], #-2066	; 0xfffff7ee

20006cf8 <fire4_gray_bits>:
20006cf8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20006cfc:	10320000 	eorsne	r0, r2, r0
20006d00:	02400012 	subeq	r0, r0, #18

20006d04 <fire4_light_bits>:
20006d04:	00001000 	andeq	r1, r0, r0
20006d08:	04082000 	streq	r2, [r8], #-0
20006d0c:	24283a0c 	strtcs	r3, [r8], #-2572	; 0xfffff5f4

20006d10 <fire5_gray_bits>:
20006d10:	00000000 	andeq	r0, r0, r0
20006d14:	22001020 	andcs	r1, r0, #32
20006d18:	04044206 	streq	r4, [r4], #-518	; 0xfffffdfa

20006d1c <fire5_light_bits>:
20006d1c:	00040000 	andeq	r0, r4, r0
20006d20:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
20006d24:	502a1810 	eorpl	r1, sl, r0, lsl r8

20006d28 <firstTime.4076>:
20006d28:	00000001 	andeq	r0, r0, r1

20006d2c <bird1_black_bits>:
	...
20006d3c:	00010040 	andeq	r0, r1, r0, asr #32
20006d40:	00118060 	andseq	r8, r1, r0, rrx
20006d44:	00118060 	andseq	r8, r1, r0, rrx
20006d48:	001b80ec 	andseq	r8, fp, ip, ror #1
20006d4c:	003f81fc 	ldrshteq	r8, [pc], -ip
20006d50:	007fe1f8 	ldrshteq	lr, [pc], #-24
20006d54:	007ff3f8 	ldrshteq	pc, [pc], #-56	; <UNPREDICTABLE>
20006d58:	003ffff8 	ldrshteq	pc, [pc], -r8	; <UNPREDICTABLE>
20006d5c:	003fedf8 	ldrshteq	lr, [pc], -r8
20006d60:	001ff1f0 			; <UNDEFINED> instruction: 0x001ff1f0
20006d64:	000ff0e0 	andeq	pc, pc, r0, ror #1
20006d68:	0007ff80 	andeq	pc, r7, r0, lsl #31
20006d6c:	00007c00 	andeq	r7, r0, r0, lsl #24
20006d70:	00008800 	andeq	r8, r0, r0, lsl #16
20006d74:	00033000 	andeq	r3, r3, r0
20006d78:	00011000 	andeq	r1, r1, r0
	...

20006d90 <bird1_gray_bits>:
	...
20006dc4:	00000e00 	andeq	r0, r0, r0, lsl #28
20006dc8:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20006df4 <bird1_light_bits>:
	...
20006e24:	00001200 	andeq	r1, r0, r0, lsl #4
	...

20006e58 <bird2_black_bits>:
	...
20006e70:	000b0000 	andeq	r0, fp, r0
20006e74:	001e0028 	andseq	r0, lr, r8, lsr #32
20006e78:	003e0068 	eorseq	r0, lr, r8, rrx
20006e7c:	003e007c 	eorseq	r0, lr, ip, ror r0
20006e80:	003e007c 	eorseq	r0, lr, ip, ror r0
20006e84:	007e007c 	rsbseq	r0, lr, ip, ror r0
20006e88:	007e7cfc 	ldrshteq	r7, [lr], #-204	; 0xffffff34
20006e8c:	007ffff8 	ldrshteq	pc, [pc], #-248	; <UNPREDICTABLE>
20006e90:	003fd7f0 	ldrshteq	sp, [pc], -r0
20006e94:	003fc3c0 	eorseq	ip, pc, r0, asr #7
20006e98:	000fc100 	andeq	ip, pc, r0, lsl #2
20006e9c:	00007000 	andeq	r7, r0, r0
20006ea0:	0000a000 	andeq	sl, r0, r0
20006ea4:	0001e000 	andeq	lr, r1, r0
20006ea8:	0000a000 	andeq	sl, r0, r0
20006eac:	00008000 	andeq	r8, r0, r0
	...

20006ebc <bird2_gray_bits>:
	...
20006ef8:	00003c00 	andeq	r3, r0, r0, lsl #24
20006efc:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20006f20 <bird2_light_bits>:
	...
20006f58:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20006f84 <bird3_black_bits>:
	...
20006fa4:	00280000 	eoreq	r0, r8, r0
20006fa8:	00680020 	rsbeq	r0, r8, r0, lsr #32
20006fac:	00f80038 	rscseq	r0, r8, r8, lsr r0
20006fb0:	00fc0038 	rscseq	r0, ip, r8, lsr r0
20006fb4:	00fc007c 	rscseq	r0, ip, ip, ror r0
20006fb8:	00fe3dfe 	ldrshteq	r3, [lr], #222	; 0xde
20006fbc:	00fffffe 	ldrshteq	pc, [pc], #254	; <UNPREDICTABLE>
20006fc0:	007febfc 	ldrshteq	lr, [pc], #-188
20006fc4:	003ff1f0 	ldrshteq	pc, [pc], -r0	; <UNPREDICTABLE>
20006fc8:	001ff0c0 	andseq	pc, pc, r0, asr #1
20006fcc:	0001e800 	andeq	lr, r1, r0, lsl #16
20006fd0:	00005000 	andeq	r5, r0, r0
20006fd4:	0000f000 	andeq	pc, r0, r0
20006fd8:	00009000 	andeq	r9, r0, r0
	...

20006fe8 <bird3_gray_bits>:
	...
20007028:	00000e00 	andeq	r0, r0, r0, lsl #28
2000702c:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

2000704c <bird3_light_bits>:
	...
20007088:	00001400 	andeq	r1, r0, r0, lsl #8
	...

200070b0 <bird4_black_bits>:
	...
200070e4:	00007800 	andeq	r7, r0, r0, lsl #16
200070e8:	0000ff80 	andeq	pc, r0, r0, lsl #31
200070ec:	0003d7f4 	strdeq	sp, [r3], -r4
200070f0:	008fe3fc 	strdeq	lr, [pc], ip
200070f4:	01ffc1fc 	ldrsheq	ip, [pc, #28]	; 20007118 <bird4_gray_bits+0x4>
200070f8:	00ffd9f8 	ldrshteq	sp, [pc], #152
200070fc:	007fb0f0 	ldrshteq	fp, [pc], #-0
20007100:	007ea000 	rsbseq	sl, lr, r0
20007104:	00792000 	rsbseq	r2, r9, r0
20007108:	00300000 	eorseq	r0, r0, r0
	...

20007114 <bird4_gray_bits>:
	...
20007154:	00001c00 	andeq	r1, r0, r0, lsl #24
20007158:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20007178 <bird4_light_bits>:
	...
200071b4:	00002800 	andeq	r2, r0, r0, lsl #16
	...

200071dc <bird5_black_bits>:
	...
20007208:	00001c00 	andeq	r1, r0, r0, lsl #24
2000720c:	0000ff00 	andeq	pc, r0, r0, lsl #30
20007210:	0003eb00 	andeq	lr, r3, r0, lsl #22
20007214:	0007f180 	andeq	pc, r7, r0, lsl #3
20007218:	000ff080 	andeq	pc, pc, r0, lsl #1
2000721c:	000fff80 	andeq	pc, pc, r0, lsl #31
20007220:	001fd3c0 	andseq	sp, pc, r0, asr #7
20007224:	003fa3c0 	eorseq	sl, pc, r0, asr #7
20007228:	003fa3c0 	eorseq	sl, pc, r0, asr #7
2000722c:	003fd3c0 	eorseq	sp, pc, r0, asr #7
20007230:	003e8380 	eorseq	r8, lr, r0, lsl #7
20007234:	00778580 	rsbseq	r8, r7, r0, lsl #11
20007238:	00610000 	rsbeq	r0, r1, r0
2000723c:	00000000 	andeq	r0, r0, r0

20007240 <bird5_gray_bits>:
	...
20007278:	00000e00 	andeq	r0, r0, r0, lsl #28
2000727c:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

200072a4 <bird5_light_bits>:
	...
200072d8:	00001400 	andeq	r1, r0, r0, lsl #8
	...

20007308 <firstTime.4093>:
20007308:	00000001 	andeq	r0, r0, r1

2000730c <witch1_black_bits>:
2000730c:	200001f8 	strdcs	r0, [r0], -r8
20007310:	03400001 	movteq	r0, #1
20007314:	00074000 	andeq	r4, r7, r0
20007318:	20000720 	andcs	r0, r0, r0, lsr #14
2000731c:	3ff80066 	svccc	0x00f80066
20007320:	00044000 	andeq	r4, r4, r0
20007324:	40000440 	andmi	r0, r0, r0, asr #8
20007328:	03800004 	orreq	r0, r0, #4
2000732c:	00064000 	andeq	r4, r6, r0
20007330:	20000640 	andcs	r0, r0, r0, asr #12
20007334:	0e200006 	cdpeq	0, 2, cr0, cr0, cr6, {0}
20007338:	000e1000 	andeq	r1, lr, r0
2000733c:	f8000c10 			; <UNDEFINED> instruction: 0xf8000c10
20007340:	0000001f 	andeq	r0, r0, pc, lsl r0

20007344 <witch1_gray_bits>:
20007344:	c0000000 	andgt	r0, r0, r0
20007348:	00800000 	addeq	r0, r0, r0
2000734c:	00008000 	andeq	r8, r0, r0
20007350:	c00000c0 	andgt	r0, r0, r0, asr #1
20007354:	00000001 	andeq	r0, r0, r1
	...
20007364:	00018000 	andeq	r8, r1, r0
20007368:	c0000180 	andgt	r0, r0, r0, lsl #3
2000736c:	01c00001 	biceq	r0, r0, r1
20007370:	0001e000 	andeq	lr, r1, r0
20007374:	000003e0 	andeq	r0, r0, r0, ror #7
20007378:	00000000 	andeq	r0, r0, r0

2000737c <witch1_light_bits>:
	...
20007390:	00038000 	andeq	r8, r3, r0
20007394:	80000380 	andhi	r0, r0, r0, lsl #7
20007398:	00000003 	andeq	r0, r0, r3
	...

200073b4 <witch2_black_bits>:
200073b4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200073b8:	01200001 			; <UNDEFINED> instruction: 0x01200001
200073bc:	00034000 	andeq	r4, r3, r0
200073c0:	20000740 	andcs	r0, r0, r0, asr #14
200073c4:	66200007 	strtvs	r0, [r0], -r7
200073c8:	003ff800 	eorseq	pc, pc, r0, lsl #16
200073cc:	40000440 	andmi	r0, r0, r0, asr #8
200073d0:	04400004 	strbeq	r0, [r0], #-4
200073d4:	00038000 	andeq	r8, r3, r0
200073d8:	20000660 	andcs	r0, r0, r0, ror #12
200073dc:	0e100006 	cdpeq	0, 1, cr0, cr0, cr6, {0}
200073e0:	001c0800 	andseq	r0, ip, r0, lsl #16
200073e4:	fc001c08 	stc2	12, cr1, [r0], {8}
200073e8:	0000003f 	andeq	r0, r0, pc, lsr r0

200073ec <witch2_gray_bits>:
200073ec:	00000000 	andeq	r0, r0, r0
200073f0:	00c00000 	sbceq	r0, r0, r0
200073f4:	00008000 	andeq	r8, r0, r0
200073f8:	c0000080 	andgt	r0, r0, r0, lsl #1
200073fc:	01c00000 	biceq	r0, r0, r0
	...
20007410:	c0000180 	andgt	r0, r0, r0, lsl #3
20007414:	01e00001 	mvneq	r0, r1
20007418:	0003f000 	andeq	pc, r3, r0
2000741c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
20007420:	00000000 	andeq	r0, r0, r0

20007424 <witch2_light_bits>:
	...
2000743c:	80000380 	andhi	r0, r0, r0, lsl #7
20007440:	03800003 	orreq	r0, r0, #3
	...

2000745c <witch3_black_bits>:
2000745c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007460:	01200001 			; <UNDEFINED> instruction: 0x01200001
20007464:	00034000 	andeq	r4, r3, r0
20007468:	20000740 	andcs	r0, r0, r0, asr #14
2000746c:	66200007 	strtvs	r0, [r0], -r7
20007470:	003ff800 	eorseq	pc, pc, r0, lsl #16
20007474:	40000440 	andmi	r0, r0, r0, asr #8
20007478:	04400004 	strbeq	r0, [r0], #-4
2000747c:	00038000 	andeq	r8, r3, r0
20007480:	10000660 	andne	r0, r0, r0, ror #12
20007484:	1c08000e 	stcne	0, cr0, [r8], {14}
20007488:	00380800 	eorseq	r0, r8, r0, lsl #16
2000748c:	fe003804 	vcmla.f16	d3, d0, d4[0], #0
20007490:	0000007f 	andeq	r0, r0, pc, ror r0

20007494 <witch3_gray_bits>:
20007494:	00000000 	andeq	r0, r0, r0
20007498:	00c00000 	sbceq	r0, r0, r0
2000749c:	00008000 	andeq	r8, r0, r0
200074a0:	c0000080 	andgt	r0, r0, r0, lsl #1
200074a4:	01c00000 	biceq	r0, r0, r0
	...
200074b8:	e0000180 	and	r0, r0, r0, lsl #3
200074bc:	03f00001 	mvnseq	r0, #1
200074c0:	0007f000 	andeq	pc, r7, r0
200074c4:	000007f8 	strdeq	r0, [r0], -r8
200074c8:	00000000 	andeq	r0, r0, r0

200074cc <witch3_light_bits>:
	...
200074e4:	80000380 	andhi	r0, r0, r0, lsl #7
200074e8:	03800003 	orreq	r0, r0, #3
	...

20007504 <firstTime.4067>:
20007504:	00000001 	andeq	r0, r0, r1

20007508 <indoors_black_bits>:
20007508:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007518:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007528:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007538:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007548:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007558:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007568:	00000280 	andeq	r0, r0, r0, lsl #5
	...
20007578:	00000440 	andeq	r0, r0, r0, asr #8
	...
20007588:	00002aa8 	andeq	r2, r0, r8, lsr #21
	...
20007598:	00001290 	muleq	r0, r0, r2
	...
200075a8:	00002c68 	andeq	r2, r0, r8, ror #24
	...
200075b8:	00002008 	andeq	r2, r0, r8
	...
200075c8:	000027c8 	andeq	r2, r0, r8, asr #15
	...
200075d8:	00001ff0 	strdeq	r1, [r0], -r0
	...
200075e8:	00000d60 	andeq	r0, r0, r0, ror #26
	...
20007658:	f7fbfe00 			; <UNDEFINED> instruction: 0xf7fbfe00
2000765c:	7fbfdfef 	svcvc	0x00bfdfef
20007660:	fbfdfeff 	blx	1ff87266 <startup-0x78d9a>
20007664:	00ff703f 	rscseq	r7, pc, pc, lsr r0	; <UNPREDICTABLE>
20007668:	0c060200 	sfmeq	f0, 4, [r6], {-0}
2000766c:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20007670:	06030180 	streq	r0, [r3], -r0, lsl #3
20007674:	0080d02c 	addeq	sp, r0, ip, lsr #32
20007678:	0c060200 	sfmeq	f0, 4, [r6], {-0}
2000767c:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20007680:	06030180 	streq	r0, [r3], -r0, lsl #3
20007684:	0080d02c 	addeq	sp, r0, ip, lsr #32
20007688:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
2000768c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007690:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007694:	00ffdfef 	rscseq	sp, pc, pc, ror #31
	...
200076a4:	000050e8 	andeq	r5, r0, r8, ror #1
	...
200076b4:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
200076c4:	00005028 	andeq	r5, r0, r8, lsr #32
	...
200076d4:	00005028 	andeq	r5, r0, r8, lsr #32
	...
200076e4:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
200076f4:	03f050e8 	mvnseq	r5, #232	; 0xe8
	...
20007704:	0c0c5fe8 	stceq	15, cr5, [ip], {232}	; 0xe8
	...
20007714:	10025028 	andne	r5, r2, r8, lsr #32
	...
20007724:	13fa5028 	mvnsne	r5, #40	; 0x28
	...
20007734:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
20007744:	100a50e8 	andne	r5, sl, r8, ror #1
	...
20007754:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
20007764:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20007774:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20007784:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
20007794:	100a50e8 	andne	r5, sl, r8, ror #1
	...
200077a4:	100a5ee8 	andne	r5, sl, r8, ror #29
	...
200077b4:	100a5028 	andne	r5, sl, r8, lsr #32
	...
200077c4:	100a5028 	andne	r5, sl, r8, lsr #32
	...
200077d4:	10025fe8 	andne	r5, r2, r8, ror #31
	...
200077e4:	0ffc50e8 	svceq	0x00fc50e8
	...
200077f4:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20007804:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20007814:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20007824:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20007834:	000050e8 	andeq	r5, r0, r8, ror #1
	...
20007844:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20007854:	00007028 	andeq	r7, r0, r8, lsr #32
	...
20007864:	00007028 	andeq	r7, r0, r8, lsr #32
	...
20007874:	00007038 	andeq	r7, r0, r8, lsr r0
20007878:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
2000787c:	7fbfdfef 	svcvc	0x00bfdfef
20007880:	fbfdfeff 	blx	1ff87486 <startup-0x78b7a>
20007884:	bfbfeff7 	svclt	0x00bfeff7
20007888:	0c060301 	stceq	3, cr0, [r6], {1}
2000788c:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20007890:	06030180 	streq	r0, [r3], -r0, lsl #3
20007894:	6030180c 	eorsvs	r1, r0, ip, lsl #16
20007898:	0c060301 	stceq	3, cr0, [r6], {1}
2000789c:	c0603018 	rsbgt	r3, r0, r8, lsl r0
200078a0:	06030180 	streq	r0, [r3], -r0, lsl #3
200078a4:	6030180c 	eorsvs	r1, r0, ip, lsl #16
200078a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200078ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200078b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200078b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200078b8:	c0603018 	rsbgt	r3, r0, r8, lsl r0
200078bc:	06030180 	streq	r0, [r3], -r0, lsl #3
200078c0:	6030180c 	eorsvs	r1, r0, ip, lsl #16
200078c4:	030180c0 	movweq	r8, #4288	; 0x10c0
200078c8:	c0603018 	rsbgt	r3, r0, r8, lsl r0
200078cc:	06030180 	streq	r0, [r3], -r0, lsl #3
200078d0:	6030180c 	eorsvs	r1, r0, ip, lsl #16
200078d4:	030180c0 	movweq	r8, #4288	; 0x10c0
200078d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200078dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200078e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200078e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200078e8:	030180c0 	movweq	r8, #4288	; 0x10c0
200078ec:	30180c06 	andscc	r0, r8, r6, lsl #24
200078f0:	0180c060 	orreq	ip, r0, r0, rrx
200078f4:	180c0603 	stmdane	ip, {r0, r1, r9, sl}
200078f8:	030180c0 	movweq	r8, #4288	; 0x10c0
200078fc:	30180c06 	andscc	r0, r8, r6, lsl #24
20007900:	0180c060 	orreq	ip, r0, r0, rrx
20007904:	180c0603 	stmdane	ip, {r0, r1, r9, sl}

20007908 <indoors_gray_bits>:
	...
20007968:	00001110 	andeq	r1, r0, r0, lsl r1
	...
20007978:	00001090 	muleq	r0, r0, r0
	...
200079a8:	00000390 	muleq	r0, r0, r3
	...
200079b8:	00001340 	andeq	r1, r0, r0, asr #6
	...
200079c8:	00000830 	andeq	r0, r0, r0, lsr r8
	...
20007a58:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
20007a5c:	80402010 	subhi	r2, r0, r0, lsl r0
20007a60:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
20007a64:	00008000 	andeq	r8, r0, r0
20007a68:	b0582c00 	subslt	r2, r8, r0, lsl #24
20007a6c:	0582c160 	streq	ip, [r2, #352]	; 0x160
20007a70:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
20007a74:	010b0000 	mrseq	r0, (UNDEF: 11)
20007a78:	71b8dc00 			; <UNDEFINED> instruction: 0x71b8dc00
20007a7c:	1b8dc6e3 	blne	1e379610 <startup-0x1c869f0>
20007a80:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
20007a84:	01370001 	teqeq	r7, r1
	...
20007a94:	01000000 	mrseq	r0, (UNDEF: 0)
20007a98:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20007a9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007aa0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007aa4:	01ff8007 	mvnseq	r8, r7
	...
20007ab4:	00008000 	andeq	r8, r0, r0
	...
20007ac4:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20007ad4:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20007ae4:	00008000 	andeq	r8, r0, r0
	...
20007af4:	00008000 	andeq	r8, r0, r0
	...
20007b04:	00008000 	andeq	r8, r0, r0
	...
20007b14:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20007b24:	20008180 	andcs	r8, r0, r0, lsl #3
	...
20007b34:	20808000 	addcs	r8, r0, r0
	...
20007b44:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
20007b54:	21e08000 	mvncs	r8, r0
	...
20007b64:	2bf08180 	blcs	1fc2816c <startup-0x3d7e94>
	...
20007b74:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
20007b84:	29e08000 	stmibcs	r0!, {pc}^
	...
20007b94:	2bc08100 	blcs	1f027f9c <startup-0xfd8064>
	...
20007ba4:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
20007bb4:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
20007bc4:	2bf08180 	blcs	1fc281cc <startup-0x3d7e34>
	...
20007bd4:	28008000 	stmdacs	r0, {pc}
	...
20007be4:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
20007bf4:	1fc0a000 	svcne	0x00c0a000
	...
20007c04:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
20007c14:	00008190 	muleq	r0, r0, r1
	...
20007c24:	00008010 	andeq	r8, r0, r0, lsl r0
	...
20007c34:	00008110 	andeq	r8, r0, r0, lsl r1
	...
20007c44:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
20007c54:	00008190 	muleq	r0, r0, r1
	...
20007c64:	00008190 	muleq	r0, r0, r1
	...
20007c74:	00008180 	andeq	r8, r0, r0, lsl #3
20007c78:	08040201 	stmdaeq	r4, {r0, r9}
20007c7c:	80402010 	subhi	r2, r0, r0, lsl r0
20007c80:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
20007c84:	40401008 	submi	r1, r0, r8
20007c88:	b0582c16 	subslt	r2, r8, r6, lsl ip
20007c8c:	0582c160 	streq	ip, [r2, #352]	; 0x160
20007c90:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
20007c94:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
20007c98:	71b8dc6e 			; <UNDEFINED> instruction: 0x71b8dc6e
20007c9c:	1b8dc6e3 	blne	1e379830 <startup-0x1c867d0>
20007ca0:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
20007ca4:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
	...
20007cb8:	0582c160 	streq	ip, [r2, #352]	; 0x160
20007cbc:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
20007cc0:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
20007cc4:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
20007cc8:	1b8dc6e3 	blne	1e37985c <startup-0x1c867a4>
20007ccc:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
20007cd0:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
20007cd4:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
	...
20007ce8:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
20007cec:	c160b058 	qdsubgt	fp, r8, r0
20007cf0:	160b0582 	strne	r0, [fp], -r2, lsl #11
20007cf4:	60b0582c 	adcsvs	r5, r0, ip, lsr #16
20007cf8:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
20007cfc:	c6e371b8 			; <UNDEFINED> instruction: 0xc6e371b8
20007d00:	6e371b8d 	vaddvs.f64	d1, d23, d13
20007d04:	e371b8dc 	cmn	r1, #220, 16	; 0xdc0000

20007d08 <indoors_light_bits>:
	...
20007d48:	00001010 	andeq	r1, r0, r0, lsl r0
	...
20007d78:	00000300 	andeq	r0, r0, r0, lsl #6
	...
20007d88:	00001110 	andeq	r1, r0, r0, lsl r1
	...
20007d98:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007da8:	00001000 	andeq	r1, r0, r0
	...
20007db8:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
20007dc8:	00001000 	andeq	r1, r0, r0
	...
20007e68:	43a1d000 			; <UNDEFINED> instruction: 0x43a1d000
20007e6c:	3a1d0e87 	bcc	2074b890 <firstTime.4040+0x742b84>
20007e70:	a1d0e874 	bicsge	lr, r0, r4, ror r8
20007e74:	00742013 	rsbseq	r2, r4, r3, lsl r0
20007e78:	82412000 	subhi	r2, r1, #0
20007e7c:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
20007e80:	41209048 			; <UNDEFINED> instruction: 0x41209048
20007e84:	00482012 	subeq	r2, r8, r2, lsl r0
	...
20007e94:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007ea4:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
20007eb4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007ec4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007ed4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007ee4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007ef4:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
20007f04:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007f14:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007f24:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007f34:	03702010 	cmneq	r0, #16
	...
20007f44:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
20007f54:	02102010 	andseq	r2, r0, #16
	...
20007f64:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007f74:	02302010 	eorseq	r2, r0, #16
	...
20007f84:	02102010 	andseq	r2, r0, #16
	...
20007f94:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
20007fa4:	03302000 	teqeq	r0, #0
	...
20007fb4:	03100000 	tsteq	r0, #0
	...
20007fc4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007fd4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007fe4:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
20007ff4:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20008004:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20008014:	00002000 	andeq	r2, r0, r0
	...
20008024:	00002000 	andeq	r2, r0, r0
	...
20008034:	00002e00 	andeq	r2, r0, r0, lsl #28
	...
20008088:	43a1d0e8 			; <UNDEFINED> instruction: 0x43a1d0e8
2000808c:	3a1d0e87 	bcc	2074bab0 <firstTime.4040+0x742da4>
20008090:	a1d0e874 	bicsge	lr, r0, r4, ror r8
20008094:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
20008098:	82412090 	subhi	r2, r1, #144	; 0x90
2000809c:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
200080a0:	41209048 			; <UNDEFINED> instruction: 0x41209048
200080a4:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
	...
200080b8:	3a1d0e87 	bcc	2074badc <firstTime.4040+0x742dd0>
200080bc:	a1d0e874 	bicsge	lr, r0, r4, ror r8
200080c0:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
200080c4:	d0e8743a 	rscle	r7, r8, sl, lsr r4
200080c8:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
200080cc:	41209048 			; <UNDEFINED> instruction: 0x41209048
200080d0:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
200080d4:	20904824 	addscs	r4, r0, r4, lsr #16
	...
200080e8:	d0e8743a 	rscle	r7, r8, sl, lsr r4
200080ec:	0e8743a1 	cdpeq	3, 8, cr4, cr7, cr1, {5}
200080f0:	e8743a1d 	ldmda	r4!, {r0, r2, r3, r4, r9, fp, ip, sp}^
200080f4:	8743a1d0 			; <UNDEFINED> instruction: 0x8743a1d0
200080f8:	20904824 	addscs	r4, r0, r4, lsr #16
200080fc:	09048241 	stmdbeq	r4, {r0, r6, r9, pc}
20008100:	90482412 	subls	r2, r8, r2, lsl r4
20008104:	04824120 	streq	r4, [r2], #288	; 0x120

20008108 <firstTime.4040>:
20008108:	00000001 	andeq	r0, r0, r1

2000810c <indoors2_black_bits>:
2000810c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008110:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008114:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008118:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000811c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008120:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008124:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008128:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000812c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008130:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008134:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008138:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000813c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008140:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008144:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008148:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000814c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008150:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008154:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008158:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000815c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008160:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008164:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008168:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000816c:	ffffeeef 			; <UNDEFINED> instruction: 0xffffeeef
20008170:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008174:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008178:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000817c:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
20008180:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008184:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008188:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000818c:	ffffeaaf 			; <UNDEFINED> instruction: 0xffffeaaf
20008190:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008194:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008198:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000819c:	fffff29f 			; <UNDEFINED> instruction: 0xfffff29f
200081a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081ac:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
200081b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081bc:	ffffe00f 			; <UNDEFINED> instruction: 0xffffe00f
200081c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081cc:	ffffe7cf 			; <UNDEFINED> instruction: 0xffffe7cf
200081d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008200:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008204:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008208:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000820c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008210:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008214:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008218:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000821c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008220:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008224:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008228:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000822c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008230:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008234:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008238:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000823c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008240:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008244:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008248:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000824c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008250:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008254:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008258:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000825c:	f7fbffff 			; <UNDEFINED> instruction: 0xf7fbffff
20008260:	7fbfdfef 	svcvc	0x00bfdfef
20008264:	fbfdfeff 	blx	1ff87e6a <startup-0x78196>
20008268:	ffff7fff 			; <UNDEFINED> instruction: 0xffff7fff
2000826c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008270:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008274:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008278:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
2000827c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008280:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008284:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008288:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
2000828c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008290:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008294:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008298:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
2000829c:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
200082a8:	fe0050e8 	cdp2	0, 0, cr5, cr0, cr8, {7}
200082ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082b8:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
200082bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082c8:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
200082cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082d8:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
200082dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082e8:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
200082ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082f8:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
200082fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008300:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008304:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008308:	ec0d5fef 	stc	15, cr5, [sp], {239}	; 0xef
2000830c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008310:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008314:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008318:	f003502f 			; <UNDEFINED> instruction: 0xf003502f
2000831c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008320:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008324:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008328:	d3fb502f 	mvnsle	r5, #47	; 0x2f
2000832c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008330:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008334:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008338:	d00b5fef 	andle	r5, fp, pc, ror #31
2000833c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008340:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008344:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008348:	d00b50ef 	andle	r5, fp, pc, ror #1
2000834c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008350:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008354:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008358:	d00b5fef 	andle	r5, fp, pc, ror #31
2000835c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008360:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008364:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008368:	d00b502f 	andle	r5, fp, pc, lsr #32
2000836c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008370:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008374:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008378:	d00b502f 	andle	r5, fp, pc, lsr #32
2000837c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008380:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008384:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008388:	d00b5fef 	andle	r5, fp, pc, ror #31
2000838c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008390:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008394:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008398:	d00b50ef 	andle	r5, fp, pc, ror #1
2000839c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083a8:	d00b5eef 	andle	r5, fp, pc, ror #29
200083ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083b8:	d00b502f 	andle	r5, fp, pc, lsr #32
200083bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083c8:	d00b502f 	andle	r5, fp, pc, lsr #32
200083cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083d8:	d0035fef 	andle	r5, r3, pc, ror #31
200083dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083e8:	cffd50ef 	svcgt	0x00fd50ef
200083ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083f8:	e03f5fef 	eors	r5, pc, pc, ror #31
200083fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008400:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008404:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008408:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
2000840c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008410:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008414:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008418:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
2000841c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008420:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008424:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008428:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
2000842c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008430:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008434:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008438:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
2000843c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008440:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008444:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008448:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
2000844c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008450:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008454:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008458:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
2000845c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008460:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008464:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008468:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
2000846c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008470:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008474:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008478:	ffff7e7f 			; <UNDEFINED> instruction: 0xffff7e7f
2000847c:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
20008480:	7fbfdfef 	svcvc	0x00bfdfef
20008484:	fbfdfeff 	blx	1ff8808a <startup-0x77f76>
20008488:	bfbfeff7 	svclt	0x00bfeff7
2000848c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008490:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008494:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008498:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000849c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200084fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008500:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008504:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008508:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

2000850c <indoors2_gray_bits>:
	...
2000856c:	00001110 	andeq	r1, r0, r0, lsl r1
	...
2000857c:	00001090 	muleq	r0, r0, r0
	...
200085ac:	00000390 	muleq	r0, r0, r3
	...
200085bc:	00001340 	andeq	r1, r0, r0, asr #6
	...
200085cc:	00000830 	andeq	r0, r0, r0, lsr r8
	...
2000865c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
20008660:	80402010 	subhi	r2, r0, r0, lsl r0
20008664:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
20008668:	00008000 	andeq	r8, r0, r0
	...
20008678:	01000000 	mrseq	r0, (UNDEF: 0)
	...
20008688:	01000000 	mrseq	r0, (UNDEF: 0)
	...
20008698:	01000000 	mrseq	r0, (UNDEF: 0)
2000869c:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
200086a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200086a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200086a8:	01ff8007 	mvnseq	r8, r7
	...
200086b8:	00008000 	andeq	r8, r0, r0
	...
200086c8:	00008180 	andeq	r8, r0, r0, lsl #3
	...
200086d8:	00008180 	andeq	r8, r0, r0, lsl #3
	...
200086e8:	00008000 	andeq	r8, r0, r0
	...
200086f8:	00008000 	andeq	r8, r0, r0
	...
20008708:	00008000 	andeq	r8, r0, r0
	...
20008718:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20008728:	20008180 	andcs	r8, r0, r0, lsl #3
	...
20008738:	20808000 	addcs	r8, r0, r0
	...
20008748:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
20008758:	21e08000 	mvncs	r8, r0
	...
20008768:	2bf08180 	blcs	1fc28d70 <startup-0x3d7290>
	...
20008778:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
20008788:	29e08000 	stmibcs	r0!, {pc}^
	...
20008798:	2bc08100 	blcs	1f028ba0 <startup-0xfd7460>
	...
200087a8:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
200087b8:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
200087c8:	2bf08180 	blcs	1fc28dd0 <startup-0x3d7230>
	...
200087d8:	28008000 	stmdacs	r0, {pc}
	...
200087e8:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
200087f8:	1fc0a000 	svcne	0x00c0a000
	...
20008808:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
20008818:	00008190 	muleq	r0, r0, r1
	...
20008828:	00008010 	andeq	r8, r0, r0, lsl r0
	...
20008838:	00008110 	andeq	r8, r0, r0, lsl r1
	...
20008848:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
20008858:	00008190 	muleq	r0, r0, r1
	...
20008868:	00008190 	muleq	r0, r0, r1
	...
20008878:	00008180 	andeq	r8, r0, r0, lsl #3
2000887c:	08040201 	stmdaeq	r4, {r0, r9}
20008880:	80402010 	subhi	r2, r0, r0, lsl r0
20008884:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
20008888:	40401008 	submi	r1, r0, r8
	...

2000890c <indoors2_light_bits>:
	...
2000897c:	00000300 	andeq	r0, r0, r0, lsl #6
	...
2000898c:	00001110 	andeq	r1, r0, r0, lsl r1
	...
2000899c:	00000100 	andeq	r0, r0, r0, lsl #2
	...
200089ac:	00001000 	andeq	r1, r0, r0
	...
200089bc:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
200089cc:	00001000 	andeq	r1, r0, r0
	...
20008a78:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008a88:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008a98:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008aa8:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
20008ab8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008ac8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008ad8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008ae8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008af8:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
20008b08:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008b18:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008b28:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008b38:	03702010 	cmneq	r0, #16
	...
20008b48:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
20008b58:	02102010 	andseq	r2, r0, #16
	...
20008b68:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008b78:	02302010 	eorseq	r2, r0, #16
	...
20008b88:	02102010 	andseq	r2, r0, #16
	...
20008b98:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
20008ba8:	03302000 	teqeq	r0, #0
	...
20008bb8:	03100000 	tsteq	r0, #0
	...
20008bc8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008bd8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008be8:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
20008bf8:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20008c08:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20008c18:	00002000 	andeq	r2, r0, r0
	...
20008c28:	00002000 	andeq	r2, r0, r0
	...
20008c38:	00002e00 	andeq	r2, r0, r0, lsl #28
	...

20008d0c <firstTime.4040>:
20008d0c:	00000001 	andeq	r0, r0, r1
20008d10:	00202020 	eoreq	r2, r0, r0, lsr #32
20008d14:	41524b2a 	cmpmi	r2, sl, lsr #22
20008d18:	2a202a21 	bcs	208135a4 <firstTime.4040+0x80a898>
20008d1c:	2141524b 	cmpcs	r1, fp, asr #4
20008d20:	0000002a 	andeq	r0, r0, sl, lsr #32
20008d24:	734c4944 	movtvc	r4, #51524	; 0xc944
20008d28:	7469772d 	strbtvc	r7, [r9], #-1837	; 0xfffff8d3
20008d2c:	73656863 	cmnvc	r5, #6488064	; 0x630000
20008d30:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
20008d34:	00000065 	andeq	r0, r0, r5, rrx
20008d38:	20726f46 	rsbscs	r6, r2, r6, asr #30
20008d3c:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
20008d40:	65697275 	strbvs	r7, [r9, #-629]!	; 0xfffffd8b
20008d44:	68742073 	ldmdavs	r4!, {r0, r1, r4, r5, r6, sp}^
20008d48:	00000065 	andeq	r0, r0, r5, rrx
20008d4c:	20202020 	eorcs	r2, r0, r0, lsr #32
20008d50:	00000000 	andeq	r0, r0, r0
20008d54:	6c696f63 	stclvs	15, cr6, [r9], #-396	; 0xfffffe74
20008d58:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
20008d5c:	6566206e 	strbvs	r2, [r6, #-110]!	; 0xffffff92
20008d60:	002c7261 	eoreq	r7, ip, r1, ror #4
20008d64:	74616874 	strbtvc	r6, [r1], #-2164	; 0xfffff78c
20008d68:	44206120 	strtmi	r6, [r0], #-288	; 0xfffffee0
20008d6c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
20008d70:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
20008d74:	00000068 	andeq	r0, r0, r8, rrx
20008d78:	6e656877 	mcrvs	8, 3, r6, cr5, cr7, {3}
20008d7c:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
20008d80:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
20008d84:	65682079 	strbvs	r2, [r8, #-121]!	; 0xffffff87
20008d88:	00007261 	andeq	r7, r0, r1, ror #4
20008d8c:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
20008d90:	2e726165 	rpwcssz	f6, f2, f5
20008d94:	00000000 	andeq	r0, r0, r0
20008d98:	70727573 	rsbsvc	r7, r2, r3, ror r5
20008d9c:	69736972 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, fp, sp, lr}^
20008da0:	202c676e 	eorcs	r6, ip, lr, ror #14
20008da4:	646e6966 	strbtvs	r6, [lr], #-2406	; 0xfffff69a
20008da8:	00676e69 	rsbeq	r6, r7, r9, ror #28
20008dac:	69206f53 	stmdbvs	r0!, {r0, r1, r4, r6, r8, r9, sl, fp, sp, lr}
20008db0:	73692074 	cmnvc	r9, #116	; 0x74
20008db4:	69757120 	ldmdbvs	r5!, {r5, r8, ip, sp, lr}^
20008db8:	00006574 	andeq	r6, r0, r4, ror r5
20008dbc:	20756f79 	rsbscs	r6, r5, r9, ror pc
20008dc0:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
20008dc4:	0000002c 	andeq	r0, r0, ip, lsr #32
20008dc8:	72696568 	rsbvc	r6, r9, #104, 10	; 0x1a000000
20008dcc:	206f7420 	rsbcs	r7, pc, r0, lsr #8
20008dd0:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
20008dd4:	61654c20 	cmnvs	r5, r0, lsr #24
20008dd8:	00002e72 	andeq	r2, r0, r2, ror lr
20008ddc:	65657571 	strbvs	r7, [r5, #-1393]!	; 0xfffffa8f
20008de0:	6144206e 	cmpvs	r4, lr, rrx
20008de4:	206f6666 	rsbcs	r6, pc, r6, ror #12
20008de8:	4420666f 	strtmi	r6, [r0], #-1647	; 0xfffff991
20008dec:	2c734c49 	ldclcs	12, cr4, [r3], #-292	; 0xfffffedc
20008df0:	00000000 	andeq	r0, r0, r0
20008df4:	706d6574 	rsbvc	r6, sp, r4, ror r5
20008df8:	2c646574 	cfstr64cs	mvdx6, [r4], #-464	; 0xfffffe30
20008dfc:	206f7420 	rsbcs	r7, pc, r0, lsr #8
20008e00:	746f6f6c 	strbtvc	r6, [pc], #-3948	; 20008e08 <firstTime.4040+0xfc>
20008e04:	00000000 	andeq	r0, r0, r0
20008e08:	20747542 	rsbscs	r7, r4, r2, asr #10
20008e0c:	6279616d 	rsbsvs	r6, r9, #1073741851	; 0x4000001b
20008e10:	6f792065 	svcvs	0x00792065
20008e14:	65722775 	ldrbvs	r2, [r2, #-1909]!	; 0xfffff88b
20008e18:	00000000 	andeq	r0, r0, r0
20008e1c:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 20008c8c <indoors2_light_bits+0x380>
20008e20:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
20008e24:	63697220 	cmnvs	r9, #32, 4
20008e28:	2c736568 	cfldr64cs	mvdx6, [r3], #-416	; 0xfffffe60
20008e2c:	00000000 	andeq	r0, r0, r0
20008e30:	6b636977 	blvs	218e3414 <firstTime.4040+0x18da708>
20008e34:	44206465 	strtmi	r6, [r0], #-1125	; 0xfffffb9b
20008e38:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
20008e3c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
20008e40:	2e736568 	cdpcs	5, 7, cr6, cr3, cr8, {3}
20008e44:	00000000 	andeq	r0, r0, r0
20008e48:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
20008e4c:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
20008e50:	00000000 	andeq	r0, r0, r0
20008e54:	67206f73 			; <UNDEFINED> instruction: 0x67206f73
20008e58:	70706972 	rsbsvc	r6, r0, r2, ror r9
20008e5c:	20796c69 	rsbscs	r6, r9, r9, ror #24
20008e60:	61657274 	smcvs	22308	; 0x5724
20008e64:	0000002d 	andeq	r0, r0, sp, lsr #32
20008e68:	6572202d 	ldrbvs	r2, [r2, #-45]!	; 0xffffffd3
20008e6c:	20746573 	rsbscs	r6, r4, r3, ror r5
20008e70:	20656874 	rsbcs	r6, r5, r4, ror r8
20008e74:	74697773 	strbtvc	r7, [r9], #-1907	; 0xfffff88d
20008e78:	00216863 	eoreq	r6, r1, r3, ror #16
20008e7c:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
20008e80:	62202c72 	eorvs	r2, r0, #29184	; 0x7200
20008e84:	65766172 	ldrbvs	r6, [r6, #-370]!	; 0xfffffe8e
20008e88:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
20008e8c:	002c6863 	eoreq	r6, ip, r3, ror #16
20008e90:	200020f0 	strdcs	r2, [r0], -r0
20008e94:	200020fa 	strdcs	r2, [r0], -sl
20008e98:	20002104 	andcs	r2, r0, r4, lsl #2
20008e9c:	2000210e 	andcs	r2, r0, lr, lsl #2
20008ea0:	20002118 	andcs	r2, r0, r8, lsl r1
20008ea4:	20002122 	andcs	r2, r0, r2, lsr #2
20008ea8:	2000212c 	andcs	r2, r0, ip, lsr #2
20008eac:	20002136 	andcs	r2, r0, r6, lsr r1
20008eb0:	20202020 	eorcs	r2, r0, r0, lsr #32
20008eb4:	20202020 	eorcs	r2, r0, r0, lsr #32
20008eb8:	20202020 	eorcs	r2, r0, r0, lsr #32
20008ebc:	20202020 	eorcs	r2, r0, r0, lsr #32
20008ec0:	20202020 	eorcs	r2, r0, r0, lsr #32
20008ec4:	00000000 	andeq	r0, r0, r0
20008ec8:	61666c41 	cmnvs	r6, r1, asr #24
20008ecc:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
20008ed0:	6b736972 	blvs	21ce34a0 <firstTime.4040+0x1cda794>
20008ed4:	00000000 	andeq	r0, r0, r0
20008ed8:	64726168 	ldrbtvs	r6, [r2], #-360	; 0xfffffe98
20008edc:	a4c3a5c3 	strbge	sl, [r3], #1475	; 0x5c3
20008ee0:	7261b6c3 	rsbvc	fp, r1, #204472320	; 0xc300000
20008ee4:	75732065 	ldrbvc	r2, [r3, #-101]!	; 0xffffff9b
20008ee8:	00726567 	rsbseq	r6, r2, r7, ror #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000090e 	andeq	r0, r0, lr, lsl #18
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000081 	andeq	r0, r0, r1, lsl #1
      10:	0004940c 	andeq	r9, r4, ip, lsl #8
	...
      20:	020c0200 	andeq	r0, ip, #0, 4
      24:	00004e05 	andeq	r4, r0, r5, lsl #28
      28:	03060300 	movweq	r0, #25344	; 0x6300
      2c:	07020000 	streq	r0, [r2, -r0]
      30:	0000004e 	andeq	r0, r0, lr, asr #32
      34:	065f0300 	ldrbeq	r0, [pc], -r0, lsl #6
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	10850304 	addne	r0, r5, r4, lsl #6
      44:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
      48:	00000055 	andeq	r0, r0, r5, asr r0
      4c:	04040008 	streq	r0, [r4], #-8
      50:	00032a07 	andeq	r2, r3, r7, lsl #20
      54:	5b040500 	blpl	10145c <startup-0x1fefeba4>
      58:	04000000 	streq	r0, [r0], #-0
      5c:	04410801 	strbeq	r0, [r1], #-2049	; 0xfffff7ff
      60:	d7060000 	strle	r0, [r6, -r0]
      64:	02000011 	andeq	r0, r0, #17
      68:	0000210a 	andeq	r2, r0, sl, lsl #2
      6c:	00160700 	andseq	r0, r6, r0, lsl #14
      70:	030c0000 	movweq	r0, #49152	; 0xc000
      74:	00009e06 	andeq	r9, r0, r6, lsl #28
      78:	052c0300 	streq	r0, [ip, #-768]!	; 0xfffffd00
      7c:	07030000 	streq	r0, [r3, -r0]
      80:	0000009e 	muleq	r0, lr, r0
      84:	001d0300 	andseq	r0, sp, r0, lsl #6
      88:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      8c:	0000009e 	muleq	r0, lr, r0
      90:	00120304 	andseq	r0, r2, r4, lsl #6
      94:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
      98:	0000009e 	muleq	r0, lr, r0
      9c:	04050008 	streq	r0, [r5], #-8
      a0:	00000062 	andeq	r0, r0, r2, rrx
      a4:	000caa06 	andeq	sl, ip, r6, lsl #20
      a8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
      ac:	07000000 	streq	r0, [r0, -r0]
      b0:	00000624 	andeq	r0, r0, r4, lsr #12
      b4:	28060424 	stmdacs	r6, {r2, r5, sl}
      b8:	03000001 	movweq	r0, #1
      bc:	000003de 	ldrdeq	r0, [r0], -lr
      c0:	01280704 			; <UNDEFINED> instruction: 0x01280704
      c4:	03000000 	movweq	r0, #0
      c8:	00000630 	andeq	r0, r0, r0, lsr r6
      cc:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
      d0:	03040000 	movweq	r0, #16384	; 0x4000
      d4:	00000597 	muleq	r0, r7, r5
      d8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
      dc:	03080000 	movweq	r0, #32768	; 0x8000
      e0:	000005c3 	andeq	r0, r0, r3, asr #11
      e4:	01460c04 	cmpeq	r6, r4, lsl #24
      e8:	030c0000 	movweq	r0, #49152	; 0xc000
      ec:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
      f0:	01460d04 	cmpeq	r6, r4, lsl #26
      f4:	03100000 	tsteq	r0, #0
      f8:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      fc:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     100:	03140000 	tsteq	r4, #0
     104:	00000052 	andeq	r0, r0, r2, asr r0
     108:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     10c:	03180000 	tsteq	r8, #0
     110:	0000036f 	andeq	r0, r0, pc, ror #6
     114:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     118:	031c0000 	tsteq	ip, #0
     11c:	0000037f 	andeq	r0, r0, pc, ror r3
     120:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     124:	00200000 	eoreq	r0, r0, r0
     128:	00a40405 	adceq	r0, r4, r5, lsl #8
     12c:	04080000 	streq	r0, [r8], #-0
     130:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     134:	01400900 	cmpeq	r0, r0, lsl #18
     138:	400a0000 	andmi	r0, sl, r0
     13c:	00000001 	andeq	r0, r0, r1
     140:	00af0405 	adceq	r0, pc, r5, lsl #8
     144:	04050000 	streq	r0, [r5], #-0
     148:	00000135 	andeq	r0, r0, r5, lsr r1
     14c:	00062506 	andeq	r2, r6, r6, lsl #10
     150:	af150400 	svcge	0x00150400
     154:	0b000000 	bleq	15c <startup-0x1ffffea4>
     158:	00000162 	andeq	r0, r0, r2, ror #2
     15c:	00000162 	andeq	r0, r0, r2, ror #2
     160:	0405000c 	streq	r0, [r5], #-12
     164:	0000014c 	andeq	r0, r0, ip, asr #2
     168:	0004c40d 	andeq	ip, r4, sp, lsl #8
     16c:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
     170:	0d000001 	stceq	0, cr0, [r0, #-4]
     174:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
     178:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
     17c:	ee060000 	cdp	0, 0, cr0, cr6, cr0, {0}
     180:	05000005 	streq	r0, [r0, #-5]
     184:	00005b24 	andeq	r5, r0, r4, lsr #22
     188:	017e0b00 	cmneq	lr, r0, lsl #22
     18c:	019a0000 	orrseq	r0, sl, r0
     190:	9a0e0000 	bls	380198 <startup-0x1fc7fe68>
     194:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     198:	04040003 	streq	r0, [r4], #-3
     19c:	00039c07 	andeq	r9, r3, r7, lsl #24
     1a0:	0fbb0d00 	svceq	0x00bb0d00
     1a4:	2b050000 	blcs	1401ac <startup-0x1febfe54>
     1a8:	00000189 	andeq	r0, r0, r9, lsl #3
     1ac:	0002220d 	andeq	r2, r2, sp, lsl #4
     1b0:	892c0500 	stmdbhi	ip!, {r8, sl}
     1b4:	0d000001 	stceq	0, cr0, [r0, #-4]
     1b8:	0000044f 	andeq	r0, r0, pc, asr #8
     1bc:	01892d05 	orreq	r2, r9, r5, lsl #26
     1c0:	0c0d0000 	stceq	0, cr0, [sp], {-0}
     1c4:	05000003 	streq	r0, [r0, #-3]
     1c8:	0001892e 	andeq	r8, r1, lr, lsr #18
     1cc:	029c0d00 	addseq	r0, ip, #0, 26
     1d0:	2f050000 	svccs	0x00050000
     1d4:	00000189 	andeq	r0, r0, r9, lsl #3
     1d8:	0006060d 	andeq	r0, r6, sp, lsl #12
     1dc:	89300500 	ldmdbhi	r0!, {r8, sl}
     1e0:	0d000001 	stceq	0, cr0, [r0, #-4]
     1e4:	000005f6 	strdeq	r0, [r0], -r6
     1e8:	01893105 	orreq	r3, r9, r5, lsl #2
     1ec:	5b0b0000 	blpl	2c01f4 <startup-0x1fd3fe0c>
     1f0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     1f4:	0f000001 	svceq	0x00000001
     1f8:	0000019a 	muleq	r0, sl, r1
     1fc:	6d100077 	ldcvs	0, cr0, [r0, #-476]	; 0xfffffe24
     200:	06000002 	streq	r0, [r0], -r2
     204:	0001ee03 	andeq	lr, r1, r3, lsl #28
     208:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
     20c:	11200055 	qsubne	r0, r5, r0
     210:	00000466 	andeq	r0, r0, r6, ror #8
     214:	01ee0307 	mvneq	r0, r7, lsl #6
     218:	03050000 	movweq	r0, #20480	; 0x5000
     21c:	200055dc 	ldrdcs	r5, [r0], -ip
     220:	00053711 	andeq	r3, r5, r1, lsl r7
     224:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     228:	05000001 	streq	r0, [r0, #-1]
     22c:	00565403 	subseq	r5, r6, r3, lsl #8
     230:	005b0b20 	subseq	r0, fp, r0, lsr #22
     234:	02420000 	subeq	r0, r2, #0
     238:	9a0e0000 	bls	380240 <startup-0x1fc7fdc0>
     23c:	17000001 	strne	r0, [r0, -r1]
     240:	46110001 	ldrmi	r0, [r1], -r1
     244:	09000001 	stmdbeq	r0, {r0}
     248:	00023103 	andeq	r3, r2, r3, lsl #2
     24c:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
     250:	11200056 	qsubne	r0, r6, r0
     254:	000003c2 	andeq	r0, r0, r2, asr #7
     258:	0231030a 	eorseq	r0, r1, #671088640	; 0x28000000
     25c:	03050000 	movweq	r0, #20480	; 0x5000
     260:	200057e4 	andcs	r5, r0, r4, ror #15
     264:	00035f11 	andeq	r5, r3, r1, lsl pc
     268:	31030b00 	tstcc	r3, r0, lsl #22
     26c:	05000002 	streq	r0, [r0, #-2]
     270:	0058fc03 	subseq	pc, r8, r3, lsl #24
     274:	005b0b20 	subseq	r0, fp, r0, lsr #22
     278:	02860000 	addeq	r0, r6, #0
     27c:	9a0e0000 	bls	380284 <startup-0x1fc7fd7c>
     280:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     284:	79110003 	ldmdbvc	r1, {r0, r1}
     288:	0c000004 	stceq	0, cr0, [r0], {4}
     28c:	00027503 	andeq	r7, r2, r3, lsl #10
     290:	14030500 	strne	r0, [r3], #-1280	; 0xfffffb00
     294:	1120005a 	qsubne	r0, sl, r0
     298:	00000027 	andeq	r0, r0, r7, lsr #32
     29c:	0275030d 	rsbseq	r0, r5, #872415232	; 0x34000000
     2a0:	03050000 	movweq	r0, #20480	; 0x5000
     2a4:	20005e14 	andcs	r5, r0, r4, lsl lr
     2a8:	00000011 	andeq	r0, r0, r1, lsl r0
     2ac:	75030e00 	strvc	r0, [r3, #-3584]	; 0xfffff200
     2b0:	05000002 	streq	r0, [r0, #-2]
     2b4:	00621403 	rsbeq	r1, r2, r3, lsl #8
     2b8:	005b0b20 	subseq	r0, fp, r0, lsr #22
     2bc:	02c90000 	sbceq	r0, r9, #0
     2c0:	9a0f0000 	bls	3c02c8 <startup-0x1fc3fd38>
     2c4:	d1000001 	tstle	r0, r1
     2c8:	01981100 	orrseq	r1, r8, r0, lsl #2
     2cc:	030f0000 	movweq	r0, #61440	; 0xf000
     2d0:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     2d4:	66140305 	ldrvs	r0, [r4], -r5, lsl #6
     2d8:	a5112000 	ldrge	r2, [r1, #-0]
     2dc:	10000003 	andne	r0, r0, r3
     2e0:	0002b903 	andeq	fp, r2, r3, lsl #18
     2e4:	e8030500 	stmda	r3, {r8, sl}
     2e8:	11200066 			; <UNDEFINED> instruction: 0x11200066
     2ec:	000001fa 	strdeq	r0, [r0], -sl
     2f0:	02b90311 	adcseq	r0, r9, #1140850688	; 0x44000000
     2f4:	03050000 	movweq	r0, #20480	; 0x5000
     2f8:	200067bc 			; <UNDEFINED> instruction: 0x200067bc
     2fc:	0005e407 	andeq	lr, r5, r7, lsl #8
     300:	04121400 	ldreq	r1, [r2], #-1024	; 0xfffffc00
     304:	00000345 	andeq	r0, r0, r5, asr #6
     308:	00144a03 	andseq	r4, r4, r3, lsl #20
     30c:	45051200 	strmi	r1, [r5, #-512]	; 0xfffffe00
     310:	00000003 	andeq	r0, r0, r3
     314:	00026003 	andeq	r6, r2, r3
     318:	45061200 	strmi	r1, [r6, #-512]	; 0xfffffe00
     31c:	04000003 	streq	r0, [r0], #-3
     320:	00038903 	andeq	r8, r3, r3, lsl #18
     324:	2e081200 	cdpcs	2, 0, cr1, cr8, cr0, {0}
     328:	08000001 	stmdaeq	r0, {r0}
     32c:	00037903 	andeq	r7, r3, r3, lsl #18
     330:	2e091200 	cdpcs	2, 0, cr1, cr9, cr0, {0}
     334:	0c000001 	stceq	0, cr0, [r0], {1}
     338:	00026503 	andeq	r6, r2, r3, lsl #10
     33c:	680c1200 	stmdavs	ip, {r9, ip}
     340:	10000003 	andne	r0, r0, r3
     344:	4b040500 	blmi	10174c <startup-0x1fefe8b4>
     348:	04000003 	streq	r0, [r0], #-3
     34c:	044a0801 	strbeq	r0, [sl], #-2049	; 0xfffff7ff
     350:	62090000 	andvs	r0, r9, #0
     354:	0a000003 	beq	368 <startup-0x1ffffc98>
     358:	00000362 	andeq	r0, r0, r2, ror #6
     35c:	00012e0a 	andeq	r2, r1, sl, lsl #28
     360:	04050000 	streq	r0, [r5], #-0
     364:	000002fc 	strdeq	r0, [r0], -ip
     368:	03520405 	cmpeq	r2, #83886080	; 0x5000000
     36c:	e5060000 	str	r0, [r6, #-0]
     370:	12000005 	andne	r0, r0, #5
     374:	0002fc0d 	andeq	pc, r2, sp, lsl #24
     378:	05241100 	streq	r1, [r4, #-256]!	; 0xffffff00
     37c:	03130000 	tsteq	r3, #0
     380:	00000275 	andeq	r0, r0, r5, ror r2
     384:	68900305 	ldmvs	r0, {r0, r2, r8, r9}
     388:	02042000 	andeq	r2, r4, #0
     38c:	00032407 	andeq	r2, r3, r7, lsl #8
     390:	05611000 	strbeq	r1, [r1, #-0]!
     394:	25010000 	strcs	r0, [r1, #-0]
     398:	0000012e 	andeq	r0, r0, lr, lsr #2
     39c:	32dc0305 	sbcscc	r0, ip, #335544320	; 0x14000000
     3a0:	19102000 	ldmdbne	r0, {sp}
     3a4:	01000001 	tsteq	r0, r1
     3a8:	00009e3d 	andeq	r9, r0, sp, lsr lr
     3ac:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
     3b0:	10200032 	eorne	r0, r0, r2, lsr r0
     3b4:	0000018b 	andeq	r0, r0, fp, lsl #3
     3b8:	009e3e01 	addseq	r3, lr, r1, lsl #28
     3bc:	03050000 	movweq	r0, #20480	; 0x5000
     3c0:	200032d0 	ldrdcs	r3, [r0], -r0
     3c4:	0004db10 	andeq	sp, r4, r0, lsl fp
     3c8:	9e3f0100 	rsflse	f0, f7, f0
     3cc:	05000000 	streq	r0, [r0, #-0]
     3d0:	0032e403 	eorseq	lr, r2, r3, lsl #8
     3d4:	67621220 	strbvs	r1, [r2, -r0, lsr #4]!
     3d8:	9e400100 	dvflss	f0, f0, f0
     3dc:	05000000 	streq	r0, [r0, #-0]
     3e0:	00326c03 	eorseq	r6, r2, r3, lsl #24
     3e4:	06351020 	ldrteq	r1, [r5], -r0, lsr #32
     3e8:	43010000 	movwmi	r0, #4096	; 0x1000
     3ec:	0000009e 	muleq	r0, lr, r0
     3f0:	324c0305 	subcc	r0, ip, #335544320	; 0x14000000
     3f4:	d0102000 	andsle	r2, r0, r0
     3f8:	01000004 	tsteq	r0, r4
     3fc:	00009e44 	andeq	r9, r0, r4, asr #28
     400:	d8030500 	stmdale	r3, {r8, sl}
     404:	10200032 	eorne	r0, r0, r2, lsr r0
     408:	0000005b 	andeq	r0, r0, fp, asr r0
     40c:	009e4501 	addseq	r4, lr, r1, lsl #10
     410:	03050000 	movweq	r0, #20480	; 0x5000
     414:	20003288 	andcs	r3, r0, r8, lsl #5
     418:	00035410 	andeq	r5, r3, r0, lsl r4
     41c:	9e460100 	dvflss	f0, f6, f0
     420:	05000000 	streq	r0, [r0, #-0]
     424:	0032f403 	eorseq	pc, r2, r3, lsl #8
     428:	04e71020 	strbteq	r1, [r7], #32
     42c:	47010000 	strmi	r0, [r1, -r0]
     430:	0000009e 	muleq	r0, lr, r0
     434:	32c00305 	sbccc	r0, r0, #335544320	; 0x14000000
     438:	fe102000 	cdp2	0, 1, cr2, cr0, cr0, {0}
     43c:	01000003 	tsteq	r0, r3
     440:	00009e48 	andeq	r9, r0, r8, asr #28
     444:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
     448:	10200032 	eorne	r0, r0, r2, lsr r0
     44c:	0000057f 	andeq	r0, r0, pc, ror r5
     450:	009e4901 	addseq	r4, lr, r1, lsl #18
     454:	03050000 	movweq	r0, #20480	; 0x5000
     458:	200032e0 	andcs	r3, r0, r0, ror #5
     45c:	0001bf10 	andeq	fp, r1, r0, lsl pc
     460:	9e4a0100 	dvflse	f0, f2, f0
     464:	05000000 	streq	r0, [r0, #-0]
     468:	0032a403 	eorseq	sl, r2, r3, lsl #8
     46c:	066b1020 	strbteq	r1, [fp], -r0, lsr #32
     470:	4b010000 	blmi	40478 <startup-0x1ffbfb88>
     474:	0000009e 	muleq	r0, lr, r0
     478:	325c0305 	subscc	r0, ip, #335544320	; 0x14000000
     47c:	48102000 	ldmdami	r0, {sp}
     480:	01000003 	tsteq	r0, r3
     484:	0000624d 	andeq	r6, r0, sp, asr #4
     488:	50030500 	andpl	r0, r3, r0, lsl #10
     48c:	10200032 	eorne	r0, r0, r2, lsr r0
     490:	0000020b 	andeq	r0, r0, fp, lsl #4
     494:	00624e01 	rsbeq	r4, r2, r1, lsl #28
     498:	03050000 	movweq	r0, #20480	; 0x5000
     49c:	200032a8 	andcs	r3, r0, r8, lsr #5
     4a0:	0001a910 	andeq	sl, r1, r0, lsl r9
     4a4:	624f0100 	subvs	r0, pc, #0, 2
     4a8:	05000000 	streq	r0, [r0, #-0]
     4ac:	00327003 	eorseq	r7, r2, r3
     4b0:	01ed1020 	mvneq	r1, r0, lsr #32
     4b4:	51010000 	mrspl	r0, (UNDEF: 1)
     4b8:	00000062 	andeq	r0, r0, r2, rrx
     4bc:	32e80305 	rsccc	r0, r8, #335544320	; 0x14000000
     4c0:	71102000 	tstvc	r0, r0
     4c4:	01000000 	mrseq	r0, (UNDEF: 0)
     4c8:	00006253 	andeq	r6, r0, r3, asr r2
     4cc:	28030500 	stmdacs	r3, {r8, sl}
     4d0:	10200032 	eorne	r0, r0, r2, lsr r0
     4d4:	00000423 	andeq	r0, r0, r3, lsr #8
     4d8:	00625401 	rsbeq	r5, r2, r1, lsl #8
     4dc:	03050000 	movweq	r0, #20480	; 0x5000
     4e0:	200032c4 	andcs	r3, r0, r4, asr #5
     4e4:	0002ef10 	andeq	lr, r2, r0, lsl pc
     4e8:	62550100 	subsvs	r0, r5, #0, 2
     4ec:	05000000 	streq	r0, [r0, #-0]
     4f0:	00329803 	eorseq	r9, r2, r3, lsl #16
     4f4:	04321020 	ldrteq	r1, [r2], #-32	; 0xffffffe0
     4f8:	56010000 	strpl	r0, [r1], -r0
     4fc:	00000062 	andeq	r0, r0, r2, rrx
     500:	32600305 	rsbcc	r0, r0, #335544320	; 0x14000000
     504:	d6102000 	ldrle	r2, [r0], -r0
     508:	01000005 	tsteq	r0, r5
     50c:	00006257 	andeq	r6, r0, r7, asr r2
     510:	40030500 	andmi	r0, r3, r0, lsl #10
     514:	10200032 	eorne	r0, r0, r2, lsr r0
     518:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     51c:	00625801 	rsbeq	r5, r2, r1, lsl #16
     520:	03050000 	movweq	r0, #20480	; 0x5000
     524:	2000327c 	andcs	r3, r0, ip, ror r2
     528:	00051510 	andeq	r1, r5, r0, lsl r5
     52c:	62590100 	subsvs	r0, r9, #0, 2
     530:	05000000 	streq	r0, [r0, #-0]
     534:	0032b403 	eorseq	fp, r2, r3, lsl #8
     538:	04091020 	streq	r1, [r9], #-32	; 0xffffffe0
     53c:	5a010000 	bpl	40544 <startup-0x1ffbfabc>
     540:	00000062 	andeq	r0, r0, r2, rrx
     544:	32340305 	eorscc	r0, r4, #335544320	; 0x14000000
     548:	15102000 	ldrne	r2, [r0, #-0]
     54c:	01000006 	tsteq	r0, r6
     550:	0000625b 	andeq	r6, r0, fp, asr r2
     554:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
     558:	10200032 	eorne	r0, r0, r2, lsr r0
     55c:	00000389 	andeq	r0, r0, r9, lsl #7
     560:	012e9101 			; <UNDEFINED> instruction: 0x012e9101
     564:	03050000 	movweq	r0, #20480	; 0x5000
     568:	20003204 	andcs	r3, r0, r4, lsl #4
     56c:	0004f110 	andeq	pc, r4, r0, lsl r1	; <UNPREDICTABLE>
     570:	2e920100 	fmlcss	f0, f2, f0
     574:	05000001 	streq	r0, [r0, #-1]
     578:	006c9003 	rsbeq	r9, ip, r3
     57c:	06661320 	strbteq	r1, [r6], -r0, lsr #6
     580:	93010000 	movwls	r0, #4096	; 0x1000
     584:	200001fc 	strdcs	r0, [r0], -ip
     588:	00000d78 	andeq	r0, r0, r8, ror sp
     58c:	083d9c01 	ldmdaeq	sp!, {r0, sl, fp, ip, pc}
     590:	91110000 	tstls	r1, r0
     594:	01000003 	tsteq	r0, r3
     598:	00014ca1 	andeq	r4, r1, r1, lsr #25
     59c:	bc910300 	ldclt	3, cr0, [r1], {0}
     5a0:	058a117f 	streq	r1, [sl, #383]	; 0x17f
     5a4:	a2010000 	andge	r0, r1, #0
     5a8:	000000a4 	andeq	r0, r0, r4, lsr #1
     5ac:	7fb09103 	svcvc	0x00b09103
     5b0:	00067611 	andeq	r7, r6, r1, lsl r6
     5b4:	3da30100 	stfccs	f0, [r3]
     5b8:	03000008 	movweq	r0, #8
     5bc:	117fa491 			; <UNDEFINED> instruction: 0x117fa491
     5c0:	0000048b 	andeq	r0, r0, fp, lsl #9
     5c4:	014cab01 	cmpeq	ip, r1, lsl #22
     5c8:	91030000 	mrsls	r0, (UNDEF: 3)
     5cc:	72117f80 	andsvc	r7, r1, #128, 30	; 0x200
     5d0:	01000001 	tsteq	r0, r1
     5d4:	0000a4ac 	andeq	sl, r0, ip, lsr #9
     5d8:	f4910300 			; <UNDEFINED> instruction: 0xf4910300
     5dc:	0555117e 	ldrbeq	r1, [r5, #-382]	; 0xfffffe82
     5e0:	ad010000 	stcge	0, cr0, [r1, #-0]
     5e4:	0000083d 	andeq	r0, r0, sp, lsr r8
     5e8:	7ee89103 	urdvce	f1, f3
     5ec:	00029311 	andeq	r9, r2, r1, lsl r3
     5f0:	4cb40100 	ldfmis	f0, [r4]
     5f4:	03000001 	movweq	r0, #1
     5f8:	117ec491 			; <UNDEFINED> instruction: 0x117ec491
     5fc:	000003d3 	ldrdeq	r0, [r0], -r3
     600:	00a4b501 	adceq	fp, r4, r1, lsl #10
     604:	91030000 	mrsls	r0, (UNDEF: 3)
     608:	ca117eb8 	bgt	4600f0 <startup-0x1fb9ff10>
     60c:	01000005 	tsteq	r0, r5
     610:	00083db6 			; <UNDEFINED> instruction: 0x00083db6
     614:	ac910300 	ldcge	3, cr0, [r1], {0}
     618:	012d117e 			; <UNDEFINED> instruction: 0x012d117e
     61c:	bd010000 	stclt	0, cr0, [r1, #-0]
     620:	0000014c 	andeq	r0, r0, ip, asr #2
     624:	7e889103 	sinvce	f1, f3
     628:	00054911 	andeq	r4, r5, r1, lsl r9
     62c:	a4be0100 	ldrtge	r0, [lr], #256	; 0x100
     630:	03000000 	movweq	r0, #0
     634:	117dfc91 			; <UNDEFINED> instruction: 0x117dfc91
     638:	00000165 	andeq	r0, r0, r5, ror #2
     63c:	083dbf01 	ldmdaeq	sp!, {r0, r8, r9, sl, fp, ip, sp, pc}
     640:	91030000 	mrsls	r0, (UNDEF: 3)
     644:	5d117df0 	ldcpl	13, cr7, [r1, #-960]	; 0xfffffc40
     648:	01000001 	tsteq	r0, r1
     64c:	00014cc6 	andeq	r4, r1, r6, asr #25
     650:	cc910300 	ldcgt	3, cr0, [r1], {0}
     654:	1619117d 			; <UNDEFINED> instruction: 0x1619117d
     658:	cb010000 	blgt	40660 <startup-0x1ffbf9a0>
     65c:	0000014c 	andeq	r0, r0, ip, asr #2
     660:	7da89103 	stfvcd	f1, [r8, #12]!
     664:	000c6011 	andeq	r6, ip, r1, lsl r0
     668:	4cd00100 	ldfmie	f0, [r0], {0}
     66c:	03000001 	movweq	r0, #1
     670:	117d8491 			; <UNDEFINED> instruction: 0x117d8491
     674:	00000038 	andeq	r0, r0, r8, lsr r0
     678:	014cd601 	cmpeq	ip, r1, lsl #12
     67c:	91030000 	mrsls	r0, (UNDEF: 3)
     680:	6d117ce0 	ldcvs	12, cr7, [r1, #-896]	; 0xfffffc80
     684:	01000005 	tsteq	r0, r5
     688:	00014cdc 	ldrdeq	r4, [r1], -ip
     68c:	bc910300 	ldclt	3, cr0, [r1], {0}
     690:	0573117c 	ldrbeq	r1, [r3, #-380]!	; 0xfffffe84
     694:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
     698:	0000014c 	andeq	r0, r0, ip, asr #2
     69c:	7c989103 	ldfvcd	f1, [r8], {3}
     6a0:	00057911 	andeq	r7, r5, r1, lsl r9
     6a4:	4ce00100 	stfmie	f0, [r0]
     6a8:	03000001 	movweq	r0, #1
     6ac:	117bf491 			; <UNDEFINED> instruction: 0x117bf491
     6b0:	000001db 	ldrdeq	r0, [r0], -fp
     6b4:	014ce201 	cmpeq	ip, r1, lsl #4
     6b8:	91030000 	mrsls	r0, (UNDEF: 3)
     6bc:	57117bd0 			; <UNDEFINED> instruction: 0x57117bd0
     6c0:	01000001 	tsteq	r0, r1
     6c4:	00014ce4 	andeq	r4, r1, r4, ror #25
     6c8:	ac910300 	ldcge	3, cr0, [r1], {0}
     6cc:	003f117b 	eorseq	r1, pc, fp, ror r1	; <UNPREDICTABLE>
     6d0:	ff010000 			; <UNDEFINED> instruction: 0xff010000
     6d4:	0000036e 	andeq	r0, r0, lr, ror #6
     6d8:	7b989103 	blvc	fe624aec <firstTime.4040+0xde61bde0>
     6dc:	00018514 	andeq	r8, r1, r4, lsl r5
     6e0:	01000100 	mrseq	r0, (UNDEF: 16)
     6e4:	0000036e 	andeq	r0, r0, lr, ror #6
     6e8:	7b849103 	blvc	fe124afc <firstTime.4040+0xde11bdf0>
     6ec:	0001b914 	andeq	fp, r1, r4, lsl r9
     6f0:	01010100 	mrseq	r0, (UNDEF: 17)
     6f4:	0000036e 	andeq	r0, r0, lr, ror #6
     6f8:	7af09103 	bvc	ffc24b0c <firstTime.4040+0xdfc1be00>
     6fc:	0001cf14 	andeq	ip, r1, r4, lsl pc
     700:	01020100 	mrseq	r0, (UNDEF: 18)
     704:	0000036e 	andeq	r0, r0, lr, ror #6
     708:	7adc9103 	bvc	ff724b1c <firstTime.4040+0xdf71be10>
     70c:	0001c914 	andeq	ip, r1, r4, lsl r9
     710:	01030100 	mrseq	r0, (UNDEF: 19)
     714:	0000036e 	andeq	r0, r0, lr, ror #6
     718:	7ac89103 	bvc	ff224b2c <firstTime.4040+0xdf21be20>
     71c:	0001d514 	andeq	sp, r1, r4, lsl r5
     720:	01040100 	mrseq	r0, (UNDEF: 20)
     724:	0000036e 	andeq	r0, r0, lr, ror #6
     728:	7ab49103 	bvc	fed24b3c <firstTime.4040+0xded1be30>
     72c:	00023414 	andeq	r3, r2, r4, lsl r4
     730:	01050100 	mrseq	r0, (UNDEF: 21)
     734:	0000036e 	andeq	r0, r0, lr, ror #6
     738:	7aa09103 	bvc	fe824b4c <firstTime.4040+0xde81be40>
     73c:	00021c14 	andeq	r1, r2, r4, lsl ip
     740:	01060100 	mrseq	r0, (UNDEF: 22)
     744:	0000036e 	andeq	r0, r0, lr, ror #6
     748:	7a8c9103 	bvc	fe324b5c <firstTime.4040+0xde31be50>
     74c:	0001f414 	andeq	pc, r1, r4, lsl r4	; <UNPREDICTABLE>
     750:	01070100 	mrseq	r0, (UNDEF: 23)
     754:	0000036e 	andeq	r0, r0, lr, ror #6
     758:	79f89103 	ldmibvc	r8!, {r0, r1, r8, ip, pc}^
     75c:	00023a14 	andeq	r3, r2, r4, lsl sl
     760:	01080100 	mrseq	r0, (UNDEF: 24)
     764:	0000036e 	andeq	r0, r0, lr, ror #6
     768:	79e49103 	stmibvc	r4!, {r0, r1, r8, ip, pc}^
     76c:	00065114 	andeq	r5, r6, r4, lsl r1
     770:	01090100 	mrseq	r0, (UNDEF: 25)
     774:	0000036e 	andeq	r0, r0, lr, ror #6
     778:	79d09103 	ldmibvc	r0, {r0, r1, r8, ip, pc}^
     77c:	00065814 	andeq	r5, r6, r4, lsl r8
     780:	010a0100 	mrseq	r0, (UNDEF: 26)
     784:	0000036e 	andeq	r0, r0, lr, ror #6
     788:	79bc9103 	ldmibvc	ip!, {r0, r1, r8, ip, pc}
     78c:	0005ad14 	andeq	sl, r5, r4, lsl sp
     790:	010b0100 	mrseq	r0, (UNDEF: 27)
     794:	0000036e 	andeq	r0, r0, lr, ror #6
     798:	79a89103 	stmibvc	r8!, {r0, r1, r8, ip, pc}
     79c:	00012114 	andeq	r2, r1, r4, lsl r1
     7a0:	011e0100 	tsteq	lr, r0, lsl #2
     7a4:	0000012e 	andeq	r0, r0, lr, lsr #2
     7a8:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
     7ac:	000001e1 	andeq	r0, r0, r1, ror #3
     7b0:	2e011f01 	cdpcs	15, 0, cr1, cr1, cr1, {0}
     7b4:	02000001 	andeq	r0, r0, #1
     7b8:	48146891 	ldmdami	r4, {r0, r4, r7, fp, sp, lr}
     7bc:	01000000 	mrseq	r0, (UNDEF: 0)
     7c0:	012e0120 			; <UNDEFINED> instruction: 0x012e0120
     7c4:	91020000 	mrsls	r0, (UNDEF: 2)
     7c8:	06411464 	strbeq	r1, [r1], -r4, ror #8
     7cc:	21010000 	mrscs	r0, (UNDEF: 1)
     7d0:	00012e01 	andeq	r2, r1, r1, lsl #28
     7d4:	60910200 	addsvs	r0, r1, r0, lsl #4
     7d8:	00074815 	andeq	r4, r7, r5, lsl r8
     7dc:	00081020 	andeq	r1, r8, r0, lsr #32
     7e0:	02891400 	addeq	r1, r9, #0, 8
     7e4:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
     7e8:	00012e01 	andeq	r2, r1, r1, lsl #28
     7ec:	98030500 	stmdals	r3, {r8, sl}
     7f0:	1420006c 	strtne	r0, [r0], #-108	; 0xffffff94
     7f4:	000003e5 	andeq	r0, r0, r5, ror #7
     7f8:	2e014901 	vmlacs.f16	s8, s2, s2	; <UNPREDICTABLE>
     7fc:	05000001 	streq	r0, [r0, #-1]
     800:	006c9c03 	rsbeq	r9, ip, r3, lsl #24
     804:	03371420 	teqeq	r7, #32, 8	; 0x20000000
     808:	4a010000 	bmi	40810 <startup-0x1ffbf7f0>
     80c:	00012e01 	andeq	r2, r1, r1, lsl #28
     810:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
     814:	1420006c 	strtne	r0, [r0], #-108	; 0xffffff94
     818:	0000059c 	muleq	r0, ip, r5
     81c:	2e019401 	cdpcs	4, 0, cr9, cr1, cr1, {0}
     820:	05000001 	streq	r0, [r0, #-1]
     824:	006ca003 	rsbeq	sl, ip, r3
     828:	05001420 	streq	r1, [r0, #-1056]	; 0xfffffbe0
     82c:	ab010000 	blge	40834 <startup-0x1ffbf7cc>
     830:	00012e01 	andeq	r2, r1, r1, lsl #28
     834:	08030500 	stmdaeq	r3, {r8, sl}
     838:	00200032 	eoreq	r0, r0, r2, lsr r0
     83c:	00a40b00 	adceq	r0, r4, r0, lsl #22
     840:	084d0000 	stmdaeq	sp, {}^	; <UNPREDICTABLE>
     844:	9a0f0000 	bls	3c084c <startup-0x1fc3f7b4>
     848:	00000001 	andeq	r0, r0, r1
     84c:	04171300 	ldreq	r1, [r7], #-768	; 0xfffffd00
     850:	5d010000 	stcpl	0, cr0, [r1, #-0]
     854:	20000034 	andcs	r0, r0, r4, lsr r0
     858:	000001c8 	andeq	r0, r0, r8, asr #3
     85c:	08ef9c01 	stmiaeq	pc!, {r0, sl, fp, ip, pc}^	; <UNPREDICTABLE>
     860:	37110000 	ldrcc	r0, [r1, -r0]
     864:	01000001 	tsteq	r0, r1
     868:	00009e5e 	andeq	r9, r0, lr, asr lr
     86c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     870:	00024011 	andeq	r4, r2, r1, lsl r0
     874:	9e620100 	powlss	f0, f2, f0
     878:	02000000 	andeq	r0, r0, #0
     87c:	50117091 	mulspl	r1, r1, r0
     880:	01000002 	tsteq	r0, r2
     884:	00009e66 	andeq	r9, r0, r6, ror #28
     888:	6c910200 	lfmvs	f0, 4, [r1], {0}
     88c:	0002b911 	andeq	fp, r2, r1, lsl r9
     890:	9e6a0100 	powlse	f0, f2, f0
     894:	02000000 	andeq	r0, r0, #0
     898:	c2116891 	andsgt	r6, r1, #9502720	; 0x910000
     89c:	01000002 	tsteq	r0, r2
     8a0:	00009e6e 	andeq	r9, r0, lr, ror #28
     8a4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     8a8:	0002cb11 	andeq	ip, r2, r1, lsl fp
     8ac:	9e720100 	rpwlss	f0, f2, f0
     8b0:	02000000 	andeq	r0, r0, #0
     8b4:	d4116091 	ldrle	r6, [r1], #-145	; 0xffffff6f
     8b8:	01000002 	tsteq	r0, r2
     8bc:	00009e76 	andeq	r9, r0, r6, ror lr
     8c0:	5c910200 	lfmpl	f0, 4, [r1], {0}
     8c4:	0002dd11 	andeq	sp, r2, r1, lsl sp
     8c8:	9e7a0100 	rpwlse	f0, f2, f0
     8cc:	02000000 	andeq	r0, r0, #0
     8d0:	e6115891 			; <UNDEFINED> instruction: 0xe6115891
     8d4:	01000002 	tsteq	r0, r2
     8d8:	00009e7d 	andeq	r9, r0, sp, ror lr
     8dc:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     8e0:	00006711 	andeq	r6, r0, r1, lsl r7
     8e4:	9e800100 	rmflss	f0, f0, f0
     8e8:	02000000 	andeq	r0, r0, #0
     8ec:	16005091 			; <UNDEFINED> instruction: 0x16005091
     8f0:	00000280 	andeq	r0, r0, r0, lsl #5
     8f4:	00102901 	andseq	r2, r0, r1, lsl #18
     8f8:	00242000 	eoreq	r2, r4, r0
     8fc:	9c010000 	stcls	0, cr0, [r1], {-0}
     900:	00017d17 	andeq	r7, r1, r7, lsl sp
     904:	00330100 	eorseq	r0, r3, r0, lsl #2
     908:	0c200000 	stceq	0, cr0, [r0], #-0
     90c:	01000000 	mrseq	r0, (UNDEF: 0)
     910:	01e0009c 			; <UNDEFINED> instruction: 0x01e0009c
     914:	00040000 	andeq	r0, r4, r0
     918:	0000013d 	andeq	r0, r0, sp, lsr r1
     91c:	00810104 	addeq	r0, r1, r4, lsl #2
     920:	950c0000 	strls	r0, [ip, #-0]
     924:	74000006 	strvc	r0, [r0], #-6
     928:	5620000f 	strtpl	r0, [r0], -pc
     92c:	e3000000 	movw	r0, #0
     930:	02000002 	andeq	r0, r0, #2
     934:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
     938:	03000000 	movweq	r0, #0
     93c:	00000306 	andeq	r0, r0, r6, lsl #6
     940:	004e0702 	subeq	r0, lr, r2, lsl #14
     944:	03000000 	movweq	r0, #0
     948:	0000065f 	andeq	r0, r0, pc, asr r6
     94c:	004e0802 	subeq	r0, lr, r2, lsl #16
     950:	03040000 	movweq	r0, #16384	; 0x4000
     954:	00001085 	andeq	r1, r0, r5, lsl #1
     958:	00550902 	subseq	r0, r5, r2, lsl #18
     95c:	00080000 	andeq	r0, r8, r0
     960:	2a070404 	bcs	1c1978 <startup-0x1fe3e688>
     964:	05000003 	streq	r0, [r0, #-3]
     968:	00005b04 	andeq	r5, r0, r4, lsl #22
     96c:	08010400 	stmdaeq	r1, {sl}
     970:	00000441 	andeq	r0, r0, r1, asr #8
     974:	0011d706 	andseq	sp, r1, r6, lsl #14
     978:	210a0200 	mrscs	r0, R10_fiq
     97c:	07000000 	streq	r0, [r0, -r0]
     980:	00000016 	andeq	r0, r0, r6, lsl r0
     984:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
     988:	03000000 	movweq	r0, #0
     98c:	0000052c 	andeq	r0, r0, ip, lsr #10
     990:	009e0703 	addseq	r0, lr, r3, lsl #14
     994:	03000000 	movweq	r0, #0
     998:	0000001d 	andeq	r0, r0, sp, lsl r0
     99c:	009e0803 	addseq	r0, lr, r3, lsl #16
     9a0:	03040000 	movweq	r0, #16384	; 0x4000
     9a4:	00000012 	andeq	r0, r0, r2, lsl r0
     9a8:	009e0903 	addseq	r0, lr, r3, lsl #18
     9ac:	00080000 	andeq	r0, r8, r0
     9b0:	00620405 	rsbeq	r0, r2, r5, lsl #8
     9b4:	aa060000 	bge	1809bc <startup-0x1fe7f644>
     9b8:	0300000c 	movweq	r0, #12
     9bc:	00006d0a 	andeq	r6, r0, sl, lsl #26
     9c0:	06240700 	strteq	r0, [r4], -r0, lsl #14
     9c4:	04240000 	strteq	r0, [r4], #-0
     9c8:	00012806 	andeq	r2, r1, r6, lsl #16
     9cc:	03de0300 	bicseq	r0, lr, #0, 6
     9d0:	07040000 	streq	r0, [r4, -r0]
     9d4:	00000128 	andeq	r0, r0, r8, lsr #2
     9d8:	06300300 	ldrteq	r0, [r0], -r0, lsl #6
     9dc:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     9e0:	0000012e 	andeq	r0, r0, lr, lsr #2
     9e4:	05970304 	ldreq	r0, [r7, #772]	; 0x304
     9e8:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     9ec:	0000012e 	andeq	r0, r0, lr, lsr #2
     9f0:	05c30308 	strbeq	r0, [r3, #776]	; 0x308
     9f4:	0c040000 	stceq	0, cr0, [r4], {-0}
     9f8:	00000146 	andeq	r0, r0, r6, asr #2
     9fc:	02ff030c 	rscseq	r0, pc, #12, 6	; 0x30000000
     a00:	0d040000 	stceq	0, cr0, [r4, #-0]
     a04:	00000146 	andeq	r0, r0, r6, asr #2
     a08:	03f00310 	mvnseq	r0, #16, 6	; 0x40000000
     a0c:	10040000 	andne	r0, r4, r0
     a10:	0000012e 	andeq	r0, r0, lr, lsr #2
     a14:	00520314 	subseq	r0, r2, r4, lsl r3
     a18:	11040000 	mrsne	r0, (UNDEF: 4)
     a1c:	0000012e 	andeq	r0, r0, lr, lsr #2
     a20:	036f0318 	cmneq	pc, #24, 6	; 0x60000000
     a24:	12040000 	andne	r0, r4, #0
     a28:	0000012e 	andeq	r0, r0, lr, lsr #2
     a2c:	037f031c 	cmneq	pc, #28, 6	; 0x70000000
     a30:	13040000 	movwne	r0, #16384	; 0x4000
     a34:	0000012e 	andeq	r0, r0, lr, lsr #2
     a38:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
     a3c:	000000a4 	andeq	r0, r0, r4, lsr #1
     a40:	69050408 	stmdbvs	r5, {r3, sl}
     a44:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     a48:	00000140 	andeq	r0, r0, r0, asr #2
     a4c:	0001400a 	andeq	r4, r1, sl
     a50:	04050000 	streq	r0, [r5], #-0
     a54:	000000af 	andeq	r0, r0, pc, lsr #1
     a58:	01350405 	teqeq	r5, r5, lsl #8
     a5c:	25060000 	strcs	r0, [r6, #-0]
     a60:	04000006 	streq	r0, [r0], #-6
     a64:	0000af15 	andeq	sl, r0, r5, lsl pc
     a68:	01620b00 	cmneq	r2, r0, lsl #22
     a6c:	01620000 	cmneq	r2, r0
     a70:	000c0000 	andeq	r0, ip, r0
     a74:	014c0405 	cmpeq	ip, r5, lsl #8
     a78:	c40d0000 	strgt	r0, [sp], #-0
     a7c:	04000004 	streq	r0, [r0], #-4
     a80:	0001571c 	andeq	r5, r1, ip, lsl r7
     a84:	03b50d00 			; <UNDEFINED> instruction: 0x03b50d00
     a88:	1d040000 	stcne	0, cr0, [r4, #-0]
     a8c:	0000012e 	andeq	r0, r0, lr, lsr #2
     a90:	9c070404 	cfstrsls	mvf0, [r7], {4}
     a94:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     a98:	00000168 	andeq	r0, r0, r8, ror #2
     a9c:	03050301 	movweq	r0, #21249	; 0x5301
     aa0:	200032f8 	strdcs	r3, [r0], -r8
     aa4:	0001730e 	andeq	r7, r1, lr, lsl #6
     aa8:	05040100 	streq	r0, [r4, #-256]	; 0xffffff00
     aac:	00320c03 	eorseq	r0, r2, r3, lsl #24
     ab0:	06840f20 	streq	r0, [r4], r0, lsr #30
     ab4:	0c010000 	stceq	0, cr0, [r1], {-0}
     ab8:	20000f84 	andcs	r0, r0, r4, lsl #31
     abc:	00000046 	andeq	r0, r0, r6, asr #32
     ac0:	01c39c01 	biceq	r9, r3, r1, lsl #24
     ac4:	c8100000 	ldmdagt	r0, {}	; <UNPREDICTABLE>
     ac8:	01000006 	tsteq	r0, r6
     acc:	0001620c 	andeq	r6, r1, ip, lsl #4
     ad0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ad4:	02ff1100 	rscseq	r1, pc, #0, 2
     ad8:	07010000 	streq	r0, [r1, -r0]
     adc:	20000f74 	andcs	r0, r0, r4, ror pc
     ae0:	00000010 	andeq	r0, r0, r0, lsl r0
     ae4:	c8109c01 	ldmdagt	r0, {r0, sl, fp, ip, pc}
     ae8:	01000006 	tsteq	r0, r6
     aec:	00016207 	andeq	r6, r1, r7, lsl #4
     af0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     af4:	052b0000 	streq	r0, [fp, #-0]!
     af8:	00040000 	andeq	r0, r4, r0
     afc:	00000223 	andeq	r0, r0, r3, lsr #4
     b00:	00810104 	addeq	r0, r1, r4, lsl #2
     b04:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
     b08:	cc000009 	stcgt	0, cr0, [r0], {9}
     b0c:	a820000f 	stmdage	r0!, {r0, r1, r2, r3}
     b10:	71000002 	tstvc	r0, r2
     b14:	02000003 	andeq	r0, r0, #3
     b18:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
     b1c:	03000000 	movweq	r0, #0
     b20:	00000306 	andeq	r0, r0, r6, lsl #6
     b24:	004e0702 	subeq	r0, lr, r2, lsl #14
     b28:	03000000 	movweq	r0, #0
     b2c:	0000065f 	andeq	r0, r0, pc, asr r6
     b30:	004e0802 	subeq	r0, lr, r2, lsl #16
     b34:	03040000 	movweq	r0, #16384	; 0x4000
     b38:	00001085 	andeq	r1, r0, r5, lsl #1
     b3c:	00550902 	subseq	r0, r5, r2, lsl #18
     b40:	00080000 	andeq	r0, r8, r0
     b44:	2a070404 	bcs	1c1b5c <startup-0x1fe3e4a4>
     b48:	05000003 	streq	r0, [r0, #-3]
     b4c:	00005b04 	andeq	r5, r0, r4, lsl #22
     b50:	08010400 	stmdaeq	r1, {sl}
     b54:	00000441 	andeq	r0, r0, r1, asr #8
     b58:	0011d706 	andseq	sp, r1, r6, lsl #14
     b5c:	210a0200 	mrscs	r0, R10_fiq
     b60:	07000000 	streq	r0, [r0, -r0]
     b64:	00000016 	andeq	r0, r0, r6, lsl r0
     b68:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
     b6c:	03000000 	movweq	r0, #0
     b70:	0000052c 	andeq	r0, r0, ip, lsr #10
     b74:	009e0703 	addseq	r0, lr, r3, lsl #14
     b78:	03000000 	movweq	r0, #0
     b7c:	0000001d 	andeq	r0, r0, sp, lsl r0
     b80:	009e0803 	addseq	r0, lr, r3, lsl #16
     b84:	03040000 	movweq	r0, #16384	; 0x4000
     b88:	00000012 	andeq	r0, r0, r2, lsl r0
     b8c:	009e0903 	addseq	r0, lr, r3, lsl #18
     b90:	00080000 	andeq	r0, r8, r0
     b94:	00620405 	rsbeq	r0, r2, r5, lsl #8
     b98:	aa060000 	bge	180ba0 <startup-0x1fe7f460>
     b9c:	0300000c 	movweq	r0, #12
     ba0:	00006d0a 	andeq	r6, r0, sl, lsl #26
     ba4:	06240700 	strteq	r0, [r4], -r0, lsl #14
     ba8:	04240000 	strteq	r0, [r4], #-0
     bac:	00012806 	andeq	r2, r1, r6, lsl #16
     bb0:	03de0300 	bicseq	r0, lr, #0, 6
     bb4:	07040000 	streq	r0, [r4, -r0]
     bb8:	00000128 	andeq	r0, r0, r8, lsr #2
     bbc:	06300300 	ldrteq	r0, [r0], -r0, lsl #6
     bc0:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     bc4:	0000012e 	andeq	r0, r0, lr, lsr #2
     bc8:	05970304 	ldreq	r0, [r7, #772]	; 0x304
     bcc:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     bd0:	0000012e 	andeq	r0, r0, lr, lsr #2
     bd4:	05c30308 	strbeq	r0, [r3, #776]	; 0x308
     bd8:	0c040000 	stceq	0, cr0, [r4], {-0}
     bdc:	00000146 	andeq	r0, r0, r6, asr #2
     be0:	02ff030c 	rscseq	r0, pc, #12, 6	; 0x30000000
     be4:	0d040000 	stceq	0, cr0, [r4, #-0]
     be8:	00000146 	andeq	r0, r0, r6, asr #2
     bec:	03f00310 	mvnseq	r0, #16, 6	; 0x40000000
     bf0:	10040000 	andne	r0, r4, r0
     bf4:	0000012e 	andeq	r0, r0, lr, lsr #2
     bf8:	00520314 	subseq	r0, r2, r4, lsl r3
     bfc:	11040000 	mrsne	r0, (UNDEF: 4)
     c00:	0000012e 	andeq	r0, r0, lr, lsr #2
     c04:	036f0318 	cmneq	pc, #24, 6	; 0x60000000
     c08:	12040000 	andne	r0, r4, #0
     c0c:	0000012e 	andeq	r0, r0, lr, lsr #2
     c10:	037f031c 	cmneq	pc, #28, 6	; 0x70000000
     c14:	13040000 	movwne	r0, #16384	; 0x4000
     c18:	0000012e 	andeq	r0, r0, lr, lsr #2
     c1c:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
     c20:	000000a4 	andeq	r0, r0, r4, lsr #1
     c24:	69050408 	stmdbvs	r5, {r3, sl}
     c28:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     c2c:	00000140 	andeq	r0, r0, r0, asr #2
     c30:	0001400a 	andeq	r4, r1, sl
     c34:	04050000 	streq	r0, [r5], #-0
     c38:	000000af 	andeq	r0, r0, pc, lsr #1
     c3c:	01350405 	teqeq	r5, r5, lsl #8
     c40:	25060000 	strcs	r0, [r6, #-0]
     c44:	04000006 	streq	r0, [r0], #-6
     c48:	0000af15 	andeq	sl, r0, r5, lsl pc
     c4c:	01620b00 	cmneq	r2, r0, lsl #22
     c50:	01620000 	cmneq	r2, r0
     c54:	000c0000 	andeq	r0, ip, r0
     c58:	014c0405 	cmpeq	ip, r5, lsl #8
     c5c:	c40d0000 	strgt	r0, [sp], #-0
     c60:	04000004 	streq	r0, [r0], #-4
     c64:	0001571c 	andeq	r5, r1, ip, lsl r7
     c68:	03b50d00 			; <UNDEFINED> instruction: 0x03b50d00
     c6c:	1d040000 	stcne	0, cr0, [r4, #-0]
     c70:	0000012e 	andeq	r0, r0, lr, lsr #2
     c74:	00005b0b 	andeq	r5, r0, fp, lsl #22
     c78:	00018e00 	andeq	r8, r1, r0, lsl #28
     c7c:	018e0e00 	orreq	r0, lr, r0, lsl #28
     c80:	000b0000 	andeq	r0, fp, r0
     c84:	9c070404 	cfstrsls	mvf0, [r7], {4}
     c88:	0f000003 	svceq	0x00000003
     c8c:	000008cd 	andeq	r0, r0, sp, asr #17
     c90:	017e0305 	cmneq	lr, r5, lsl #6
     c94:	03050000 	movweq	r0, #20480	; 0x5000
     c98:	20006ca4 	andcs	r6, r0, r4, lsr #25
     c9c:	0007c70f 	andeq	ip, r7, pc, lsl #14
     ca0:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
     ca4:	05000001 	streq	r0, [r0, #-1]
     ca8:	006cb003 	rsbeq	fp, ip, r3
     cac:	07e20f20 	strbeq	r0, [r2, r0, lsr #30]!
     cb0:	03070000 	movweq	r0, #28672	; 0x7000
     cb4:	0000017e 	andeq	r0, r0, lr, ror r1
     cb8:	6cbc0305 	ldcvs	3, cr0, [ip], #20
     cbc:	430f2000 	movwmi	r2, #61440	; 0xf000
     cc0:	08000007 	stmdaeq	r0, {r0, r1, r2}
     cc4:	00017e03 	andeq	r7, r1, r3, lsl #28
     cc8:	c8030500 	stmdagt	r3, {r8, sl}
     ccc:	0f20006c 	svceq	0x0020006c
     cd0:	000007f3 	strdeq	r0, [r0], -r3
     cd4:	017e0309 	cmneq	lr, r9, lsl #6
     cd8:	03050000 	movweq	r0, #20480	; 0x5000
     cdc:	20006cd4 	ldrdcs	r6, [r0], -r4
     ce0:	0009350f 	andeq	r3, r9, pc, lsl #10
     ce4:	7e030a00 	vmlavc.f32	s0, s6, s0
     ce8:	05000001 	streq	r0, [r0, #-1]
     cec:	006ce003 	rsbeq	lr, ip, r3
     cf0:	08b10f20 	ldmeq	r1!, {r5, r8, r9, sl, fp}
     cf4:	030b0000 	movweq	r0, #45056	; 0xb000
     cf8:	0000017e 	andeq	r0, r0, lr, ror r1
     cfc:	6cec0305 	stclvs	3, cr0, [ip], #20
     d00:	160f2000 	strne	r2, [pc], -r0
     d04:	0c000008 	stceq	0, cr0, [r0], {8}
     d08:	00017e03 	andeq	r7, r1, r3, lsl #28
     d0c:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
     d10:	0f20006c 	svceq	0x0020006c
     d14:	00000753 	andeq	r0, r0, r3, asr r7
     d18:	017e030d 	cmneq	lr, sp, lsl #6
     d1c:	03050000 	movweq	r0, #20480	; 0x5000
     d20:	20006d04 	andcs	r6, r0, r4, lsl #26
     d24:	0007810f 	andeq	r8, r7, pc, lsl #2
     d28:	7e030e00 	cdpvc	14, 0, cr0, cr3, cr0, {0}
     d2c:	05000001 	streq	r0, [r0, #-1]
     d30:	006d1003 	rsbeq	r1, sp, r3
     d34:	08630f20 	stmdaeq	r3!, {r5, r8, r9, sl, fp}^
     d38:	030f0000 	movweq	r0, #61440	; 0xf000
     d3c:	0000017e 	andeq	r0, r0, lr, ror r1
     d40:	6d1c0305 	ldcvs	3, cr0, [ip, #-20]	; 0xffffffec
     d44:	07102000 	ldreq	r2, [r0, -r0]
     d48:	01000007 	tsteq	r0, r7
     d4c:	00009e11 	andeq	r9, r0, r1, lsl lr
     d50:	b8030500 	stmdalt	r3, {r8, sl}
     d54:	10200035 	eorne	r0, r0, r5, lsr r0
     d58:	000006d7 	ldrdeq	r0, [r0], -r7
     d5c:	009e1201 	addseq	r1, lr, r1, lsl #4
     d60:	03050000 	movweq	r0, #20480	; 0x5000
     d64:	200035d0 	ldrdcs	r3, [r0], -r0
     d68:	00072d10 	andeq	r2, r7, r0, lsl sp
     d6c:	9e130100 	muflss	f0, f3, f0
     d70:	05000000 	streq	r0, [r0, #-0]
     d74:	00348803 	eorseq	r8, r4, r3, lsl #16
     d78:	080c1020 	stmdaeq	ip, {r5, ip}
     d7c:	14010000 	strne	r0, [r1], #-0
     d80:	0000009e 	muleq	r0, lr, r0
     d84:	35cc0305 	strbcc	r0, [ip, #773]	; 0x305
     d88:	d7102000 	ldrle	r2, [r0, -r0]
     d8c:	01000007 	tsteq	r0, r7
     d90:	00009e15 	andeq	r9, r0, r5, lsl lr
     d94:	a4030500 	strge	r0, [r3], #-1280	; 0xfffffb00
     d98:	10200035 	eorne	r0, r0, r5, lsr r0
     d9c:	000006ef 	andeq	r0, r0, pc, ror #13
     da0:	009e1601 	addseq	r1, lr, r1, lsl #12
     da4:	03050000 	movweq	r0, #20480	; 0x5000
     da8:	20003498 	mulcs	r0, r8, r4
     dac:	00076410 	andeq	r6, r7, r0, lsl r4
     db0:	9e170100 	muflss	f0, f7, f0
     db4:	05000000 	streq	r0, [r0, #-0]
     db8:	0035c803 	eorseq	ip, r5, r3, lsl #16
     dbc:	088a1020 	stmeq	sl, {r5, ip}
     dc0:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
     dc4:	0000009e 	muleq	r0, lr, r0
     dc8:	35840305 	strcc	r0, [r4, #773]	; 0x305
     dcc:	38102000 	ldmdacc	r0, {sp}
     dd0:	01000007 	tsteq	r0, r7
     dd4:	00009e19 	andeq	r9, r0, r9, lsl lr
     dd8:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
     ddc:	10200034 	eorne	r0, r0, r4, lsr r0
     de0:	000006cd 	andeq	r0, r0, sp, asr #13
     de4:	009e1a01 	addseq	r1, lr, r1, lsl #20
     de8:	03050000 	movweq	r0, #20480	; 0x5000
     dec:	200035a0 	andcs	r3, r0, r0, lsr #11
     df0:	0007a510 	andeq	sl, r7, r0, lsl r5
     df4:	9e1b0100 	muflse	f0, f3, f0
     df8:	05000000 	streq	r0, [r0, #-0]
     dfc:	0035a803 	eorseq	sl, r5, r3, lsl #16
     e00:	071f1020 	ldreq	r1, [pc, -r0, lsr #32]
     e04:	1d010000 	stcne	0, cr0, [r1, #-0]
     e08:	00000062 	andeq	r0, r0, r2, rrx
     e0c:	34c00305 	strbcc	r0, [r0], #773	; 0x305
     e10:	94102000 	ldrls	r2, [r0], #-0
     e14:	01000008 	tsteq	r0, r8
     e18:	0000621e 	andeq	r6, r0, lr, lsl r2
     e1c:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
     e20:	10200035 	eorne	r0, r0, r5, lsr r0
     e24:	00000840 	andeq	r0, r0, r0, asr #16
     e28:	00621f01 	rsbeq	r1, r2, r1, lsl #30
     e2c:	03050000 	movweq	r0, #20480	; 0x5000
     e30:	20003588 	andcs	r3, r0, r8, lsl #11
     e34:	0006e110 	andeq	lr, r6, r0, lsl r1
     e38:	62200100 	eorvs	r0, r0, #0, 2
     e3c:	05000000 	streq	r0, [r0, #-0]
     e40:	0034b403 	eorseq	fp, r4, r3, lsl #8
     e44:	08df1020 	ldmeq	pc, {r5, ip}^	; <UNPREDICTABLE>
     e48:	21010000 	mrscs	r0, (UNDEF: 1)
     e4c:	00000062 	andeq	r0, r0, r2, rrx
     e50:	35bc0305 	ldrcc	r0, [ip, #773]!	; 0x305
     e54:	11102000 	tstne	r0, r0
     e58:	01000007 	tsteq	r0, r7
     e5c:	00006222 	andeq	r6, r0, r2, lsr #4
     e60:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
     e64:	10200035 	eorne	r0, r0, r5, lsr r0
     e68:	00000826 	andeq	r0, r0, r6, lsr #16
     e6c:	00622301 	rsbeq	r2, r2, r1, lsl #6
     e70:	03050000 	movweq	r0, #20480	; 0x5000
     e74:	2000348c 	andcs	r3, r0, ip, lsl #9
     e78:	0006f910 	andeq	pc, r6, r0, lsl r9	; <UNPREDICTABLE>
     e7c:	62240100 	eorvs	r0, r4, #0, 2
     e80:	05000000 	streq	r0, [r0, #-0]
     e84:	00349c03 	eorseq	r9, r4, r3, lsl #24
     e88:	08a21020 	stmiaeq	r2!, {r5, ip}
     e8c:	25010000 	strcs	r0, [r1, #-0]
     e90:	00000062 	andeq	r0, r0, r2, rrx
     e94:	34d80305 	ldrbcc	r0, [r8], #773	; 0x305
     e98:	b9102000 	ldmdblt	r0, {sp}
     e9c:	01000007 	tsteq	r0, r7
     ea0:	00006226 	andeq	r6, r0, r6, lsr #4
     ea4:	60030500 	andvs	r0, r3, r0, lsl #10
     ea8:	10200035 	eorne	r0, r0, r5, lsr r0
     eac:	000008f9 	strdeq	r0, [r0], -r9
     eb0:	00622701 	rsbeq	r2, r2, r1, lsl #14
     eb4:	03050000 	movweq	r0, #20480	; 0x5000
     eb8:	20003594 	mulcs	r0, r4, r5
     ebc:	00080410 	andeq	r0, r8, r0, lsl r4
     ec0:	4c2a0100 	stfmis	f0, [sl], #-0
     ec4:	05000001 	streq	r0, [r0, #-1]
     ec8:	0034f403 	eorseq	pc, r4, r3, lsl #8
     ecc:	087f1020 	ldmdaeq	pc!, {r5, ip}^	; <UNPREDICTABLE>
     ed0:	2b010000 	blcs	40ed8 <startup-0x1ffbf128>
     ed4:	000000a4 	andeq	r0, r0, r4, lsr #1
     ed8:	34e40305 	strbtcc	r0, [r4], #773	; 0x305
     edc:	ee102000 	cdp	0, 1, cr2, cr0, cr0, {0}
     ee0:	01000008 	tsteq	r0, r8
     ee4:	0000a42c 	andeq	sl, r0, ip, lsr #8
     ee8:	a8030500 	stmdage	r3, {r8, sl}
     eec:	10200034 	eorne	r0, r0, r4, lsr r0
     ef0:	00000791 	muleq	r0, r1, r7
     ef4:	00a42d01 	adceq	r2, r4, r1, lsl #26
     ef8:	03050000 	movweq	r0, #20480	; 0x5000
     efc:	200034cc 	andcs	r3, r0, ip, asr #9
     f00:	00083510 	andeq	r3, r8, r0, lsl r5
     f04:	a42e0100 	strtge	r0, [lr], #-256	; 0xffffff00
     f08:	05000000 	streq	r0, [r0, #-0]
     f0c:	00357803 	eorseq	r7, r5, r3, lsl #16
     f10:	08c21020 	stmiaeq	r2, {r5, ip}^
     f14:	2f010000 	svccs	0x00010000
     f18:	000000a4 	andeq	r0, r0, r4, lsr #1
     f1c:	35180305 	ldrcc	r0, [r8, #-773]	; 0xfffffcfb
     f20:	a40b2000 	strge	r2, [fp], #-0
     f24:	3c000000 	stccc	0, cr0, [r0], {-0}
     f28:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     f2c:	0000018e 	andeq	r0, r0, lr, lsl #3
     f30:	74100004 	ldrvc	r0, [r0], #-4
     f34:	01000008 	tsteq	r0, r8
     f38:	00042c30 	andeq	r2, r4, r0, lsr ip
     f3c:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
     f40:	11200035 			; <UNDEFINED> instruction: 0x11200035
     f44:	00000859 	andeq	r0, r0, r9, asr r8
     f48:	11505f01 	cmpne	r0, r1, lsl #30
     f4c:	01242000 			; <UNDEFINED> instruction: 0x01242000
     f50:	9c010000 	stcls	0, cr0, [r1], {-0}
     f54:	00000482 	andeq	r0, r0, r2, lsl #9
     f58:	00080412 	andeq	r0, r8, r2, lsl r4
     f5c:	625f0100 	subsvs	r0, pc, #0, 2
     f60:	02000001 	andeq	r0, r0, #1
     f64:	4f0f6c91 	svcmi	0x000f6c91
     f68:	01000008 	tsteq	r0, r8
     f6c:	00012e60 	andeq	r2, r1, r0, ror #28
     f70:	28030500 	stmdacs	r3, {r8, sl}
     f74:	0020006d 	eoreq	r0, r0, sp, rrx
     f78:	00041713 	andeq	r1, r4, r3, lsl r7
     f7c:	cc310100 	ldfgts	f0, [r1], #-0
     f80:	8420000f 	strthi	r0, [r0], #-15
     f84:	01000001 	tsteq	r0, r1
     f88:	079c0f9c 			; <UNDEFINED> instruction: 0x079c0f9c
     f8c:	32010000 	andcc	r0, r1, #0
     f90:	0000009e 	muleq	r0, lr, r0
     f94:	0f749102 	svceq	0x00749102
     f98:	0000076f 	andeq	r0, r0, pc, ror #14
     f9c:	009e3601 	addseq	r3, lr, r1, lsl #12
     fa0:	91020000 	mrsls	r0, (UNDEF: 2)
     fa4:	07b00f70 			; <UNDEFINED> instruction: 0x07b00f70
     fa8:	3a010000 	bcc	40fb0 <startup-0x1ffbf050>
     fac:	0000009e 	muleq	r0, lr, r0
     fb0:	0f6c9102 	svceq	0x006c9102
     fb4:	00000778 	andeq	r0, r0, r8, ror r7
     fb8:	009e3e01 	addseq	r3, lr, r1, lsl #28
     fbc:	91020000 	mrsls	r0, (UNDEF: 2)
     fc0:	02b90f68 	adcseq	r0, r9, #104, 30	; 0x1a0
     fc4:	42010000 	andmi	r0, r1, #0
     fc8:	0000009e 	muleq	r0, lr, r0
     fcc:	0f649102 	svceq	0x00649102
     fd0:	000002c2 	andeq	r0, r0, r2, asr #5
     fd4:	009e4601 	addseq	r4, lr, r1, lsl #12
     fd8:	91020000 	mrsls	r0, (UNDEF: 2)
     fdc:	02cb0f60 	sbceq	r0, fp, #96, 30	; 0x180
     fe0:	4a010000 	bmi	40fe8 <startup-0x1ffbf018>
     fe4:	0000009e 	muleq	r0, lr, r0
     fe8:	0f5c9102 	svceq	0x005c9102
     fec:	000002d4 	ldrdeq	r0, [r0], -r4
     ff0:	009e4e01 	addseq	r4, lr, r1, lsl #28
     ff4:	91020000 	mrsls	r0, (UNDEF: 2)
     ff8:	02dd0f58 	sbcseq	r0, sp, #88, 30	; 0x160
     ffc:	52010000 	andpl	r0, r1, #0
    1000:	0000009e 	muleq	r0, lr, r0
    1004:	0f549102 	svceq	0x00549102
    1008:	000002e6 	andeq	r0, r0, r6, ror #5
    100c:	009e5601 	addseq	r5, lr, r1, lsl #12
    1010:	91020000 	mrsls	r0, (UNDEF: 2)
    1014:	00670f50 	rsbeq	r0, r7, r0, asr pc
    1018:	5a010000 	bpl	41020 <startup-0x1ffbefe0>
    101c:	0000009e 	muleq	r0, lr, r0
    1020:	004c9102 	subeq	r9, ip, r2, lsl #2
    1024:	0001f700 	andeq	pc, r1, r0, lsl #14
    1028:	23000400 	movwcs	r0, #1024	; 0x400
    102c:	04000003 	streq	r0, [r0], #-3
    1030:	00008101 	andeq	r8, r0, r1, lsl #2
    1034:	097e0c00 	ldmdbeq	lr!, {sl, fp}^
    1038:	12740000 	rsbsne	r0, r4, #0
    103c:	01982000 	orrseq	r2, r8, r0
    1040:	04f90000 	ldrbteq	r0, [r9], #0
    1044:	04020000 	streq	r0, [r2], #-0
    1048:	00032a07 	andeq	r2, r3, r7, lsl #20
    104c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1050:	00000324 	andeq	r0, r0, r4, lsr #6
    1054:	41080102 	tstmi	r8, r2, lsl #2
    1058:	03000004 	movweq	r0, #4
    105c:	6305020c 	movwvs	r0, #21004	; 0x520c
    1060:	04000000 	streq	r0, [r0], #-0
    1064:	00000306 	andeq	r0, r0, r6, lsl #6
    1068:	00210702 	eoreq	r0, r1, r2, lsl #14
    106c:	04000000 	streq	r0, [r0], #-0
    1070:	0000065f 	andeq	r0, r0, pc, asr r6
    1074:	00210802 	eoreq	r0, r1, r2, lsl #16
    1078:	04040000 	streq	r0, [r4], #-0
    107c:	00001085 	andeq	r1, r0, r5, lsl #1
    1080:	00630902 	rsbeq	r0, r3, r2, lsl #18
    1084:	00080000 	andeq	r0, r8, r0
    1088:	002f0405 	eoreq	r0, pc, r5, lsl #8
    108c:	d7060000 	strle	r0, [r6, -r0]
    1090:	02000011 	andeq	r0, r0, #17
    1094:	0000360a 	andeq	r3, r0, sl, lsl #12
    1098:	00160700 	andseq	r0, r6, r0, lsl #14
    109c:	030c0000 	movweq	r0, #49152	; 0xc000
    10a0:	0000a506 	andeq	sl, r0, r6, lsl #10
    10a4:	052c0400 	streq	r0, [ip, #-1024]!	; 0xfffffc00
    10a8:	07030000 	streq	r0, [r3, -r0]
    10ac:	000000a5 	andeq	r0, r0, r5, lsr #1
    10b0:	001d0400 	andseq	r0, sp, r0, lsl #8
    10b4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    10b8:	000000a5 	andeq	r0, r0, r5, lsr #1
    10bc:	00120404 	andseq	r0, r2, r4, lsl #8
    10c0:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    10c4:	000000a5 	andeq	r0, r0, r5, lsr #1
    10c8:	04050008 	streq	r0, [r5], #-8
    10cc:	00000069 	andeq	r0, r0, r9, rrx
    10d0:	000caa06 	andeq	sl, ip, r6, lsl #20
    10d4:	740a0300 	strvc	r0, [sl], #-768	; 0xfffffd00
    10d8:	07000000 	streq	r0, [r0, -r0]
    10dc:	00000624 	andeq	r0, r0, r4, lsr #12
    10e0:	2f060424 	svccs	0x00060424
    10e4:	04000001 	streq	r0, [r0], #-1
    10e8:	000003de 	ldrdeq	r0, [r0], -lr
    10ec:	012f0704 			; <UNDEFINED> instruction: 0x012f0704
    10f0:	04000000 	streq	r0, [r0], #-0
    10f4:	00000630 	andeq	r0, r0, r0, lsr r6
    10f8:	01350804 	teqeq	r5, r4, lsl #16
    10fc:	04040000 	streq	r0, [r4], #-0
    1100:	00000597 	muleq	r0, r7, r5
    1104:	01350904 	teqeq	r5, r4, lsl #18
    1108:	04080000 	streq	r0, [r8], #-0
    110c:	000005c3 	andeq	r0, r0, r3, asr #11
    1110:	014d0c04 	cmpeq	sp, r4, lsl #24
    1114:	040c0000 	streq	r0, [ip], #-0
    1118:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    111c:	014d0d04 	cmpeq	sp, r4, lsl #26
    1120:	04100000 	ldreq	r0, [r0], #-0
    1124:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1128:	01351004 	teqeq	r5, r4
    112c:	04140000 	ldreq	r0, [r4], #-0
    1130:	00000052 	andeq	r0, r0, r2, asr r0
    1134:	01351104 	teqeq	r5, r4, lsl #2
    1138:	04180000 	ldreq	r0, [r8], #-0
    113c:	0000036f 	andeq	r0, r0, pc, ror #6
    1140:	01351204 	teqeq	r5, r4, lsl #4
    1144:	041c0000 	ldreq	r0, [ip], #-0
    1148:	0000037f 	andeq	r0, r0, pc, ror r3
    114c:	01351304 	teqeq	r5, r4, lsl #6
    1150:	00200000 	eoreq	r0, r0, r0
    1154:	00ab0405 	adceq	r0, fp, r5, lsl #8
    1158:	04080000 	streq	r0, [r8], #-0
    115c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1160:	01470900 	cmpeq	r7, r0, lsl #18
    1164:	470a0000 	strmi	r0, [sl, -r0]
    1168:	00000001 	andeq	r0, r0, r1
    116c:	00b60405 	adcseq	r0, r6, r5, lsl #8
    1170:	04050000 	streq	r0, [r5], #-0
    1174:	0000013c 	andeq	r0, r0, ip, lsr r1
    1178:	00062506 	andeq	r2, r6, r6, lsl #10
    117c:	b6150400 	ldrlt	r0, [r5], -r0, lsl #8
    1180:	0b000000 	bleq	1188 <startup-0x1fffee78>
    1184:	00000169 	andeq	r0, r0, r9, ror #2
    1188:	00000169 	andeq	r0, r0, r9, ror #2
    118c:	0405000c 	streq	r0, [r5], #-12
    1190:	00000153 	andeq	r0, r0, r3, asr r1
    1194:	0004c40d 	andeq	ip, r4, sp, lsl #8
    1198:	5e1c0400 	cfmulspl	mvf0, mvf12, mvf0
    119c:	0d000001 	stceq	0, cr0, [r0, #-4]
    11a0:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    11a4:	01351d04 	teqeq	r5, r4, lsl #26
    11a8:	ad0e0000 	stcge	0, cr0, [lr, #-0]
    11ac:	01000009 	tsteq	r0, r9
    11b0:	00127406 	andseq	r7, r2, r6, lsl #8
    11b4:	00019820 	andeq	r9, r1, r0, lsr #16
    11b8:	0f9c0100 	svceq	0x009c0100
    11bc:	000006c8 	andeq	r0, r0, r8, asr #13
    11c0:	01690601 	cmneq	r9, r1, lsl #12
    11c4:	91020000 	mrsls	r0, (UNDEF: 2)
    11c8:	09541074 	ldmdbeq	r4, {r2, r4, r5, r6, ip}^
    11cc:	10010000 	andne	r0, r1, r0
    11d0:	00000135 	andeq	r0, r0, r5, lsr r1
    11d4:	32100305 	andscc	r0, r0, #335544320	; 0x14000000
    11d8:	45102000 	ldrmi	r2, [r0, #-0]
    11dc:	01000009 	tsteq	r0, r9
    11e0:	00013511 	andeq	r3, r1, r1, lsl r5
    11e4:	18030500 	stmdane	r3, {r8, sl}
    11e8:	10200032 	eorne	r0, r0, r2, lsr r0
    11ec:	00000970 	andeq	r0, r0, r0, ror r9
    11f0:	01351201 	teqeq	r5, r1, lsl #4
    11f4:	03050000 	movweq	r0, #20480	; 0x5000
    11f8:	20003220 	andcs	r3, r0, r0, lsr #4
    11fc:	00096910 	andeq	r6, r9, r0, lsl r9
    1200:	35130100 	ldrcc	r0, [r3, #-256]	; 0xffffff00
    1204:	05000001 	streq	r0, [r0, #-1]
    1208:	00321c03 	eorseq	r1, r2, r3, lsl #24
    120c:	09621020 	stmdbeq	r2!, {r5, ip}^
    1210:	14010000 	strne	r0, [r1], #-0
    1214:	00000135 	andeq	r0, r0, r5, lsr r1
    1218:	32140305 	andscc	r0, r4, #335544320	; 0x14000000
    121c:	00002000 	andeq	r2, r0, r0
    1220:	00000641 	andeq	r0, r0, r1, asr #12
    1224:	03f10004 	mvnseq	r0, #4
    1228:	01040000 	mrseq	r0, (UNDEF: 4)
    122c:	00000081 	andeq	r0, r0, r1, lsl #1
    1230:	000c2e0c 	andeq	r2, ip, ip, lsl #28
    1234:	00140c00 	andseq	r0, r4, r0, lsl #24
    1238:	00036420 	andeq	r6, r3, r0, lsr #8
    123c:	0005c300 	andeq	ip, r5, r0, lsl #6
    1240:	020c0200 	andeq	r0, ip, #0, 4
    1244:	00004e05 	andeq	r4, r0, r5, lsl #28
    1248:	03060300 	movweq	r0, #25344	; 0x6300
    124c:	07020000 	streq	r0, [r2, -r0]
    1250:	0000004e 	andeq	r0, r0, lr, asr #32
    1254:	065f0300 	ldrbeq	r0, [pc], -r0, lsl #6
    1258:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    125c:	0000004e 	andeq	r0, r0, lr, asr #32
    1260:	10850304 	addne	r0, r5, r4, lsl #6
    1264:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1268:	00000055 	andeq	r0, r0, r5, asr r0
    126c:	04040008 	streq	r0, [r4], #-8
    1270:	00032a07 	andeq	r2, r3, r7, lsl #20
    1274:	5b040500 	blpl	10267c <startup-0x1fefd984>
    1278:	04000000 	streq	r0, [r0], #-0
    127c:	04410801 	strbeq	r0, [r1], #-2049	; 0xfffff7ff
    1280:	d7060000 	strle	r0, [r6, -r0]
    1284:	02000011 	andeq	r0, r0, #17
    1288:	0000210a 	andeq	r2, r0, sl, lsl #2
    128c:	00160700 	andseq	r0, r6, r0, lsl #14
    1290:	030c0000 	movweq	r0, #49152	; 0xc000
    1294:	00009e06 	andeq	r9, r0, r6, lsl #28
    1298:	052c0300 	streq	r0, [ip, #-768]!	; 0xfffffd00
    129c:	07030000 	streq	r0, [r3, -r0]
    12a0:	0000009e 	muleq	r0, lr, r0
    12a4:	001d0300 	andseq	r0, sp, r0, lsl #6
    12a8:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    12ac:	0000009e 	muleq	r0, lr, r0
    12b0:	00120304 	andseq	r0, r2, r4, lsl #6
    12b4:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    12b8:	0000009e 	muleq	r0, lr, r0
    12bc:	04050008 	streq	r0, [r5], #-8
    12c0:	00000062 	andeq	r0, r0, r2, rrx
    12c4:	000caa06 	andeq	sl, ip, r6, lsl #20
    12c8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    12cc:	07000000 	streq	r0, [r0, -r0]
    12d0:	00000624 	andeq	r0, r0, r4, lsr #12
    12d4:	28060424 	stmdacs	r6, {r2, r5, sl}
    12d8:	03000001 	movweq	r0, #1
    12dc:	000003de 	ldrdeq	r0, [r0], -lr
    12e0:	01280704 			; <UNDEFINED> instruction: 0x01280704
    12e4:	03000000 	movweq	r0, #0
    12e8:	00000630 	andeq	r0, r0, r0, lsr r6
    12ec:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    12f0:	03040000 	movweq	r0, #16384	; 0x4000
    12f4:	00000597 	muleq	r0, r7, r5
    12f8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    12fc:	03080000 	movweq	r0, #32768	; 0x8000
    1300:	000005c3 	andeq	r0, r0, r3, asr #11
    1304:	01460c04 	cmpeq	r6, r4, lsl #24
    1308:	030c0000 	movweq	r0, #49152	; 0xc000
    130c:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1310:	01460d04 	cmpeq	r6, r4, lsl #26
    1314:	03100000 	tsteq	r0, #0
    1318:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    131c:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    1320:	03140000 	tsteq	r4, #0
    1324:	00000052 	andeq	r0, r0, r2, asr r0
    1328:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    132c:	03180000 	tsteq	r8, #0
    1330:	0000036f 	andeq	r0, r0, pc, ror #6
    1334:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    1338:	031c0000 	tsteq	ip, #0
    133c:	0000037f 	andeq	r0, r0, pc, ror r3
    1340:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    1344:	00200000 	eoreq	r0, r0, r0
    1348:	00a40405 	adceq	r0, r4, r5, lsl #8
    134c:	04080000 	streq	r0, [r8], #-0
    1350:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1354:	01400900 	cmpeq	r0, r0, lsl #18
    1358:	400a0000 	andmi	r0, sl, r0
    135c:	00000001 	andeq	r0, r0, r1
    1360:	00af0405 	adceq	r0, pc, r5, lsl #8
    1364:	04050000 	streq	r0, [r5], #-0
    1368:	00000135 	andeq	r0, r0, r5, lsr r1
    136c:	00062506 	andeq	r2, r6, r6, lsl #10
    1370:	af150400 	svcge	0x00150400
    1374:	0b000000 	bleq	137c <startup-0x1fffec84>
    1378:	00000162 	andeq	r0, r0, r2, ror #2
    137c:	00000162 	andeq	r0, r0, r2, ror #2
    1380:	0405000c 	streq	r0, [r5], #-12
    1384:	0000014c 	andeq	r0, r0, ip, asr #2
    1388:	0004c40d 	andeq	ip, r4, sp, lsl #8
    138c:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    1390:	0d000001 	stceq	0, cr0, [r0, #-4]
    1394:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    1398:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    139c:	5b0b0000 	blpl	2c13a4 <startup-0x1fd3ec5c>
    13a0:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    13a4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    13a8:	0000018e 	andeq	r0, r0, lr, lsl #3
    13ac:	04040063 	streq	r0, [r4], #-99	; 0xffffff9d
    13b0:	00039c07 	andeq	r9, r3, r7, lsl #24
    13b4:	0c940f00 	ldceq	15, cr0, [r4], {0}
    13b8:	03050000 	movweq	r0, #20480	; 0x5000
    13bc:	0000017e 	andeq	r0, r0, lr, ror r1
    13c0:	6d2c0305 	stcvs	3, cr0, [ip, #-20]!	; 0xffffffec
    13c4:	ff0f2000 			; <UNDEFINED> instruction: 0xff0f2000
    13c8:	0600000a 	streq	r0, [r0], -sl
    13cc:	00017e03 	andeq	r7, r1, r3, lsl #28
    13d0:	90030500 	andls	r0, r3, r0, lsl #10
    13d4:	0f20006d 	svceq	0x0020006d
    13d8:	00000b47 	andeq	r0, r0, r7, asr #22
    13dc:	017e0307 	cmneq	lr, r7, lsl #6
    13e0:	03050000 	movweq	r0, #20480	; 0x5000
    13e4:	20006df4 	strdcs	r6, [r0], -r4
    13e8:	000aee0f 	andeq	lr, sl, pc, lsl #28
    13ec:	7e030800 	cdpvc	8, 0, cr0, cr3, cr0, {0}
    13f0:	05000001 	streq	r0, [r0, #-1]
    13f4:	006e5803 	rsbeq	r5, lr, r3, lsl #16
    13f8:	0c6d0f20 	stcleq	15, cr0, [sp], #-128	; 0xffffff80
    13fc:	03090000 	movweq	r0, #36864	; 0x9000
    1400:	0000017e 	andeq	r0, r0, lr, ror r1
    1404:	6ebc0305 	cdpvs	3, 11, cr0, cr12, cr5, {0}
    1408:	410f2000 	mrsmi	r2, CPSR
    140c:	0a00000d 	beq	1448 <startup-0x1fffebb8>
    1410:	00017e03 	andeq	r7, r1, r3, lsl #28
    1414:	20030500 	andcs	r0, r3, r0, lsl #10
    1418:	0f20006f 	svceq	0x0020006f
    141c:	00000b1a 	andeq	r0, r0, sl, lsl fp
    1420:	017e030b 	cmneq	lr, fp, lsl #6
    1424:	03050000 	movweq	r0, #20480	; 0x5000
    1428:	20006f84 	andcs	r6, r0, r4, lsl #31
    142c:	000c080f 	andeq	r0, ip, pc, lsl #16
    1430:	7e030c00 	cdpvc	12, 0, cr0, cr3, cr0, {0}
    1434:	05000001 	streq	r0, [r0, #-1]
    1438:	006fe803 	rsbeq	lr, pc, r3, lsl #16
    143c:	09c90f20 	stmibeq	r9, {r5, r8, r9, sl, fp}^
    1440:	030d0000 	movweq	r0, #53248	; 0xd000
    1444:	0000017e 	andeq	r0, r0, lr, ror r1
    1448:	704c0305 	subvc	r0, ip, r5, lsl #6
    144c:	2b0f2000 	blcs	3c9454 <startup-0x1fc36bac>
    1450:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    1454:	00017e03 	andeq	r7, r1, r3, lsl #28
    1458:	b0030500 	andlt	r0, r3, r0, lsl #10
    145c:	0f200070 	svceq	0x00200070
    1460:	00000baf 	andeq	r0, r0, pc, lsr #23
    1464:	017e030f 	cmneq	lr, pc, lsl #6
    1468:	03050000 	movweq	r0, #20480	; 0x5000
    146c:	20007114 	andcs	r7, r0, r4, lsl r1
    1470:	0009e50f 	andeq	lr, r9, pc, lsl #10
    1474:	7e031000 	cdpvc	0, 0, cr1, cr3, cr0, {0}
    1478:	05000001 	streq	r0, [r0, #-1]
    147c:	00717803 	rsbseq	r7, r1, r3, lsl #16
    1480:	0b580f20 	bleq	1605108 <startup-0x1e9faef8>
    1484:	03110000 	tsteq	r1, #0
    1488:	0000017e 	andeq	r0, r0, lr, ror r1
    148c:	71dc0305 	bicsvc	r0, ip, r5, lsl #6
    1490:	780f2000 	stmdavc	pc, {sp}	; <UNPREDICTABLE>
    1494:	1200000b 	andne	r0, r0, #11
    1498:	00017e03 	andeq	r7, r1, r3, lsl #28
    149c:	40030500 	andmi	r0, r3, r0, lsl #10
    14a0:	0f200072 	svceq	0x00200072
    14a4:	00000a0f 	andeq	r0, r0, pc, lsl #20
    14a8:	017e0313 	cmneq	lr, r3, lsl r3
    14ac:	03050000 	movweq	r0, #20480	; 0x5000
    14b0:	200072a4 	andcs	r7, r0, r4, lsr #5
    14b4:	000c1810 	andeq	r1, ip, r0, lsl r8
    14b8:	9e150100 	muflss	f0, f5, f0
    14bc:	05000000 	streq	r0, [r0, #-0]
    14c0:	00364003 	eorseq	r4, r6, r3
    14c4:	0a4b1020 	beq	12c554c <startup-0x1ed3aab4>
    14c8:	16010000 	strne	r0, [r1], -r0
    14cc:	0000009e 	muleq	r0, lr, r0
    14d0:	35d80305 	ldrbcc	r0, [r8, #773]	; 0x305
    14d4:	35102000 	ldrcc	r2, [r0, #-0]
    14d8:	0100000a 	tsteq	r0, sl
    14dc:	00009e17 	andeq	r9, r0, r7, lsl lr
    14e0:	d0030500 	andle	r0, r3, r0, lsl #10
    14e4:	10200036 	eorne	r0, r0, r6, lsr r0
    14e8:	00000a8d 	andeq	r0, r0, sp, lsl #21
    14ec:	009e1801 	addseq	r1, lr, r1, lsl #16
    14f0:	03050000 	movweq	r0, #20480	; 0x5000
    14f4:	2000363c 	andcs	r3, r0, ip, lsr r6
    14f8:	000b8810 	andeq	r8, fp, r0, lsl r8
    14fc:	9e190100 	muflse	f0, f1, f0
    1500:	05000000 	streq	r0, [r0, #-0]
    1504:	0036c003 	eorseq	ip, r6, r3
    1508:	0c231020 	stceq	0, cr1, [r3], #-128	; 0xffffff80
    150c:	1a010000 	bne	41514 <startup-0x1ffbeaec>
    1510:	0000009e 	muleq	r0, lr, r0
    1514:	37740305 	ldrbcc	r0, [r4, -r5, lsl #6]!
    1518:	40102000 	andsmi	r2, r0, r0
    151c:	0100000a 	tsteq	r0, sl
    1520:	00009e1b 	andeq	r9, r0, fp, lsl lr
    1524:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    1528:	10200036 	eorne	r0, r0, r6, lsr r0
    152c:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
    1530:	009e1c01 	addseq	r1, lr, r1, lsl #24
    1534:	03050000 	movweq	r0, #20480	; 0x5000
    1538:	2000365c 	andcs	r3, r0, ip, asr r6
    153c:	000a2010 	andeq	r2, sl, r0, lsl r0
    1540:	9e1d0100 	muflse	f0, f5, f0
    1544:	05000000 	streq	r0, [r0, #-0]
    1548:	00368803 	eorseq	r8, r6, r3, lsl #16
    154c:	0bee1020 	bleq	ffb855d4 <firstTime.4040+0xdfb7c8c8>
    1550:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    1554:	0000009e 	muleq	r0, lr, r0
    1558:	37580305 	ldrbcc	r0, [r8, -r5, lsl #6]
    155c:	83102000 	tsthi	r0, #0
    1560:	0100000a 	tsteq	r0, sl
    1564:	00009e1f 	andeq	r9, r0, pc, lsl lr
    1568:	38030500 	stmdacc	r3, {r8, sl}
    156c:	10200036 	eorne	r0, r0, r6, lsr r0
    1570:	00000cf8 	strdeq	r0, [r0], -r8
    1574:	009e2001 	addseq	r2, lr, r1
    1578:	03050000 	movweq	r0, #20480	; 0x5000
    157c:	200035d4 	ldrdcs	r3, [r0], -r4
    1580:	000a6410 	andeq	r6, sl, r0, lsl r4
    1584:	9e210100 	suflss	f0, f1, f0
    1588:	05000000 	streq	r0, [r0, #-0]
    158c:	0035e803 	eorseq	lr, r5, r3, lsl #16
    1590:	0c8a1020 	stceq	0, cr1, [sl], {32}
    1594:	22010000 	andcs	r0, r1, #0
    1598:	0000009e 	muleq	r0, lr, r0
    159c:	366c0305 	strbtcc	r0, [ip], -r5, lsl #6
    15a0:	c9102000 	ldmdbgt	r0, {sp}
    15a4:	0100000b 	tsteq	r0, fp
    15a8:	00009e23 	andeq	r9, r0, r3, lsr #28
    15ac:	b0030500 	andlt	r0, r3, r0, lsl #10
    15b0:	10200036 	eorne	r0, r0, r6, lsr r0
    15b4:	00000cc7 	andeq	r0, r0, r7, asr #25
    15b8:	00622501 	rsbeq	r2, r2, r1, lsl #10
    15bc:	03050000 	movweq	r0, #20480	; 0x5000
    15c0:	20003650 	andcs	r3, r0, r0, asr r6
    15c4:	000ac810 	andeq	ip, sl, r0, lsl r8
    15c8:	62260100 	eorvs	r0, r6, #0, 2
    15cc:	05000000 	streq	r0, [r0, #-0]
    15d0:	0036c403 	eorseq	ip, r6, r3, lsl #8
    15d4:	0c7d1020 	ldcleq	0, cr1, [sp], #-128	; 0xffffff80
    15d8:	27010000 	strcs	r0, [r1, -r0]
    15dc:	00000062 	andeq	r0, r0, r2, rrx
    15e0:	36600305 	strbtcc	r0, [r0], -r5, lsl #6
    15e4:	f9102000 			; <UNDEFINED> instruction: 0xf9102000
    15e8:	0100000b 	tsteq	r0, fp
    15ec:	00006228 	andeq	r6, r0, r8, lsr #4
    15f0:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    15f4:	10200037 	eorne	r0, r0, r7, lsr r0
    15f8:	000009ba 			; <UNDEFINED> instruction: 0x000009ba
    15fc:	00622901 	rsbeq	r2, r2, r1, lsl #18
    1600:	03050000 	movweq	r0, #20480	; 0x5000
    1604:	200036d4 	ldrdcs	r3, [r0], -r4
    1608:	000aac10 	andeq	sl, sl, r0, lsl ip
    160c:	622a0100 	eorvs	r0, sl, #0, 2
    1610:	05000000 	streq	r0, [r0, #-0]
    1614:	00367c03 	eorseq	r7, r6, r3, lsl #24
    1618:	0cd51020 	ldcleq	0, cr1, [r5], {32}
    161c:	2b010000 	blcs	41624 <startup-0x1ffbe9dc>
    1620:	00000062 	andeq	r0, r0, r2, rrx
    1624:	36b40305 	ldrtcc	r0, [r4], r5, lsl #6
    1628:	69102000 	ldmdbvs	r0, {sp}
    162c:	0100000b 	tsteq	r0, fp
    1630:	0000622c 	andeq	r6, r0, ip, lsr #4
    1634:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
    1638:	10200036 	eorne	r0, r0, r6, lsr r0
    163c:	00000ba1 	andeq	r0, r0, r1, lsr #23
    1640:	00622d01 	rsbeq	r2, r2, r1, lsl #26
    1644:	03050000 	movweq	r0, #20480	; 0x5000
    1648:	20003704 	andcs	r3, r0, r4, lsl #14
    164c:	000a5510 	andeq	r5, sl, r0, lsl r5
    1650:	622e0100 	eorvs	r0, lr, #0, 2
    1654:	05000000 	streq	r0, [r0, #-0]
    1658:	0035ec03 	eorseq	lr, r5, r3, lsl #24
    165c:	0b921020 	bleq	fe4856e4 <firstTime.4040+0xde47c9d8>
    1660:	2f010000 	svccs	0x00010000
    1664:	00000062 	andeq	r0, r0, r2, rrx
    1668:	36ec0305 	strbtcc	r0, [ip], r5, lsl #6
    166c:	ba102000 	blt	409674 <startup-0x1fbf698c>
    1670:	0100000a 	tsteq	r0, sl
    1674:	00006230 	andeq	r6, r0, r0, lsr r2
    1678:	68030500 	stmdavs	r3, {r8, sl}
    167c:	10200037 	eorne	r0, r0, r7, lsr r0
    1680:	00000bdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1684:	00623101 	rsbeq	r3, r2, r1, lsl #2
    1688:	03050000 	movweq	r0, #20480	; 0x5000
    168c:	20003698 	mulcs	r0, r8, r6
    1690:	0009f610 	andeq	pc, r9, r0, lsl r6	; <UNPREDICTABLE>
    1694:	62320100 	eorsvs	r0, r2, #0, 2
    1698:	05000000 	streq	r0, [r0, #-0]
    169c:	00367003 	eorseq	r7, r6, r3
    16a0:	0ad61020 	beq	ff585728 <firstTime.4040+0xdf57ca1c>
    16a4:	33010000 	movwcc	r0, #4096	; 0x1000
    16a8:	00000062 	andeq	r0, r0, r2, rrx
    16ac:	368c0305 	strcc	r0, [ip], r5, lsl #6
    16b0:	65102000 	ldrvs	r2, [r0, #-0]
    16b4:	0100000c 	tsteq	r0, ip
    16b8:	00014c36 	andeq	r4, r1, r6, lsr ip
    16bc:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
    16c0:	10200036 	eorne	r0, r0, r6, lsr r0
    16c4:	00000ca5 	andeq	r0, r0, r5, lsr #25
    16c8:	00a43701 	adceq	r3, r4, r1, lsl #14
    16cc:	03050000 	movweq	r0, #20480	; 0x5000
    16d0:	20003628 	andcs	r3, r0, r8, lsr #12
    16d4:	000d2c10 	andeq	r2, sp, r0, lsl ip
    16d8:	a4380100 	ldrtge	r0, [r8], #-256	; 0xffffff00
    16dc:	05000000 	streq	r0, [r0, #-0]
    16e0:	0035f803 	eorseq	pc, r5, r3, lsl #16
    16e4:	0b3c1020 	bleq	f0576c <startup-0x1f0fa894>
    16e8:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    16ec:	000000a4 	andeq	r0, r0, r4, lsr #1
    16f0:	36e00305 	strbtcc	r0, [r0], r5, lsl #6
    16f4:	da102000 	ble	4096fc <startup-0x1fbf6904>
    16f8:	01000009 	tsteq	r0, r9
    16fc:	0000a43a 	andeq	sl, r0, sl, lsr r4
    1700:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
    1704:	10200036 	eorne	r0, r0, r6, lsr r0
    1708:	00000d03 	andeq	r0, r0, r3, lsl #26
    170c:	00a43b01 	adceq	r3, r4, r1, lsl #22
    1710:	03050000 	movweq	r0, #20480	; 0x5000
    1714:	200036a4 	andcs	r3, r0, r4, lsr #13
    1718:	000b0f10 	andeq	r0, fp, r0, lsl pc
    171c:	a43c0100 	ldrtge	r0, [ip], #-256	; 0xffffff00
    1720:	05000000 	streq	r0, [r0, #-0]
    1724:	0035dc03 	eorseq	sp, r5, r3, lsl #24
    1728:	00a40b20 	adceq	r0, r4, r0, lsr #22
    172c:	05190000 	ldreq	r0, [r9, #-0]
    1730:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    1734:	05000001 	streq	r0, [r0, #-1]
    1738:	0bd41000 	bleq	ff505740 <firstTime.4040+0xdf4fca34>
    173c:	3f010000 	svccc	0x00010000
    1740:	00000509 	andeq	r0, r0, r9, lsl #10
    1744:	37100305 	ldrcc	r0, [r0, -r5, lsl #6]
    1748:	5b112000 	blpl	449750 <startup-0x1fbb68b0>
    174c:	0100000c 	tsteq	r0, ip
    1750:	00161876 	andseq	r1, r6, r6, ror r8
    1754:	00015820 	andeq	r5, r1, r0, lsr #16
    1758:	5f9c0100 	svcpl	0x009c0100
    175c:	12000005 	andne	r0, r0, #5
    1760:	00000c65 	andeq	r0, r0, r5, ror #24
    1764:	01627601 	cmneq	r2, r1, lsl #12
    1768:	91020000 	mrsls	r0, (UNDEF: 2)
    176c:	084f0f6c 	stmdaeq	pc, {r2, r3, r5, r6, r8, r9, sl, fp}^	; <UNPREDICTABLE>
    1770:	77010000 	strvc	r0, [r1, -r0]
    1774:	0000012e 	andeq	r0, r0, lr, lsr #2
    1778:	73080305 	movwvc	r0, #33541	; 0x8305
    177c:	13002000 	movwne	r2, #0
    1780:	00000417 	andeq	r0, r0, r7, lsl r4
    1784:	140c4001 	strne	r4, [ip], #-1
    1788:	020c2000 	andeq	r2, ip, #0
    178c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1790:	000ce40f 	andeq	lr, ip, pc, lsl #8
    1794:	9e420100 	dvflss	f0, f2, f0
    1798:	02000000 	andeq	r0, r0, #0
    179c:	ee0f7491 	mcr	4, 0, r7, cr15, cr1, {4}
    17a0:	0100000c 	tsteq	r0, ip
    17a4:	00009e45 	andeq	r9, r0, r5, asr #28
    17a8:	70910200 	addsvc	r0, r1, r0, lsl #4
    17ac:	000ae40f 	andeq	lr, sl, pc, lsl #8
    17b0:	9e480100 	dvflse	f0, f0, f0
    17b4:	02000000 	andeq	r0, r0, #0
    17b8:	050f6c91 	streq	r6, [pc, #-3217]	; b2f <startup-0x1ffff4d1>
    17bc:	0100000a 	tsteq	r0, sl
    17c0:	00009e4c 	andeq	r9, r0, ip, asr #28
    17c4:	68910200 	ldmvs	r1, {r9}
    17c8:	000d0e0f 	andeq	r0, sp, pc, lsl #28
    17cc:	9e4f0100 	dvflse	f0, f7, f0
    17d0:	02000000 	andeq	r0, r0, #0
    17d4:	a20f6491 	andge	r6, pc, #-1862270976	; 0x91000000
    17d8:	0100000a 	tsteq	r0, sl
    17dc:	00009e52 	andeq	r9, r0, r2, asr lr
    17e0:	60910200 	addsvs	r0, r1, r0, lsl #4
    17e4:	000cba0f 	andeq	fp, ip, pc, lsl #20
    17e8:	9e570100 	rdflss	f0, f7, f0
    17ec:	02000000 	andeq	r0, r0, #0
    17f0:	180f5c91 	stmdane	pc, {r0, r4, r7, sl, fp, ip, lr}	; <UNPREDICTABLE>
    17f4:	0100000d 	tsteq	r0, sp
    17f8:	00009e5a 	andeq	r9, r0, sl, asr lr
    17fc:	58910200 	ldmpl	r1, {r9}
    1800:	000d220f 	andeq	r2, sp, pc, lsl #4
    1804:	9e5d0100 	rdflse	f0, f5, f0
    1808:	02000000 	andeq	r0, r0, #0
    180c:	2b0f5491 	blcs	3d6a58 <startup-0x1fc295a8>
    1810:	0100000a 	tsteq	r0, sl
    1814:	00009e61 	andeq	r9, r0, r1, ror #28
    1818:	50910200 	addspl	r0, r1, r0, lsl #4
    181c:	000a6f0f 	andeq	r6, sl, pc, lsl #30
    1820:	9e640100 	powlss	f0, f4, f0
    1824:	02000000 	andeq	r0, r0, #0
    1828:	790f4c91 	stmdbvc	pc, {r0, r4, r7, sl, fp, lr}	; <UNPREDICTABLE>
    182c:	0100000a 	tsteq	r0, sl
    1830:	00009e67 	andeq	r9, r0, r7, ror #28
    1834:	48910200 	ldmmi	r1, {r9}
    1838:	000d370f 	andeq	r3, sp, pc, lsl #14
    183c:	9e6b0100 	powlse	f0, f3, f0
    1840:	02000000 	andeq	r0, r0, #0
    1844:	bf0f4491 	svclt	0x000f4491
    1848:	0100000b 	tsteq	r0, fp
    184c:	00009e6e 	andeq	r9, r0, lr, ror #28
    1850:	40910200 	addsmi	r0, r1, r0, lsl #4
    1854:	000a980f 	andeq	r9, sl, pc, lsl #16
    1858:	9e710100 	rpwlss	f0, f1, f0
    185c:	03000000 	movweq	r0, #0
    1860:	007fbc91 			; <UNDEFINED> instruction: 0x007fbc91
    1864:	00049800 	andeq	r9, r4, r0, lsl #16
    1868:	f1000400 			; <UNDEFINED> instruction: 0xf1000400
    186c:	04000004 	streq	r0, [r0], #-4
    1870:	00008101 	andeq	r8, r0, r1, lsl #2
    1874:	0f050c00 	svceq	0x00050c00
    1878:	17700000 	ldrbne	r0, [r0, -r0]!
    187c:	02382000 	eorseq	r2, r8, #0
    1880:	07a40000 	streq	r0, [r4, r0]!
    1884:	0c020000 	stceq	0, cr0, [r2], {-0}
    1888:	004e0502 	subeq	r0, lr, r2, lsl #10
    188c:	06030000 	streq	r0, [r3], -r0
    1890:	02000003 	andeq	r0, r0, #3
    1894:	00004e07 	andeq	r4, r0, r7, lsl #28
    1898:	5f030000 	svcpl	0x00030000
    189c:	02000006 	andeq	r0, r0, #6
    18a0:	00004e08 	andeq	r4, r0, r8, lsl #28
    18a4:	85030400 	strhi	r0, [r3, #-1024]	; 0xfffffc00
    18a8:	02000010 	andeq	r0, r0, #16
    18ac:	00005509 	andeq	r5, r0, r9, lsl #10
    18b0:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    18b4:	032a0704 			; <UNDEFINED> instruction: 0x032a0704
    18b8:	04050000 	streq	r0, [r5], #-0
    18bc:	0000005b 	andeq	r0, r0, fp, asr r0
    18c0:	41080104 	tstmi	r8, r4, lsl #2
    18c4:	06000004 	streq	r0, [r0], -r4
    18c8:	000011d7 	ldrdeq	r1, [r0], -r7
    18cc:	00210a02 	eoreq	r0, r1, r2, lsl #20
    18d0:	16070000 	strne	r0, [r7], -r0
    18d4:	0c000000 	stceq	0, cr0, [r0], {-0}
    18d8:	009e0603 	addseq	r0, lr, r3, lsl #12
    18dc:	2c030000 	stccs	0, cr0, [r3], {-0}
    18e0:	03000005 	movweq	r0, #5
    18e4:	00009e07 	andeq	r9, r0, r7, lsl #28
    18e8:	1d030000 	stcne	0, cr0, [r3, #-0]
    18ec:	03000000 	movweq	r0, #0
    18f0:	00009e08 	andeq	r9, r0, r8, lsl #28
    18f4:	12030400 	andne	r0, r3, #0, 8
    18f8:	03000000 	movweq	r0, #0
    18fc:	00009e09 	andeq	r9, r0, r9, lsl #28
    1900:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    1904:	00006204 	andeq	r6, r0, r4, lsl #4
    1908:	0caa0600 	stceq	6, cr0, [sl]
    190c:	0a030000 	beq	c1914 <startup-0x1ff3e6ec>
    1910:	0000006d 	andeq	r0, r0, sp, rrx
    1914:	00062407 	andeq	r2, r6, r7, lsl #8
    1918:	06042400 	streq	r2, [r4], -r0, lsl #8
    191c:	00000128 	andeq	r0, r0, r8, lsr #2
    1920:	0003de03 	andeq	sp, r3, r3, lsl #28
    1924:	28070400 	stmdacs	r7, {sl}
    1928:	00000001 	andeq	r0, r0, r1
    192c:	00063003 	andeq	r3, r6, r3
    1930:	2e080400 	cfcpyscs	mvf0, mvf8
    1934:	04000001 	streq	r0, [r0], #-1
    1938:	00059703 	andeq	r9, r5, r3, lsl #14
    193c:	2e090400 	cfcpyscs	mvf0, mvf9
    1940:	08000001 	stmdaeq	r0, {r0}
    1944:	0005c303 	andeq	ip, r5, r3, lsl #6
    1948:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    194c:	0c000001 	stceq	0, cr0, [r0], {1}
    1950:	0002ff03 	andeq	pc, r2, r3, lsl #30
    1954:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    1958:	10000001 	andne	r0, r0, r1
    195c:	0003f003 	andeq	pc, r3, r3
    1960:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    1964:	14000001 	strne	r0, [r0], #-1
    1968:	00005203 	andeq	r5, r0, r3, lsl #4
    196c:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    1970:	18000001 	stmdane	r0, {r0}
    1974:	00036f03 	andeq	r6, r3, r3, lsl #30
    1978:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    197c:	1c000001 	stcne	0, cr0, [r0], {1}
    1980:	00037f03 	andeq	r7, r3, r3, lsl #30
    1984:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    1988:	20000001 	andcs	r0, r0, r1
    198c:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    1990:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1994:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1998:	40090074 	andmi	r0, r9, r4, ror r0
    199c:	0a000001 	beq	19a8 <startup-0x1fffe658>
    19a0:	00000140 	andeq	r0, r0, r0, asr #2
    19a4:	af040500 	svcge	0x00040500
    19a8:	05000000 	streq	r0, [r0, #-0]
    19ac:	00013504 	andeq	r3, r1, r4, lsl #10
    19b0:	06250600 	strteq	r0, [r5], -r0, lsl #12
    19b4:	15040000 	strne	r0, [r4, #-0]
    19b8:	000000af 	andeq	r0, r0, pc, lsr #1
    19bc:	0001620b 	andeq	r6, r1, fp, lsl #4
    19c0:	00016200 	andeq	r6, r1, r0, lsl #4
    19c4:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    19c8:	00014c04 	andeq	r4, r1, r4, lsl #24
    19cc:	04c40d00 	strbeq	r0, [r4], #3328	; 0xd00
    19d0:	1c040000 	stcne	0, cr0, [r4], {-0}
    19d4:	00000157 	andeq	r0, r0, r7, asr r1
    19d8:	0003b50d 	andeq	fp, r3, sp, lsl #10
    19dc:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    19e0:	0b000001 	bleq	19ec <startup-0x1fffe614>
    19e4:	0000005b 	andeq	r0, r0, fp, asr r0
    19e8:	0000018e 	andeq	r0, r0, lr, lsl #3
    19ec:	00018e0e 	andeq	r8, r1, lr, lsl #28
    19f0:	04003500 	streq	r3, [r0], #-1280	; 0xfffffb00
    19f4:	039c0704 	orrseq	r0, ip, #4, 14	; 0x100000
    19f8:	810f0000 	mrshi	r0, CPSR
    19fc:	0500000d 	streq	r0, [r0, #-13]
    1a00:	00017e03 	andeq	r7, r1, r3, lsl #28
    1a04:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    1a08:	0f200073 	svceq	0x00200073
    1a0c:	00000f33 	andeq	r0, r0, r3, lsr pc
    1a10:	017e0306 	cmneq	lr, r6, lsl #6
    1a14:	03050000 	movweq	r0, #20480	; 0x5000
    1a18:	20007344 	andcs	r7, r0, r4, asr #6
    1a1c:	000e8b0f 	andeq	r8, lr, pc, lsl #22
    1a20:	7e030700 	cdpvc	7, 0, cr0, cr3, cr0, {0}
    1a24:	05000001 	streq	r0, [r0, #-1]
    1a28:	00737c03 	rsbseq	r7, r3, r3, lsl #24
    1a2c:	0e240f20 	cdpeq	15, 2, cr0, cr4, cr0, {1}
    1a30:	03080000 	movweq	r0, #32768	; 0x8000
    1a34:	0000017e 	andeq	r0, r0, lr, ror r1
    1a38:	73b40305 			; <UNDEFINED> instruction: 0x73b40305
    1a3c:	9d0f2000 	stcls	0, cr2, [pc, #-0]	; 1a44 <startup-0x1fffe5bc>
    1a40:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    1a44:	00017e03 	andeq	r7, r1, r3, lsl #28
    1a48:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    1a4c:	0f200073 	svceq	0x00200073
    1a50:	00000dcf 	andeq	r0, r0, pc, asr #27
    1a54:	017e030a 	cmneq	lr, sl, lsl #6
    1a58:	03050000 	movweq	r0, #20480	; 0x5000
    1a5c:	20007424 	andcs	r7, r0, r4, lsr #8
    1a60:	000f440f 	andeq	r4, pc, pc, lsl #8
    1a64:	7e030b00 	vmlavc.f64	d0, d3, d0
    1a68:	05000001 	streq	r0, [r0, #-1]
    1a6c:	00745c03 	rsbseq	r5, r4, r3, lsl #24
    1a70:	0df90f20 	ldcleq	15, cr0, [r9, #128]!	; 0x80
    1a74:	030c0000 	movweq	r0, #49152	; 0xc000
    1a78:	0000017e 	andeq	r0, r0, lr, ror r1
    1a7c:	74940305 	ldrvc	r0, [r4], #773	; 0x305
    1a80:	360f2000 	strcc	r2, [pc], -r0
    1a84:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    1a88:	00017e03 	andeq	r7, r1, r3, lsl #28
    1a8c:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
    1a90:	10200074 	eorne	r0, r0, r4, ror r0
    1a94:	00000ed2 	ldrdeq	r0, [r0], -r2
    1a98:	009e0e01 	addseq	r0, lr, r1, lsl #28
    1a9c:	03050000 	movweq	r0, #20480	; 0x5000
    1aa0:	2000384c 	andcs	r3, r0, ip, asr #16
    1aa4:	000d5e10 	andeq	r5, sp, r0, lsl lr
    1aa8:	9e0f0100 	adflse	f0, f7, f0
    1aac:	05000000 	streq	r0, [r0, #-0]
    1ab0:	00377803 	eorseq	r7, r7, r3, lsl #16
    1ab4:	0db31020 	ldceq	0, cr1, [r3, #128]!	; 0x80
    1ab8:	10010000 	andne	r0, r1, r0
    1abc:	0000009e 	muleq	r0, lr, r0
    1ac0:	38780305 	ldmdacc	r8!, {r0, r2, r8, r9}^
    1ac4:	52102000 	andspl	r2, r0, #0
    1ac8:	0100000d 	tsteq	r0, sp
    1acc:	00009e11 	andeq	r9, r0, r1, lsl lr
    1ad0:	88030500 	stmdahi	r3, {r8, sl}
    1ad4:	10200038 	eorne	r0, r0, r8, lsr r0
    1ad8:	00000e53 	andeq	r0, r0, r3, asr lr
    1adc:	009e1201 	addseq	r1, lr, r1, lsl #4
    1ae0:	03050000 	movweq	r0, #20480	; 0x5000
    1ae4:	200037ec 	andcs	r3, r0, ip, ror #15
    1ae8:	000eba10 	andeq	fp, lr, r0, lsl sl
    1aec:	9e130100 	muflss	f0, f3, f0
    1af0:	05000000 	streq	r0, [r0, #-0]
    1af4:	00377c03 	eorseq	r7, r7, r3, lsl #24
    1af8:	0ded1020 	stcleq	0, cr1, [sp, #128]!	; 0x80
    1afc:	14010000 	strne	r0, [r1], #-0
    1b00:	0000009e 	muleq	r0, lr, r0
    1b04:	38140305 	ldmdacc	r4, {r0, r2, r8, r9}
    1b08:	48102000 	ldmdami	r0, {sp}
    1b0c:	0100000e 	tsteq	r0, lr
    1b10:	00009e15 	andeq	r9, r0, r5, lsl lr
    1b14:	50030500 	andpl	r0, r3, r0, lsl #10
    1b18:	10200038 	eorne	r0, r0, r8, lsr r0
    1b1c:	00000ede 	ldrdeq	r0, [r0], -lr
    1b20:	009e1601 	addseq	r1, lr, r1, lsl #12
    1b24:	03050000 	movweq	r0, #20480	; 0x5000
    1b28:	2000383c 	andcs	r3, r0, ip, lsr r8
    1b2c:	000e1510 	andeq	r1, lr, r0, lsl r5
    1b30:	62180100 	andsvs	r0, r8, #0, 2
    1b34:	05000000 	streq	r0, [r0, #-0]
    1b38:	0037c803 	eorseq	ip, r7, r3, lsl #16
    1b3c:	0d691020 	stcleq	0, cr1, [r9, #-128]!	; 0xffffff80
    1b40:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    1b44:	00000062 	andeq	r0, r0, r2, rrx
    1b48:	38600305 	stmdacc	r0!, {r0, r2, r8, r9}^
    1b4c:	5e102000 	cdppl	0, 1, cr2, cr0, cr0, {0}
    1b50:	0100000e 	tsteq	r0, lr
    1b54:	0000621a 	andeq	r6, r0, sl, lsl r2
    1b58:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
    1b5c:	10200037 	eorne	r0, r0, r7, lsr r0
    1b60:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    1b64:	00621b01 	rsbeq	r1, r2, r1, lsl #22
    1b68:	03050000 	movweq	r0, #20480	; 0x5000
    1b6c:	200037bc 			; <UNDEFINED> instruction: 0x200037bc
    1b70:	000da310 	andeq	sl, sp, r0, lsl r3
    1b74:	621c0100 	andsvs	r0, ip, #0, 2
    1b78:	05000000 	streq	r0, [r0, #-0]
    1b7c:	00386c03 	eorseq	r6, r8, r3, lsl #24
    1b80:	0e6c1020 	cdpeq	0, 6, cr1, cr12, cr0, {1}
    1b84:	1d010000 	stcne	0, cr0, [r1, #-0]
    1b88:	00000062 	andeq	r0, r0, r2, rrx
    1b8c:	38080305 	stmdacc	r8, {r0, r2, r8, r9}
    1b90:	7b102000 	blvc	409b98 <startup-0x1fbf6468>
    1b94:	0100000e 	tsteq	r0, lr
    1b98:	0000621e 	andeq	r6, r0, lr, lsl r2
    1b9c:	fc030500 	stc2	5, cr0, [r3], {-0}
    1ba0:	10200037 	eorne	r0, r0, r7, lsr r0
    1ba4:	00000d93 	muleq	r0, r3, sp
    1ba8:	00621f01 	rsbeq	r1, r2, r1, lsl #30
    1bac:	03050000 	movweq	r0, #20480	; 0x5000
    1bb0:	200037d4 	ldrdcs	r3, [r0], -r4
    1bb4:	000ef610 	andeq	pc, lr, r0, lsl r6	; <UNPREDICTABLE>
    1bb8:	62200100 	eorvs	r0, r0, #0, 2
    1bbc:	05000000 	streq	r0, [r0, #-0]
    1bc0:	00384003 	eorseq	r4, r8, r3
    1bc4:	0d781020 	ldcleq	0, cr1, [r8, #-128]!	; 0xffffff80
    1bc8:	23010000 	movwcs	r0, #4096	; 0x1000
    1bcc:	0000014c 	andeq	r0, r0, ip, asr #2
    1bd0:	38180305 	ldmdacc	r8, {r0, r2, r8, r9}
    1bd4:	c6102000 	ldrgt	r2, [r0], -r0
    1bd8:	0100000e 	tsteq	r0, lr
    1bdc:	0000a424 	andeq	sl, r0, r4, lsr #8
    1be0:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    1be4:	10200038 	eorne	r0, r0, r8, lsr r0
    1be8:	00000f56 	andeq	r0, r0, r6, asr pc
    1bec:	00a42501 	adceq	r2, r4, r1, lsl #10
    1bf0:	03050000 	movweq	r0, #20480	; 0x5000
    1bf4:	200037b0 			; <UNDEFINED> instruction: 0x200037b0
    1bf8:	000de110 	andeq	lr, sp, r0, lsl r1
    1bfc:	a4260100 	strtge	r0, [r6], #-256	; 0xffffff00
    1c00:	05000000 	streq	r0, [r0, #-0]
    1c04:	00387c03 	eorseq	r7, r8, r3, lsl #24
    1c08:	0eae1020 	cdpeq	0, 10, cr1, cr14, cr0, {1}
    1c0c:	27010000 	strcs	r0, [r1, -r0]
    1c10:	000000a4 	andeq	r0, r0, r4, lsr #1
    1c14:	37e00305 	strbcc	r0, [r0, r5, lsl #6]!
    1c18:	a40b2000 	strge	r2, [fp], #-0
    1c1c:	c5000000 	strgt	r0, [r0, #-0]
    1c20:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    1c24:	0000018e 	andeq	r0, r0, lr, lsl #3
    1c28:	ea100003 	b	401c3c <startup-0x1fbfe3c4>
    1c2c:	0100000e 	tsteq	r0, lr
    1c30:	0003b528 	andeq	fp, r3, r8, lsr #10
    1c34:	80030500 	andhi	r0, r3, r0, lsl #10
    1c38:	11200037 			; <UNDEFINED> instruction: 0x11200037
    1c3c:	00000e0a 	andeq	r0, r0, sl, lsl #28
    1c40:	18b04c01 	ldmne	r0!, {r0, sl, fp, lr}
    1c44:	00f82000 	rscseq	r2, r8, r0
    1c48:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c4c:	0000040b 	andeq	r0, r0, fp, lsl #8
    1c50:	000d7812 	andeq	r7, sp, r2, lsl r8
    1c54:	624c0100 	subvs	r0, ip, #0, 2
    1c58:	02000001 	andeq	r0, r0, #1
    1c5c:	4f0f6c91 	svcmi	0x000f6c91
    1c60:	01000008 	tsteq	r0, r8
    1c64:	00012e4d 	andeq	r2, r1, sp, asr #28
    1c68:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
    1c6c:	00200075 	eoreq	r0, r0, r5, ror r0
    1c70:	00041713 	andeq	r1, r4, r3, lsl r7
    1c74:	70290100 	eorvc	r0, r9, r0, lsl #2
    1c78:	40200017 	eormi	r0, r0, r7, lsl r0
    1c7c:	01000001 	tsteq	r0, r1
    1c80:	0ce40f9c 	stcleq	15, cr0, [r4], #624	; 0x270
    1c84:	2b010000 	blcs	41c8c <startup-0x1ffbe374>
    1c88:	0000009e 	muleq	r0, lr, r0
    1c8c:	0f749102 	svceq	0x00749102
    1c90:	00000cee 	andeq	r0, r0, lr, ror #25
    1c94:	009e2e01 	addseq	r2, lr, r1, lsl #28
    1c98:	91020000 	mrsls	r0, (UNDEF: 2)
    1c9c:	0ae40f70 	beq	ff905a64 <firstTime.4040+0xdf8fcd58>
    1ca0:	31010000 	mrscc	r0, (UNDEF: 1)
    1ca4:	0000009e 	muleq	r0, lr, r0
    1ca8:	0f6c9102 	svceq	0x006c9102
    1cac:	00000a05 	andeq	r0, r0, r5, lsl #20
    1cb0:	009e3501 	addseq	r3, lr, r1, lsl #10
    1cb4:	91020000 	mrsls	r0, (UNDEF: 2)
    1cb8:	0d0e0f68 	stceq	15, cr0, [lr, #-416]	; 0xfffffe60
    1cbc:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    1cc0:	0000009e 	muleq	r0, lr, r0
    1cc4:	0f649102 	svceq	0x00649102
    1cc8:	00000aa2 	andeq	r0, r0, r2, lsr #21
    1ccc:	009e3b01 	addseq	r3, lr, r1, lsl #22
    1cd0:	91020000 	mrsls	r0, (UNDEF: 2)
    1cd4:	0cba0f60 	ldceq	15, cr0, [sl], #384	; 0x180
    1cd8:	40010000 	andmi	r0, r1, r0
    1cdc:	0000009e 	muleq	r0, lr, r0
    1ce0:	0f5c9102 	svceq	0x005c9102
    1ce4:	00000d18 	andeq	r0, r0, r8, lsl sp
    1ce8:	009e4301 	addseq	r4, lr, r1, lsl #6
    1cec:	91020000 	mrsls	r0, (UNDEF: 2)
    1cf0:	0d220f58 	stceq	15, cr0, [r2, #-352]!	; 0xfffffea0
    1cf4:	46010000 	strmi	r0, [r1], -r0
    1cf8:	0000009e 	muleq	r0, lr, r0
    1cfc:	00549102 	subseq	r9, r4, r2, lsl #2
    1d00:	00089f00 	andeq	r9, r8, r0, lsl #30
    1d04:	f1000400 			; <UNDEFINED> instruction: 0xf1000400
    1d08:	04000005 	streq	r0, [r0], #-5
    1d0c:	00008101 	andeq	r8, r0, r1, lsl #2
    1d10:	10470c00 	subne	r0, r7, r0, lsl #24
    1d14:	19a80000 	stmibne	r8!, {}	; <UNPREDICTABLE>
    1d18:	0e442000 	cdpeq	0, 4, cr2, cr4, cr0, {0}
    1d1c:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    1d20:	0c020000 	stceq	0, cr0, [r2], {-0}
    1d24:	004e0502 	subeq	r0, lr, r2, lsl #10
    1d28:	06030000 	streq	r0, [r3], -r0
    1d2c:	02000003 	andeq	r0, r0, #3
    1d30:	00004e07 	andeq	r4, r0, r7, lsl #28
    1d34:	5f030000 	svcpl	0x00030000
    1d38:	02000006 	andeq	r0, r0, #6
    1d3c:	00004e08 	andeq	r4, r0, r8, lsl #28
    1d40:	85030400 	strhi	r0, [r3, #-1024]	; 0xfffffc00
    1d44:	02000010 	andeq	r0, r0, #16
    1d48:	00005509 	andeq	r5, r0, r9, lsl #10
    1d4c:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    1d50:	032a0704 			; <UNDEFINED> instruction: 0x032a0704
    1d54:	04050000 	streq	r0, [r5], #-0
    1d58:	0000005b 	andeq	r0, r0, fp, asr r0
    1d5c:	41080104 	tstmi	r8, r4, lsl #2
    1d60:	06000004 	streq	r0, [r0], -r4
    1d64:	000011d7 	ldrdeq	r1, [r0], -r7
    1d68:	00210a02 	eoreq	r0, r1, r2, lsl #20
    1d6c:	16070000 	strne	r0, [r7], -r0
    1d70:	0c000000 	stceq	0, cr0, [r0], {-0}
    1d74:	009e0603 	addseq	r0, lr, r3, lsl #12
    1d78:	2c030000 	stccs	0, cr0, [r3], {-0}
    1d7c:	03000005 	movweq	r0, #5
    1d80:	00009e07 	andeq	r9, r0, r7, lsl #28
    1d84:	1d030000 	stcne	0, cr0, [r3, #-0]
    1d88:	03000000 	movweq	r0, #0
    1d8c:	00009e08 	andeq	r9, r0, r8, lsl #28
    1d90:	12030400 	andne	r0, r3, #0, 8
    1d94:	03000000 	movweq	r0, #0
    1d98:	00009e09 	andeq	r9, r0, r9, lsl #28
    1d9c:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    1da0:	00006204 	andeq	r6, r0, r4, lsl #4
    1da4:	0caa0600 	stceq	6, cr0, [sl]
    1da8:	0a030000 	beq	c1db0 <startup-0x1ff3e250>
    1dac:	0000006d 	andeq	r0, r0, sp, rrx
    1db0:	00062407 	andeq	r2, r6, r7, lsl #8
    1db4:	06042400 	streq	r2, [r4], -r0, lsl #8
    1db8:	00000128 	andeq	r0, r0, r8, lsr #2
    1dbc:	0003de03 	andeq	sp, r3, r3, lsl #28
    1dc0:	28070400 	stmdacs	r7, {sl}
    1dc4:	00000001 	andeq	r0, r0, r1
    1dc8:	00063003 	andeq	r3, r6, r3
    1dcc:	2e080400 	cfcpyscs	mvf0, mvf8
    1dd0:	04000001 	streq	r0, [r0], #-1
    1dd4:	00059703 	andeq	r9, r5, r3, lsl #14
    1dd8:	2e090400 	cfcpyscs	mvf0, mvf9
    1ddc:	08000001 	stmdaeq	r0, {r0}
    1de0:	0005c303 	andeq	ip, r5, r3, lsl #6
    1de4:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    1de8:	0c000001 	stceq	0, cr0, [r0], {1}
    1dec:	0002ff03 	andeq	pc, r2, r3, lsl #30
    1df0:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    1df4:	10000001 	andne	r0, r0, r1
    1df8:	0003f003 	andeq	pc, r3, r3
    1dfc:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    1e00:	14000001 	strne	r0, [r0], #-1
    1e04:	00005203 	andeq	r5, r0, r3, lsl #4
    1e08:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    1e0c:	18000001 	stmdane	r0, {r0}
    1e10:	00036f03 	andeq	r6, r3, r3, lsl #30
    1e14:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    1e18:	1c000001 	stcne	0, cr0, [r0], {1}
    1e1c:	00037f03 	andeq	r7, r3, r3, lsl #30
    1e20:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    1e24:	20000001 	andcs	r0, r0, r1
    1e28:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    1e2c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1e30:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1e34:	40090074 	andmi	r0, r9, r4, ror r0
    1e38:	0a000001 	beq	1e44 <startup-0x1fffe1bc>
    1e3c:	00000140 	andeq	r0, r0, r0, asr #2
    1e40:	af040500 	svcge	0x00040500
    1e44:	05000000 	streq	r0, [r0, #-0]
    1e48:	00013504 	andeq	r3, r1, r4, lsl #10
    1e4c:	06250600 	strteq	r0, [r5], -r0, lsl #12
    1e50:	15040000 	strne	r0, [r4, #-0]
    1e54:	000000af 	andeq	r0, r0, pc, lsr #1
    1e58:	0001620b 	andeq	r6, r1, fp, lsl #4
    1e5c:	00016200 	andeq	r6, r1, r0, lsl #4
    1e60:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    1e64:	00014c04 	andeq	r4, r1, r4, lsl #24
    1e68:	04c40d00 	strbeq	r0, [r4], #3328	; 0xd00
    1e6c:	1c040000 	stcne	0, cr0, [r4], {-0}
    1e70:	00000157 	andeq	r0, r0, r7, asr r1
    1e74:	0003b50d 	andeq	fp, r3, sp, lsl #10
    1e78:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    1e7c:	06000001 	streq	r0, [r0], -r1
    1e80:	000005ee 	andeq	r0, r0, lr, ror #11
    1e84:	005b2405 	subseq	r2, fp, r5, lsl #8
    1e88:	7e0b0000 	cdpvc	0, 0, cr0, cr11, cr0, {0}
    1e8c:	9a000001 	bls	1e98 <startup-0x1fffe168>
    1e90:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1e94:	0000019a 	muleq	r0, sl, r1
    1e98:	040003ff 	streq	r0, [r0], #-1023	; 0xfffffc01
    1e9c:	039c0704 	orrseq	r0, ip, #4, 14	; 0x100000
    1ea0:	bb0d0000 	bllt	341ea8 <startup-0x1fcbe158>
    1ea4:	0500000f 	streq	r0, [r0, #-15]
    1ea8:	0001892b 	andeq	r8, r1, fp, lsr #18
    1eac:	02220d00 	eoreq	r0, r2, #0, 26
    1eb0:	2c050000 	stccs	0, cr0, [r5], {-0}
    1eb4:	00000189 	andeq	r0, r0, r9, lsl #3
    1eb8:	00044f0d 	andeq	r4, r4, sp, lsl #30
    1ebc:	892d0500 	pushhi	{r8, sl}
    1ec0:	0d000001 	stceq	0, cr0, [r0, #-4]
    1ec4:	0000030c 	andeq	r0, r0, ip, lsl #6
    1ec8:	01892e05 	orreq	r2, r9, r5, lsl #28
    1ecc:	9c0d0000 	stcls	0, cr0, [sp], {-0}
    1ed0:	05000002 	streq	r0, [r0, #-2]
    1ed4:	0001892f 	andeq	r8, r1, pc, lsr #18
    1ed8:	06060d00 	streq	r0, [r6], -r0, lsl #26
    1edc:	30050000 	andcc	r0, r5, r0
    1ee0:	00000189 	andeq	r0, r0, r9, lsl #3
    1ee4:	0005f60d 	andeq	pc, r5, sp, lsl #12
    1ee8:	89310500 	ldmdbhi	r1!, {r8, sl}
    1eec:	0f000001 	svceq	0x00000001
    1ef0:	000001ac 	andeq	r0, r0, ip, lsr #3
    1ef4:	03052b01 	movweq	r2, #23297	; 0x5b01
    1ef8:	2000488c 	andcs	r4, r0, ip, lsl #17
    1efc:	0001b70f 	andeq	fp, r1, pc, lsl #14
    1f00:	052c0100 	streq	r0, [ip, #-256]!	; 0xffffff00
    1f04:	003c8c03 	eorseq	r8, ip, r3, lsl #24
    1f08:	01c20f20 	biceq	r0, r2, r0, lsr #30
    1f0c:	2d010000 	stccs	0, cr0, [r1, #-0]
    1f10:	448c0305 	strmi	r0, [ip], #773	; 0x305
    1f14:	cd0f2000 	stcgt	0, cr2, [pc, #-0]	; 1f1c <startup-0x1fffe0e4>
    1f18:	01000001 	tsteq	r0, r1
    1f1c:	8c03052e 	cfstr32hi	mvfx0, [r3], {46}	; 0x2e
    1f20:	0f20004c 	svceq	0x0020004c
    1f24:	000001a1 	andeq	r0, r0, r1, lsr #3
    1f28:	03052f01 	movweq	r2, #24321	; 0x5f01
    1f2c:	2000408c 	andcs	r4, r0, ip, lsl #1
    1f30:	0001d810 	andeq	sp, r1, r0, lsl r8
    1f34:	03050100 	movweq	r0, #20736	; 0x5100
    1f38:	2000388c 	andcs	r3, r0, ip, lsl #17
    1f3c:	0001e310 	andeq	lr, r1, r0, lsl r3
    1f40:	03050100 	movweq	r0, #20736	; 0x5100
    1f44:	2000508c 	andcs	r5, r0, ip, lsl #1
    1f48:	000ff111 	andeq	pc, pc, r1, lsl r1	; <UNPREDICTABLE>
    1f4c:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    1f50:	20002782 	andcs	r2, r0, r2, lsl #15
    1f54:	0000006a 	andeq	r0, r0, sl, rrx
    1f58:	026d9c01 	rsbeq	r9, sp, #256	; 0x100
    1f5c:	d8120000 	ldmdale	r2, {}	; <UNPREDICTABLE>
    1f60:	01000010 	tsteq	r0, r0, lsl r0
    1f64:	012e01a8 	smulwbeq	lr, r8, r1
    1f68:	91020000 	mrsls	r0, (UNDEF: 2)
    1f6c:	82110074 	andshi	r0, r1, #116	; 0x74
    1f70:	0100000f 	tsteq	r0, pc
    1f74:	270001a0 	strcs	r0, [r0, -r0, lsr #3]
    1f78:	00822000 	addeq	r2, r2, r0
    1f7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f80:	000002a2 	andeq	r0, r0, r2, lsr #5
    1f84:	000fcc12 	andeq	ip, pc, r2, lsl ip	; <UNPREDICTABLE>
    1f88:	01a00100 	lsleq	r0, r0, #2
    1f8c:	00000162 	andeq	r0, r0, r2, ror #2
    1f90:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    1f94:	000003f8 	strdeq	r0, [r0], -r8
    1f98:	2e01a101 	mvfcss	f2, f1
    1f9c:	02000001 	andeq	r0, r0, #1
    1fa0:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    1fa4:	00001090 	muleq	r0, r0, r0
    1fa8:	f8019601 			; <UNDEFINED> instruction: 0xf8019601
    1fac:	08200025 	stmdaeq	r0!, {r0, r2, r5}
    1fb0:	01000001 	tsteq	r0, r1
    1fb4:	0002c69c 	muleq	r2, ip, r6
    1fb8:	00691500 	rsbeq	r1, r9, r0, lsl #10
    1fbc:	2e019701 	cdpcs	7, 0, cr9, cr1, cr1, {0}
    1fc0:	02000001 	andeq	r0, r0, #1
    1fc4:	11007491 			; <UNDEFINED> instruction: 0x11007491
    1fc8:	00001022 	andeq	r1, r0, r2, lsr #32
    1fcc:	c8017001 	stmdagt	r1, {r0, ip, sp, lr}
    1fd0:	30200024 	eorcc	r0, r0, r4, lsr #32
    1fd4:	01000001 	tsteq	r0, r1
    1fd8:	00033a9c 	muleq	r3, ip, sl
    1fdc:	00781500 	rsbseq	r1, r8, r0, lsl #10
    1fe0:	2e017101 	adfcss	f7, f1, f1
    1fe4:	02000001 	andeq	r0, r0, #1
    1fe8:	79156c91 	ldmdbvc	r5, {r0, r4, r7, sl, fp, sp, lr}
    1fec:	01720100 	cmneq	r2, r0, lsl #2
    1ff0:	0000012e 	andeq	r0, r0, lr, lsr #2
    1ff4:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
    1ff8:	00000306 	andeq	r0, r0, r6, lsl #6
    1ffc:	2e017301 	cdpcs	3, 0, cr7, cr1, cr1, {0}
    2000:	02000001 	andeq	r0, r0, #1
    2004:	5f136491 	svcpl	0x00136491
    2008:	01000006 	tsteq	r0, r6
    200c:	012e0174 			; <UNDEFINED> instruction: 0x012e0174
    2010:	91020000 	mrsls	r0, (UNDEF: 2)
    2014:	32781560 	rsbscc	r1, r8, #96, 10	; 0x18000000
    2018:	01760100 	cmneq	r6, r0, lsl #2
    201c:	0000012e 	andeq	r0, r0, lr, lsr #2
    2020:	165c9102 	ldrbne	r9, [ip], -r2, lsl #2
    2024:	7a010069 	bvc	421d0 <startup-0x1ffbde30>
    2028:	00012e01 	andeq	r2, r1, r1, lsl #28
    202c:	006b1500 	rsbeq	r1, fp, r0, lsl #10
    2030:	2e017b01 	vmlacs.f64	d7, d1, d1
    2034:	02000001 	andeq	r0, r0, #1
    2038:	11005891 			; <UNDEFINED> instruction: 0x11005891
    203c:	00001122 	andeq	r1, r0, r2, lsr #2
    2040:	76016501 	strvc	r6, [r1], -r1, lsl #10
    2044:	52200024 	eorpl	r0, r0, #36	; 0x24
    2048:	01000000 	mrseq	r0, (UNDEF: 0)
    204c:	0003a39c 	muleq	r3, ip, r3
    2050:	00781700 	rsbseq	r1, r8, r0, lsl #14
    2054:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
    2058:	02000001 	andeq	r0, r0, #1
    205c:	79176c91 	ldmdbvc	r7, {r0, r4, r7, sl, fp, sp, lr}
    2060:	01650100 	cmneq	r5, r0, lsl #2
    2064:	0000012e 	andeq	r0, r0, lr, lsr #2
    2068:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    206c:	00000306 	andeq	r0, r0, r6, lsl #6
    2070:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
    2074:	02000001 	andeq	r0, r0, #1
    2078:	5f126491 	svcpl	0x00126491
    207c:	01000006 	tsteq	r0, r6
    2080:	012e0165 			; <UNDEFINED> instruction: 0x012e0165
    2084:	91020000 	mrsls	r0, (UNDEF: 2)
    2088:	00691560 	rsbeq	r1, r9, r0, ror #10
    208c:	2e016601 	cfmadd32cs	mvax0, mvfx6, mvfx1, mvfx1
    2090:	02000001 	andeq	r0, r0, #1
    2094:	6a157491 	bvs	55f2e0 <startup-0x1faa0d20>
    2098:	01670100 	cmneq	r7, r0, lsl #2
    209c:	0000012e 	andeq	r0, r0, lr, lsr #2
    20a0:	00709102 	rsbseq	r9, r0, r2, lsl #2
    20a4:	0010c511 	andseq	ip, r0, r1, lsl r5
    20a8:	015b0100 	cmpeq	fp, r0, lsl #2
    20ac:	20002424 	andcs	r2, r0, r4, lsr #8
    20b0:	00000052 	andeq	r0, r0, r2, asr r0
    20b4:	040c9c01 	streq	r9, [ip], #-3073	; 0xfffff3ff
    20b8:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
    20bc:	015b0100 	cmpeq	fp, r0, lsl #2
    20c0:	0000012e 	andeq	r0, r0, lr, lsr #2
    20c4:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    20c8:	5b010079 	blpl	422b4 <startup-0x1ffbdd4c>
    20cc:	00012e01 	andeq	r2, r1, r1, lsl #28
    20d0:	68910200 	ldmvs	r1, {r9}
    20d4:	00030612 	andeq	r0, r3, r2, lsl r6
    20d8:	015b0100 	cmpeq	fp, r0, lsl #2
    20dc:	0000012e 	andeq	r0, r0, lr, lsr #2
    20e0:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    20e4:	0000065f 	andeq	r0, r0, pc, asr r6
    20e8:	2e015b01 	vmlacs.f64	d5, d1, d1
    20ec:	02000001 	andeq	r0, r0, #1
    20f0:	69156091 	ldmdbvs	r5, {r0, r4, r7, sp, lr}
    20f4:	015c0100 	cmpeq	ip, r0, lsl #2
    20f8:	0000012e 	andeq	r0, r0, lr, lsr #2
    20fc:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    2100:	5d01006a 	stcpl	0, cr0, [r1, #-424]	; 0xfffffe58
    2104:	00012e01 	andeq	r2, r1, r1, lsl #28
    2108:	70910200 	addsvc	r0, r1, r0, lsl #4
    210c:	0ffc1100 	svceq	0x00fc1100
    2110:	45010000 	strmi	r0, [r1, #-0]
    2114:	00230a01 	eoreq	r0, r3, r1, lsl #20
    2118:	00011a20 	andeq	r1, r1, r0, lsr #20
    211c:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    2120:	17000004 	strne	r0, [r0, -r4]
    2124:	45010073 	strmi	r0, [r1, #-115]	; 0xffffff8d
    2128:	00009e01 	andeq	r9, r0, r1, lsl #28
    212c:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    2130:	01007817 	tsteq	r0, r7, lsl r8
    2134:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
    2138:	91020000 	mrsls	r0, (UNDEF: 2)
    213c:	00791750 	rsbseq	r1, r9, r0, asr r7
    2140:	2e014501 	cfsh32cs	mvfx4, mvfx1, #1
    2144:	02000001 	andeq	r0, r0, #1
    2148:	73174c91 	tstvc	r7, #37120	; 0x9100
    214c:	01007465 	tsteq	r0, r5, ror #8
    2150:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
    2154:	91020000 	mrsls	r0, (UNDEF: 2)
    2158:	108a1248 	addne	r1, sl, r8, asr #4
    215c:	45010000 	strmi	r0, [r1, #-0]
    2160:	00012e01 	andeq	r2, r1, r1, lsl #28
    2164:	00910200 	addseq	r0, r1, r0, lsl #4
    2168:	01006915 	tsteq	r0, r5, lsl r9
    216c:	012e0146 			; <UNDEFINED> instruction: 0x012e0146
    2170:	91020000 	mrsls	r0, (UNDEF: 2)
    2174:	006a156c 	rsbeq	r1, sl, ip, ror #10
    2178:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
    217c:	02000001 	andeq	r0, r0, #1
    2180:	6b156891 	blvs	55c3cc <startup-0x1faa3c34>
    2184:	01460100 	mrseq	r0, (UNDEF: 86)
    2188:	0000012e 	andeq	r0, r0, lr, lsr #2
    218c:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
    2190:	000010fd 	strdeq	r1, [r0], -sp
    2194:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
    2198:	02000001 	andeq	r0, r0, #1
    219c:	42186091 	andsmi	r6, r8, #145	; 0x91
    21a0:	bc200023 	stclt	0, cr0, [r0], #-140	; 0xffffff74
    21a4:	13000000 	movwne	r0, #0
    21a8:	000010f8 	strdeq	r1, [r0], -r8
    21ac:	5b014d01 	blpl	555b8 <startup-0x1ffaaa48>
    21b0:	02000000 	andeq	r0, r0, #0
    21b4:	00005f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    21b8:	000fd111 	andeq	sp, pc, r1, lsl r1	; <UNPREDICTABLE>
    21bc:	01300100 	teqeq	r0, r0, lsl #2
    21c0:	20002234 	andcs	r2, r0, r4, lsr r2
    21c4:	000000d6 	ldrdeq	r0, [r0], -r6
    21c8:	05209c01 	streq	r9, [r0, #-3073]!	; 0xfffff3ff
    21cc:	74120000 	ldrvc	r0, [r2], #-0
    21d0:	0100000f 	tsteq	r0, pc
    21d4:	05200130 	streq	r0, [r0, #-304]!	; 0xfffffed0
    21d8:	91020000 	mrsls	r0, (UNDEF: 2)
    21dc:	00691564 	rsbeq	r1, r9, r4, ror #10
    21e0:	7e013101 	adfvcs	f3, f1, f1
    21e4:	02000001 	andeq	r0, r0, #1
    21e8:	6a157791 	bvs	560034 <startup-0x1fa9ffcc>
    21ec:	01310100 	teqeq	r1, r0, lsl #2
    21f0:	0000017e 	andeq	r0, r0, lr, ror r1
    21f4:	13769102 	cmnne	r6, #-2147483648	; 0x80000000
    21f8:	0000132e 	andeq	r1, r0, lr, lsr #6
    21fc:	7e013101 	adfvcs	f3, f1, f1
    2200:	02000001 	andeq	r0, r0, #1
    2204:	63156f91 	tstvs	r5, #580	; 0x244
    2208:	01310100 	teqeq	r1, r0, lsl #2
    220c:	0000017e 	andeq	r0, r0, lr, ror r1
    2210:	15759102 	ldrbne	r9, [r5, #-258]!	; 0xfffffefe
    2214:	3201006b 	andcc	r0, r1, #107	; 0x6b
    2218:	00004e01 	andeq	r4, r0, r1, lsl #28
    221c:	70910200 	addsvc	r0, r1, r0, lsl #4
    2220:	7e040500 	cfsh32vc	mvfx0, mvfx4, #0
    2224:	11000001 	tstne	r0, r1
    2228:	00000f7b 	andeq	r0, r0, fp, ror pc
    222c:	94010801 	strls	r0, [r1], #-2049	; 0xfffff7ff
    2230:	a0200020 	eorge	r0, r0, r0, lsr #32
    2234:	01000001 	tsteq	r0, r1
    2238:	0005a09c 	muleq	r5, ip, r0
    223c:	00781700 	rsbseq	r1, r8, r0, lsl #14
    2240:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
    2244:	02000001 	andeq	r0, r0, #1
    2248:	79176491 	ldmdbvc	r7, {r0, r4, r7, sl, sp, lr}
    224c:	01080100 	mrseq	r0, (UNDEF: 24)
    2250:	0000012e 	andeq	r0, r0, lr, lsr #2
    2254:	17609102 	strbne	r9, [r0, -r2, lsl #2]!
    2258:	00746573 	rsbseq	r6, r4, r3, ror r5
    225c:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
    2260:	02000001 	andeq	r0, r0, #1
    2264:	d3135c91 	tstle	r3, #37120	; 0x9100
    2268:	01000010 	tsteq	r0, r0, lsl r0
    226c:	017e0109 	cmneq	lr, r9, lsl #2
    2270:	91020000 	mrsls	r0, (UNDEF: 2)
    2274:	00631577 	rsbeq	r1, r3, r7, ror r5
    2278:	7e010901 	vmlavc.f16	s0, s2, s2	; <UNPREDICTABLE>
    227c:	02000001 	andeq	r0, r0, #1
    2280:	2e136f91 	mrccs	15, 0, r6, cr3, cr1, {4}
    2284:	01000013 	tsteq	r0, r3, lsl r0
    2288:	017e0109 	cmneq	lr, r9, lsl #2
    228c:	91020000 	mrsls	r0, (UNDEF: 2)
    2290:	11311376 	teqne	r1, r6, ror r3
    2294:	0a010000 	beq	4229c <startup-0x1ffbdd64>
    2298:	00012e01 	andeq	r2, r1, r1, lsl #28
    229c:	70910200 	addsvc	r0, r1, r0, lsl #4
    22a0:	0fc61900 	svceq	0x00c61900
    22a4:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    22a8:	20001f14 	andcs	r1, r0, r4, lsl pc
    22ac:	00000180 	andeq	r0, r0, r0, lsl #3
    22b0:	06069c01 	streq	r9, [r6], -r1, lsl #24
    22b4:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
    22b8:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    22bc:	02000001 	andeq	r0, r0, #1
    22c0:	791a6c91 	ldmdbvc	sl, {r0, r4, r7, sl, fp, sp, lr}
    22c4:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    22c8:	02000001 	andeq	r0, r0, #1
    22cc:	731a6891 	tstvc	sl, #9502720	; 0x910000
    22d0:	01007465 	tsteq	r0, r5, ror #8
    22d4:	00012ede 	ldrdeq	r2, [r1], -lr
    22d8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    22dc:	00108a1b 	andseq	r8, r0, fp, lsl sl
    22e0:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    22e4:	02000001 	andeq	r0, r0, #1
    22e8:	d31c6091 	tstle	ip, #145	; 0x91
    22ec:	01000010 	tsteq	r0, r0, lsl r0
    22f0:	00017edf 	ldrdeq	r7, [r1], -pc	; <UNPREDICTABLE>
    22f4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    22f8:	0011311c 	andseq	r3, r1, ip, lsl r1
    22fc:	2ee00100 	cdpcs	1, 14, cr0, cr0, cr0, {0}
    2300:	02000001 	andeq	r0, r0, #1
    2304:	1d007091 	stcne	0, cr7, [r0, #-580]	; 0xfffffdbc
    2308:	00001184 	andeq	r1, r0, r4, lsl #3
    230c:	1eaed101 	tannee	f5, f1
    2310:	00662000 	rsbeq	r2, r6, r0
    2314:	9c010000 	stcls	0, cr0, [r1], {-0}
    2318:	00000642 	andeq	r0, r0, r2, asr #12
    231c:	000f621c 	andeq	r6, pc, ip, lsl r2	; <UNPREDICTABLE>
    2320:	7ed20100 	cdpvc	1, 13, cr0, cr2, cr0, {0}
    2324:	02000001 	andeq	r0, r0, #1
    2328:	bc187791 	ldclt	7, cr7, [r8], {145}	; 0x91
    232c:	3e20001e 	miacc	acc0, lr, r0
    2330:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2334:	00646461 	rsbeq	r6, r4, r1, ror #8
    2338:	017ed601 	cmneq	lr, r1, lsl #12
    233c:	91020000 	mrsls	r0, (UNDEF: 2)
    2340:	1f000076 	svcne	0x00000076
    2344:	00001171 	andeq	r1, r0, r1, ror r1
    2348:	1e40bd01 	cdpne	13, 4, cr11, cr0, cr1, {0}
    234c:	006e2000 	rsbeq	r2, lr, r0
    2350:	9c010000 	stcls	0, cr0, [r1], {-0}
    2354:	0010e51d 	andseq	lr, r0, sp, lsl r5
    2358:	fab50100 	blx	fed42760 <firstTime.4040+0xded39a54>
    235c:	4620001d 			; <UNDEFINED> instruction: 0x4620001d
    2360:	01000000 	mrseq	r0, (UNDEF: 0)
    2364:	0006859c 	muleq	r6, ip, r5
    2368:	0fad1b00 	svceq	0x00ad1b00
    236c:	b5010000 	strlt	r0, [r1, #-0]
    2370:	0000017e 	andeq	r0, r0, lr, ror r1
    2374:	1b779102 	blne	1de6784 <startup-0x1e21987c>
    2378:	0000132e 	andeq	r1, r0, lr, lsr #6
    237c:	017eb501 	cmneq	lr, r1, lsl #10
    2380:	91020000 	mrsls	r0, (UNDEF: 2)
    2384:	9f1d0076 	svcls	0x001d0076
    2388:	0100000f 	tsteq	r0, pc
    238c:	001db4ae 	andseq	fp, sp, lr, lsr #9
    2390:	00004620 	andeq	r4, r0, r0, lsr #12
    2394:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    2398:	1b000006 	blne	23b8 <startup-0x1fffdc48>
    239c:	00000fad 	andeq	r0, r0, sp, lsr #31
    23a0:	017eae01 	cmneq	lr, r1, lsl #28
    23a4:	91020000 	mrsls	r0, (UNDEF: 2)
    23a8:	132e1b77 			; <UNDEFINED> instruction: 0x132e1b77
    23ac:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    23b0:	0000017e 	andeq	r0, r0, lr, ror r1
    23b4:	00769102 	rsbseq	r9, r6, r2, lsl #2
    23b8:	0010141d 	andseq	r1, r0, sp, lsl r4
    23bc:	36990100 	ldrcc	r0, [r9], r0, lsl #2
    23c0:	7e20001d 	miavc	acc0, sp, r0
    23c4:	01000000 	mrseq	r0, (UNDEF: 0)
    23c8:	0006e99c 	muleq	r6, ip, r9
    23cc:	05a71b00 	streq	r1, [r7, #2816]!	; 0xb00
    23d0:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    23d4:	0000017e 	andeq	r0, r0, lr, ror r1
    23d8:	1b779102 	blne	1de67e8 <startup-0x1e219818>
    23dc:	0000132e 	andeq	r1, r0, lr, lsr #6
    23e0:	017e9901 	cmneq	lr, r1, lsl #18
    23e4:	91020000 	mrsls	r0, (UNDEF: 2)
    23e8:	78200076 	stmdavc	r0!, {r1, r2, r4, r5, r6}
    23ec:	01000010 	tsteq	r0, r0, lsl r0
    23f0:	00012e94 	muleq	r1, r4, lr
    23f4:	001d0c00 	andseq	r0, sp, r0, lsl #24
    23f8:	00002a20 	andeq	r2, r0, r0, lsr #20
    23fc:	119c0100 	orrsne	r0, ip, r0, lsl #2
    2400:	1b000007 	blne	2424 <startup-0x1fffdbdc>
    2404:	0000132e 	andeq	r1, r0, lr, lsr #6
    2408:	017e9401 	cmneq	lr, r1, lsl #8
    240c:	91020000 	mrsls	r0, (UNDEF: 2)
    2410:	67210077 			; <UNDEFINED> instruction: 0x67210077
    2414:	0100000f 	tsteq	r0, pc
    2418:	00017e7b 	andeq	r7, r1, fp, ror lr
    241c:	001c7800 	andseq	r7, ip, r0, lsl #16
    2420:	00009420 	andeq	r9, r0, r0, lsr #8
    2424:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
    2428:	1b000007 	blne	244c <startup-0x1fffdbb4>
    242c:	0000132e 	andeq	r1, r0, lr, lsr #6
    2430:	017e7b01 	cmneq	lr, r1, lsl #22
    2434:	91020000 	mrsls	r0, (UNDEF: 2)
    2438:	76721e6f 	ldrbtvc	r1, [r2], -pc, ror #28
    243c:	5b840100 	blpl	fe102844 <firstTime.4040+0xde0f9b38>
    2440:	02000000 	andeq	r0, r0, #0
    2444:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
    2448:	00001149 	andeq	r1, r0, r9, asr #2
    244c:	1c0a6501 	cfstr32ne	mvfx6, [sl], {1}
    2450:	006e2000 	rsbeq	r2, lr, r0
    2454:	9c010000 	stcls	0, cr0, [r1], {-0}
    2458:	00000768 	andeq	r0, r0, r8, ror #14
    245c:	0100631e 	tsteq	r0, lr, lsl r3
    2460:	00017e66 	andeq	r7, r1, r6, ror #28
    2464:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2468:	11371d00 	teqne	r7, r0, lsl #26
    246c:	50010000 	andpl	r0, r1, r0
    2470:	20001ba4 	andcs	r1, r0, r4, lsr #23
    2474:	00000066 	andeq	r0, r0, r6, rrx
    2478:	078c9c01 	streq	r9, [ip, r1, lsl #24]
    247c:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    2480:	01000013 	tsteq	r0, r3, lsl r0
    2484:	00017e50 	andeq	r7, r1, r0, asr lr
    2488:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    248c:	10302200 	eorsne	r2, r0, r0, lsl #4
    2490:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    2494:	20001b4c 	andcs	r1, r0, ip, asr #22
    2498:	00000058 	andeq	r0, r0, r8, asr r0
    249c:	07ba9c01 	ldreq	r9, [sl, r1, lsl #24]!
    24a0:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
    24a4:	7e490100 	dvfvce	f0, f1, f0
    24a8:	02000001 	andeq	r0, r0, #1
    24ac:	631e6f91 	tstvs	lr, #580	; 0x244
    24b0:	7e4a0100 	dvfvce	f0, f2, f0
    24b4:	02000001 	andeq	r0, r0, #1
    24b8:	22007791 	andcs	r7, r0, #38010880	; 0x2440000
    24bc:	000010a4 	andeq	r1, r0, r4, lsr #1
    24c0:	1afc4101 	bne	fff128cc <firstTime.4040+0xdff09bc0>
    24c4:	00502000 	subseq	r2, r0, r0
    24c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    24cc:	000007e8 	andeq	r0, r0, r8, ror #15
    24d0:	0100781a 	tsteq	r0, sl, lsl r8
    24d4:	00017e41 	andeq	r7, r1, r1, asr #28
    24d8:	6f910200 	svcvs	0x00910200
    24dc:	0100631e 	tsteq	r0, lr, lsl r3
    24e0:	00017e42 	andeq	r7, r1, r2, asr #28
    24e4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    24e8:	110c1f00 	tstne	ip, r0, lsl #30
    24ec:	3a010000 	bcc	424f4 <startup-0x1ffbdb0c>
    24f0:	20001acc 	andcs	r1, r0, ip, asr #21
    24f4:	00000030 	andeq	r0, r0, r0, lsr r0
    24f8:	b51f9c01 	ldrlt	r9, [pc, #-3073]	; 18ff <startup-0x1fffe701>
    24fc:	0100000f 	tsteq	r0, pc
    2500:	001ab437 	andseq	fp, sl, r7, lsr r4
    2504:	00001820 	andeq	r1, r0, r0, lsr #16
    2508:	199c0100 	ldmibne	ip, {r8}
    250c:	0000115c 	andeq	r1, r0, ip, asr r1
    2510:	1a823201 	bne	fe08ed1c <firstTime.4040+0xde086010>
    2514:	00322000 	eorseq	r2, r2, r0
    2518:	9c010000 	stcls	0, cr0, [r1], {-0}
    251c:	0000083a 	andeq	r0, r0, sl, lsr r8
    2520:	000f741b 	andeq	r7, pc, fp, lsl r4	; <UNPREDICTABLE>
    2524:	20320100 	eorscs	r0, r2, r0, lsl #2
    2528:	02000005 	andeq	r0, r0, #5
    252c:	691e6c91 	ldmdbvs	lr, {r0, r4, r7, sl, fp, sp, lr}
    2530:	2e330100 	rsfcss	f0, f3, f0
    2534:	02000001 	andeq	r0, r0, #1
    2538:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    253c:	00000fe5 	andeq	r0, r0, r5, ror #31
    2540:	1a5c2101 	bne	170a94c <startup-0x1e8f56b4>
    2544:	00262000 	eoreq	r2, r6, r0
    2548:	9c010000 	stcls	0, cr0, [r1], {-0}
    254c:	0000085d 	andeq	r0, r0, sp, asr r8
    2550:	00736d1a 	rsbseq	r6, r3, sl, lsl sp
    2554:	004e2101 	subeq	r2, lr, r1, lsl #2
    2558:	91020000 	mrsls	r0, (UNDEF: 2)
    255c:	931d0074 	tstls	sp, #116	; 0x74
    2560:	0100000f 	tsteq	r0, pc
    2564:	001a3018 	andseq	r3, sl, r8, lsl r0
    2568:	00002c20 	andeq	r2, r0, r0, lsr #24
    256c:	809c0100 	addshi	r0, ip, r0, lsl #2
    2570:	1a000008 	bne	2598 <startup-0x1fffda68>
    2574:	01007375 	tsteq	r0, r5, ror r3
    2578:	00004e18 	andeq	r4, r0, r8, lsl lr
    257c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2580:	10082300 	andne	r2, r8, r0, lsl #6
    2584:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    2588:	200019ec 	andcs	r1, r0, ip, ror #19
    258c:	00000044 	andeq	r0, r0, r4, asr #32
    2590:	b9239c01 	stmdblt	r3!, {r0, sl, fp, ip, pc}
    2594:	01000010 	tsteq	r0, r0, lsl r0
    2598:	0019a804 	andseq	sl, r9, r4, lsl #16
    259c:	00004420 	andeq	r4, r0, r0, lsr #8
    25a0:	009c0100 	addseq	r0, ip, r0, lsl #2
    25a4:	00000100 	andeq	r0, r0, r0, lsl #2
    25a8:	081e0004 	ldmdaeq	lr, {r2}
    25ac:	01040000 	mrseq	r0, (UNDEF: 4)
    25b0:	00000081 	andeq	r0, r0, r1, lsl #1
    25b4:	0011a40c 	andseq	sl, r1, ip, lsl #8
    25b8:	0027ec00 	eoreq	lr, r7, r0, lsl #24
    25bc:	00002820 	andeq	r2, r0, r0, lsr #16
    25c0:	000c5b00 	andeq	r5, ip, r0, lsl #22
    25c4:	020c0200 	andeq	r0, ip, #0, 4
    25c8:	00004e05 	andeq	r4, r0, r5, lsl #28
    25cc:	03060300 	movweq	r0, #25344	; 0x6300
    25d0:	07020000 	streq	r0, [r2, -r0]
    25d4:	0000004e 	andeq	r0, r0, lr, asr #32
    25d8:	065f0300 	ldrbeq	r0, [pc], -r0, lsl #6
    25dc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    25e0:	0000004e 	andeq	r0, r0, lr, asr #32
    25e4:	10850304 	addne	r0, r5, r4, lsl #6
    25e8:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    25ec:	00000055 	andeq	r0, r0, r5, asr r0
    25f0:	04040008 	streq	r0, [r4], #-8
    25f4:	00032a07 	andeq	r2, r3, r7, lsl #20
    25f8:	5b040500 	blpl	103a00 <startup-0x1fefc600>
    25fc:	04000000 	streq	r0, [r0], #-0
    2600:	04410801 	strbeq	r0, [r1], #-2049	; 0xfffff7ff
    2604:	d7060000 	strle	r0, [r6, -r0]
    2608:	02000011 	andeq	r0, r0, #17
    260c:	0000210a 	andeq	r2, r0, sl, lsl #2
    2610:	00160700 	andseq	r0, r6, r0, lsl #14
    2614:	030c0000 	movweq	r0, #49152	; 0xc000
    2618:	00009e06 	andeq	r9, r0, r6, lsl #28
    261c:	052c0300 	streq	r0, [ip, #-768]!	; 0xfffffd00
    2620:	07030000 	streq	r0, [r3, -r0]
    2624:	0000009e 	muleq	r0, lr, r0
    2628:	001d0300 	andseq	r0, sp, r0, lsl #6
    262c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2630:	0000009e 	muleq	r0, lr, r0
    2634:	00120304 	andseq	r0, r2, r4, lsl #6
    2638:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    263c:	0000009e 	muleq	r0, lr, r0
    2640:	04050008 	streq	r0, [r5], #-8
    2644:	00000062 	andeq	r0, r0, r2, rrx
    2648:	000caa06 	andeq	sl, ip, r6, lsl #20
    264c:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    2650:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2654:	00001199 	muleq	r0, r9, r1
    2658:	27ec0301 	strbcs	r0, [ip, r1, lsl #6]!
    265c:	00282000 	eoreq	r2, r8, r0
    2660:	9c010000 	stcls	0, cr0, [r1], {-0}
    2664:	000000fd 	strdeq	r0, [r0], -sp
    2668:	00119e09 	andseq	r9, r1, r9, lsl #28
    266c:	fd030100 	stc2	1, cr0, [r3, #-0]
    2670:	02000000 	andeq	r0, r0, #0
    2674:	2c097491 	cfstrscs	mvf7, [r9], {145}	; 0x91
    2678:	01000005 	tsteq	r0, r5
    267c:	00009e03 	andeq	r9, r0, r3, lsl #28
    2680:	70910200 	addsvc	r0, r1, r0, lsl #4
    2684:	00001d09 	andeq	r1, r0, r9, lsl #26
    2688:	9e030100 	adflss	f0, f3, f0
    268c:	02000000 	andeq	r0, r0, #0
    2690:	12096c91 	andne	r6, r9, #37120	; 0x9100
    2694:	01000000 	mrseq	r0, (UNDEF: 0)
    2698:	00009e03 	andeq	r9, r0, r3, lsl #28
    269c:	68910200 	ldmvs	r1, {r9}
    26a0:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    26a4:	00000000 	andeq	r0, r0, r0
    26a8:	000000c3 	andeq	r0, r0, r3, asr #1
    26ac:	08a50004 	stmiaeq	r5!, {r2}
    26b0:	01040000 	mrseq	r0, (UNDEF: 4)
    26b4:	00000081 	andeq	r0, r0, r1, lsl #1
    26b8:	0011de0c 	andseq	sp, r1, ip, lsl #28
    26bc:	00281400 	eoreq	r1, r8, r0, lsl #8
    26c0:	00002820 	andeq	r2, r0, r0, lsr #16
    26c4:	000cd100 	andeq	sp, ip, r0, lsl #2
    26c8:	020c0200 	andeq	r0, ip, #0, 4
    26cc:	00004e05 	andeq	r4, r0, r5, lsl #28
    26d0:	03060300 	movweq	r0, #25344	; 0x6300
    26d4:	07020000 	streq	r0, [r2, -r0]
    26d8:	0000004e 	andeq	r0, r0, lr, asr #32
    26dc:	065f0300 	ldrbeq	r0, [pc], -r0, lsl #6
    26e0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    26e4:	0000004e 	andeq	r0, r0, lr, asr #32
    26e8:	10850304 	addne	r0, r5, r4, lsl #6
    26ec:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    26f0:	00000055 	andeq	r0, r0, r5, asr r0
    26f4:	04040008 	streq	r0, [r4], #-8
    26f8:	00032a07 	andeq	r2, r3, r7, lsl #20
    26fc:	5b040500 	blpl	103b04 <startup-0x1fefc4fc>
    2700:	04000000 	streq	r0, [r0], #-0
    2704:	04410801 	strbeq	r0, [r1], #-2049	; 0xfffff7ff
    2708:	d7060000 	strle	r0, [r6, -r0]
    270c:	02000011 	andeq	r0, r0, #17
    2710:	0000210a 	andeq	r2, r0, sl, lsl #2
    2714:	11d20700 	bicsne	r0, r2, r0, lsl #14
    2718:	03010000 	movweq	r0, #4096	; 0x1000
    271c:	20002814 	andcs	r2, r0, r4, lsl r8
    2720:	00000028 	andeq	r0, r0, r8, lsr #32
    2724:	00b99c01 	adcseq	r9, r9, r1, lsl #24
    2728:	73080000 	movwvc	r0, #32768	; 0x8000
    272c:	b9030100 	stmdblt	r3, {r8}
    2730:	02000000 	andeq	r0, r0, #0
    2734:	85097491 	strhi	r7, [r9, #-1169]	; 0xfffffb6f
    2738:	01000010 	tsteq	r0, r0, lsl r0
    273c:	00005503 	andeq	r5, r0, r3, lsl #10
    2740:	70910200 	addsvc	r0, r1, r0, lsl #4
    2744:	00030609 	andeq	r0, r3, r9, lsl #12
    2748:	bf030100 	svclt	0x00030100
    274c:	02000000 	andeq	r0, r0, #0
    2750:	5f096c91 	svcpl	0x00096c91
    2754:	01000006 	tsteq	r0, r6
    2758:	0000bf03 	andeq	fp, r0, r3, lsl #30
    275c:	68910200 	ldmvs	r1, {r9}
    2760:	62040500 	andvs	r0, r4, #0, 10
    2764:	0a000000 	beq	276c <startup-0x1fffd894>
    2768:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    276c:	35000074 	strcc	r0, [r0, #-116]	; 0xffffff8c
    2770:	04000001 	streq	r0, [r0], #-1
    2774:	00093700 	andeq	r3, r9, r0, lsl #14
    2778:	81010400 	tsthi	r1, r0, lsl #8
    277c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2780:	00001244 	andeq	r1, r0, r4, asr #4
    2784:	2000283c 	andcs	r2, r0, ip, lsr r8
    2788:	0000006c 	andeq	r0, r0, ip, rrx
    278c:	00000d3d 	andeq	r0, r0, sp, lsr sp
    2790:	13021802 	movwne	r1, #10242	; 0x2802
    2794:	000000ae 	andeq	r0, r0, lr, lsr #1
    2798:	00120d03 	andseq	r0, r2, r3, lsl #26
    279c:	ae140200 	cdpge	2, 1, cr0, cr4, cr0, {0}
    27a0:	00000000 	andeq	r0, r0, r0
    27a4:	00122603 	andseq	r2, r2, r3, lsl #12
    27a8:	b5150200 	ldrlt	r0, [r5, #-512]	; 0xfffffe00
    27ac:	04000000 	streq	r0, [r0], #-0
    27b0:	00127103 	andseq	r7, r2, r3, lsl #2
    27b4:	b5160200 	ldrlt	r0, [r6, #-512]	; 0xfffffe00
    27b8:	06000000 	streq	r0, [r0], -r0
    27bc:	00129303 	andseq	r9, r2, r3, lsl #6
    27c0:	ae170200 	cdpge	2, 1, cr0, cr7, cr0, {0}
    27c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    27c8:	00123203 	andseq	r3, r2, r3, lsl #4
    27cc:	ae180200 	cdpge	2, 1, cr0, cr8, cr0, {0}
    27d0:	0c000000 	stceq	0, cr0, [r0], {-0}
    27d4:	0012a303 	andseq	sl, r2, r3, lsl #6
    27d8:	bc190200 	lfmlt	f0, 4, [r9], {-0}
    27dc:	10000000 	andne	r0, r0, r0
    27e0:	00129b03 	andseq	r9, r2, r3, lsl #22
    27e4:	bc1a0200 	lfmlt	f0, 4, [sl], {-0}
    27e8:	11000000 	mrsne	r0, (UNDEF: 0)
    27ec:	00123803 	andseq	r3, r2, r3, lsl #16
    27f0:	b51b0200 	ldrlt	r0, [fp, #-512]	; 0xfffffe00
    27f4:	12000000 	andne	r0, r0, #0
    27f8:	00128c03 	andseq	r8, r2, r3, lsl #24
    27fc:	bc1c0200 	lfmlt	f0, 4, [ip], {-0}
    2800:	14000000 	strne	r0, [r0], #-0
    2804:	00121e03 	andseq	r1, r2, r3, lsl #28
    2808:	bc1d0200 	lfmlt	f0, 4, [sp], {-0}
    280c:	15000000 	strne	r0, [r0, #-0]
    2810:	0012aa03 	andseq	sl, r2, r3, lsl #20
    2814:	b51e0200 	ldrlt	r0, [lr, #-512]	; 0xfffffe00
    2818:	16000000 	strne	r0, [r0], -r0
    281c:	07040400 	streq	r0, [r4, -r0, lsl #8]
    2820:	0000032a 	andeq	r0, r0, sl, lsr #6
    2824:	24070204 	strcs	r0, [r7], #-516	; 0xfffffdfc
    2828:	04000003 	streq	r0, [r0], #-3
    282c:	04410801 	strbeq	r0, [r1], #-2049	; 0xfffff7ff
    2830:	2d050000 	stccs	0, cr0, [r5, #-0]
    2834:	02000012 	andeq	r0, r0, #18
    2838:	0000211f 	andeq	r2, r0, pc, lsl r1
    283c:	127c0600 	rsbsne	r0, ip, #0, 12
    2840:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    2844:	00000104 	andeq	r0, r0, r4, lsl #2
    2848:	20002874 	andcs	r2, r0, r4, ror r8
    284c:	00000034 	andeq	r0, r0, r4, lsr r0
    2850:	01049c01 	tsteq	r4, r1, lsl #24
    2854:	62070000 	andvs	r0, r7, #0
    2858:	01007469 	tsteq	r0, r9, ror #8
    285c:	0001040e 	andeq	r0, r1, lr, lsl #8
    2860:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2864:	4c494408 	cfstrdmi	mvd4, [r9], {8}
    2868:	0b0f0100 	bleq	3c2c70 <startup-0x1fc3d390>
    286c:	02000001 	andeq	r0, r0, #1
    2870:	09006f91 	stmdbeq	r0, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    2874:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2878:	01040074 	tsteq	r4, r4, ror r0
    287c:	00044a08 	andeq	r4, r4, r8, lsl #20
    2880:	12b60a00 	adcsne	r0, r6, #0, 20
    2884:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    2888:	0000010b 	andeq	r0, r0, fp, lsl #2
    288c:	20002854 	andcs	r2, r0, r4, asr r8
    2890:	00000020 	andeq	r0, r0, r0, lsr #32
    2894:	130b9c01 	movwne	r9, #48129	; 0xbc01
    2898:	01000012 	tsteq	r0, r2, lsl r0
    289c:	00283c04 	eoreq	r3, r8, r4, lsl #24
    28a0:	00001820 	andeq	r1, r0, r0, lsr #16
    28a4:	009c0100 	addseq	r0, ip, r0, lsl #2
    28a8:	000004ed 	andeq	r0, r0, sp, ror #9
    28ac:	09f40004 	ldmibeq	r4!, {r2}^
    28b0:	01040000 	mrseq	r0, (UNDEF: 4)
    28b4:	00000081 	andeq	r0, r0, r1, lsl #1
    28b8:	0013fb0c 	andseq	pc, r3, ip, lsl #22
    28bc:	0028a800 	eoreq	sl, r8, r0, lsl #16
    28c0:	00052020 	andeq	r2, r5, r0, lsr #32
    28c4:	000dad00 	andeq	sl, sp, r0, lsl #26
    28c8:	020c0200 	andeq	r0, ip, #0, 4
    28cc:	00004e05 	andeq	r4, r0, r5, lsl #28
    28d0:	03060300 	movweq	r0, #25344	; 0x6300
    28d4:	07020000 	streq	r0, [r2, -r0]
    28d8:	0000004e 	andeq	r0, r0, lr, asr #32
    28dc:	065f0300 	ldrbeq	r0, [pc], -r0, lsl #6
    28e0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    28e4:	0000004e 	andeq	r0, r0, lr, asr #32
    28e8:	10850304 	addne	r0, r5, r4, lsl #6
    28ec:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    28f0:	00000055 	andeq	r0, r0, r5, asr r0
    28f4:	04040008 	streq	r0, [r4], #-8
    28f8:	00032a07 	andeq	r2, r3, r7, lsl #20
    28fc:	5b040500 	blpl	103d04 <startup-0x1fefc2fc>
    2900:	04000000 	streq	r0, [r0], #-0
    2904:	04410801 	strbeq	r0, [r1], #-2049	; 0xfffff7ff
    2908:	d7060000 	strle	r0, [r6, -r0]
    290c:	02000011 	andeq	r0, r0, #17
    2910:	0000210a 	andeq	r2, r0, sl, lsl #2
    2914:	00160700 	andseq	r0, r6, r0, lsl #14
    2918:	030c0000 	movweq	r0, #49152	; 0xc000
    291c:	00009e06 	andeq	r9, r0, r6, lsl #28
    2920:	052c0300 	streq	r0, [ip, #-768]!	; 0xfffffd00
    2924:	07030000 	streq	r0, [r3, -r0]
    2928:	0000009e 	muleq	r0, lr, r0
    292c:	001d0300 	andseq	r0, sp, r0, lsl #6
    2930:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2934:	0000009e 	muleq	r0, lr, r0
    2938:	00120304 	andseq	r0, r2, r4, lsl #6
    293c:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    2940:	0000009e 	muleq	r0, lr, r0
    2944:	04050008 	streq	r0, [r5], #-8
    2948:	00000062 	andeq	r0, r0, r2, rrx
    294c:	000caa06 	andeq	sl, ip, r6, lsl #20
    2950:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    2954:	07000000 	streq	r0, [r0, -r0]
    2958:	00000624 	andeq	r0, r0, r4, lsr #12
    295c:	28060424 	stmdacs	r6, {r2, r5, sl}
    2960:	03000001 	movweq	r0, #1
    2964:	000003de 	ldrdeq	r0, [r0], -lr
    2968:	01280704 			; <UNDEFINED> instruction: 0x01280704
    296c:	03000000 	movweq	r0, #0
    2970:	00000630 	andeq	r0, r0, r0, lsr r6
    2974:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    2978:	03040000 	movweq	r0, #16384	; 0x4000
    297c:	00000597 	muleq	r0, r7, r5
    2980:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    2984:	03080000 	movweq	r0, #32768	; 0x8000
    2988:	000005c3 	andeq	r0, r0, r3, asr #11
    298c:	01460c04 	cmpeq	r6, r4, lsl #24
    2990:	030c0000 	movweq	r0, #49152	; 0xc000
    2994:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2998:	01460d04 	cmpeq	r6, r4, lsl #26
    299c:	03100000 	tsteq	r0, #0
    29a0:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    29a4:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    29a8:	03140000 	tsteq	r4, #0
    29ac:	00000052 	andeq	r0, r0, r2, asr r0
    29b0:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    29b4:	03180000 	tsteq	r8, #0
    29b8:	0000036f 	andeq	r0, r0, pc, ror #6
    29bc:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    29c0:	031c0000 	tsteq	ip, #0
    29c4:	0000037f 	andeq	r0, r0, pc, ror r3
    29c8:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    29cc:	00200000 	eoreq	r0, r0, r0
    29d0:	00a40405 	adceq	r0, r4, r5, lsl #8
    29d4:	04080000 	streq	r0, [r8], #-0
    29d8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    29dc:	01400900 	cmpeq	r0, r0, lsl #18
    29e0:	400a0000 	andmi	r0, sl, r0
    29e4:	00000001 	andeq	r0, r0, r1
    29e8:	00af0405 	adceq	r0, pc, r5, lsl #8
    29ec:	04050000 	streq	r0, [r5], #-0
    29f0:	00000135 	andeq	r0, r0, r5, lsr r1
    29f4:	00062506 	andeq	r2, r6, r6, lsl #10
    29f8:	af150400 	svcge	0x00150400
    29fc:	0b000000 	bleq	2a04 <startup-0x1fffd5fc>
    2a00:	00000162 	andeq	r0, r0, r2, ror #2
    2a04:	00000162 	andeq	r0, r0, r2, ror #2
    2a08:	0405000c 	streq	r0, [r5], #-12
    2a0c:	0000014c 	andeq	r0, r0, ip, asr #2
    2a10:	0004c40d 	andeq	ip, r4, sp, lsl #8
    2a14:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    2a18:	0d000001 	stceq	0, cr0, [r0, #-4]
    2a1c:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    2a20:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    2a24:	ee060000 	cdp	0, 0, cr0, cr6, cr0, {0}
    2a28:	05000005 	streq	r0, [r0, #-5]
    2a2c:	00005b24 	andeq	r5, r0, r4, lsr #22
    2a30:	017e0b00 	cmneq	lr, r0, lsl #22
    2a34:	019a0000 	orrseq	r0, sl, r0
    2a38:	9a0e0000 	bls	382a40 <startup-0x1fc7d5c0>
    2a3c:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    2a40:	04040003 	streq	r0, [r4], #-3
    2a44:	00039c07 	andeq	r9, r3, r7, lsl #24
    2a48:	0fbb0d00 	svceq	0x00bb0d00
    2a4c:	2b050000 	blcs	142a54 <startup-0x1febd5ac>
    2a50:	00000189 	andeq	r0, r0, r9, lsl #3
    2a54:	0002220d 	andeq	r2, r2, sp, lsl #4
    2a58:	892c0500 	stmdbhi	ip!, {r8, sl}
    2a5c:	0d000001 	stceq	0, cr0, [r0, #-4]
    2a60:	0000044f 	andeq	r0, r0, pc, asr #8
    2a64:	01892d05 	orreq	r2, r9, r5, lsl #26
    2a68:	0c0d0000 	stceq	0, cr0, [sp], {-0}
    2a6c:	05000003 	streq	r0, [r0, #-3]
    2a70:	0001892e 	andeq	r8, r1, lr, lsr #18
    2a74:	029c0d00 	addseq	r0, ip, #0, 26
    2a78:	2f050000 	svccs	0x00050000
    2a7c:	00000189 	andeq	r0, r0, r9, lsl #3
    2a80:	0006060d 	andeq	r0, r6, sp, lsl #12
    2a84:	89300500 	ldmdbhi	r0!, {r8, sl}
    2a88:	0d000001 	stceq	0, cr0, [r0, #-4]
    2a8c:	000005f6 	strdeq	r0, [r0], -r6
    2a90:	01893105 	orreq	r3, r9, r5, lsl #2
    2a94:	810f0000 	mrshi	r0, CPSR
    2a98:	01000013 	tsteq	r0, r3, lsl r0
    2a9c:	002d44e4 	eoreq	r4, sp, r4, ror #9
    2aa0:	00008420 	andeq	r8, r0, r0, lsr #8
    2aa4:	2c9c0100 	ldfcss	f0, [ip], {0}
    2aa8:	10000002 	andne	r0, r0, r2
    2aac:	e5010073 	str	r0, [r1, #-115]	; 0xffffff8d
    2ab0:	0000022c 	andeq	r0, r0, ip, lsr #4
    2ab4:	116c9102 	cmnne	ip, r2, lsl #2
    2ab8:	0000135c 	andeq	r1, r0, ip, asr r3
    2abc:	0239e601 	eorseq	lr, r9, #1048576	; 0x100000
    2ac0:	91020000 	mrsls	r0, (UNDEF: 2)
    2ac4:	1362115c 	cmnne	r2, #92, 2
    2ac8:	e7010000 	str	r0, [r1, -r0]
    2acc:	00000249 	andeq	r0, r0, r9, asr #4
    2ad0:	00489102 	subeq	r9, r8, r2, lsl #2
    2ad4:	02320405 	eorseq	r0, r2, #83886080	; 0x5000000
    2ad8:	01040000 	mrseq	r0, (UNDEF: 4)
    2adc:	00044a08 	andeq	r4, r4, r8, lsl #20
    2ae0:	02320b00 	eorseq	r0, r2, #0, 22
    2ae4:	02490000 	subeq	r0, r9, #0
    2ae8:	9a120000 	bls	482af0 <startup-0x1fb7d510>
    2aec:	0c000001 	stceq	0, cr0, [r0], {1}
    2af0:	02320b00 	eorseq	r0, r2, #0, 22
    2af4:	02590000 	subseq	r0, r9, #0
    2af8:	9a120000 	bls	482b00 <startup-0x1fb7d500>
    2afc:	13000001 	movwne	r0, #1
    2b00:	13120f00 	tstne	r2, #0, 30
    2b04:	cc010000 	stcgt	0, cr0, [r1], {-0}
    2b08:	20002cb6 			; <UNDEFINED> instruction: 0x20002cb6
    2b0c:	0000008e 	andeq	r0, r0, lr, lsl #1
    2b10:	02b39c01 	adcseq	r9, r3, #256	; 0x100
    2b14:	4a130000 	bmi	4c2b1c <startup-0x1fb3d4e4>
    2b18:	01000014 	tsteq	r0, r4, lsl r0
    2b1c:	00022ccc 	andeq	r2, r2, ip, asr #25
    2b20:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2b24:	00026013 	andeq	r6, r2, r3, lsl r0
    2b28:	2ccc0100 	stfcse	f0, [ip], {0}
    2b2c:	02000002 	andeq	r0, r0, #2
    2b30:	f4136891 			; <UNDEFINED> instruction: 0xf4136891
    2b34:	01000013 	tsteq	r0, r3, lsl r0
    2b38:	00012ecc 	andeq	r2, r1, ip, asr #29
    2b3c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2b40:	0012d013 	andseq	sp, r2, r3, lsl r0
    2b44:	2ecc0100 	polcse	f0, f4, f0
    2b48:	02000001 	andeq	r0, r0, #1
    2b4c:	69106091 	ldmdbvs	r0, {r0, r4, r7, sp, lr}
    2b50:	2ed00100 	cdpcs	1, 13, cr0, cr0, cr0, {0}
    2b54:	02000001 	andeq	r0, r0, #1
    2b58:	0f007491 	svceq	0x00007491
    2b5c:	000013b3 			; <UNDEFINED> instruction: 0x000013b3
    2b60:	2c58bd01 	mrrccs	13, 0, fp, r8, cr1
    2b64:	005e2000 	subseq	r2, lr, r0
    2b68:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b6c:	000002e5 	andeq	r0, r0, r5, ror #5
    2b70:	00144a13 	andseq	r4, r4, r3, lsl sl
    2b74:	2cbd0100 	ldfcss	f0, [sp]
    2b78:	02000002 	andeq	r0, r0, #2
    2b7c:	60137491 	mulsvs	r3, r1, r4
    2b80:	01000002 	tsteq	r0, r2
    2b84:	00022cbd 			; <UNDEFINED> instruction: 0x00022cbd
    2b88:	70910200 	addsvc	r0, r1, r0, lsl #4
    2b8c:	13060f00 	movwne	r0, #28416	; 0x6f00
    2b90:	ad010000 	stcge	0, cr0, [r1, #-0]
    2b94:	20002bee 	andcs	r2, r0, lr, ror #23
    2b98:	0000006a 	andeq	r0, r0, sl, rrx
    2b9c:	03159c01 	tsteq	r5, #256	; 0x100
    2ba0:	73100000 	tstvc	r0, #0
    2ba4:	2cae0100 	stfcss	f0, [lr]
    2ba8:	02000002 	andeq	r0, r0, #2
    2bac:	41116c91 			; <UNDEFINED> instruction: 0x41116c91
    2bb0:	01000010 	tsteq	r0, r0, lsl r0
    2bb4:	000315af 	andeq	r1, r3, pc, lsr #11
    2bb8:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    2bbc:	02320b00 	eorseq	r0, r2, #0, 22
    2bc0:	03250000 			; <UNDEFINED> instruction: 0x03250000
    2bc4:	9a120000 	bls	482bcc <startup-0x1fb7d434>
    2bc8:	14000001 	strne	r0, [r0], #-1
    2bcc:	12e71400 	rscne	r1, r7, #0, 8
    2bd0:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    2bd4:	20002bdc 	ldrdcs	r2, [r0], -ip
    2bd8:	00000012 	andeq	r0, r0, r2, lsl r0
    2bdc:	bf159c01 	svclt	0x00159c01
    2be0:	01000012 	tsteq	r0, r2, lsl r0
    2be4:	002bc29f 	mlaeq	fp, pc, r2, ip	; <UNPREDICTABLE>
    2be8:	00001a20 	andeq	r1, r0, r0, lsr #20
    2bec:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    2bf0:	000012f4 	strdeq	r1, [r0], -r4
    2bf4:	2b288301 	blcs	a23800 <startup-0x1f5dc800>
    2bf8:	009a2000 	addseq	r2, sl, r0
    2bfc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c00:	0013bf0f 	andseq	fp, r3, pc, lsl #30
    2c04:	d87b0100 	ldmdale	fp!, {r8}^
    2c08:	5020002a 	eorpl	r0, r0, sl, lsr #32
    2c0c:	01000000 	mrseq	r0, (UNDEF: 0)
    2c10:	0003989c 	muleq	r3, ip, r8
    2c14:	6f721600 	svcvs	0x00721600
    2c18:	7b010077 	blvc	42dfc <startup-0x1ffbd204>
    2c1c:	0000005b 	andeq	r0, r0, fp, asr r0
    2c20:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
    2c24:	000012ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    2c28:	005b7b01 	subseq	r7, fp, r1, lsl #22
    2c2c:	91020000 	mrsls	r0, (UNDEF: 2)
    2c30:	1368116e 	cmnne	r8, #-2147483621	; 0x8000001b
    2c34:	7c010000 	stcvc	0, cr0, [r1], {-0}
    2c38:	0000005b 	andeq	r0, r0, fp, asr r0
    2c3c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2c40:	0013e30f 	andseq	lr, r3, pc, lsl #6
    2c44:	9c740100 	ldflse	f0, [r4], #-0
    2c48:	3c20002a 	stccc	0, cr0, [r0], #-168	; 0xffffff58
    2c4c:	01000000 	mrseq	r0, (UNDEF: 0)
    2c50:	0003ba9c 	muleq	r3, ip, sl
    2c54:	00631600 	rsbeq	r1, r3, r0, lsl #12
    2c58:	005b7401 	subseq	r7, fp, r1, lsl #8
    2c5c:	91020000 	mrsls	r0, (UNDEF: 2)
    2c60:	23170077 	tstcs	r7, #119	; 0x77
    2c64:	01000013 	tsteq	r0, r3, lsl r0
    2c68:	00005b6a 	andeq	r5, r0, sl, ror #22
    2c6c:	002a6800 	eoreq	r6, sl, r0, lsl #16
    2c70:	00003420 	andeq	r3, r0, r0, lsr #8
    2c74:	e09c0100 	adds	r0, ip, r0, lsl #2
    2c78:	10000003 	andne	r0, r0, r3
    2c7c:	6b010063 	blvs	42e10 <startup-0x1ffbd1f0>
    2c80:	0000005b 	andeq	r0, r0, fp, asr r0
    2c84:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2c88:	0013cc0f 	andseq	ip, r3, pc, lsl #24
    2c8c:	38630100 	stmdacc	r3!, {r8}^
    2c90:	3020002a 	eorcc	r0, r0, sl, lsr #32
    2c94:	01000000 	mrseq	r0, (UNDEF: 0)
    2c98:	0004029c 	muleq	r4, ip, r2
    2c9c:	00631600 	rsbeq	r1, r3, r0, lsl #12
    2ca0:	005b6301 	subseq	r6, fp, r1, lsl #6
    2ca4:	91020000 	mrsls	r0, (UNDEF: 2)
    2ca8:	d7170077 			; <UNDEFINED> instruction: 0xd7170077
    2cac:	01000012 	tsteq	r0, r2, lsl r0
    2cb0:	00005b57 	andeq	r5, r0, r7, asr fp
    2cb4:	0029e400 	eoreq	lr, r9, r0, lsl #8
    2cb8:	00005420 	andeq	r5, r0, r0, lsr #8
    2cbc:	299c0100 	ldmibcs	ip, {r8}
    2cc0:	10000004 	andne	r0, r0, r4
    2cc4:	01007672 	tsteq	r0, r2, ror r6
    2cc8:	00005b5c 	andeq	r5, r0, ip, asr fp
    2ccc:	6f910200 	svcvs	0x00910200
    2cd0:	138c1700 	orrne	r1, ip, #0, 14
    2cd4:	4b010000 	blmi	42cdc <startup-0x1ffbd324>
    2cd8:	0000005b 	andeq	r0, r0, fp, asr r0
    2cdc:	20002990 	mulcs	r0, r0, r9
    2ce0:	00000054 	andeq	r0, r0, r4, asr r0
    2ce4:	04509c01 	ldrbeq	r9, [r0], #-3073	; 0xfffff3ff
    2ce8:	72100000 	andsvc	r0, r0, #0
    2cec:	50010076 	andpl	r0, r1, r6, ror r0
    2cf0:	0000005b 	andeq	r0, r0, fp, asr r0
    2cf4:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    2cf8:	0013700f 	andseq	r7, r3, pc
    2cfc:	66450100 	strbvs	r0, [r5], -r0, lsl #2
    2d00:	2a200029 	bcs	802dac <startup-0x1f7fd254>
    2d04:	01000000 	mrseq	r0, (UNDEF: 0)
    2d08:	0004749c 	muleq	r4, ip, r4
    2d0c:	10851300 	addne	r1, r5, r0, lsl #6
    2d10:	45010000 	strmi	r0, [r1, #-0]
    2d14:	0000005b 	andeq	r0, r0, fp, asr r0
    2d18:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2d1c:	00134c0f 	andseq	r4, r3, pc, lsl #24
    2d20:	3c3f0100 	ldfccs	f0, [pc], #-0	; 2d28 <startup-0x1fffd2d8>
    2d24:	2a200029 	bcs	802dd0 <startup-0x1f7fd230>
    2d28:	01000000 	mrseq	r0, (UNDEF: 0)
    2d2c:	0004989c 	muleq	r4, ip, r8
    2d30:	0fad1300 	svceq	0x00ad1300
    2d34:	3f010000 	svccc	0x00010000
    2d38:	0000005b 	andeq	r0, r0, fp, asr r0
    2d3c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2d40:	00139e18 	andseq	r9, r3, r8, lsl lr
    2d44:	ec370100 	ldfs	f0, [r7], #-0
    2d48:	50200028 	eorpl	r0, r0, r8, lsr #32
    2d4c:	01000000 	mrseq	r0, (UNDEF: 0)
    2d50:	0004c69c 	muleq	r4, ip, r6
    2d54:	00781600 	rsbseq	r1, r8, r0, lsl #12
    2d58:	005b3701 	subseq	r3, fp, r1, lsl #14
    2d5c:	91020000 	mrsls	r0, (UNDEF: 2)
    2d60:	0063106f 	rsbeq	r1, r3, pc, rrx
    2d64:	005b3901 	subseq	r3, fp, r1, lsl #18
    2d68:	91020000 	mrsls	r0, (UNDEF: 2)
    2d6c:	39190077 	ldmdbcc	r9, {r0, r1, r2, r4, r5, r6}
    2d70:	01000013 	tsteq	r0, r3, lsl r0
    2d74:	0028a82f 	eoreq	sl, r8, pc, lsr #16
    2d78:	00004420 	andeq	r4, r0, r0, lsr #8
    2d7c:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    2d80:	2f010078 	svccs	0x00010078
    2d84:	0000005b 	andeq	r0, r0, fp, asr r0
    2d88:	106f9102 	rsbne	r9, pc, r2, lsl #2
    2d8c:	31010063 	tstcc	r1, r3, rrx
    2d90:	0000005b 	andeq	r0, r0, fp, asr r0
    2d94:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2d98:	00014000 	andeq	r4, r1, r0
    2d9c:	72000400 	andvc	r0, r0, #0, 8
    2da0:	0400000b 	streq	r0, [r0], #-11
    2da4:	00008101 	andeq	r8, r0, r1, lsl #2
    2da8:	144f0c00 	strbne	r0, [pc], #-3072	; 2db0 <startup-0x1fffd250>
    2dac:	2dc80000 	stclcs	0, cr0, [r8]
    2db0:	00942000 	addseq	r2, r4, r0
    2db4:	0f0b0000 	svceq	0x000b0000
    2db8:	e4020000 	str	r0, [r2], #-0
    2dbc:	14000005 	strne	r0, [r0], #-5
    2dc0:	006a0402 	rsbeq	r0, sl, r2, lsl #8
    2dc4:	4a030000 	bmi	c2dcc <startup-0x1ff3d234>
    2dc8:	02000014 	andeq	r0, r0, #20
    2dcc:	00006a05 	andeq	r6, r0, r5, lsl #20
    2dd0:	60030000 	andvs	r0, r3, r0
    2dd4:	02000002 	andeq	r0, r0, #2
    2dd8:	00006a06 	andeq	r6, r0, r6, lsl #20
    2ddc:	89030400 	stmdbhi	r3, {sl}
    2de0:	02000003 	andeq	r0, r0, #3
    2de4:	00007708 	andeq	r7, r0, r8, lsl #14
    2de8:	79030800 	stmdbvc	r3, {fp}
    2dec:	02000003 	andeq	r0, r0, #3
    2df0:	00007709 	andeq	r7, r0, r9, lsl #14
    2df4:	65030c00 	strvs	r0, [r3, #-3072]	; 0xfffff400
    2df8:	02000002 	andeq	r0, r0, #2
    2dfc:	0000940c 	andeq	r9, r0, ip, lsl #8
    2e00:	04001000 	streq	r1, [r0], #-0
    2e04:	00007004 	andeq	r7, r0, r4
    2e08:	08010500 	stmdaeq	r1, {r8, sl}
    2e0c:	0000044a 	andeq	r0, r0, sl, asr #8
    2e10:	69050406 	stmdbvs	r5, {r1, r2, sl}
    2e14:	0700746e 	streq	r7, [r0, -lr, ror #8]
    2e18:	0000008e 	andeq	r0, r0, lr, lsl #1
    2e1c:	00008e08 	andeq	r8, r0, r8, lsl #28
    2e20:	00770800 	rsbseq	r0, r7, r0, lsl #16
    2e24:	04000000 	streq	r0, [r0], #-0
    2e28:	00002104 	andeq	r2, r0, r4, lsl #2
    2e2c:	7e040400 	cfcpysvc	mvf0, mvf4
    2e30:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2e34:	000005e5 	andeq	r0, r0, r5, ror #11
    2e38:	00210d02 	eoreq	r0, r1, r2, lsl #26
    2e3c:	310a0000 	mrscc	r0, (UNDEF: 10)
    2e40:	01000014 	tsteq	r0, r4, lsl r0
    2e44:	002e220c 	eoreq	r2, lr, ip, lsl #4
    2e48:	00003a20 	andeq	r3, r0, r0, lsr #20
    2e4c:	f39c0100 	vaddw.u16	q0, q6, d0
    2e50:	0b000000 	bleq	2e58 <startup-0x1fffd1a8>
    2e54:	006a626f 	rsbeq	r6, sl, pc, ror #4
    2e58:	00f30c01 	rscseq	r0, r3, r1, lsl #24
    2e5c:	91020000 	mrsls	r0, (UNDEF: 2)
    2e60:	144a0c74 	strbne	r0, [sl], #-3188	; 0xfffff38c
    2e64:	0c010000 	stceq	0, cr0, [r1], {-0}
    2e68:	0000006a 	andeq	r0, r0, sl, rrx
    2e6c:	0c709102 	ldfeqp	f1, [r0], #-8
    2e70:	00000260 	andeq	r0, r0, r0, ror #4
    2e74:	006a0c01 	rsbeq	r0, sl, r1, lsl #24
    2e78:	91020000 	mrsls	r0, (UNDEF: 2)
    2e7c:	03790c6c 	cmneq	r9, #108, 24	; 0x6c00
    2e80:	0c010000 	stceq	0, cr0, [r1], {-0}
    2e84:	00000077 	andeq	r0, r0, r7, ror r0
    2e88:	00689102 	rsbeq	r9, r8, r2, lsl #2
    2e8c:	009a0404 	addseq	r0, sl, r4, lsl #8
    2e90:	650d0000 	strvs	r0, [sp, #-0]
    2e94:	01000002 	tsteq	r0, r2
    2e98:	002dc804 	eoreq	ip, sp, r4, lsl #16
    2e9c:	00005a20 	andeq	r5, r0, r0, lsr #20
    2ea0:	0c9c0100 	ldfeqs	f0, [ip], {0}
    2ea4:	000006c8 	andeq	r0, r0, r8, asr #13
    2ea8:	00f30401 	rscseq	r0, r3, r1, lsl #8
    2eac:	91020000 	mrsls	r0, (UNDEF: 2)
    2eb0:	14400c6c 	strbne	r0, [r0], #-3180	; 0xfffff394
    2eb4:	04010000 	streq	r0, [r1], #-0
    2eb8:	00000077 	andeq	r0, r0, r7, ror r0
    2ebc:	0e689102 	lgneqe	f1, f2
    2ec0:	000013f4 	strdeq	r1, [r0], -r4
    2ec4:	00770501 	rsbseq	r0, r7, r1, lsl #10
    2ec8:	91020000 	mrsls	r0, (UNDEF: 2)
    2ecc:	12d00e74 	sbcsne	r0, r0, #116, 28	; 0x740
    2ed0:	06010000 	streq	r0, [r1], -r0
    2ed4:	00000077 	andeq	r0, r0, r7, ror r0
    2ed8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2edc:	0002e000 	andeq	lr, r2, r0
    2ee0:	3d000400 	cfstrscc	mvf0, [r0, #-0]
    2ee4:	0400000c 	streq	r0, [r0], #-12
    2ee8:	00008101 	andeq	r8, r0, r1, lsl #2
    2eec:	14fc0c00 	ldrbtne	r0, [ip], #3072	; 0xc00
    2ef0:	2e5c0000 	cdpcs	0, 5, cr0, cr12, cr0, {0}
    2ef4:	00e82000 	rsceq	r2, r8, r0
    2ef8:	0f850000 	svceq	0x00850000
    2efc:	0c020000 	stceq	0, cr0, [r2], {-0}
    2f00:	004e0502 	subeq	r0, lr, r2, lsl #10
    2f04:	06030000 	streq	r0, [r3], -r0
    2f08:	02000003 	andeq	r0, r0, #3
    2f0c:	00004e07 	andeq	r4, r0, r7, lsl #28
    2f10:	5f030000 	svcpl	0x00030000
    2f14:	02000006 	andeq	r0, r0, #6
    2f18:	00004e08 	andeq	r4, r0, r8, lsl #28
    2f1c:	85030400 	strhi	r0, [r3, #-1024]	; 0xfffffc00
    2f20:	02000010 	andeq	r0, r0, #16
    2f24:	00005509 	andeq	r5, r0, r9, lsl #10
    2f28:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    2f2c:	032a0704 			; <UNDEFINED> instruction: 0x032a0704
    2f30:	04050000 	streq	r0, [r5], #-0
    2f34:	0000005b 	andeq	r0, r0, fp, asr r0
    2f38:	41080104 	tstmi	r8, r4, lsl #2
    2f3c:	06000004 	streq	r0, [r0], -r4
    2f40:	000011d7 	ldrdeq	r1, [r0], -r7
    2f44:	00210a02 	eoreq	r0, r1, r2, lsl #20
    2f48:	16070000 	strne	r0, [r7], -r0
    2f4c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2f50:	009e0603 	addseq	r0, lr, r3, lsl #12
    2f54:	2c030000 	stccs	0, cr0, [r3], {-0}
    2f58:	03000005 	movweq	r0, #5
    2f5c:	00009e07 	andeq	r9, r0, r7, lsl #28
    2f60:	1d030000 	stcne	0, cr0, [r3, #-0]
    2f64:	03000000 	movweq	r0, #0
    2f68:	00009e08 	andeq	r9, r0, r8, lsl #28
    2f6c:	12030400 	andne	r0, r3, #0, 8
    2f70:	03000000 	movweq	r0, #0
    2f74:	00009e09 	andeq	r9, r0, r9, lsl #28
    2f78:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    2f7c:	00006204 	andeq	r6, r0, r4, lsl #4
    2f80:	0caa0600 	stceq	6, cr0, [sl]
    2f84:	0a030000 	beq	c2f8c <startup-0x1ff3d074>
    2f88:	0000006d 	andeq	r0, r0, sp, rrx
    2f8c:	00062407 	andeq	r2, r6, r7, lsl #8
    2f90:	06042400 	streq	r2, [r4], -r0, lsl #8
    2f94:	00000128 	andeq	r0, r0, r8, lsr #2
    2f98:	0003de03 	andeq	sp, r3, r3, lsl #28
    2f9c:	28070400 	stmdacs	r7, {sl}
    2fa0:	00000001 	andeq	r0, r0, r1
    2fa4:	00063003 	andeq	r3, r6, r3
    2fa8:	2e080400 	cfcpyscs	mvf0, mvf8
    2fac:	04000001 	streq	r0, [r0], #-1
    2fb0:	00059703 	andeq	r9, r5, r3, lsl #14
    2fb4:	2e090400 	cfcpyscs	mvf0, mvf9
    2fb8:	08000001 	stmdaeq	r0, {r0}
    2fbc:	0005c303 	andeq	ip, r5, r3, lsl #6
    2fc0:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    2fc4:	0c000001 	stceq	0, cr0, [r0], {1}
    2fc8:	0002ff03 	andeq	pc, r2, r3, lsl #30
    2fcc:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    2fd0:	10000001 	andne	r0, r0, r1
    2fd4:	0003f003 	andeq	pc, r3, r3
    2fd8:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    2fdc:	14000001 	strne	r0, [r0], #-1
    2fe0:	00005203 	andeq	r5, r0, r3, lsl #4
    2fe4:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    2fe8:	18000001 	stmdane	r0, {r0}
    2fec:	00036f03 	andeq	r6, r3, r3, lsl #30
    2ff0:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    2ff4:	1c000001 	stcne	0, cr0, [r0], {1}
    2ff8:	00037f03 	andeq	r7, r3, r3, lsl #30
    2ffc:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    3000:	20000001 	andcs	r0, r0, r1
    3004:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    3008:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    300c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3010:	40090074 	andmi	r0, r9, r4, ror r0
    3014:	0a000001 	beq	3020 <startup-0x1fffcfe0>
    3018:	00000140 	andeq	r0, r0, r0, asr #2
    301c:	af040500 	svcge	0x00040500
    3020:	05000000 	streq	r0, [r0, #-0]
    3024:	00013504 	andeq	r3, r1, r4, lsl #10
    3028:	06250600 	strteq	r0, [r5], -r0, lsl #12
    302c:	15040000 	strne	r0, [r4, #-0]
    3030:	000000af 	andeq	r0, r0, pc, lsr #1
    3034:	0001620b 	andeq	r6, r1, fp, lsl #4
    3038:	00016200 	andeq	r6, r1, r0, lsl #4
    303c:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    3040:	00014c04 	andeq	r4, r1, r4, lsl #24
    3044:	04c40d00 	strbeq	r0, [r4], #3328	; 0xd00
    3048:	1c040000 	stcne	0, cr0, [r4], {-0}
    304c:	00000157 	andeq	r0, r0, r7, asr r1
    3050:	0003b50d 	andeq	fp, r3, sp, lsl #10
    3054:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    3058:	0b000001 	bleq	3064 <startup-0x1fffcf9c>
    305c:	0000005b 	andeq	r0, r0, fp, asr r0
    3060:	0000018f 	andeq	r0, r0, pc, lsl #3
    3064:	00018f0e 	andeq	r8, r1, lr, lsl #30
    3068:	0003ff00 	andeq	pc, r3, r0, lsl #30
    306c:	9c070404 	cfstrsls	mvf0, [r7], {4}
    3070:	0f000003 	svceq	0x00000003
    3074:	0000152c 	andeq	r1, r0, ip, lsr #10
    3078:	017e0305 	cmneq	lr, r5, lsl #6
    307c:	03050000 	movweq	r0, #20480	; 0x5000
    3080:	20007508 	andcs	r7, r0, r8, lsl #10
    3084:	0014cc0f 	andseq	ip, r4, pc, lsl #24
    3088:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    308c:	05000001 	streq	r0, [r0, #-1]
    3090:	00790803 	rsbseq	r0, r9, r3, lsl #16
    3094:	14a90f20 	strtne	r0, [r9], #3872	; 0xf20
    3098:	03070000 	movweq	r0, #28672	; 0x7000
    309c:	0000017e 	andeq	r0, r0, lr, ror r1
    30a0:	7d080305 	stcvc	3, cr0, [r8, #-20]	; 0xffffffec
    30a4:	8e102000 	cdphi	0, 1, cr2, cr0, cr0, {0}
    30a8:	01000014 	tsteq	r0, r4, lsl r0
    30ac:	00009e08 	andeq	r9, r0, r8, lsl #28
    30b0:	e4030500 	str	r0, [r3], #-1280	; 0xfffffb00
    30b4:	10200054 	eorne	r0, r0, r4, asr r0
    30b8:	00001568 	andeq	r1, r0, r8, ror #10
    30bc:	009e0901 	addseq	r0, lr, r1, lsl #18
    30c0:	03050000 	movweq	r0, #20480	; 0x5000
    30c4:	200054b0 			; <UNDEFINED> instruction: 0x200054b0
    30c8:	0014ef10 	andseq	lr, r4, r0, lsl pc
    30cc:	9e0a0100 	adflse	f0, f2, f0
    30d0:	05000000 	streq	r0, [r0, #-0]
    30d4:	0054f403 	subseq	pc, r4, r3, lsl #8
    30d8:	153f1020 	ldrne	r1, [pc, #-32]!	; 30c0 <startup-0x1fffcf40>
    30dc:	0c010000 	stceq	0, cr0, [r1], {-0}
    30e0:	00000062 	andeq	r0, r0, r2, rrx
    30e4:	54a40305 	strtpl	r0, [r4], #773	; 0x305
    30e8:	de102000 	cdple	0, 1, cr2, cr0, cr0, {0}
    30ec:	01000014 	tsteq	r0, r4, lsl r0
    30f0:	0000620d 	andeq	r6, r0, sp, lsl #4
    30f4:	98030500 	stmdals	r3, {r8, sl}
    30f8:	10200054 	eorne	r0, r0, r4, asr r0
    30fc:	000014bc 			; <UNDEFINED> instruction: 0x000014bc
    3100:	00620e01 	rsbeq	r0, r2, r1, lsl #28
    3104:	03050000 	movweq	r0, #20480	; 0x5000
    3108:	2000548c 	andcs	r5, r0, ip, lsl #9
    310c:	00155d10 	andseq	r5, r5, r0, lsl sp
    3110:	4c110100 	ldfmis	f0, [r1], {-0}
    3114:	05000001 	streq	r0, [r0, #-1]
    3118:	0054b403 	subseq	fp, r4, r3, lsl #8
    311c:	14811020 	strne	r1, [r1], #32
    3120:	12010000 	andne	r0, r1, #0
    3124:	000000a4 	andeq	r0, r0, r4, lsr #1
    3128:	54e80305 	strbtpl	r0, [r8], #773	; 0x305
    312c:	a40b2000 	strge	r2, [fp], #-0
    3130:	61000000 	mrsvs	r0, (UNDEF: 0)
    3134:	11000002 	tstne	r0, r2
    3138:	0000018f 	andeq	r0, r0, pc, lsl #3
    313c:	9b100000 	blls	403144 <startup-0x1fbfcebc>
    3140:	01000014 	tsteq	r0, r4, lsl r0
    3144:	00025113 	andeq	r5, r2, r3, lsl r1
    3148:	d8030500 	stmdale	r3, {r8, sl}
    314c:	12200054 	eorne	r0, r0, #84	; 0x54
    3150:	00001550 	andeq	r1, r0, r0, asr r5
    3154:	2ed02201 	cdpcs	2, 13, cr2, cr0, cr1, {0}
    3158:	00742000 	rsbseq	r2, r4, r0
    315c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3160:	000002a7 	andeq	r0, r0, r7, lsr #5
    3164:	00155d13 	andseq	r5, r5, r3, lsl sp
    3168:	62220100 	eorvs	r0, r2, #0, 2
    316c:	02000001 	andeq	r0, r0, #1
    3170:	4f0f6c91 	svcmi	0x000f6c91
    3174:	01000008 	tsteq	r0, r8
    3178:	00012e23 	andeq	r2, r1, r3, lsr #28
    317c:	08030500 	stmdaeq	r3, {r8, sl}
    3180:	00200081 	eoreq	r0, r0, r1, lsl #1
    3184:	00041714 	andeq	r1, r4, r4, lsl r7
    3188:	5c140100 	ldfpls	f0, [r4], {-0}
    318c:	7420002e 	strtvc	r0, [r0], #-46	; 0xffffffd2
    3190:	01000000 	mrseq	r0, (UNDEF: 0)
    3194:	0ce40f9c 	stcleq	15, cr0, [r4], #624	; 0x270
    3198:	16010000 	strne	r0, [r1], -r0
    319c:	0000009e 	muleq	r0, lr, r0
    31a0:	0f749102 	svceq	0x00749102
    31a4:	00000cee 	andeq	r0, r0, lr, ror #25
    31a8:	009e1901 	addseq	r1, lr, r1, lsl #18
    31ac:	91020000 	mrsls	r0, (UNDEF: 2)
    31b0:	0ae40f70 	beq	ff906f78 <firstTime.4040+0xdf8fe26c>
    31b4:	1c010000 	stcne	0, cr0, [r1], {-0}
    31b8:	0000009e 	muleq	r0, lr, r0
    31bc:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    31c0:	0002e000 	andeq	lr, r2, r0
    31c4:	46000400 	strmi	r0, [r0], -r0, lsl #8
    31c8:	0400000d 	streq	r0, [r0], #-13
    31cc:	00008101 	andeq	r8, r0, r1, lsl #2
    31d0:	15b50c00 	ldrne	r0, [r5, #3072]!	; 0xc00
    31d4:	2f440000 	svccs	0x00440000
    31d8:	00e82000 	rsceq	r2, r8, r0
    31dc:	105f0000 	subsne	r0, pc, r0
    31e0:	0c020000 	stceq	0, cr0, [r2], {-0}
    31e4:	004e0502 	subeq	r0, lr, r2, lsl #10
    31e8:	06030000 	streq	r0, [r3], -r0
    31ec:	02000003 	andeq	r0, r0, #3
    31f0:	00004e07 	andeq	r4, r0, r7, lsl #28
    31f4:	5f030000 	svcpl	0x00030000
    31f8:	02000006 	andeq	r0, r0, #6
    31fc:	00004e08 	andeq	r4, r0, r8, lsl #28
    3200:	85030400 	strhi	r0, [r3, #-1024]	; 0xfffffc00
    3204:	02000010 	andeq	r0, r0, #16
    3208:	00005509 	andeq	r5, r0, r9, lsl #10
    320c:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    3210:	032a0704 			; <UNDEFINED> instruction: 0x032a0704
    3214:	04050000 	streq	r0, [r5], #-0
    3218:	0000005b 	andeq	r0, r0, fp, asr r0
    321c:	41080104 	tstmi	r8, r4, lsl #2
    3220:	06000004 	streq	r0, [r0], -r4
    3224:	000011d7 	ldrdeq	r1, [r0], -r7
    3228:	00210a02 	eoreq	r0, r1, r2, lsl #20
    322c:	16070000 	strne	r0, [r7], -r0
    3230:	0c000000 	stceq	0, cr0, [r0], {-0}
    3234:	009e0603 	addseq	r0, lr, r3, lsl #12
    3238:	2c030000 	stccs	0, cr0, [r3], {-0}
    323c:	03000005 	movweq	r0, #5
    3240:	00009e07 	andeq	r9, r0, r7, lsl #28
    3244:	1d030000 	stcne	0, cr0, [r3, #-0]
    3248:	03000000 	movweq	r0, #0
    324c:	00009e08 	andeq	r9, r0, r8, lsl #28
    3250:	12030400 	andne	r0, r3, #0, 8
    3254:	03000000 	movweq	r0, #0
    3258:	00009e09 	andeq	r9, r0, r9, lsl #28
    325c:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    3260:	00006204 	andeq	r6, r0, r4, lsl #4
    3264:	0caa0600 	stceq	6, cr0, [sl]
    3268:	0a030000 	beq	c3270 <startup-0x1ff3cd90>
    326c:	0000006d 	andeq	r0, r0, sp, rrx
    3270:	00062407 	andeq	r2, r6, r7, lsl #8
    3274:	06042400 	streq	r2, [r4], -r0, lsl #8
    3278:	00000128 	andeq	r0, r0, r8, lsr #2
    327c:	0003de03 	andeq	sp, r3, r3, lsl #28
    3280:	28070400 	stmdacs	r7, {sl}
    3284:	00000001 	andeq	r0, r0, r1
    3288:	00063003 	andeq	r3, r6, r3
    328c:	2e080400 	cfcpyscs	mvf0, mvf8
    3290:	04000001 	streq	r0, [r0], #-1
    3294:	00059703 	andeq	r9, r5, r3, lsl #14
    3298:	2e090400 	cfcpyscs	mvf0, mvf9
    329c:	08000001 	stmdaeq	r0, {r0}
    32a0:	0005c303 	andeq	ip, r5, r3, lsl #6
    32a4:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    32a8:	0c000001 	stceq	0, cr0, [r0], {1}
    32ac:	0002ff03 	andeq	pc, r2, r3, lsl #30
    32b0:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    32b4:	10000001 	andne	r0, r0, r1
    32b8:	0003f003 	andeq	pc, r3, r3
    32bc:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    32c0:	14000001 	strne	r0, [r0], #-1
    32c4:	00005203 	andeq	r5, r0, r3, lsl #4
    32c8:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    32cc:	18000001 	stmdane	r0, {r0}
    32d0:	00036f03 	andeq	r6, r3, r3, lsl #30
    32d4:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    32d8:	1c000001 	stcne	0, cr0, [r0], {1}
    32dc:	00037f03 	andeq	r7, r3, r3, lsl #30
    32e0:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    32e4:	20000001 	andcs	r0, r0, r1
    32e8:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    32ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    32f0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    32f4:	40090074 	andmi	r0, r9, r4, ror r0
    32f8:	0a000001 	beq	3304 <startup-0x1fffccfc>
    32fc:	00000140 	andeq	r0, r0, r0, asr #2
    3300:	af040500 	svcge	0x00040500
    3304:	05000000 	streq	r0, [r0, #-0]
    3308:	00013504 	andeq	r3, r1, r4, lsl #10
    330c:	06250600 	strteq	r0, [r5], -r0, lsl #12
    3310:	15040000 	strne	r0, [r4, #-0]
    3314:	000000af 	andeq	r0, r0, pc, lsr #1
    3318:	0001620b 	andeq	r6, r1, fp, lsl #4
    331c:	00016200 	andeq	r6, r1, r0, lsl #4
    3320:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    3324:	00014c04 	andeq	r4, r1, r4, lsl #24
    3328:	04c40d00 	strbeq	r0, [r4], #3328	; 0xd00
    332c:	1c040000 	stcne	0, cr0, [r4], {-0}
    3330:	00000157 	andeq	r0, r0, r7, asr r1
    3334:	0003b50d 	andeq	fp, r3, sp, lsl #10
    3338:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    333c:	0b000001 	bleq	3348 <startup-0x1fffccb8>
    3340:	0000005b 	andeq	r0, r0, fp, asr r0
    3344:	0000018f 	andeq	r0, r0, pc, lsl #3
    3348:	00018f0e 	andeq	r8, r1, lr, lsl #30
    334c:	0003ff00 	andeq	pc, r3, r0, lsl #30
    3350:	9c070404 	cfstrsls	mvf0, [r7], {4}
    3354:	0f000003 	svceq	0x00000003
    3358:	00001582 	andeq	r1, r0, r2, lsl #11
    335c:	017e0305 	cmneq	lr, r5, lsl #6
    3360:	03050000 	movweq	r0, #20480	; 0x5000
    3364:	2000810c 	andcs	r8, r0, ip, lsl #2
    3368:	0016450f 	andseq	r4, r6, pc, lsl #10
    336c:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    3370:	05000001 	streq	r0, [r0, #-1]
    3374:	00850c03 	addeq	r0, r5, r3, lsl #24
    3378:	16220f20 	strtne	r0, [r2], -r0, lsr #30
    337c:	03070000 	movweq	r0, #28672	; 0x7000
    3380:	0000017e 	andeq	r0, r0, lr, ror r1
    3384:	890c0305 	stmdbhi	ip, {r0, r2, r8, r9}
    3388:	f8102000 			; <UNDEFINED> instruction: 0xf8102000
    338c:	01000015 	tsteq	r0, r5, lsl r0
    3390:	00009e08 	andeq	r9, r0, r8, lsl #28
    3394:	60030500 	andvs	r0, r3, r0, lsl #10
    3398:	10200055 	eorne	r0, r0, r5, asr r0
    339c:	000015a8 	andeq	r1, r0, r8, lsr #11
    33a0:	009e0901 	addseq	r0, lr, r1, lsl #18
    33a4:	03050000 	movweq	r0, #20480	; 0x5000
    33a8:	2000551c 	andcs	r5, r0, ip, lsl r5
    33ac:	00157410 	andseq	r7, r5, r0, lsl r4
    33b0:	9e0a0100 	adflse	f0, f2, f0
    33b4:	05000000 	streq	r0, [r0, #-0]
    33b8:	00554403 	subseq	r4, r5, r3, lsl #8
    33bc:	15e61020 	strbne	r1, [r6, #32]!
    33c0:	0c010000 	stceq	0, cr0, [r1], {-0}
    33c4:	00000062 	andeq	r0, r0, r2, rrx
    33c8:	55480305 	strbpl	r0, [r8, #-773]	; 0xfffffcfb
    33cc:	96102000 	ldrls	r2, [r0], -r0
    33d0:	01000015 	tsteq	r0, r5, lsl r0
    33d4:	0000620d 	andeq	r6, r0, sp, lsl #4
    33d8:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    33dc:	10200055 	eorne	r0, r0, r5, asr r0
    33e0:	00001664 	andeq	r1, r0, r4, ror #12
    33e4:	00620e01 	rsbeq	r0, r2, r1, lsl #28
    33e8:	03050000 	movweq	r0, #20480	; 0x5000
    33ec:	20005538 	andcs	r5, r0, r8, lsr r5
    33f0:	00165810 	andseq	r5, r6, r0, lsl r8
    33f4:	4c110100 	ldfmis	f0, [r1], {-0}
    33f8:	05000001 	streq	r0, [r0, #-1]
    33fc:	0054f803 	subseq	pc, r4, r3, lsl #16
    3400:	16061020 	strne	r1, [r6], -r0, lsr #32
    3404:	12010000 	andne	r0, r1, #0
    3408:	000000a4 	andeq	r0, r0, r4, lsr #1
    340c:	552c0305 	strpl	r0, [ip, #-773]!	; 0xfffffcfb
    3410:	a40b2000 	strge	r2, [fp], #-0
    3414:	61000000 	mrsvs	r0, (UNDEF: 0)
    3418:	11000002 	tstne	r0, r2
    341c:	0000018f 	andeq	r0, r0, pc, lsl #3
    3420:	36100000 	ldrcc	r0, [r0], -r0
    3424:	01000016 	tsteq	r0, r6, lsl r0
    3428:	00025113 	andeq	r5, r2, r3, lsl r1
    342c:	20030500 	andcs	r0, r3, r0, lsl #10
    3430:	12200055 	eorne	r0, r0, #85	; 0x55
    3434:	00001614 	andeq	r1, r0, r4, lsl r6
    3438:	2fb82201 	svccs	0x00b82201
    343c:	00742000 	rsbseq	r2, r4, r0
    3440:	9c010000 	stcls	0, cr0, [r1], {-0}
    3444:	000002a7 	andeq	r0, r0, r7, lsr #5
    3448:	00165813 	andseq	r5, r6, r3, lsl r8
    344c:	62220100 	eorvs	r0, r2, #0, 2
    3450:	02000001 	andeq	r0, r0, #1
    3454:	4f0f6c91 	svcmi	0x000f6c91
    3458:	01000008 	tsteq	r0, r8
    345c:	00012e23 	andeq	r2, r1, r3, lsr #28
    3460:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    3464:	0020008d 	eoreq	r0, r0, sp, lsl #1
    3468:	00041714 	andeq	r1, r4, r4, lsl r7
    346c:	44140100 	ldrmi	r0, [r4], #-256	; 0xffffff00
    3470:	7420002f 	strtvc	r0, [r0], #-47	; 0xffffffd1
    3474:	01000000 	mrseq	r0, (UNDEF: 0)
    3478:	0ce40f9c 	stcleq	15, cr0, [r4], #624	; 0x270
    347c:	16010000 	strne	r0, [r1], -r0
    3480:	0000009e 	muleq	r0, lr, r0
    3484:	0f749102 	svceq	0x00749102
    3488:	00000cee 	andeq	r0, r0, lr, ror #25
    348c:	009e1901 	addseq	r1, lr, r1, lsl #18
    3490:	91020000 	mrsls	r0, (UNDEF: 2)
    3494:	0ae40f70 	beq	ff90725c <firstTime.4040+0xdf8fe550>
    3498:	1c010000 	stcne	0, cr0, [r1], {-0}
    349c:	0000009e 	muleq	r0, lr, r0
    34a0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	01130200 	tsteq	r3, r0, lsl #4
  14:	0b3a0b0b 	bleq	e82c48 <startup-0x1f17d3b8>
  18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  1c:	0d030000 	stceq	0, cr0, [r3, #-0]
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	000b3813 	andeq	r3, fp, r3, lsl r8
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000e03 	andeq	r0, r0, r3, lsl #28
  38:	0b000f05 	bleq	3c54 <startup-0x1fffc3ac>
  3c:	0013490b 	andseq	r4, r3, fp, lsl #18
  40:	00160600 	andseq	r0, r6, r0, lsl #12
  44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
  48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  4c:	13070000 	movwne	r0, #28672	; 0x7000
  50:	0b0e0301 	bleq	380c5c <startup-0x1fc7f3a4>
  54:	3b0b3a0b 	blcc	2ce888 <startup-0x1fd31778>
  58:	0013010b 	andseq	r0, r3, fp, lsl #2
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	27011509 	strcs	r1, [r1, -r9, lsl #10]
  6c:	00130119 	andseq	r0, r3, r9, lsl r1
  70:	00050a00 	andeq	r0, r5, r0, lsl #20
  74:	00001349 	andeq	r1, r0, r9, asr #6
  78:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
  7c:	00130113 	andseq	r0, r3, r3, lsl r1
  80:	00210c00 	eoreq	r0, r1, r0, lsl #24
  84:	340d0000 	strcc	r0, [sp], #-0
  88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
  8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  90:	3c193f13 	ldccc	15, cr3, [r9], {19}
  94:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
  98:	13490021 	movtne	r0, #36897	; 0x9021
  9c:	0000052f 	andeq	r0, r0, pc, lsr #10
  a0:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
  a4:	000b2f13 	andeq	r2, fp, r3, lsl pc
  a8:	00341000 	eorseq	r1, r4, r0
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  b8:	34110000 	ldrcc	r0, [r1], #-0
  bc:	3a0e0300 	bcc	380cc4 <startup-0x1fc7f33c>
  c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  c4:	00180213 	andseq	r0, r8, r3, lsl r2
  c8:	00341200 	eorseq	r1, r4, r0, lsl #4
  cc:	0b3a0803 	bleq	e820e0 <startup-0x1f17df20>
  d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  d4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
  dc:	03193f01 	tsteq	r9, #1, 30
  e0:	3b0b3a0e 	blcc	2ce920 <startup-0x1fd316e0>
  e4:	1119270b 	tstne	r9, fp, lsl #14
  e8:	40061201 	andmi	r1, r6, r1, lsl #4
  ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f0:	00001301 	andeq	r1, r0, r1, lsl #6
  f4:	03003414 	movweq	r3, #1044	; 0x414
  f8:	3b0b3a0e 	blcc	2ce938 <startup-0x1fd316c8>
  fc:	02134905 	andseq	r4, r3, #81920	; 0x14000
 100:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 104:	0111010b 	tsteq	r1, fp, lsl #2
 108:	00000612 	andeq	r0, r0, r2, lsl r6
 10c:	3f002e16 	svccc	0x00002e16
 110:	3a0e0319 	bcc	380d7c <startup-0x1fc7f284>
 114:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 118:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 11c:	96184006 	ldrls	r4, [r8], -r6
 120:	00001942 	andeq	r1, r0, r2, asr #18
 124:	3f002e17 	svccc	0x00002e17
 128:	3a0e0319 	bcc	380d94 <startup-0x1fc7f26c>
 12c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 130:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 134:	97184006 	ldrls	r4, [r8, -r6]
 138:	00001942 	andeq	r1, r0, r2, asr #18
 13c:	01110100 	tsteq	r1, r0, lsl #2
 140:	0b130e25 	bleq	4c39dc <startup-0x1fb3c624>
 144:	01110e03 	tsteq	r1, r3, lsl #28
 148:	17100612 			; <UNDEFINED> instruction: 0x17100612
 14c:	13020000 	movwne	r0, #8192	; 0x2000
 150:	3a0b0b01 	bcc	2c2d5c <startup-0x1fd3d2a4>
 154:	010b3b0b 	tsteq	fp, fp, lsl #22
 158:	03000013 	movweq	r0, #19
 15c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 160:	0b3b0b3a 	bleq	ec2e50 <startup-0x1f13d1b0>
 164:	0b381349 	bleq	e04e90 <startup-0x1f1fb170>
 168:	24040000 	strcs	r0, [r4], #-0
 16c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 170:	000e030b 	andeq	r0, lr, fp, lsl #6
 174:	000f0500 	andeq	r0, pc, r0, lsl #10
 178:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 17c:	16060000 	strne	r0, [r6], -r0
 180:	3a0e0300 	bcc	380d88 <startup-0x1fc7f278>
 184:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 188:	07000013 	smladeq	r0, r3, r0, r0
 18c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 190:	0b3a0b0b 	bleq	e82dc4 <startup-0x1f17d23c>
 194:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 198:	24080000 	strcs	r0, [r8], #-0
 19c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1a0:	0008030b 	andeq	r0, r8, fp, lsl #6
 1a4:	01150900 	tsteq	r5, r0, lsl #18
 1a8:	13011927 	movwne	r1, #6439	; 0x1927
 1ac:	050a0000 	streq	r0, [sl, #-0]
 1b0:	00134900 	andseq	r4, r3, r0, lsl #18
 1b4:	01010b00 	tsteq	r1, r0, lsl #22
 1b8:	13011349 	movwne	r1, #4937	; 0x1349
 1bc:	210c0000 	mrscs	r0, (UNDEF: 12)
 1c0:	0d000000 	stceq	0, cr0, [r0, #-0]
 1c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 1c8:	0b3b0b3a 	bleq	ec2eb8 <startup-0x1f13d148>
 1cc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 1d0:	0000193c 	andeq	r1, r0, ip, lsr r9
 1d4:	4700340e 	strmi	r3, [r0, -lr, lsl #8]
 1d8:	3b0b3a13 	blcc	2cea2c <startup-0x1fd315d4>
 1dc:	0018020b 	andseq	r0, r8, fp, lsl #4
 1e0:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 1e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1e8:	0b3b0b3a 	bleq	ec2ed8 <startup-0x1f13d128>
 1ec:	01111927 	tsteq	r1, r7, lsr #18
 1f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1f4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1f8:	10000013 	andne	r0, r0, r3, lsl r0
 1fc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 200:	0b3b0b3a 	bleq	ec2ef0 <startup-0x1f13d110>
 204:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 208:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 20c:	03193f01 	tsteq	r9, #1, 30
 210:	3b0b3a0e 	blcc	2cea50 <startup-0x1fd315b0>
 214:	1119270b 	tstne	r9, fp, lsl #14
 218:	40061201 	andmi	r1, r6, r1, lsl #4
 21c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 220:	01000000 	mrseq	r0, (UNDEF: 0)
 224:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 228:	0e030b13 	vmoveq.32	d3[0], r0
 22c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 230:	00001710 	andeq	r1, r0, r0, lsl r7
 234:	0b011302 	bleq	44e44 <startup-0x1ffbb1bc>
 238:	3b0b3a0b 	blcc	2cea6c <startup-0x1fd31594>
 23c:	0013010b 	andseq	r0, r3, fp, lsl #2
 240:	000d0300 	andeq	r0, sp, r0, lsl #6
 244:	0b3a0e03 	bleq	e83a58 <startup-0x1f17c5a8>
 248:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 24c:	00000b38 	andeq	r0, r0, r8, lsr fp
 250:	0b002404 	bleq	9268 <startup-0x1fff6d98>
 254:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 258:	0500000e 	streq	r0, [r0, #-14]
 25c:	0b0b000f 	bleq	2c02a0 <startup-0x1fd3fd60>
 260:	00001349 	andeq	r1, r0, r9, asr #6
 264:	03001606 	movweq	r1, #1542	; 0x606
 268:	3b0b3a0e 	blcc	2ceaa8 <startup-0x1fd31558>
 26c:	0013490b 	andseq	r4, r3, fp, lsl #18
 270:	01130700 	tsteq	r3, r0, lsl #14
 274:	0b0b0e03 	bleq	2c3a88 <startup-0x1fd3c578>
 278:	0b3b0b3a 	bleq	ec2f68 <startup-0x1f13d098>
 27c:	00001301 	andeq	r1, r0, r1, lsl #6
 280:	0b002408 	bleq	92a8 <startup-0x1fff6d58>
 284:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 288:	09000008 	stmdbeq	r0, {r3}
 28c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 290:	00001301 	andeq	r1, r0, r1, lsl #6
 294:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
 298:	0b000013 	bleq	2ec <startup-0x1ffffd14>
 29c:	13490101 	movtne	r0, #37121	; 0x9101
 2a0:	00001301 	andeq	r1, r0, r1, lsl #6
 2a4:	0000210c 	andeq	r2, r0, ip, lsl #2
 2a8:	00340d00 	eorseq	r0, r4, r0, lsl #26
 2ac:	0b3a0e03 	bleq	e83ac0 <startup-0x1f17c540>
 2b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2b4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 2b8:	210e0000 	mrscs	r0, (UNDEF: 14)
 2bc:	2f134900 	svccs	0x00134900
 2c0:	0f00000b 	svceq	0x0000000b
 2c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 2c8:	0b3b0b3a 	bleq	ec2fb8 <startup-0x1f13d048>
 2cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2d0:	34100000 	ldrcc	r0, [r0], #-0
 2d4:	3a0e0300 	bcc	380edc <startup-0x1fc7f124>
 2d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2dc:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 2e0:	11000018 	tstne	r0, r8, lsl r0
 2e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2e8:	0b3a0e03 	bleq	e83afc <startup-0x1f17c504>
 2ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2f4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2f8:	00130119 	andseq	r0, r3, r9, lsl r1
 2fc:	00051200 	andeq	r1, r5, r0, lsl #4
 300:	0b3a0e03 	bleq	e83b14 <startup-0x1f17c4ec>
 304:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 308:	00001802 	andeq	r1, r0, r2, lsl #16
 30c:	03012e13 	movweq	r2, #7699	; 0x1e13
 310:	3b0b3a0e 	blcc	2ceb50 <startup-0x1fd314b0>
 314:	1119270b 	tstne	r9, fp, lsl #14
 318:	40061201 	andmi	r1, r6, r1, lsl #4
 31c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 320:	01000000 	mrseq	r0, (UNDEF: 0)
 324:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 328:	0e030b13 	vmoveq.32	d3[0], r0
 32c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 330:	00001710 	andeq	r1, r0, r0, lsl r7
 334:	0b002402 	bleq	9344 <startup-0x1fff6cbc>
 338:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 33c:	0300000e 	movweq	r0, #14
 340:	0b0b0113 	bleq	2c0794 <startup-0x1fd3f86c>
 344:	0b3b0b3a 	bleq	ec3034 <startup-0x1f13cfcc>
 348:	00001301 	andeq	r1, r0, r1, lsl #6
 34c:	03000d04 	movweq	r0, #3332	; 0xd04
 350:	3b0b3a0e 	blcc	2ceb90 <startup-0x1fd31470>
 354:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 358:	0500000b 	streq	r0, [r0, #-11]
 35c:	0b0b000f 	bleq	2c03a0 <startup-0x1fd3fc60>
 360:	00001349 	andeq	r1, r0, r9, asr #6
 364:	03001606 	movweq	r1, #1542	; 0x606
 368:	3b0b3a0e 	blcc	2ceba8 <startup-0x1fd31458>
 36c:	0013490b 	andseq	r4, r3, fp, lsl #18
 370:	01130700 	tsteq	r3, r0, lsl #14
 374:	0b0b0e03 	bleq	2c3b88 <startup-0x1fd3c478>
 378:	0b3b0b3a 	bleq	ec3068 <startup-0x1f13cf98>
 37c:	00001301 	andeq	r1, r0, r1, lsl #6
 380:	0b002408 	bleq	93a8 <startup-0x1fff6c58>
 384:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 388:	09000008 	stmdbeq	r0, {r3}
 38c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 390:	00001301 	andeq	r1, r0, r1, lsl #6
 394:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
 398:	0b000013 	bleq	3ec <startup-0x1ffffc14>
 39c:	13490101 	movtne	r0, #37121	; 0x9101
 3a0:	00001301 	andeq	r1, r0, r1, lsl #6
 3a4:	0000210c 	andeq	r2, r0, ip, lsl #2
 3a8:	00340d00 	eorseq	r0, r4, r0, lsl #26
 3ac:	0b3a0e03 	bleq	e83bc0 <startup-0x1f17c440>
 3b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3b4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 3b8:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 3bc:	03193f01 	tsteq	r9, #1, 30
 3c0:	3b0b3a0e 	blcc	2cec00 <startup-0x1fd31400>
 3c4:	1119270b 	tstne	r9, fp, lsl #14
 3c8:	40061201 	andmi	r1, r6, r1, lsl #4
 3cc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3d0:	050f0000 	streq	r0, [pc, #-0]	; 3d8 <startup-0x1ffffc28>
 3d4:	3a0e0300 	bcc	380fdc <startup-0x1fc7f024>
 3d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3dc:	00180213 	andseq	r0, r8, r3, lsl r2
 3e0:	00341000 	eorseq	r1, r4, r0
 3e4:	0b3a0e03 	bleq	e83bf8 <startup-0x1f17c408>
 3e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3ec:	00001802 	andeq	r1, r0, r2, lsl #16
 3f0:	01110100 	tsteq	r1, r0, lsl #2
 3f4:	0b130e25 	bleq	4c3c90 <startup-0x1fb3c370>
 3f8:	01110e03 	tsteq	r1, r3, lsl #28
 3fc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 400:	13020000 	movwne	r0, #8192	; 0x2000
 404:	3a0b0b01 	bcc	2c3010 <startup-0x1fd3cff0>
 408:	010b3b0b 	tsteq	fp, fp, lsl #22
 40c:	03000013 	movweq	r0, #19
 410:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 414:	0b3b0b3a 	bleq	ec3104 <startup-0x1f13cefc>
 418:	0b381349 	bleq	e05144 <startup-0x1f1faebc>
 41c:	24040000 	strcs	r0, [r4], #-0
 420:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 424:	000e030b 	andeq	r0, lr, fp, lsl #6
 428:	000f0500 	andeq	r0, pc, r0, lsl #10
 42c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 430:	16060000 	strne	r0, [r6], -r0
 434:	3a0e0300 	bcc	38103c <startup-0x1fc7efc4>
 438:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 43c:	07000013 	smladeq	r0, r3, r0, r0
 440:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 444:	0b3a0b0b 	bleq	e83078 <startup-0x1f17cf88>
 448:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 44c:	24080000 	strcs	r0, [r8], #-0
 450:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 454:	0008030b 	andeq	r0, r8, fp, lsl #6
 458:	01150900 	tsteq	r5, r0, lsl #18
 45c:	13011927 	movwne	r1, #6439	; 0x1927
 460:	050a0000 	streq	r0, [sl, #-0]
 464:	00134900 	andseq	r4, r3, r0, lsl #18
 468:	01010b00 	tsteq	r1, r0, lsl #22
 46c:	13011349 	movwne	r1, #4937	; 0x1349
 470:	210c0000 	mrscs	r0, (UNDEF: 12)
 474:	0d000000 	stceq	0, cr0, [r0, #-0]
 478:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 47c:	0b3b0b3a 	bleq	ec316c <startup-0x1f13ce94>
 480:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 484:	0000193c 	andeq	r1, r0, ip, lsr r9
 488:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 48c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 490:	00340f00 	eorseq	r0, r4, r0, lsl #30
 494:	0b3a0e03 	bleq	e83ca8 <startup-0x1f17c358>
 498:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 49c:	00001802 	andeq	r1, r0, r2, lsl #16
 4a0:	03003410 	movweq	r3, #1040	; 0x410
 4a4:	3b0b3a0e 	blcc	2cece4 <startup-0x1fd3131c>
 4a8:	3f13490b 	svccc	0x0013490b
 4ac:	00180219 	andseq	r0, r8, r9, lsl r2
 4b0:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 4b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4b8:	0b3b0b3a 	bleq	ec31a8 <startup-0x1f13ce58>
 4bc:	01111927 	tsteq	r1, r7, lsr #18
 4c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4c4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 4c8:	12000013 	andne	r0, r0, #19
 4cc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 4d0:	0b3b0b3a 	bleq	ec31c0 <startup-0x1f13ce40>
 4d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 4dc:	3a0e0301 	bcc	3810e8 <startup-0x1fc7ef18>
 4e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4e8:	96184006 	ldrls	r4, [r8], -r6
 4ec:	00001942 	andeq	r1, r0, r2, asr #18
 4f0:	01110100 	tsteq	r1, r0, lsl #2
 4f4:	0b130e25 	bleq	4c3d90 <startup-0x1fb3c270>
 4f8:	01110e03 	tsteq	r1, r3, lsl #28
 4fc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 500:	13020000 	movwne	r0, #8192	; 0x2000
 504:	3a0b0b01 	bcc	2c3110 <startup-0x1fd3cef0>
 508:	010b3b0b 	tsteq	fp, fp, lsl #22
 50c:	03000013 	movweq	r0, #19
 510:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 514:	0b3b0b3a 	bleq	ec3204 <startup-0x1f13cdfc>
 518:	0b381349 	bleq	e05244 <startup-0x1f1fadbc>
 51c:	24040000 	strcs	r0, [r4], #-0
 520:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 524:	000e030b 	andeq	r0, lr, fp, lsl #6
 528:	000f0500 	andeq	r0, pc, r0, lsl #10
 52c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 530:	16060000 	strne	r0, [r6], -r0
 534:	3a0e0300 	bcc	38113c <startup-0x1fc7eec4>
 538:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 53c:	07000013 	smladeq	r0, r3, r0, r0
 540:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 544:	0b3a0b0b 	bleq	e83178 <startup-0x1f17ce88>
 548:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 54c:	24080000 	strcs	r0, [r8], #-0
 550:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 554:	0008030b 	andeq	r0, r8, fp, lsl #6
 558:	01150900 	tsteq	r5, r0, lsl #18
 55c:	13011927 	movwne	r1, #6439	; 0x1927
 560:	050a0000 	streq	r0, [sl, #-0]
 564:	00134900 	andseq	r4, r3, r0, lsl #18
 568:	01010b00 	tsteq	r1, r0, lsl #22
 56c:	13011349 	movwne	r1, #4937	; 0x1349
 570:	210c0000 	mrscs	r0, (UNDEF: 12)
 574:	0d000000 	stceq	0, cr0, [r0, #-0]
 578:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 57c:	0b3b0b3a 	bleq	ec326c <startup-0x1f13cd94>
 580:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 584:	0000193c 	andeq	r1, r0, ip, lsr r9
 588:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 58c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 590:	00340f00 	eorseq	r0, r4, r0, lsl #30
 594:	0b3a0e03 	bleq	e83da8 <startup-0x1f17c258>
 598:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 59c:	00001802 	andeq	r1, r0, r2, lsl #16
 5a0:	03003410 	movweq	r3, #1040	; 0x410
 5a4:	3b0b3a0e 	blcc	2cede4 <startup-0x1fd3121c>
 5a8:	3f13490b 	svccc	0x0013490b
 5ac:	00180219 	andseq	r0, r8, r9, lsl r2
 5b0:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 5b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5b8:	0b3b0b3a 	bleq	ec32a8 <startup-0x1f13cd58>
 5bc:	01111927 	tsteq	r1, r7, lsr #18
 5c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5c4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 5c8:	12000013 	andne	r0, r0, #19
 5cc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 5d0:	0b3b0b3a 	bleq	ec32c0 <startup-0x1f13cd40>
 5d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 5d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 5dc:	3a0e0301 	bcc	3811e8 <startup-0x1fc7ee18>
 5e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5e8:	96184006 	ldrls	r4, [r8], -r6
 5ec:	00001942 	andeq	r1, r0, r2, asr #18
 5f0:	01110100 	tsteq	r1, r0, lsl #2
 5f4:	0b130e25 	bleq	4c3e90 <startup-0x1fb3c170>
 5f8:	01110e03 	tsteq	r1, r3, lsl #28
 5fc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 600:	13020000 	movwne	r0, #8192	; 0x2000
 604:	3a0b0b01 	bcc	2c3210 <startup-0x1fd3cdf0>
 608:	010b3b0b 	tsteq	fp, fp, lsl #22
 60c:	03000013 	movweq	r0, #19
 610:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 614:	0b3b0b3a 	bleq	ec3304 <startup-0x1f13ccfc>
 618:	0b381349 	bleq	e05344 <startup-0x1f1facbc>
 61c:	24040000 	strcs	r0, [r4], #-0
 620:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 624:	000e030b 	andeq	r0, lr, fp, lsl #6
 628:	000f0500 	andeq	r0, pc, r0, lsl #10
 62c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 630:	16060000 	strne	r0, [r6], -r0
 634:	3a0e0300 	bcc	38123c <startup-0x1fc7edc4>
 638:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 63c:	07000013 	smladeq	r0, r3, r0, r0
 640:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 644:	0b3a0b0b 	bleq	e83278 <startup-0x1f17cd88>
 648:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 64c:	24080000 	strcs	r0, [r8], #-0
 650:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 654:	0008030b 	andeq	r0, r8, fp, lsl #6
 658:	01150900 	tsteq	r5, r0, lsl #18
 65c:	13011927 	movwne	r1, #6439	; 0x1927
 660:	050a0000 	streq	r0, [sl, #-0]
 664:	00134900 	andseq	r4, r3, r0, lsl #18
 668:	01010b00 	tsteq	r1, r0, lsl #22
 66c:	13011349 	movwne	r1, #4937	; 0x1349
 670:	210c0000 	mrscs	r0, (UNDEF: 12)
 674:	0d000000 	stceq	0, cr0, [r0, #-0]
 678:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 67c:	0b3b0b3a 	bleq	ec336c <startup-0x1f13cc94>
 680:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 684:	0000193c 	andeq	r1, r0, ip, lsr r9
 688:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 68c:	00052f13 	andeq	r2, r5, r3, lsl pc
 690:	00340f00 	eorseq	r0, r4, r0, lsl #30
 694:	0b3a1347 	bleq	e853b8 <startup-0x1f17ac48>
 698:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 69c:	34100000 	ldrcc	r0, [r0], #-0
 6a0:	3a134700 	bcc	4d22a8 <startup-0x1fb2dd58>
 6a4:	0018020b 	andseq	r0, r8, fp, lsl #4
 6a8:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 6ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6b4:	01111927 	tsteq	r1, r7, lsr #18
 6b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 6c0:	12000013 	andne	r0, r0, #19
 6c4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 6c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 6d0:	34130000 	ldrcc	r0, [r3], #-0
 6d4:	3a0e0300 	bcc	3812dc <startup-0x1fc7ed24>
 6d8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 6dc:	00180213 	andseq	r0, r8, r3, lsl r2
 6e0:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 6e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6ec:	01111927 	tsteq	r1, r7, lsr #18
 6f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6f4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 6f8:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 6fc:	08030034 	stmdaeq	r3, {r2, r4, r5}
 700:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 704:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 708:	34160000 	ldrcc	r0, [r6], #-0
 70c:	3a080300 	bcc	201314 <startup-0x1fdfecec>
 710:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 714:	17000013 	smladne	r0, r3, r0, r0
 718:	08030005 	stmdaeq	r3, {r0, r2}
 71c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 720:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 724:	0b180000 	bleq	60072c <startup-0x1f9ff8d4>
 728:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 72c:	19000006 	stmdbne	r0, {r1, r2}
 730:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 734:	0b3a0e03 	bleq	e83f48 <startup-0x1f17c0b8>
 738:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 73c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 740:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 744:	00130119 	andseq	r0, r3, r9, lsl r1
 748:	00051a00 	andeq	r1, r5, r0, lsl #20
 74c:	0b3a0803 	bleq	e82760 <startup-0x1f17d8a0>
 750:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 754:	00001802 	andeq	r1, r0, r2, lsl #16
 758:	0300051b 	movweq	r0, #1307	; 0x51b
 75c:	3b0b3a0e 	blcc	2cef9c <startup-0x1fd31064>
 760:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 764:	1c000018 	stcne	0, cr0, [r0], {24}
 768:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 76c:	0b3b0b3a 	bleq	ec345c <startup-0x1f13cba4>
 770:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 774:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 778:	03193f01 	tsteq	r9, #1, 30
 77c:	3b0b3a0e 	blcc	2cefbc <startup-0x1fd31044>
 780:	1119270b 	tstne	r9, fp, lsl #14
 784:	40061201 	andmi	r1, r6, r1, lsl #4
 788:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 78c:	00001301 	andeq	r1, r0, r1, lsl #6
 790:	0300341e 	movweq	r3, #1054	; 0x41e
 794:	3b0b3a08 	blcc	2cefbc <startup-0x1fd31044>
 798:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 79c:	1f000018 	svcne	0x00000018
 7a0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 7a4:	0b3a0e03 	bleq	e83fb8 <startup-0x1f17c048>
 7a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 7ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7b0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 7b4:	20000019 	andcs	r0, r0, r9, lsl r0
 7b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 7bc:	0b3a0e03 	bleq	e83fd0 <startup-0x1f17c030>
 7c0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 7c4:	01111349 	tsteq	r1, r9, asr #6
 7c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7cc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 7d0:	21000013 	tstcs	r0, r3, lsl r0
 7d4:	0e03012e 	adfeqsp	f0, f3, #0.5
 7d8:	0b3b0b3a 	bleq	ec34c8 <startup-0x1f13cb38>
 7dc:	13491927 	movtne	r1, #39207	; 0x9927
 7e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7e4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 7e8:	00130119 	andseq	r0, r3, r9, lsl r1
 7ec:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
 7f0:	0b3a0e03 	bleq	e84004 <startup-0x1f17bffc>
 7f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 7f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7fc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 800:	00130119 	andseq	r0, r3, r9, lsl r1
 804:	002e2300 	eoreq	r2, lr, r0, lsl #6
 808:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 80c:	0b3b0b3a 	bleq	ec34fc <startup-0x1f13cb04>
 810:	01111927 	tsteq	r1, r7, lsr #18
 814:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 818:	00194297 	mulseq	r9, r7, r2
 81c:	11010000 	mrsne	r0, (UNDEF: 1)
 820:	130e2501 	movwne	r2, #58625	; 0xe501
 824:	110e030b 	tstne	lr, fp, lsl #6
 828:	10061201 	andne	r1, r6, r1, lsl #4
 82c:	02000017 	andeq	r0, r0, #23
 830:	0b0b0113 	bleq	2c0c84 <startup-0x1fd3f37c>
 834:	0b3b0b3a 	bleq	ec3524 <startup-0x1f13cadc>
 838:	00001301 	andeq	r1, r0, r1, lsl #6
 83c:	03000d03 	movweq	r0, #3331	; 0xd03
 840:	3b0b3a0e 	blcc	2cf080 <startup-0x1fd30f80>
 844:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 848:	0400000b 	streq	r0, [r0], #-11
 84c:	0b0b0024 	bleq	2c08e4 <startup-0x1fd3f71c>
 850:	0e030b3e 	vmoveq.16	d3[0], r0
 854:	0f050000 	svceq	0x00050000
 858:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 85c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 860:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 864:	0b3b0b3a 	bleq	ec3554 <startup-0x1f13caac>
 868:	00001349 	andeq	r1, r0, r9, asr #6
 86c:	03011307 	movweq	r1, #4871	; 0x1307
 870:	3a0b0b0e 	bcc	2c34b0 <startup-0x1fd3cb50>
 874:	010b3b0b 	tsteq	fp, fp, lsl #22
 878:	08000013 	stmdaeq	r0, {r0, r1, r4}
 87c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 880:	0b3a0e03 	bleq	e84094 <startup-0x1f17bf6c>
 884:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 888:	06120111 			; <UNDEFINED> instruction: 0x06120111
 88c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 890:	00130119 	andseq	r0, r3, r9, lsl r1
 894:	00050900 	andeq	r0, r5, r0, lsl #18
 898:	0b3a0e03 	bleq	e840ac <startup-0x1f17bf54>
 89c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 8a0:	00001802 	andeq	r1, r0, r2, lsl #16
 8a4:	01110100 	tsteq	r1, r0, lsl #2
 8a8:	0b130e25 	bleq	4c4144 <startup-0x1fb3bebc>
 8ac:	01110e03 	tsteq	r1, r3, lsl #28
 8b0:	17100612 			; <UNDEFINED> instruction: 0x17100612
 8b4:	13020000 	movwne	r0, #8192	; 0x2000
 8b8:	3a0b0b01 	bcc	2c34c4 <startup-0x1fd3cb3c>
 8bc:	010b3b0b 	tsteq	fp, fp, lsl #22
 8c0:	03000013 	movweq	r0, #19
 8c4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 8c8:	0b3b0b3a 	bleq	ec35b8 <startup-0x1f13ca48>
 8cc:	0b381349 	bleq	e055f8 <startup-0x1f1faa08>
 8d0:	24040000 	strcs	r0, [r4], #-0
 8d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 8d8:	000e030b 	andeq	r0, lr, fp, lsl #6
 8dc:	000f0500 	andeq	r0, pc, r0, lsl #10
 8e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 8e4:	16060000 	strne	r0, [r6], -r0
 8e8:	3a0e0300 	bcc	3814f0 <startup-0x1fc7eb10>
 8ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8f0:	07000013 	smladeq	r0, r3, r0, r0
 8f4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 8f8:	0b3a0e03 	bleq	e8410c <startup-0x1f17bef4>
 8fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 900:	06120111 			; <UNDEFINED> instruction: 0x06120111
 904:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 908:	00130119 	andseq	r0, r3, r9, lsl r1
 90c:	00050800 	andeq	r0, r5, r0, lsl #16
 910:	0b3a0803 	bleq	e82924 <startup-0x1f17d6dc>
 914:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 918:	00001802 	andeq	r1, r0, r2, lsl #16
 91c:	03000509 	movweq	r0, #1289	; 0x509
 920:	3b0b3a0e 	blcc	2cf160 <startup-0x1fd30ea0>
 924:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 928:	0a000018 	beq	990 <startup-0x1ffff670>
 92c:	0b0b0024 	bleq	2c09c4 <startup-0x1fd3f63c>
 930:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 934:	01000000 	mrseq	r0, (UNDEF: 0)
 938:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 93c:	0e030b13 	vmoveq.32	d3[0], r0
 940:	06120111 			; <UNDEFINED> instruction: 0x06120111
 944:	00001710 	andeq	r1, r0, r0, lsl r7
 948:	0b011302 	bleq	45558 <startup-0x1ffbaaa8>
 94c:	3b0b3a0b 	blcc	2cf180 <startup-0x1fd30e80>
 950:	0013010b 	andseq	r0, r3, fp, lsl #2
 954:	000d0300 	andeq	r0, sp, r0, lsl #6
 958:	0b3a0e03 	bleq	e8416c <startup-0x1f17be94>
 95c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 960:	00000b38 	andeq	r0, r0, r8, lsr fp
 964:	0b002404 	bleq	997c <startup-0x1fff6684>
 968:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 96c:	0500000e 	streq	r0, [r0, #-14]
 970:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 974:	0b3b0b3a 	bleq	ec3664 <startup-0x1f13c99c>
 978:	00001349 	andeq	r1, r0, r9, asr #6
 97c:	3f012e06 	svccc	0x00012e06
 980:	3a0e0319 	bcc	3815ec <startup-0x1fc7ea14>
 984:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 988:	11134919 	tstne	r3, r9, lsl r9
 98c:	40061201 	andmi	r1, r6, r1, lsl #4
 990:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 994:	00001301 	andeq	r1, r0, r1, lsl #6
 998:	03000507 	movweq	r0, #1287	; 0x507
 99c:	3b0b3a08 	blcc	2cf1c4 <startup-0x1fd30e3c>
 9a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 9a4:	08000018 	stmdaeq	r0, {r3, r4}
 9a8:	08030034 	stmdaeq	r3, {r2, r4, r5}
 9ac:	0b3b0b3a 	bleq	ec369c <startup-0x1f13c964>
 9b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 9b4:	24090000 	strcs	r0, [r9], #-0
 9b8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 9bc:	0008030b 	andeq	r0, r8, fp, lsl #6
 9c0:	002e0a00 	eoreq	r0, lr, r0, lsl #20
 9c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 9c8:	0b3b0b3a 	bleq	ec36b8 <startup-0x1f13c948>
 9cc:	13491927 	movtne	r1, #39207	; 0x9927
 9d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 9d8:	0b000019 	bleq	a44 <startup-0x1ffff5bc>
 9dc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 9e0:	0b3a0e03 	bleq	e841f4 <startup-0x1f17be0c>
 9e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 9e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 9f0:	00000019 	andeq	r0, r0, r9, lsl r0
 9f4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 9f8:	030b130e 	movweq	r1, #45838	; 0xb30e
 9fc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 a00:	00171006 	andseq	r1, r7, r6
 a04:	01130200 	tsteq	r3, r0, lsl #4
 a08:	0b3a0b0b 	bleq	e8363c <startup-0x1f17c9c4>
 a0c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 a10:	0d030000 	stceq	0, cr0, [r3, #-0]
 a14:	3a0e0300 	bcc	38161c <startup-0x1fc7e9e4>
 a18:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a1c:	000b3813 	andeq	r3, fp, r3, lsl r8
 a20:	00240400 	eoreq	r0, r4, r0, lsl #8
 a24:	0b3e0b0b 	bleq	f83658 <startup-0x1f07c9a8>
 a28:	00000e03 	andeq	r0, r0, r3, lsl #28
 a2c:	0b000f05 	bleq	4648 <startup-0x1fffb9b8>
 a30:	0013490b 	andseq	r4, r3, fp, lsl #18
 a34:	00160600 	andseq	r0, r6, r0, lsl #12
 a38:	0b3a0e03 	bleq	e8424c <startup-0x1f17bdb4>
 a3c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a40:	13070000 	movwne	r0, #28672	; 0x7000
 a44:	0b0e0301 	bleq	381650 <startup-0x1fc7e9b0>
 a48:	3b0b3a0b 	blcc	2cf27c <startup-0x1fd30d84>
 a4c:	0013010b 	andseq	r0, r3, fp, lsl #2
 a50:	00240800 	eoreq	r0, r4, r0, lsl #16
 a54:	0b3e0b0b 	bleq	f83688 <startup-0x1f07c978>
 a58:	00000803 	andeq	r0, r0, r3, lsl #16
 a5c:	27011509 	strcs	r1, [r1, -r9, lsl #10]
 a60:	00130119 	andseq	r0, r3, r9, lsl r1
 a64:	00050a00 	andeq	r0, r5, r0, lsl #20
 a68:	00001349 	andeq	r1, r0, r9, asr #6
 a6c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 a70:	00130113 	andseq	r0, r3, r3, lsl r1
 a74:	00210c00 	eoreq	r0, r1, r0, lsl #24
 a78:	340d0000 	strcc	r0, [sp], #-0
 a7c:	3a0e0300 	bcc	381684 <startup-0x1fc7e97c>
 a80:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a84:	3c193f13 	ldccc	15, cr3, [r9], {19}
 a88:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 a8c:	13490021 	movtne	r0, #36897	; 0x9021
 a90:	0000052f 	andeq	r0, r0, pc, lsr #10
 a94:	3f012e0f 	svccc	0x00012e0f
 a98:	3a0e0319 	bcc	381704 <startup-0x1fc7e8fc>
 a9c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 aa0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 aa4:	96184006 	ldrls	r4, [r8], -r6
 aa8:	13011942 	movwne	r1, #6466	; 0x1942
 aac:	34100000 	ldrcc	r0, [r0], #-0
 ab0:	3a080300 	bcc	2016b8 <startup-0x1fdfe948>
 ab4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ab8:	00180213 	andseq	r0, r8, r3, lsl r2
 abc:	00341100 	eorseq	r1, r4, r0, lsl #2
 ac0:	0b3a0e03 	bleq	e842d4 <startup-0x1f17bd2c>
 ac4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ac8:	00001802 	andeq	r1, r0, r2, lsl #16
 acc:	49002112 	stmdbmi	r0, {r1, r4, r8, sp}
 ad0:	000b2f13 	andeq	r2, fp, r3, lsl pc
 ad4:	00051300 	andeq	r1, r5, r0, lsl #6
 ad8:	0b3a0e03 	bleq	e842ec <startup-0x1f17bd14>
 adc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ae0:	00001802 	andeq	r1, r0, r2, lsl #16
 ae4:	3f002e14 	svccc	0x00002e14
 ae8:	3a0e0319 	bcc	381754 <startup-0x1fc7e8ac>
 aec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 af0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 af4:	96184006 	ldrls	r4, [r8], -r6
 af8:	00001942 	andeq	r1, r0, r2, asr #18
 afc:	3f002e15 	svccc	0x00002e15
 b00:	3a0e0319 	bcc	38176c <startup-0x1fc7e894>
 b04:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 b08:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 b0c:	97184006 	ldrls	r4, [r8, -r6]
 b10:	00001942 	andeq	r1, r0, r2, asr #18
 b14:	03000516 	movweq	r0, #1302	; 0x516
 b18:	3b0b3a08 	blcc	2cf340 <startup-0x1fd30cc0>
 b1c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 b20:	17000018 	smladne	r0, r8, r0, r0
 b24:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 b28:	0b3a0e03 	bleq	e8433c <startup-0x1f17bcc4>
 b2c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 b30:	01111349 	tsteq	r1, r9, asr #6
 b34:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 b38:	01194296 			; <UNDEFINED> instruction: 0x01194296
 b3c:	18000013 	stmdane	r0, {r0, r1, r4}
 b40:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 b44:	0b3a0e03 	bleq	e84358 <startup-0x1f17bca8>
 b48:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 b4c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 b50:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 b54:	00130119 	andseq	r0, r3, r9, lsl r1
 b58:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 b5c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 b60:	0b3b0b3a 	bleq	ec3850 <startup-0x1f13c7b0>
 b64:	01111927 	tsteq	r1, r7, lsr #18
 b68:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 b6c:	00194297 	mulseq	r9, r7, r2
 b70:	11010000 	mrsne	r0, (UNDEF: 1)
 b74:	130e2501 	movwne	r2, #58625	; 0xe501
 b78:	110e030b 	tstne	lr, fp, lsl #6
 b7c:	10061201 	andne	r1, r6, r1, lsl #4
 b80:	02000017 	andeq	r0, r0, #23
 b84:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 b88:	0b3a0b0b 	bleq	e837bc <startup-0x1f17c844>
 b8c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 b90:	0d030000 	stceq	0, cr0, [r3, #-0]
 b94:	3a0e0300 	bcc	38179c <startup-0x1fc7e864>
 b98:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b9c:	000b3813 	andeq	r3, fp, r3, lsl r8
 ba0:	000f0400 	andeq	r0, pc, r0, lsl #8
 ba4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 ba8:	24050000 	strcs	r0, [r5], #-0
 bac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 bb0:	000e030b 	andeq	r0, lr, fp, lsl #6
 bb4:	00240600 	eoreq	r0, r4, r0, lsl #12
 bb8:	0b3e0b0b 	bleq	f837ec <startup-0x1f07c814>
 bbc:	00000803 	andeq	r0, r0, r3, lsl #16
 bc0:	27011507 	strcs	r1, [r1, -r7, lsl #10]
 bc4:	00130119 	andseq	r0, r3, r9, lsl r1
 bc8:	00050800 	andeq	r0, r5, r0, lsl #16
 bcc:	00001349 	andeq	r1, r0, r9, asr #6
 bd0:	03001609 	movweq	r1, #1545	; 0x609
 bd4:	3b0b3a0e 	blcc	2cf414 <startup-0x1fd30bec>
 bd8:	0013490b 	andseq	r4, r3, fp, lsl #18
 bdc:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
 be0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 be4:	0b3b0b3a 	bleq	ec38d4 <startup-0x1f13c72c>
 be8:	01111927 	tsteq	r1, r7, lsr #18
 bec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 bf0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 bf4:	0b000013 	bleq	c48 <startup-0x1ffff3b8>
 bf8:	08030005 	stmdaeq	r3, {r0, r2}
 bfc:	0b3b0b3a 	bleq	ec38ec <startup-0x1f13c714>
 c00:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 c04:	050c0000 	streq	r0, [ip, #-0]
 c08:	3a0e0300 	bcc	381810 <startup-0x1fc7e7f0>
 c0c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c10:	00180213 	andseq	r0, r8, r3, lsl r2
 c14:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 c18:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 c1c:	0b3b0b3a 	bleq	ec390c <startup-0x1f13c6f4>
 c20:	01111927 	tsteq	r1, r7, lsr #18
 c24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 c28:	00194296 	mulseq	r9, r6, r2
 c2c:	00340e00 	eorseq	r0, r4, r0, lsl #28
 c30:	0b3a0e03 	bleq	e84444 <startup-0x1f17bbbc>
 c34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 c38:	00001802 	andeq	r1, r0, r2, lsl #16
 c3c:	01110100 	tsteq	r1, r0, lsl #2
 c40:	0b130e25 	bleq	4c44dc <startup-0x1fb3bb24>
 c44:	01110e03 	tsteq	r1, r3, lsl #28
 c48:	17100612 			; <UNDEFINED> instruction: 0x17100612
 c4c:	13020000 	movwne	r0, #8192	; 0x2000
 c50:	3a0b0b01 	bcc	2c385c <startup-0x1fd3c7a4>
 c54:	010b3b0b 	tsteq	fp, fp, lsl #22
 c58:	03000013 	movweq	r0, #19
 c5c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 c60:	0b3b0b3a 	bleq	ec3950 <startup-0x1f13c6b0>
 c64:	0b381349 	bleq	e05990 <startup-0x1f1fa670>
 c68:	24040000 	strcs	r0, [r4], #-0
 c6c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 c70:	000e030b 	andeq	r0, lr, fp, lsl #6
 c74:	000f0500 	andeq	r0, pc, r0, lsl #10
 c78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 c7c:	16060000 	strne	r0, [r6], -r0
 c80:	3a0e0300 	bcc	381888 <startup-0x1fc7e778>
 c84:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c88:	07000013 	smladeq	r0, r3, r0, r0
 c8c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 c90:	0b3a0b0b 	bleq	e838c4 <startup-0x1f17c73c>
 c94:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 c98:	24080000 	strcs	r0, [r8], #-0
 c9c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 ca0:	0008030b 	andeq	r0, r8, fp, lsl #6
 ca4:	01150900 	tsteq	r5, r0, lsl #18
 ca8:	13011927 	movwne	r1, #6439	; 0x1927
 cac:	050a0000 	streq	r0, [sl, #-0]
 cb0:	00134900 	andseq	r4, r3, r0, lsl #18
 cb4:	01010b00 	tsteq	r1, r0, lsl #22
 cb8:	13011349 	movwne	r1, #4937	; 0x1349
 cbc:	210c0000 	mrscs	r0, (UNDEF: 12)
 cc0:	0d000000 	stceq	0, cr0, [r0, #-0]
 cc4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 cc8:	0b3b0b3a 	bleq	ec39b8 <startup-0x1f13c648>
 ccc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 cd0:	0000193c 	andeq	r1, r0, ip, lsr r9
 cd4:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 cd8:	00052f13 	andeq	r2, r5, r3, lsl pc
 cdc:	00340f00 	eorseq	r0, r4, r0, lsl #30
 ce0:	0b3a0e03 	bleq	e844f4 <startup-0x1f17bb0c>
 ce4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ce8:	00001802 	andeq	r1, r0, r2, lsl #16
 cec:	03003410 	movweq	r3, #1040	; 0x410
 cf0:	3b0b3a0e 	blcc	2cf530 <startup-0x1fd30ad0>
 cf4:	3f13490b 	svccc	0x0013490b
 cf8:	00180219 	andseq	r0, r8, r9, lsl r2
 cfc:	00211100 	eoreq	r1, r1, r0, lsl #2
 d00:	0b2f1349 	bleq	bc5a2c <startup-0x1f43a5d4>
 d04:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 d08:	03193f01 	tsteq	r9, #1, 30
 d0c:	3b0b3a0e 	blcc	2cf54c <startup-0x1fd30ab4>
 d10:	1119270b 	tstne	r9, fp, lsl #14
 d14:	40061201 	andmi	r1, r6, r1, lsl #4
 d18:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 d1c:	00001301 	andeq	r1, r0, r1, lsl #6
 d20:	03000513 	movweq	r0, #1299	; 0x513
 d24:	3b0b3a0e 	blcc	2cf564 <startup-0x1fd30a9c>
 d28:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 d2c:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 d30:	0e03012e 	adfeqsp	f0, f3, #0.5
 d34:	0b3b0b3a 	bleq	ec3a24 <startup-0x1f13c5dc>
 d38:	01111927 	tsteq	r1, r7, lsr #18
 d3c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 d40:	00194296 	mulseq	r9, r6, r2
 d44:	11010000 	mrsne	r0, (UNDEF: 1)
 d48:	130e2501 	movwne	r2, #58625	; 0xe501
 d4c:	110e030b 	tstne	lr, fp, lsl #6
 d50:	10061201 	andne	r1, r6, r1, lsl #4
 d54:	02000017 	andeq	r0, r0, #23
 d58:	0b0b0113 	bleq	2c11ac <startup-0x1fd3ee54>
 d5c:	0b3b0b3a 	bleq	ec3a4c <startup-0x1f13c5b4>
 d60:	00001301 	andeq	r1, r0, r1, lsl #6
 d64:	03000d03 	movweq	r0, #3331	; 0xd03
 d68:	3b0b3a0e 	blcc	2cf5a8 <startup-0x1fd30a58>
 d6c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 d70:	0400000b 	streq	r0, [r0], #-11
 d74:	0b0b0024 	bleq	2c0e0c <startup-0x1fd3f1f4>
 d78:	0e030b3e 	vmoveq.16	d3[0], r0
 d7c:	0f050000 	svceq	0x00050000
 d80:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 d84:	06000013 			; <UNDEFINED> instruction: 0x06000013
 d88:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 d8c:	0b3b0b3a 	bleq	ec3a7c <startup-0x1f13c584>
 d90:	00001349 	andeq	r1, r0, r9, asr #6
 d94:	03011307 	movweq	r1, #4871	; 0x1307
 d98:	3a0b0b0e 	bcc	2c39d8 <startup-0x1fd3c628>
 d9c:	010b3b0b 	tsteq	fp, fp, lsl #22
 da0:	08000013 	stmdaeq	r0, {r0, r1, r4}
 da4:	0b0b0024 	bleq	2c0e3c <startup-0x1fd3f1c4>
 da8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 dac:	15090000 	strne	r0, [r9, #-0]
 db0:	01192701 	tsteq	r9, r1, lsl #14
 db4:	0a000013 	beq	e08 <startup-0x1ffff1f8>
 db8:	13490005 	movtne	r0, #36869	; 0x9005
 dbc:	010b0000 	mrseq	r0, (UNDEF: 11)
 dc0:	01134901 	tsteq	r3, r1, lsl #18
 dc4:	0c000013 	stceq	0, cr0, [r0], {19}
 dc8:	00000021 	andeq	r0, r0, r1, lsr #32
 dcc:	0300340d 	movweq	r3, #1037	; 0x40d
 dd0:	3b0b3a0e 	blcc	2cf610 <startup-0x1fd309f0>
 dd4:	3f13490b 	svccc	0x0013490b
 dd8:	00193c19 	andseq	r3, r9, r9, lsl ip
 ddc:	00210e00 	eoreq	r0, r1, r0, lsl #28
 de0:	052f1349 	streq	r1, [pc, #-841]!	; a9f <startup-0x1ffff561>
 de4:	340f0000 	strcc	r0, [pc], #-0	; dec <startup-0x1ffff214>
 de8:	3a0e0300 	bcc	3819f0 <startup-0x1fc7e610>
 dec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 df0:	00180213 	andseq	r0, r8, r3, lsl r2
 df4:	00341000 	eorseq	r1, r4, r0
 df8:	0b3a0e03 	bleq	e8460c <startup-0x1f17b9f4>
 dfc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 e00:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 e04:	21110000 	tstcs	r1, r0
 e08:	2f134900 	svccs	0x00134900
 e0c:	1200000b 	andne	r0, r0, #11
 e10:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 e14:	0b3a0e03 	bleq	e84628 <startup-0x1f17b9d8>
 e18:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 e1c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 e20:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 e24:	00130119 	andseq	r0, r3, r9, lsl r1
 e28:	00051300 	andeq	r1, r5, r0, lsl #6
 e2c:	0b3a0e03 	bleq	e84640 <startup-0x1f17b9c0>
 e30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 e34:	00001802 	andeq	r1, r0, r2, lsl #16
 e38:	03012e14 	movweq	r2, #7700	; 0x1e14
 e3c:	3b0b3a0e 	blcc	2cf67c <startup-0x1fd30984>
 e40:	1119270b 	tstne	r9, fp, lsl #14
 e44:	40061201 	andmi	r1, r6, r1, lsl #4
 e48:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 e4c:	Address 0x00000e4c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000f64 	andeq	r0, r0, r4, ror #30
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	09120002 	ldmdbeq	r2, {r1}
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000f74 	andcs	r0, r0, r4, ror pc
  3c:	00000056 	andeq	r0, r0, r6, asr r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	0af60002 	beq	ffd8005c <firstTime.4040+0xdfd77350>
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000fcc 	andcs	r0, r0, ip, asr #31
  5c:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	10250002 	eorne	r0, r5, r2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20001274 	andcs	r1, r0, r4, ror r2
  7c:	00000198 	muleq	r0, r8, r1
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	12200002 	eorne	r0, r0, #2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	2000140c 	andcs	r1, r0, ip, lsl #8
  9c:	00000364 	andeq	r0, r0, r4, ror #6
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	18650002 	stmdane	r5!, {r1}^
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20001770 	andcs	r1, r0, r0, ror r7
  bc:	00000238 	andeq	r0, r0, r8, lsr r2
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	1d010002 	stcne	0, cr0, [r1, #-8]
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200019a8 	andcs	r1, r0, r8, lsr #19
  dc:	00000e44 	andeq	r0, r0, r4, asr #28
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	25a40002 	strcs	r0, [r4, #2]!
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	200027ec 	andcs	r2, r0, ip, ror #15
  fc:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	26a80002 	strtcs	r0, [r8], r2
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20002814 	andcs	r2, r0, r4, lsl r8
 11c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	276f0002 	strbcs	r0, [pc, -r2]!
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	2000283c 	andcs	r2, r0, ip, lsr r8
 13c:	0000006c 	andeq	r0, r0, ip, rrx
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	28a80002 	stmiacs	r8!, {r1}
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200028a8 	andcs	r2, r0, r8, lsr #17
 15c:	00000520 	andeq	r0, r0, r0, lsr #10
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	2d990002 	ldccs	0, cr0, [r9, #8]
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	20002dc8 	andcs	r2, r0, r8, asr #27
 17c:	00000094 	muleq	r0, r4, r0
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	2edd0002 	cdpcs	0, 13, cr0, cr13, cr2, {0}
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	20002e5c 	andcs	r2, r0, ip, asr lr
 19c:	000000e8 	andeq	r0, r0, r8, ror #1
	...
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	31c10002 	biccc	r0, r1, r2
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20002f44 	andcs	r2, r0, r4, asr #30
 1bc:	000000e8 	andeq	r0, r0, r8, ror #1
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000f74 	andcs	r0, r0, r4, ror pc
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
       4:	017d0002 	cmneq	sp, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	6f6d2f3a 	svcvs	0x006d2f3a
      20:	2f632f70 	svccs	0x00632f70
      24:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
      28:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
      2c:	6f697461 	svcvs	0x00697461
      30:	2f72656e 	svccs	0x0072656e
      34:	73504944 	cmpvc	r0, #68, 18	; 0x110000
      38:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
      3c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
      40:	74730000 	ldrbtvc	r0, [r3], #-0
      44:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
      48:	00632e70 	rsbeq	r2, r3, r0, ror lr
      4c:	73000001 	movwvc	r0, #1
      50:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
      54:	00682e65 	rsbeq	r2, r8, r5, ror #28
      58:	69000001 	stmdbvs	r0, {r0}
      5c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      60:	0100682e 	tsteq	r0, lr, lsr #16
      64:	61670000 	cmnvs	r7, r0
      68:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
      6c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
      70:	0100682e 	tsteq	r0, lr, lsr #16
      74:	72670000 	rsbvc	r0, r7, #0
      78:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
      7c:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
      80:	00000100 	andeq	r0, r0, r0, lsl #2
      84:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
      88:	5f726574 	svcpl	0x00726574
      8c:	63616c62 	cmnvs	r1, #25088	; 0x6200
      90:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      94:	0001006d 	andeq	r0, r1, sp, rrx
      98:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
      9c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
      a0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
      a4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
      a8:	01006d62 	tsteq	r0, r2, ror #26
      ac:	6f6d0000 	svcvs	0x006d0000
      b0:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
      b4:	72675f72 	rsbvc	r5, r7, #456	; 0x1c8
      b8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      bc:	01006d62 	tsteq	r0, r2, ror #26
      c0:	72700000 	rsbsvc	r0, r0, #0
      c4:	5f737365 	svcpl	0x00737365
      c8:	63616c62 	cmnvs	r1, #25088	; 0x6200
      cc:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      d0:	0001006d 	andeq	r0, r1, sp, rrx
      d4:	65727000 	ldrbvs	r7, [r2, #-0]!
      d8:	6c5f7373 	mrrcvs	3, 7, r7, pc, cr3	; <UNPREDICTABLE>
      dc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      e0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
      e4:	00000100 	andeq	r0, r0, r0, lsl #2
      e8:	73657270 	cmnvc	r5, #112, 4
      ec:	72675f73 	rsbvc	r5, r7, #460	; 0x1cc
      f0:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      f4:	01006d62 	tsteq	r0, r2, ror #26
      f8:	61630000 	cmnvs	r3, r0
      fc:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     100:	616c625f 	cmnvs	ip, pc, asr r2
     104:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     108:	01006d62 	tsteq	r0, r2, ror #26
     10c:	61630000 	cmnvs	r3, r0
     110:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     114:	6172675f 	cmnvs	r2, pc, asr r7
     118:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     11c:	0001006d 	andeq	r0, r1, sp, rrx
     120:	73616300 	cmnvc	r1, #0, 6
     124:	5f656c74 	svcpl	0x00656c74
     128:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     12c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     130:	0001006d 	andeq	r0, r1, sp, rrx
     134:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     138:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
     13c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     140:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     144:	00000100 	andeq	r0, r0, r0, lsl #2
     148:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     14c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
     150:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     154:	01006d62 	tsteq	r0, r2, ror #26
     158:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
     15c:	5f656c74 	svcpl	0x00656c74
     160:	63616c62 	cmnvs	r1, #25088	; 0x6200
     164:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     168:	0001006d 	andeq	r0, r1, sp, rrx
     16c:	6f6c7300 	svcvs	0x006c7300
     170:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
     174:	682e7478 	stmdavs	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
     178:	00000100 	andeq	r0, r0, r0, lsl #2
     17c:	782e6762 	stmdavc	lr!, {r1, r5, r6, r8, r9, sl, sp, lr}
     180:	01006d62 	tsteq	r0, r2, ror #26
     184:	00000000 	andeq	r0, r0, r0
     188:	00000205 	andeq	r0, r0, r5, lsl #4
     18c:	33032000 	movwcc	r2, #12288	; 0x3000
     190:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
     194:	01010003 	tsteq	r1, r3
     198:	10020500 	andne	r0, r2, r0, lsl #10
     19c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     1a0:	3d2f0128 	stfccs	f0, [pc, #-160]!	; 108 <startup-0x1ffffef8>
     1a4:	03303030 	teqeq	r0, #48	; 0x30
     1a8:	2f3d742c 	svccs	0x003d742c
     1ac:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1b0:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1b4:	2f3e672f 	svccs	0x003e672f
     1b8:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1bc:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1c0:	2f3d672f 	svccs	0x003d672f
     1c4:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     1c8:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     1cc:	2f3d672f 	svccs	0x003d672f
     1d0:	52023f67 	andpl	r3, r2, #412	; 0x19c
     1d4:	4a0a0317 	bmi	280e38 <startup-0x1fd7f1c8>
     1d8:	7583322f 	strvc	r3, [r3, #559]	; 0x22f
     1dc:	595959bb 	ldmdbpl	r9, {r0, r1, r3, r4, r5, r7, r8, fp, ip, lr}^
     1e0:	bb75835c 	bllt	1d60f58 <startup-0x1e29f0a8>
     1e4:	835c6759 	cmphi	ip, #23330816	; 0x1640000
     1e8:	5959bb75 	ldmdbpl	r9, {r0, r2, r4, r5, r6, r8, r9, fp, ip, sp, pc}^
     1ec:	bb75ad5c 	bllt	1d6b764 <startup-0x1e29489c>
     1f0:	675b5959 			; <UNDEFINED> instruction: 0x675b5959
     1f4:	83678583 	cmnhi	r7, #549453824	; 0x20c00000
     1f8:	83836785 	orrhi	r6, r3, #34865152	; 0x2140000
     1fc:	83836785 	orrhi	r6, r3, #34865152	; 0x2140000
     200:	68686885 	stmdavs	r8!, {r0, r2, r7, fp, sp, lr}^
     204:	83835968 	orrhi	r5, r3, #104, 18	; 0x1a0000
     208:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
     20c:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
     210:	83838385 	orrhi	r8, r3, #335544322	; 0x14000002
     214:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
     218:	75820f03 	strvc	r0, [r2, #3843]	; 0xf03
     21c:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
     220:	75135002 	ldrvc	r5, [r3, #-2]
     224:	67757575 			; <UNDEFINED> instruction: 0x67757575
     228:	2f2f7675 	svccs	0x002f7675
     22c:	59595930 	ldmdbpl	r9, {r4, r5, r8, fp, ip, lr}^
     230:	67f7415b 	ubfxvs	r4, fp, #2, #24
     234:	3d3d4f3a 	ldccc	15, cr4, [sp, #-232]!	; 0xffffff18
     238:	93675a33 	cmnls	r7, #208896	; 0x33000
     23c:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     240:	42676767 	rsbmi	r6, r7, #27000832	; 0x19c0000
     244:	01040200 	mrseq	r0, R12_usr
     248:	83068206 	movwhi	r8, #25094	; 0x6206
     24c:	753083bb 	ldrvc	r8, [r0, #-955]!	; 0xfffffc45
     250:	c9bbc991 	ldmibgt	fp!, {r0, r4, r7, r8, fp, lr, pc}
     254:	c9d7c9c9 	ldmibgt	r7, {r0, r3, r6, r7, r8, fp, lr, pc}^
     258:	2108c9f3 	strdcs	ip, [r8, -r3]
     25c:	c91308c9 	ldmdbgt	r3, {r0, r3, r6, r7, fp}
     260:	42022f08 	andmi	r2, r2, #8, 30
     264:	c9130813 	ldmdbgt	r3, {r0, r1, r4, fp}
     268:	08c92108 	stmiaeq	r9, {r3, r8, sp}^
     26c:	3d08bb4b 	vstrcc	d11, [r8, #-300]	; 0xfffffed4
     270:	4b3d4bca 	blmi	f531a0 <startup-0x1f0ace60>
     274:	3d59323d 	lfmcc	f3, 2, [r9, #-244]	; 0xffffff0c
     278:	bb323d4b 	bllt	c8f7ac <startup-0x1f370854>
     27c:	bbbbbbbb 	bllt	feeef170 <firstTime.4040+0xdeee6464>
     280:	24e775e5 	strbtcs	r7, [r7], #1509	; 0x5e5
     284:	67765959 			; <UNDEFINED> instruction: 0x67765959
     288:	003f675b 	eorseq	r6, pc, fp, asr r7	; <UNPREDICTABLE>
     28c:	06010402 	streq	r0, [r1], -r2, lsl #8
     290:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     294:	02009002 	andeq	r9, r0, #2
     298:	06900304 	ldreq	r0, [r0], r4, lsl #6
     29c:	68845967 	stmvs	r4, {r0, r1, r2, r5, r6, r8, fp, ip, lr}
     2a0:	f4916767 			; <UNDEFINED> instruction: 0xf4916767
     2a4:	02598383 	subseq	r8, r9, #201326594	; 0xc000002
     2a8:	afbd1528 	svcge	0x00bd1528
     2ac:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
     2b0:	08060104 	stmdaeq	r6, {r2, r8}
     2b4:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
     2b8:	4b064a02 	blmi	192ac8 <startup-0x1fe6d538>
     2bc:	3f67c95b 	svccc	0x0067c95b
     2c0:	4b3d3d24 	blmi	f4f758 <startup-0x1f0b08a8>
     2c4:	5959593f 	ldmdbpl	r9, {r0, r1, r2, r3, r4, r5, r8, fp, ip, lr}^
     2c8:	83848359 	orrhi	r8, r4, #1677721601	; 0x64000001
     2cc:	03848384 	orreq	r8, r4, #132, 6	; 0x10000002
     2d0:	03207fb8 			; <UNDEFINED> instruction: 0x03207fb8
     2d4:	02003c31 	andeq	r3, r0, #12544	; 0x3100
     2d8:	f3030104 	vrhadd.u8	d0, d3, d4
     2dc:	0e02207e 	mcreq	0, 0, r2, cr2, cr14, {3}
     2e0:	8a010100 	bhi	406e8 <startup-0x1ffbf918>
     2e4:	02000000 	andeq	r0, r0, #0
     2e8:	00007000 	andeq	r7, r0, r0
     2ec:	fb010200 	blx	40af6 <startup-0x1ffbf50a>
     2f0:	01000d0e 	tsteq	r0, lr, lsl #26
     2f4:	00010101 	andeq	r0, r1, r1, lsl #2
     2f8:	00010000 	andeq	r0, r1, r0
     2fc:	3a430100 	bcc	10c0704 <startup-0x1ef3f8fc>
     300:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     304:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 250 <startup-0x1ffffdb0>
     308:	616c706f 	cmnvs	ip, pc, rrx
     30c:	61726f62 	cmnvs	r2, r2, ror #30
     310:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     314:	442f7265 	strtmi	r7, [pc], #-613	; 31c <startup-0x1ffffce4>
     318:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     31c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     320:	00432f68 	subeq	r2, r3, r8, ror #30
     324:	6d616700 	stclvs	7, cr6, [r1, #-0]
     328:	6a626f65 	bvs	189c0c4 <startup-0x1e763f3c>
     32c:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     330:	00010063 	andeq	r0, r1, r3, rrx
     334:	72707300 	rsbsvc	r7, r0, #0, 6
     338:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     33c:	00010068 	andeq	r0, r1, r8, rrx
     340:	616d6900 	cmnvs	sp, r0, lsl #18
     344:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     348:	00000100 	andeq	r0, r0, r0, lsl #2
     34c:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     350:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     354:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     358:	00000100 	andeq	r0, r0, r0, lsl #2
     35c:	02050000 	andeq	r0, r5, #0
     360:	20000f74 	andcs	r0, r0, r4, ror pc
     364:	4b4c4c19 	blmi	13133d0 <startup-0x1ececc30>
     368:	ca3d6759 	bgt	f5a0d4 <startup-0x1f0a5f2c>
     36c:	01000402 	tsteq	r0, r2, lsl #8
     370:	00018401 	andeq	r8, r1, r1, lsl #8
     374:	37000200 	strcc	r0, [r0, -r0, lsl #4]
     378:	02000001 	andeq	r0, r0, #1
     37c:	0d0efb01 	vstreq	d15, [lr, #-4]
     380:	01010100 	mrseq	r0, (UNDEF: 17)
     384:	00000001 	andeq	r0, r0, r1
     388:	01000001 	tsteq	r0, r1
     38c:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     390:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     394:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     398:	6f62616c 	svcvs	0x0062616c
     39c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     3a0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     3a4:	5049442f 	subpl	r4, r9, pc, lsr #8
     3a8:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     3ac:	2f686374 	svccs	0x00686374
     3b0:	66000043 	strvs	r0, [r0], -r3, asr #32
     3b4:	2e657269 	cdpcs	2, 6, cr7, cr5, cr9, {3}
     3b8:	00010063 	andeq	r0, r1, r3, rrx
     3bc:	72707300 	rsbsvc	r7, r0, #0, 6
     3c0:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     3c4:	00010068 	andeq	r0, r1, r8, rrx
     3c8:	616d6900 	cmnvs	sp, r0, lsl #18
     3cc:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     3d0:	00000100 	andeq	r0, r0, r0, lsl #2
     3d4:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     3d8:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     3dc:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     3e0:	00000100 	andeq	r0, r0, r0, lsl #2
     3e4:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     3e8:	616c625f 	cmnvs	ip, pc, asr r2
     3ec:	325f6b63 	subscc	r6, pc, #101376	; 0x18c00
     3f0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     3f4:	00000100 	andeq	r0, r0, r0, lsl #2
     3f8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     3fc:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     400:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     404:	01006d62 	tsteq	r0, r2, ror #26
     408:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     40c:	5f316572 	svcpl	0x00316572
     410:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     414:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     418:	0001006d 	andeq	r0, r1, sp, rrx
     41c:	72696600 	rsbvc	r6, r9, #0, 12
     420:	675f3265 	ldrbvs	r3, [pc, -r5, ror #4]
     424:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     428:	006d6278 	rsbeq	r6, sp, r8, ror r2
     42c:	66000001 	strvs	r0, [r0], -r1
     430:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     434:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     438:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     43c:	01006d62 	tsteq	r0, r2, ror #26
     440:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     444:	5f336572 	svcpl	0x00336572
     448:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     44c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     450:	00000100 	andeq	r0, r0, r0, lsl #2
     454:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     458:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     45c:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     460:	006d6278 	rsbeq	r6, sp, r8, ror r2
     464:	66000001 	strvs	r0, [r0], -r1
     468:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     46c:	6172675f 	cmnvs	r2, pc, asr r7
     470:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     474:	0001006d 	andeq	r0, r1, sp, rrx
     478:	72696600 	rsbvc	r6, r9, #0, 12
     47c:	6c5f3465 	cfldrdvs	mvd3, [pc], {101}	; 0x65
     480:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     484:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     488:	00000100 	andeq	r0, r0, r0, lsl #2
     48c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     490:	72675f35 	rsbvc	r5, r7, #53, 30	; 0xd4
     494:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     498:	01006d62 	tsteq	r0, r2, ror #26
     49c:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     4a0:	5f356572 	svcpl	0x00356572
     4a4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     4a8:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     4ac:	0001006d 	andeq	r0, r1, sp, rrx
     4b0:	05000000 	streq	r0, [r0, #-0]
     4b4:	000fcc02 	andeq	ip, pc, r2, lsl #24
     4b8:	01300320 	teqeq	r0, r0, lsr #6
     4bc:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     4c0:	2f3e672f 	svccs	0x003e672f
     4c4:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     4c8:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     4cc:	2f3e672f 	svccs	0x003e672f
     4d0:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     4d4:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     4d8:	2f3e672f 	svccs	0x003e672f
     4dc:	46023d67 	strmi	r3, [r2], -r7, ror #26
     4e0:	2f4b4c14 	svccs	0x004b4c14
     4e4:	59594b3e 	ldmdbpl	r9, {r1, r2, r3, r4, r5, r8, r9, fp, lr}^
     4e8:	91915a59 	orrsls	r5, r1, r9, asr sl
     4ec:	3e939191 	mrccc	1, 4, r9, cr3, cr1, {4}
     4f0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     4f4:	01003102 	tsteq	r0, r2, lsl #2
     4f8:	0000c601 	andeq	ip, r0, r1, lsl #12
     4fc:	6c000200 	sfmvs	f0, 4, [r0], {-0}
     500:	02000000 	andeq	r0, r0, #0
     504:	0d0efb01 	vstreq	d15, [lr, #-4]
     508:	01010100 	mrseq	r0, (UNDEF: 17)
     50c:	00000001 	andeq	r0, r0, r1
     510:	01000001 	tsteq	r0, r1
     514:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     518:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     51c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     520:	6f62616c 	svcvs	0x0062616c
     524:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     528:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     52c:	5049442f 	subpl	r4, r9, pc, lsr #8
     530:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     534:	2f686374 	svccs	0x00686374
     538:	70000043 	andvc	r0, r0, r3, asr #32
     53c:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     540:	00632e72 	rsbeq	r2, r3, r2, ror lr
     544:	73000001 	movwvc	r0, #1
     548:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     54c:	00682e65 	rsbeq	r2, r8, r5, ror #28
     550:	69000001 	stmdbvs	r0, {r0}
     554:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     558:	0100682e 	tsteq	r0, lr, lsr #16
     55c:	61670000 	cmnvs	r7, r0
     560:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
     564:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     568:	0100682e 	tsteq	r0, lr, lsr #16
     56c:	00000000 	andeq	r0, r0, r0
     570:	12740205 	rsbsne	r0, r4, #1342177280	; 0x50000000
     574:	4d172000 	ldcmi	0, cr2, [r7, #-0]
     578:	033d6759 	teqeq	sp, #23330816	; 0x1640000
     57c:	0200c80c 	andeq	ip, r0, #12, 16	; 0xc0000
     580:	82060104 	andhi	r0, r6, #4, 2
     584:	02040200 	andeq	r0, r4, #0, 4
     588:	4d4b064a 	stclmi	6, cr0, [fp, #-296]	; 0xfffffed8
     58c:	004c3d75 	subeq	r3, ip, r5, ror sp
     590:	06010402 	streq	r0, [r1], -r2, lsl #8
     594:	3d750674 	ldclcc	6, cr0, [r5, #-464]!	; 0xfffffe30
     598:	005f754d 	subseq	r7, pc, sp, asr #10
     59c:	06010402 	streq	r0, [r1], -r2, lsl #8
     5a0:	5b59064a 	blpl	1641ed0 <startup-0x1e9be130>
     5a4:	01040200 	mrseq	r0, R12_usr
     5a8:	59064a06 	stmdbpl	r6, {r1, r2, r9, fp, lr}
     5ac:	0402005b 	streq	r0, [r2], #-91	; 0xffffffa5
     5b0:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
     5b4:	4b765b75 	blmi	1d97390 <startup-0x1e268c70>
     5b8:	675c4b68 	ldrbvs	r4, [ip, -r8, ror #22]
     5bc:	0f026867 	svceq	0x00026867
     5c0:	dd010100 	stfles	f0, [r1, #-0]
     5c4:	02000001 	andeq	r0, r0, #1
     5c8:	00018200 	andeq	r8, r1, r0, lsl #4
     5cc:	fb010200 	blx	40dd6 <startup-0x1ffbf22a>
     5d0:	01000d0e 	tsteq	r0, lr, lsl #26
     5d4:	00010101 	andeq	r0, r1, r1, lsl #2
     5d8:	00010000 	andeq	r0, r1, r0
     5dc:	3a430100 	bcc	10c09e4 <startup-0x1ef3f61c>
     5e0:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     5e4:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 530 <startup-0x1ffffad0>
     5e8:	616c706f 	cmnvs	ip, pc, rrx
     5ec:	61726f62 	cmnvs	r2, r2, ror #30
     5f0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     5f4:	442f7265 	strtmi	r7, [pc], #-613	; 5fc <startup-0x1ffffa04>
     5f8:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     5fc:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     600:	00432f68 	subeq	r2, r3, r8, ror #30
     604:	72696200 	rsbvc	r6, r9, #0, 4
     608:	00632e64 	rsbeq	r2, r3, r4, ror #28
     60c:	73000001 	movwvc	r0, #1
     610:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     614:	00682e65 	rsbeq	r2, r8, r5, ror #28
     618:	69000001 	stmdbvs	r0, {r0}
     61c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     620:	0100682e 	tsteq	r0, lr, lsr #16
     624:	61670000 	cmnvs	r7, r0
     628:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
     62c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     630:	0100682e 	tsteq	r0, lr, lsr #16
     634:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     638:	5f316472 	svcpl	0x00316472
     63c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     640:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     644:	0001006d 	andeq	r0, r1, sp, rrx
     648:	72696200 	rsbvc	r6, r9, #0, 4
     64c:	675f3164 	ldrbvs	r3, [pc, -r4, ror #2]
     650:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     654:	006d6278 	rsbeq	r6, sp, r8, ror r2
     658:	62000001 	andvs	r0, r0, #1
     65c:	31647269 	cmncc	r4, r9, ror #4
     660:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     664:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     668:	01006d62 	tsteq	r0, r2, ror #26
     66c:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     670:	5f326472 	svcpl	0x00326472
     674:	63616c62 	cmnvs	r1, #25088	; 0x6200
     678:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     67c:	0001006d 	andeq	r0, r1, sp, rrx
     680:	72696200 	rsbvc	r6, r9, #0, 4
     684:	675f3264 	ldrbvs	r3, [pc, -r4, ror #4]
     688:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     68c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     690:	62000001 	andvs	r0, r0, #1
     694:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     698:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     69c:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     6a0:	01006d62 	tsteq	r0, r2, ror #26
     6a4:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     6a8:	5f336472 	svcpl	0x00336472
     6ac:	63616c62 	cmnvs	r1, #25088	; 0x6200
     6b0:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     6b4:	0001006d 	andeq	r0, r1, sp, rrx
     6b8:	72696200 	rsbvc	r6, r9, #0, 4
     6bc:	675f3364 	ldrbvs	r3, [pc, -r4, ror #6]
     6c0:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     6c4:	006d6278 	rsbeq	r6, sp, r8, ror r2
     6c8:	62000001 	andvs	r0, r0, #1
     6cc:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     6d0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     6d4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     6d8:	01006d62 	tsteq	r0, r2, ror #26
     6dc:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     6e0:	5f346472 	svcpl	0x00346472
     6e4:	63616c62 	cmnvs	r1, #25088	; 0x6200
     6e8:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     6ec:	0001006d 	andeq	r0, r1, sp, rrx
     6f0:	72696200 	rsbvc	r6, r9, #0, 4
     6f4:	675f3464 	ldrbvs	r3, [pc, -r4, ror #8]
     6f8:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     6fc:	006d6278 	rsbeq	r6, sp, r8, ror r2
     700:	62000001 	andvs	r0, r0, #1
     704:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     708:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     70c:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     710:	01006d62 	tsteq	r0, r2, ror #26
     714:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     718:	5f356472 	svcpl	0x00356472
     71c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     720:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     724:	0001006d 	andeq	r0, r1, sp, rrx
     728:	72696200 	rsbvc	r6, r9, #0, 4
     72c:	675f3564 	ldrbvs	r3, [pc, -r4, ror #10]
     730:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     734:	006d6278 	rsbeq	r6, sp, r8, ror r2
     738:	62000001 	andvs	r0, r0, #1
     73c:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     740:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     744:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     748:	01006d62 	tsteq	r0, r2, ror #26
     74c:	00000000 	andeq	r0, r0, r0
     750:	140c0205 	strne	r0, [ip], #-517	; 0xfffffdfb
     754:	3f032000 	svccc	0x00032000
     758:	672f3e01 	strvs	r3, [pc, -r1, lsl #28]!
     75c:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     760:	2f3e672f 	svccs	0x003e672f
     764:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     768:	3f672f3d 	svccc	0x00672f3d
     76c:	2f3d672f 	svccs	0x003d672f
     770:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     774:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     778:	2f3d672f 	svccs	0x003d672f
     77c:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     780:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     784:	023d672f 	eorseq	r6, sp, #12320768	; 0xbc0000
     788:	4b4c145e 	blmi	1305908 <startup-0x1ecfa6f8>
     78c:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
     790:	5c595959 	mrrcpl	9, 5, r5, r9, cr9	; <UNPREDICTABLE>
     794:	91919191 			; <UNDEFINED> instruction: 0x91919191
     798:	3d3e9493 	cfldrscc	mvf9, [lr, #-588]!	; 0xfffffdb4
     79c:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     7a0:	0101003d 	tsteq	r1, sp, lsr r0
     7a4:	00000161 	andeq	r0, r0, r1, ror #2
     7a8:	011c0002 	tsteq	ip, r2
     7ac:	01020000 	mrseq	r0, (UNDEF: 2)
     7b0:	000d0efb 	strdeq	r0, [sp], -fp
     7b4:	01010101 	tsteq	r1, r1, lsl #2
     7b8:	01000000 	mrseq	r0, (UNDEF: 0)
     7bc:	43010000 	movwmi	r0, #4096	; 0x1000
     7c0:	6f6d2f3a 	svcvs	0x006d2f3a
     7c4:	2f632f70 	svccs	0x00632f70
     7c8:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     7cc:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     7d0:	6f697461 	svcvs	0x00697461
     7d4:	2f72656e 	svccs	0x0072656e
     7d8:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     7dc:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     7e0:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     7e4:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     7e8:	2e686374 	mcrcs	3, 3, r6, cr8, cr4, {3}
     7ec:	00010063 	andeq	r0, r1, r3, rrx
     7f0:	72707300 	rsbsvc	r7, r0, #0, 6
     7f4:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     7f8:	00010068 	andeq	r0, r1, r8, rrx
     7fc:	616d6900 	cmnvs	sp, r0, lsl #18
     800:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     804:	00000100 	andeq	r0, r0, r0, lsl #2
     808:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     80c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     810:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     814:	00000100 	andeq	r0, r0, r0, lsl #2
     818:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     81c:	625f3168 	subsvs	r3, pc, #104, 2
     820:	6b63616c 	blvs	18d8dd8 <startup-0x1e727228>
     824:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     828:	00000100 	andeq	r0, r0, r0, lsl #2
     82c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     830:	675f3168 	ldrbvs	r3, [pc, -r8, ror #2]
     834:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     838:	006d6278 	rsbeq	r6, sp, r8, ror r2
     83c:	77000001 	strvc	r0, [r0, -r1]
     840:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     844:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     848:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     84c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     850:	77000001 	strvc	r0, [r0, -r1]
     854:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     858:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
     85c:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     860:	006d6278 	rsbeq	r6, sp, r8, ror r2
     864:	77000001 	strvc	r0, [r0, -r1]
     868:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     86c:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     870:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     874:	01006d62 	tsteq	r0, r2, ror #26
     878:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     87c:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     880:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     884:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     888:	01006d62 	tsteq	r0, r2, ror #26
     88c:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     890:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     894:	616c625f 	cmnvs	ip, pc, asr r2
     898:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     89c:	01006d62 	tsteq	r0, r2, ror #26
     8a0:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     8a4:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     8a8:	6172675f 	cmnvs	r2, pc, asr r7
     8ac:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     8b0:	0001006d 	andeq	r0, r1, sp, rrx
     8b4:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     8b8:	5f336863 	svcpl	0x00336863
     8bc:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     8c0:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     8c4:	0001006d 	andeq	r0, r1, sp, rrx
     8c8:	05000000 	streq	r0, [r0, #-0]
     8cc:	00177002 	andseq	r7, r7, r2
     8d0:	01280320 			; <UNDEFINED> instruction: 0x01280320
     8d4:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     8d8:	2f3d672f 	svccs	0x003d672f
     8dc:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     8e0:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     8e4:	2f3f672f 	svccs	0x003f672f
     8e8:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     8ec:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     8f0:	4c143a02 			; <UNDEFINED> instruction: 0x4c143a02
     8f4:	4b3e2f4b 	blmi	f8c628 <startup-0x1f0739d8>
     8f8:	915b5959 	cmpls	fp, r9, asr r9
     8fc:	3e949191 	mrccc	1, 4, r9, cr4, cr1, {4}
     900:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     904:	01002902 	tsteq	r0, r2, lsl #18
     908:	00034e01 	andeq	r4, r3, r1, lsl #28
     90c:	7c000200 	sfmvc	f0, 4, [r0], {-0}
     910:	02000000 	andeq	r0, r0, #0
     914:	0d0efb01 	vstreq	d15, [lr, #-4]
     918:	01010100 	mrseq	r0, (UNDEF: 17)
     91c:	00000001 	andeq	r0, r0, r1
     920:	01000001 	tsteq	r0, r1
     924:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     928:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     92c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     930:	6f62616c 	svcvs	0x0062616c
     934:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     938:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     93c:	5049442f 	subpl	r4, r9, pc, lsr #8
     940:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     944:	2f686374 	svccs	0x00686374
     948:	67000043 	strvs	r0, [r0, -r3, asr #32]
     94c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     950:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
     954:	00010063 	andeq	r0, r1, r3, rrx
     958:	72707300 	rsbsvc	r7, r0, #0, 6
     95c:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     960:	00010068 	andeq	r0, r1, r8, rrx
     964:	616d6900 	cmnvs	sp, r0, lsl #18
     968:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     96c:	00000100 	andeq	r0, r0, r0, lsl #2
     970:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     974:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     978:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     97c:	00000100 	andeq	r0, r0, r0, lsl #2
     980:	70617267 	rsbvc	r7, r1, r7, ror #4
     984:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
     988:	0100682e 	tsteq	r0, lr, lsr #16
     98c:	00000000 	andeq	r0, r0, r0
     990:	19a80205 	stmibne	r8!, {r0, r2, r9}
     994:	30152000 	andscc	r2, r5, r0
     998:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     99c:	01040200 	mrseq	r0, R12_usr
     9a0:	67062006 	strvs	r2, [r6, -r6]
     9a4:	3d30a03d 	ldccc	0, cr10, [r0, #-244]!	; 0xffffff0c
     9a8:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
     9ac:	06010402 	streq	r0, [r1], -r2, lsl #8
     9b0:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
     9b4:	2f214ba0 	svccs	0x00214ba0
     9b8:	5e2a2f2f 	cdppl	15, 2, cr2, cr10, cr15, {1}
     9bc:	57214f4c 	strpl	r4, [r1, -ip, asr #30]!
     9c0:	4a09035b 	bmi	241734 <startup-0x1fdbe8cc>
     9c4:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
     9c8:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
     9cc:	00570304 	subseq	r0, r7, r4, lsl #6
     9d0:	06010402 	streq	r0, [r1], -r2, lsl #8
     9d4:	674c063c 	smlaldxvs	r0, ip, ip, r6
     9d8:	2f674b2f 	svccs	0x00674b2f
     9dc:	a14b4b4b 	cmpge	fp, fp, asr #22
     9e0:	83915968 	orrshi	r5, r1, #104, 18	; 0x1a0000
     9e4:	59687659 	stmdbpl	r8!, {r0, r3, r4, r6, r9, sl, ip, sp, lr}^
     9e8:	675983d7 	smmlsvs	r9, r7, r3, r8
     9ec:	74120367 	ldrvc	r0, [r2], #-871	; 0xfffffc99
     9f0:	03206e03 			; <UNDEFINED> instruction: 0x03206e03
     9f4:	70034a12 	andvc	r4, r3, r2, lsl sl
     9f8:	223d3d20 	eorscs	r3, sp, #32, 26	; 0x800
     9fc:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
     a00:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
     a04:	3d3e4c22 	ldccc	12, cr4, [lr, #-136]!	; 0xffffff78
     a08:	313d3d3d 	teqcc	sp, sp, lsr sp
     a0c:	3d752f3d 	ldclcc	15, cr2, [r5, #-244]!	; 0xffffff0c
     a10:	4a790331 	bmi	1e416dc <startup-0x1e1be924>
     a14:	bc3d2327 	ldclt	3, cr2, [sp], #-156	; 0xffffff64
     a18:	3d3d3d67 	ldccc	13, cr3, [sp, #-412]!	; 0xfffffe64
     a1c:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
     a20:	3e3d592f 	vaddcc.f16	s10, s26, s31	; <UNPREDICTABLE>
     a24:	4b303d4b 	blmi	c0ff58 <startup-0x1f3f00a8>
     a28:	bc3d313d 	ldflts	f3, [sp], #-244	; 0xffffff0c
     a2c:	5a595967 	bpl	1656fd0 <startup-0x1e9a9030>
     a30:	2f594b91 	svccs	0x00594b91
     a34:	593e2f3d 	ldmdbpl	lr!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
     a38:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
     a3c:	3d3d3d31 	ldccc	13, cr3, [sp, #-196]!	; 0xffffff3c
     a40:	593d9167 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, ip, pc}
     a44:	4b833d3d 	blmi	fe0cff40 <firstTime.4040+0xde0c7234>
     a48:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
     a4c:	2f4c833d 	svccs	0x004c833d
     a50:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
     a54:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
     a58:	4b4b4b3e 	blmi	12d3758 <startup-0x1ed2c8a8>
     a5c:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
     a60:	4c9f4b3e 	vldmiami	pc, {d4-<overflow reg d34>}
     a64:	03040200 	movweq	r0, #16896	; 0x4200
     a68:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
     a6c:	02004903 	andeq	r4, r0, #49152	; 0xc000
     a70:	58060104 	stmdapl	r6, {r2, r8}
     a74:	02040200 	andeq	r0, r4, #0, 4
     a78:	02004606 	andeq	r4, r0, #6291456	; 0x600000
     a7c:	58060104 	stmdapl	r6, {r2, r8}
     a80:	764d5206 	strbvc	r5, [sp], -r6, lsl #4
     a84:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     a88:	004a0601 	subeq	r0, sl, r1, lsl #12
     a8c:	4a020402 	bmi	81a9c <startup-0x1ff7e564>
     a90:	03040200 	movweq	r0, #16896	; 0x4200
     a94:	084c064a 	stmdaeq	ip, {r1, r3, r6, r9, sl}^
     a98:	3e3d3d13 	mrccc	13, 1, r3, cr13, cr3, {0}
     a9c:	76763dbc 			; <UNDEFINED> instruction: 0x76763dbc
     aa0:	d71fd93d 			; <UNDEFINED> instruction: 0xd71fd93d
     aa4:	1fd93d23 	svcne	0x00d93d23
     aa8:	d93d23d7 	ldmdble	sp!, {r0, r1, r2, r4, r6, r7, r8, r9, sp}
     aac:	6103d71f 	tstvs	r3, pc, lsl r7
     ab0:	2023032e 	eorcs	r0, r3, lr, lsr #6
     ab4:	020069af 	andeq	r6, r0, #2867200	; 0x2bc000
     ab8:	4a060104 	bmi	180ed0 <startup-0x1fe7f130>
     abc:	02040200 	andeq	r0, r4, #0, 4
     ac0:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     ac4:	4b064a03 	blmi	1932d8 <startup-0x1fe6cd28>
     ac8:	59130875 	ldmdbpl	r3, {r0, r2, r4, r5, r6, fp}
     acc:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
     ad0:	3d5b5959 	vldrcc.16	s11, [fp, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
     ad4:	4c4b3d76 	mcrrmi	13, 7, r3, fp, cr6
     ad8:	d8c93e4b 	stmiale	r9, {r0, r1, r3, r6, r9, sl, fp, ip, sp}^
     adc:	ae3dca9f 			; <UNDEFINED> instruction: 0xae3dca9f
     ae0:	ac5e03a0 	mrrcge	3, 10, r0, lr, cr0
     ae4:	84202303 	strthi	r2, [r0], #-771	; 0xfffffcfd
     ae8:	00592f4c 	subseq	r2, r9, ip, asr #30
     aec:	06010402 	streq	r0, [r1], -r2, lsl #8
     af0:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     af4:	02002e02 	andeq	r2, r0, #2, 28
     af8:	00200404 	eoreq	r0, r0, r4, lsl #8
     afc:	06040402 	streq	r0, [r4], -r2, lsl #8
     b00:	75d7593d 	ldrbvc	r5, [r7, #2365]	; 0x93d
     b04:	03040200 	movweq	r0, #16896	; 0x4200
     b08:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
     b0c:	0200ab03 	andeq	sl, r0, #3072	; 0xc00
     b10:	9e060104 	adflss	f0, f6, f4
     b14:	02040200 	andeq	r0, r4, #0, 4
     b18:	02005506 	andeq	r5, r0, #25165824	; 0x1800000
     b1c:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
     b20:	02040200 	andeq	r0, r4, #0, 4
     b24:	02005606 	andeq	r5, r0, #6291456	; 0x600000
     b28:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
     b2c:	580a0306 	stmdapl	sl, {r1, r2, r8, r9}
     b30:	5a597652 	bpl	165e480 <startup-0x1e9a1b80>
     b34:	bb3d3d59 	bllt	f500a0 <startup-0x1f0aff60>
     b38:	3de6913d 	stfccp	f1, [r6, #244]!	; 0xf4
     b3c:	02006708 	andeq	r6, r0, #8, 14	; 0x200000
     b40:	7a030204 	bvc	c1358 <startup-0x1ff3eca8>
     b44:	02006608 	andeq	r6, r0, #8, 12	; 0x800000
     b48:	3c060104 	stfccs	f0, [r6], {4}
     b4c:	02040200 	andeq	r0, r4, #0, 4
     b50:	02003a06 	andeq	r3, r0, #24576	; 0x6000
     b54:	3c060104 	stfccs	f0, [r6], {4}
     b58:	02040200 	andeq	r0, r4, #0, 4
     b5c:	02004906 	andeq	r4, r0, #98304	; 0x18000
     b60:	3c060104 	stfccs	f0, [r6], {4}
     b64:	580e0306 	stmdapl	lr, {r1, r2, r8, r9}
     b68:	003d774c 	eorseq	r7, sp, ip, asr #14
     b6c:	3d030402 	cfstrscc	mvf0, [r3, #-8]
     b70:	03040200 	movweq	r0, #16896	; 0x4200
     b74:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
     b78:	003c0601 	eorseq	r0, ip, r1, lsl #12
     b7c:	06020402 	streq	r0, [r2], -r2, lsl #8
     b80:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
     b84:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     b88:	3d774c6b 	ldclcc	12, cr4, [r7, #-428]!	; 0xfffffe54
     b8c:	03040200 	movweq	r0, #16896	; 0x4200
     b90:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     b94:	02006503 	andeq	r6, r0, #12582912	; 0xc00000
     b98:	3c060104 	stfccs	f0, [r6], {4}
     b9c:	02040200 	andeq	r0, r4, #0, 4
     ba0:	02006506 	andeq	r6, r0, #25165824	; 0x1800000
     ba4:	3c060104 	stfccs	f0, [r6], {4}
     ba8:	3d4d6b06 	vstrcc	d22, [sp, #-24]	; 0xffffffe8
     bac:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
     bb0:	02006930 	andeq	r6, r0, #48, 18	; 0xc0000
     bb4:	00300104 	eorseq	r0, r0, r4, lsl #2
     bb8:	2f010402 	svccs	0x00010402
     bbc:	01040200 	mrseq	r0, R12_usr
     bc0:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
     bc4:	0200c901 	andeq	ip, r0, #16384	; 0x4000
     bc8:	13080104 	movwne	r0, #33028	; 0x8104
     bcc:	01040200 	mrseq	r0, R12_usr
     bd0:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
     bd4:	02002f01 	andeq	r2, r0, #1, 30
     bd8:	00680104 	rsbeq	r0, r8, r4, lsl #2
     bdc:	c9010402 	stmdbgt	r1, {r1, sl}
     be0:	01040200 	mrseq	r0, R12_usr
     be4:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
     be8:	00920104 	addseq	r0, r2, r4, lsl #2
     bec:	4b010402 	blmi	41bfc <startup-0x1ffbe404>
     bf0:	01040200 	mrseq	r0, R12_usr
     bf4:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
     bf8:	02002f01 	andeq	r2, r0, #1, 30
     bfc:	00670104 	rsbeq	r0, r7, r4, lsl #2
     c00:	08010402 	stmdaeq	r1, {r1, sl}
     c04:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
     c08:	02004c01 	andeq	r4, r0, #256	; 0x100
     c0c:	6c030104 	stfvss	f0, [r3], {4}
     c10:	3c19033c 	ldccc	3, cr0, [r9], {60}	; 0x3c
     c14:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
     c18:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
     c1c:	91080304 	tstls	r8, r4, lsl #6
     c20:	03040200 	movweq	r0, #16896	; 0x4200
     c24:	02009108 	andeq	r9, r0, #8, 2
     c28:	91080304 	tstls	r8, r4, lsl #6
     c2c:	03040200 	movweq	r0, #16896	; 0x4200
     c30:	02004608 	andeq	r4, r0, #8, 12	; 0x800000
     c34:	3c060104 	stfccs	f0, [r6], {4}
     c38:	3e085006 	cdpcc	0, 0, cr5, cr8, cr6, {0}
     c3c:	21083d4b 	tstcs	r8, fp, asr #26
     c40:	21082108 	tstcs	r8, r8, lsl #2
     c44:	21304b4d 	teqcs	r0, sp, asr #22
     c48:	3e4b3e4b 	cdpcc	14, 4, cr3, cr11, cr11, {2}
     c4c:	034b3e4b 	movteq	r3, #48715	; 0xbe4b
     c50:	0e033c75 	mcreq	12, 0, r3, cr3, cr5, {3}
     c54:	0b023058 	bleq	8cdbc <startup-0x1ff73244>
     c58:	72010100 	andvc	r0, r1, #0, 2
     c5c:	02000000 	andeq	r0, r0, #0
     c60:	00005b00 	andeq	r5, r0, r0, lsl #22
     c64:	fb010200 	blx	4146e <startup-0x1ffbeb92>
     c68:	01000d0e 	tsteq	r0, lr, lsl #26
     c6c:	00010101 	andeq	r0, r1, r1, lsl #2
     c70:	00010000 	andeq	r0, r1, r0
     c74:	3a430100 	bcc	10c107c <startup-0x1ef3ef84>
     c78:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     c7c:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; bc8 <startup-0x1ffff438>
     c80:	616c706f 	cmnvs	ip, pc, rrx
     c84:	61726f62 	cmnvs	r2, r2, ror #30
     c88:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     c8c:	442f7265 	strtmi	r7, [pc], #-613	; c94 <startup-0x1ffff36c>
     c90:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     c94:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     c98:	00432f68 	subeq	r2, r3, r8, ror #30
     c9c:	616d6900 	cmnvs	sp, r0, lsl #18
     ca0:	632e6567 			; <UNDEFINED> instruction: 0x632e6567
     ca4:	00000100 	andeq	r0, r0, r0, lsl #2
     ca8:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     cac:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     cb0:	00000100 	andeq	r0, r0, r0, lsl #2
     cb4:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     cb8:	00682e65 	rsbeq	r2, r8, r5, ror #28
     cbc:	00000001 	andeq	r0, r0, r1
     cc0:	ec020500 	cfstr32	mvfx0, [r2], {-0}
     cc4:	14200027 	strtne	r0, [r0], #-39	; 0xffffffd9
     cc8:	3d3d3d75 	ldccc	13, cr3, [sp, #-468]!	; 0xfffffe2c
     ccc:	01000402 	tsteq	r0, r2, lsl #8
     cd0:	00006801 	andeq	r6, r0, r1, lsl #16
     cd4:	51000200 	mrspl	r0, R8_usr
     cd8:	02000000 	andeq	r0, r0, #0
     cdc:	0d0efb01 	vstreq	d15, [lr, #-4]
     ce0:	01010100 	mrseq	r0, (UNDEF: 17)
     ce4:	00000001 	andeq	r0, r0, r1
     ce8:	01000001 	tsteq	r0, r1
     cec:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     cf0:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     cf4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     cf8:	6f62616c 	svcvs	0x0062616c
     cfc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     d00:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     d04:	5049442f 	subpl	r4, r9, pc, lsr #8
     d08:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     d0c:	2f686374 	svccs	0x00686374
     d10:	73000043 	movwvc	r0, #67	; 0x43
     d14:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     d18:	00632e65 	rsbeq	r2, r3, r5, ror #28
     d1c:	73000001 	movwvc	r0, #1
     d20:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     d24:	00682e65 	rsbeq	r2, r8, r5, ror #28
     d28:	00000001 	andeq	r0, r0, r1
     d2c:	14020500 	strne	r0, [r2], #-1280	; 0xfffffb00
     d30:	15200028 	strne	r0, [r0, #-40]!	; 0xffffffd8
     d34:	3d3d3d75 	ldccc	13, cr3, [sp, #-468]!	; 0xfffffe2c
     d38:	01000402 	tsteq	r0, r2, lsl #8
     d3c:	00006c01 	andeq	r6, r0, r1, lsl #24
     d40:	4d000200 	sfmmi	f0, 4, [r0, #-0]
     d44:	02000000 	andeq	r0, r0, #0
     d48:	0d0efb01 	vstreq	d15, [lr, #-4]
     d4c:	01010100 	mrseq	r0, (UNDEF: 17)
     d50:	00000001 	andeq	r0, r0, r1
     d54:	01000001 	tsteq	r0, r1
     d58:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     d5c:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     d60:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     d64:	6f62616c 	svcvs	0x0062616c
     d68:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     d6c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     d70:	5049442f 	subpl	r4, r9, pc, lsr #8
     d74:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     d78:	2f686374 	svccs	0x00686374
     d7c:	67000043 	strvs	r0, [r0, -r3, asr #32]
     d80:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     d84:	00010063 	andeq	r0, r1, r3, rrx
     d88:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
     d8c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     d90:	00000001 	andeq	r0, r0, r1
     d94:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
     d98:	15200028 	strne	r0, [r0, #-40]!	; 0xffffffd8
     d9c:	2f763d2f 	svccs	0x00763d2f
     da0:	4b693d59 	blmi	1a5030c <startup-0x1e5afcf4>
     da4:	22309167 	eorscs	r9, r0, #-1073741799	; 0xc0000019
     da8:	01000402 	tsteq	r0, r2, lsl #8
     dac:	00015a01 	andeq	r5, r1, r1, lsl #20
     db0:	81000200 	mrshi	r0, R8_usr
     db4:	02000000 	andeq	r0, r0, #0
     db8:	0d0efb01 	vstreq	d15, [lr, #-4]
     dbc:	01010100 	mrseq	r0, (UNDEF: 17)
     dc0:	00000001 	andeq	r0, r0, r1
     dc4:	01000001 	tsteq	r0, r1
     dc8:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     dcc:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     dd0:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     dd4:	6f62616c 	svcvs	0x0062616c
     dd8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     ddc:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     de0:	5049442f 	subpl	r4, r9, pc, lsr #8
     de4:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     de8:	2f686374 	svccs	0x00686374
     dec:	61000043 	tstvs	r0, r3, asr #32
     df0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     df4:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
     df8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     dfc:	0100632e 	tsteq	r0, lr, lsr #6
     e00:	70730000 	rsbsvc	r0, r3, r0
     e04:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     e08:	0100682e 	tsteq	r0, lr, lsr #16
     e0c:	6d690000 	stclvs	0, cr0, [r9, #-0]
     e10:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
     e14:	00010068 	andeq	r0, r1, r8, rrx
     e18:	6d616700 	stclvs	7, cr6, [r1, #-0]
     e1c:	6a626f65 	bvs	189cbb8 <startup-0x1e763448>
     e20:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     e24:	00010068 	andeq	r0, r1, r8, rrx
     e28:	61726700 	cmnvs	r2, r0, lsl #14
     e2c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
     e30:	00682e73 	rsbeq	r2, r8, r3, ror lr
     e34:	00000001 	andeq	r0, r0, r1
     e38:	a8020500 	stmdage	r2, {r8, sl}
     e3c:	03200028 			; <UNDEFINED> instruction: 0x03200028
     e40:	5969012e 	stmdbpl	r9!, {r1, r2, r3, r5, r8}^
     e44:	696859bb 	stmdbvs	r8!, {r0, r1, r3, r4, r5, r7, r8, fp, ip, lr}^
     e48:	59130859 	ldmdbpl	r3, {r0, r3, r4, r6, fp}
     e4c:	3d3d6776 	ldccc	7, cr6, [sp, #-472]!	; 0xfffffe28
     e50:	3d674c59 	stclcc	12, cr4, [r7, #-356]!	; 0xfffffe9c
     e54:	3e4c593d 			; <UNDEFINED> instruction: 0x3e4c593d
     e58:	5a3d3d67 	bpl	f503fc <startup-0x1f0afc04>
     e5c:	842f6767 	strthi	r6, [pc], #-1895	; e64 <startup-0x1ffff19c>
     e60:	3d3d673e 	ldccc	7, cr6, [sp, #-248]!	; 0xffffff08
     e64:	2f67675a 	svccs	0x0067675a
     e68:	4b3d6784 	blmi	f5ac80 <startup-0x1f0a5380>
     e6c:	3e683d2f 	cdpcc	13, 6, cr3, cr8, cr15, {1}
     e70:	4b2f2f3d 	blmi	bccb6c <startup-0x1f433494>
     e74:	67762f3d 			; <UNDEFINED> instruction: 0x67762f3d
     e78:	01040200 	mrseq	r0, R12_usr
     e7c:	83062006 	movwhi	r2, #24582	; 0x6006
     e80:	4c3d593d 			; <UNDEFINED> instruction: 0x4c3d593d
     e84:	764b6791 			; <UNDEFINED> instruction: 0x764b6791
     e88:	00304c9f 	mlaseq	r0, pc, ip, r4	; <UNPREDICTABLE>
     e8c:	06010402 	streq	r0, [r1], -r2, lsl #8
     e90:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
     e94:	02003f3d 	andeq	r3, r0, #61, 30	; 0xf4
     e98:	20060104 	andcs	r0, r6, r4, lsl #2
     e9c:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
     ea0:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
     ea4:	06200601 	strteq	r0, [r0], -r1, lsl #12
     ea8:	3f3d3d83 	svccc	0x003d3d83
     eac:	01040200 	mrseq	r0, R12_usr
     eb0:	83062006 	movwhi	r2, #24582	; 0x6006
     eb4:	3e3f3d3d 	mrccc	13, 1, r3, cr15, cr13, {1}
     eb8:	2f843d34 	svccs	0x00843d34
     ebc:	3e3e2f2f 	cdpcc	15, 3, cr2, cr14, cr15, {1}
     ec0:	214b2f84 	smlalbbcs	r2, fp, r4, pc	; <UNPREDICTABLE>
     ec4:	4b2f4d73 	blmi	bd4498 <startup-0x1f42bb68>
     ec8:	684d7321 	stmdavs	sp, {r0, r5, r8, r9, ip, sp, lr}^
     ecc:	214b3059 	qdaddcs	r3, r9, fp
     ed0:	214b4d73 	hvccs	46291	; 0xb4d3
     ed4:	4c4b4e73 	mcrrmi	14, 7, r4, fp, cr3
     ed8:	2f4b3075 	svccs	0x004b3075
     edc:	0073213d 	rsbseq	r2, r3, sp, lsr r1
     ee0:	06010402 	streq	r0, [r1], -r2, lsl #8
     ee4:	4b6b064a 	blmi	1ac2814 <startup-0x1e53d7ec>
     ee8:	73213d2f 			; <UNDEFINED> instruction: 0x73213d2f
     eec:	01040200 	mrseq	r0, R12_usr
     ef0:	6b064a06 	blvs	193710 <startup-0x1fe6c8f0>
     ef4:	753e4e4b 	ldrvc	r4, [lr, #-3659]!	; 0xfffff1b5
     ef8:	4b2f2f68 	blmi	bccca0 <startup-0x1f433360>
     efc:	4d73213d 	ldfmie	f2, [r3, #-244]!	; 0xffffff0c
     f00:	73212f4b 			; <UNDEFINED> instruction: 0x73212f4b
     f04:	0802214d 	stmdaeq	r2, {r0, r2, r3, r6, r8, sp}
     f08:	76010100 	strvc	r0, [r1], -r0, lsl #2
     f0c:	02000000 	andeq	r0, r0, #0
     f10:	00005700 	andeq	r5, r0, r0, lsl #14
     f14:	fb010200 	blx	4171e <startup-0x1ffbe8e2>
     f18:	01000d0e 	tsteq	r0, lr, lsl #26
     f1c:	00010101 	andeq	r0, r1, r1, lsl #2
     f20:	00010000 	andeq	r0, r1, r0
     f24:	3a430100 	bcc	10c132c <startup-0x1ef3ecd4>
     f28:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     f2c:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; e78 <startup-0x1ffff188>
     f30:	616c706f 	cmnvs	ip, pc, rrx
     f34:	61726f62 	cmnvs	r2, r2, ror #30
     f38:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     f3c:	442f7265 	strtmi	r7, [pc], #-613	; f44 <startup-0x1ffff0bc>
     f40:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     f44:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     f48:	00432f68 	subeq	r2, r3, r8, ror #30
     f4c:	6f6c7300 	svcvs	0x006c7300
     f50:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
     f54:	632e7478 			; <UNDEFINED> instruction: 0x632e7478
     f58:	00000100 	andeq	r0, r0, r0, lsl #2
     f5c:	776f6c73 			; <UNDEFINED> instruction: 0x776f6c73
     f60:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
     f64:	00682e74 	rsbeq	r2, r8, r4, ror lr
     f68:	00000001 	andeq	r0, r0, r1
     f6c:	c8020500 	stmdagt	r2, {r8, sl}
     f70:	1520002d 	strne	r0, [r0, #-45]!	; 0xffffffd3
     f74:	84c99f59 	strbhi	r9, [r9], #3929	; 0xf59
     f78:	3d754c59 	ldclcc	12, cr4, [r5, #-356]!	; 0xfffffe9c
     f7c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     f80:	01000702 	tsteq	r0, r2, lsl #14
     f84:	0000d601 	andeq	sp, r0, r1, lsl #12
     f88:	ab000200 	blge	1790 <startup-0x1fffe870>
     f8c:	02000000 	andeq	r0, r0, #0
     f90:	0d0efb01 	vstreq	d15, [lr, #-4]
     f94:	01010100 	mrseq	r0, (UNDEF: 17)
     f98:	00000001 	andeq	r0, r0, r1
     f9c:	01000001 	tsteq	r0, r1
     fa0:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     fa4:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     fa8:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     fac:	6f62616c 	svcvs	0x0062616c
     fb0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     fb4:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     fb8:	5049442f 	subpl	r4, r9, pc, lsr #8
     fbc:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     fc0:	2f686374 	svccs	0x00686374
     fc4:	69000043 	stmdbvs	r0, {r0, r1, r6}
     fc8:	6f6f646e 	svcvs	0x006f646e
     fcc:	632e7372 			; <UNDEFINED> instruction: 0x632e7372
     fd0:	00000100 	andeq	r0, r0, r0, lsl #2
     fd4:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     fd8:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     fdc:	00000100 	andeq	r0, r0, r0, lsl #2
     fe0:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     fe4:	00682e65 	rsbeq	r2, r8, r5, ror #28
     fe8:	67000001 	strvs	r0, [r0, -r1]
     fec:	6f656d61 	svcvs	0x00656d61
     ff0:	63656a62 	cmnvs	r5, #401408	; 0x62000
     ff4:	00682e74 	rsbeq	r2, r8, r4, ror lr
     ff8:	69000001 	stmdbvs	r0, {r0}
     ffc:	6f6f646e 	svcvs	0x006f646e
    1000:	625f7372 	subsvs	r7, pc, #-939524095	; 0xc8000001
    1004:	6b63616c 	blvs	18d95bc <startup-0x1e726a44>
    1008:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    100c:	00000100 	andeq	r0, r0, r0, lsl #2
    1010:	6f646e69 	svcvs	0x00646e69
    1014:	5f73726f 	svcpl	0x0073726f
    1018:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    101c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    1020:	00000100 	andeq	r0, r0, r0, lsl #2
    1024:	6f646e69 	svcvs	0x00646e69
    1028:	5f73726f 	svcpl	0x0073726f
    102c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1030:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
    1034:	0001006d 	andeq	r0, r1, sp, rrx
    1038:	05000000 	streq	r0, [r0, #-0]
    103c:	002e5c02 	eoreq	r5, lr, r2, lsl #24
    1040:	01130320 	tsteq	r3, r0, lsr #6
    1044:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
    1048:	2f3d672f 	svccs	0x003d672f
    104c:	5a083e67 	bpl	2109f0 <startup-0x1fdef610>
    1050:	3e2f4b4c 	vnmulcc.f64	d4, d15, d12
    1054:	3d3e934c 	ldccc	3, cr9, [lr, #-304]!	; 0xfffffed0
    1058:	083d3d3d 	ldmdaeq	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    105c:	da010100 	ble	41464 <startup-0x1ffbeb9c>
    1060:	02000000 	andeq	r0, r0, #0
    1064:	0000af00 	andeq	sl, r0, r0, lsl #30
    1068:	fb010200 	blx	41872 <startup-0x1ffbe78e>
    106c:	01000d0e 	tsteq	r0, lr, lsl #26
    1070:	00010101 	andeq	r0, r1, r1, lsl #2
    1074:	00010000 	andeq	r0, r1, r0
    1078:	3a430100 	bcc	10c1480 <startup-0x1ef3eb80>
    107c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    1080:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; fcc <startup-0x1ffff034>
    1084:	616c706f 	cmnvs	ip, pc, rrx
    1088:	61726f62 	cmnvs	r2, r2, ror #30
    108c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1090:	442f7265 	strtmi	r7, [pc], #-613	; 1098 <startup-0x1fffef68>
    1094:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    1098:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    109c:	00432f68 	subeq	r2, r3, r8, ror #30
    10a0:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    10a4:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    10a8:	00632e32 	rsbeq	r2, r3, r2, lsr lr
    10ac:	73000001 	movwvc	r0, #1
    10b0:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    10b4:	00682e65 	rsbeq	r2, r8, r5, ror #28
    10b8:	69000001 	stmdbvs	r0, {r0}
    10bc:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    10c0:	0100682e 	tsteq	r0, lr, lsr #16
    10c4:	61670000 	cmnvs	r7, r0
    10c8:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
    10cc:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
    10d0:	0100682e 	tsteq	r0, lr, lsr #16
    10d4:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
    10d8:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    10dc:	625f3273 	subsvs	r3, pc, #805306375	; 0x30000007
    10e0:	6b63616c 	blvs	18d9698 <startup-0x1e726968>
    10e4:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    10e8:	00000100 	andeq	r0, r0, r0, lsl #2
    10ec:	6f646e69 	svcvs	0x00646e69
    10f0:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    10f4:	6172675f 	cmnvs	r2, pc, asr r7
    10f8:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
    10fc:	0001006d 	andeq	r0, r1, sp, rrx
    1100:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1104:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1108:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    110c:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
    1110:	006d6278 	rsbeq	r6, sp, r8, ror r2
    1114:	00000001 	andeq	r0, r0, r1
    1118:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
    111c:	0320002f 			; <UNDEFINED> instruction: 0x0320002f
    1120:	2f3e0113 	svccs	0x003e0113
    1124:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
    1128:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
    112c:	4b4c5a08 	blmi	1317954 <startup-0x1ece86ac>
    1130:	934c3e2f 	movtls	r3, #52783	; 0xce2f
    1134:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
    1138:	0100083d 	tsteq	r0, sp, lsr r8
    113c:	Address 0x0000113c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
       4:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
       8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
       c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
      10:	696c0073 	stmdbvs	ip!, {r0, r1, r4, r5, r6}^
      14:	49746867 	ldmdbmi	r4!, {r0, r1, r2, r5, r6, fp, sp, lr}^
      18:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      1c:	61726700 	cmnvs	r2, r0, lsl #14
      20:	616d4979 	smcvs	54425	; 0xd499
      24:	63006567 	movwvs	r6, #1383	; 0x567
      28:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
      2c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
      30:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
      34:	00737469 	rsbseq	r7, r3, r9, ror #8
      38:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
      3c:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
      40:	5f747865 	svcpl	0x00747865
      44:	0061726b 	rsbeq	r7, r1, fp, ror #4
      48:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
      4c:	65766f5f 	ldrbvs	r6, [r6, #-3935]!	; 0xfffff0a1
      50:	5f6e0072 	svcpl	0x006e0072
      54:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
      58:	63007365 	movwvs	r7, #869	; 0x365
      5c:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
      60:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
      64:	70007468 	andvc	r7, r0, r8, ror #8
      68:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
      6c:	30317265 	eorscc	r7, r1, r5, ror #4
      70:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
      74:	73614370 	cmnvc	r1, #112, 6	; 0xc0000001
      78:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
      7c:	6b63616c 	blvs	18d8634 <startup-0x1e7279cc>
      80:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
      84:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
      88:	332e3620 			; <UNDEFINED> instruction: 0x332e3620
      8c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
      90:	30373130 	eorscc	r3, r7, r0, lsr r1
      94:	20353132 	eorscs	r3, r5, r2, lsr r1
      98:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
      9c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
      a0:	415b2029 	cmpmi	fp, r9, lsr #32
      a4:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff35a <firstTime.4040+0xdfff664e>
      a8:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
      ac:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
      b0:	72622d36 	rsbvc	r2, r2, #3456	; 0xd80
      b4:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
      b8:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
      bc:	6f697369 	svcvs	0x00697369
      c0:	3432206e 	ldrtcc	r2, [r2], #-110	; 0xffffff92
      c4:	32313535 	eorscc	r3, r1, #222298112	; 0xd400000
      c8:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
      cc:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
      d0:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
      d4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
      d8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
      dc:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
      e0:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
      e4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
      e8:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
      ec:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
      f0:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
      f4:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
      f8:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
      fc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     100:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     104:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
     108:	20672d20 	rsbcs	r2, r7, r0, lsr #26
     10c:	20304f2d 	eorscs	r4, r0, sp, lsr #30
     110:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
     114:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
     118:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     11c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     120:	5f736900 	svcpl	0x00736900
     124:	6d696c63 	stclvs	12, cr6, [r9, #-396]!	; 0xfffffe74
     128:	676e6962 	strbvs	r6, [lr, -r2, ror #18]!
     12c:	73616300 	cmnvc	r1, #0, 6
     130:	4f656c74 	svcmi	0x00656c74
     134:	6d006a62 	vstrvs	s12, [r0, #-392]	; 0xfffffe78
     138:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     13c:	6f507265 	svcvs	0x00507265
     140:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     144:	72700072 	rsbsvc	r0, r0, #114	; 0x72
     148:	5f737365 	svcpl	0x00737365
     14c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     150:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     154:	66007374 			; <UNDEFINED> instruction: 0x66007374
     158:	31657269 	cmncc	r5, r9, ror #4
     15c:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
     160:	73726f6f 	cmnvc	r2, #444	; 0x1bc
     164:	73616300 	cmnvc	r1, #0, 6
     168:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     16c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     170:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
     174:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     178:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     17c:	61747300 	cmnvs	r4, r0, lsl #6
     180:	70757472 	rsbsvc	r7, r5, r2, ror r4
     184:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     188:	6d003174 	stfvss	f3, [r0, #-464]	; 0xfffffe30
     18c:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     190:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
     194:	00746867 	rsbseq	r6, r4, r7, ror #16
     198:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     19c:	696c5f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     1a0:	5f746867 	svcpl	0x00746867
     1a4:	73746962 	cmnvc	r4, #1605632	; 0x188000
     1a8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     1ac:	6e6f4d70 	mcrvs	13, 3, r4, cr15, cr0, {3}
     1b0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     1b4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     1b8:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1bc:	70003274 	andvc	r3, r0, r4, ror r2
     1c0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     1c4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     1c8:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1cc:	74003474 	strvc	r3, [r0], #-1140	; 0xfffffb8c
     1d0:	33747865 	cmncc	r4, #6619136	; 0x650000
     1d4:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1d8:	66003574 			; <UNDEFINED> instruction: 0x66003574
     1dc:	31657269 	cmncc	r5, r9, ror #4
     1e0:	73616800 	cmnvc	r1, #0, 16
     1e4:	696c635f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
     1e8:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
     1ec:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     1f0:	00674270 	rsbeq	r4, r7, r0, ror r2
     1f4:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     1f8:	69740038 	ldmdbvs	r4!, {r3, r4, r5}^
     1fc:	5f656c74 	svcpl	0x00656c74
     200:	63616c62 	cmnvs	r1, #25088	; 0x6200
     204:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     208:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     20c:	4d706d65 	ldclmi	13, cr6, [r0, #-404]!	; 0xfffffe6c
     210:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     214:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
     218:	00746867 	rsbseq	r6, r4, r7, ror #16
     21c:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     220:	72640037 	rsbvc	r0, r4, #55	; 0x37
     224:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
     228:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     22c:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
     230:	006b6361 	rsbeq	r6, fp, r1, ror #6
     234:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     238:	65740036 	ldrbvs	r0, [r4, #-54]!	; 0xffffffca
     23c:	00397478 	eorseq	r7, r9, r8, ror r4
     240:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     244:	50726574 	rsbspl	r6, r2, r4, ror r5
     248:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     24c:	00327265 	eorseq	r7, r2, r5, ror #4
     250:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     254:	50726574 	rsbspl	r6, r2, r4, ror r5
     258:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     25c:	00337265 	eorseq	r7, r3, r5, ror #4
     260:	32776f72 	rsbscc	r6, r7, #456	; 0x1c8
     264:	73696400 	cmnvc	r9, #0, 8
     268:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     26c:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     270:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     274:	616c625f 	cmnvs	ip, pc, asr r2
     278:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     27c:	00737469 	rsbseq	r7, r3, r9, ror #8
     280:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     284:	7070615f 	rsbsvc	r6, r0, pc, asr r1
     288:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     28c:	65745f67 	ldrbvs	r5, [r4, #-3943]!	; 0xfffff099
     290:	70007478 	andvc	r7, r0, r8, ror r4
     294:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     298:	006a624f 	rsbeq	r6, sl, pc, asr #4
     29c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     2a0:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     2a4:	5f726566 	svcpl	0x00726566
     2a8:	63616c62 	cmnvs	r1, #25088	; 0x6200
     2ac:	72675f6b 	rsbvc	r5, r7, #428	; 0x1ac
     2b0:	6c5f7961 	mrrcvs	9, 6, r7, pc, cr1	; <UNPREDICTABLE>
     2b4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     2b8:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     2bc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     2c0:	6f700034 	svcvs	0x00700034
     2c4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     2c8:	70003572 	andvc	r3, r0, r2, ror r5
     2cc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     2d0:	00367265 	eorseq	r7, r6, r5, ror #4
     2d4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     2d8:	37726574 			; <UNDEFINED> instruction: 0x37726574
     2dc:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     2e0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     2e4:	6f700038 	svcvs	0x00700038
     2e8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     2ec:	74003972 	strvc	r3, [r0], #-2418	; 0xfffff68e
     2f0:	43706d65 	cmnmi	r0, #6464	; 0x1940
     2f4:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     2f8:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
     2fc:	72007468 	andvc	r7, r0, #104, 8	; 0x68000000
     300:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
     304:	69770072 	ldmdbvs	r7!, {r1, r4, r5, r6}^
     308:	00687464 	rsbeq	r7, r8, r4, ror #8
     30c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     310:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     314:	5f726566 	svcpl	0x00726566
     318:	63616c62 	cmnvs	r1, #25088	; 0x6200
     31c:	696c5f6b 	stmdbvs	ip!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     320:	00746867 	rsbseq	r6, r4, r7, ror #16
     324:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     328:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
     32c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     330:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     334:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
     338:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     33c:	746e755f 	strbtvc	r7, [lr], #-1375	; 0xfffffaa1
     340:	745f6c69 	ldrbvc	r6, [pc], #-3177	; 348 <startup-0x1ffffcb8>
     344:	00747865 	rsbseq	r7, r4, r5, ror #16
     348:	706d6574 	rsbvc	r6, sp, r4, ror r5
     34c:	736e6f4d 	cmnvc	lr, #308	; 0x134
     350:	00726574 	rsbseq	r6, r2, r4, ror r5
     354:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     358:	616c4265 	cmnvs	ip, r5, ror #4
     35c:	70006b63 	andvc	r6, r0, r3, ror #22
     360:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     364:	6172675f 	cmnvs	r2, pc, asr r7
     368:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     36c:	61007374 	tstvs	r0, r4, ror r3
     370:	616d696e 	cmnvs	sp, lr, ror #18
     374:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     378:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
     37c:	61006465 	tstvs	r0, r5, ror #8
     380:	616d696e 	cmnvs	sp, lr, ror #18
     384:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     388:	756f635f 	strbvc	r6, [pc, #-863]!	; 31 <startup-0x1fffffcf>
     38c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     390:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     394:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     398:	006a624f 	rsbeq	r6, sl, pc, asr #4
     39c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     3a0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     3a4:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     3a8:	675f656c 	ldrbvs	r6, [pc, -ip, ror #10]
     3ac:	5f796172 	svcpl	0x00796172
     3b0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     3b4:	61476e00 	cmpvs	r7, r0, lsl #28
     3b8:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
     3bc:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     3c0:	72700073 	rsbsvc	r0, r0, #115	; 0x73
     3c4:	5f737365 	svcpl	0x00737365
     3c8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     3cc:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     3d0:	70007374 	andvc	r7, r0, r4, ror r3
     3d4:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     3d8:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     3dc:	6d690065 	stclvs	0, cr0, [r9, #-404]!	; 0xfffffe6c
     3e0:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     3e4:	6f687300 	svcvs	0x00687300
     3e8:	745f7472 	ldrbvc	r7, [pc], #-1138	; 3f0 <startup-0x1ffffc10>
     3ec:	00747865 	rsbseq	r7, r4, r5, ror #16
     3f0:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
     3f4:	5f746e65 	svcpl	0x00746e65
     3f8:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
     3fc:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     400:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
     404:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     408:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     40c:	65725070 	ldrbvs	r5, [r2, #-112]!	; 0xffffff90
     410:	72477373 	subvc	r7, r7, #-872415231	; 0xcc000001
     414:	69007961 	stmdbvs	r0, {r0, r5, r6, r8, fp, ip, sp, lr}
     418:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     41c:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     420:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
     424:	43706d65 	cmnmi	r0, #6464	; 0x1940
     428:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     42c:	61724765 	cmnvs	r2, r5, ror #14
     430:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     434:	6954706d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
     438:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
     43c:	6b63616c 	blvs	18d89f4 <startup-0x1e72760c>
     440:	736e7500 	cmnvc	lr, #0, 10
     444:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     448:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     44c:	64007261 	strvs	r7, [r0], #-609	; 0xfffffd9f
     450:	5f776172 	svcpl	0x00776172
     454:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     458:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
     45c:	6b63616c 	blvs	18d8a14 <startup-0x1e7275ec>
     460:	6172675f 	cmnvs	r2, pc, asr r7
     464:	6f6d0079 	svcvs	0x006d0079
     468:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     46c:	696c5f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     470:	5f746867 	svcpl	0x00746867
     474:	73746962 	cmnvc	r4, #1605632	; 0x188000
     478:	73616300 	cmnvc	r1, #0, 6
     47c:	5f656c74 	svcpl	0x00656c74
     480:	63616c62 	cmnvs	r1, #25088	; 0x6200
     484:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     488:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     48c:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     490:	006a624f 	rsbeq	r6, sl, pc, asr #4
     494:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     498:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     49c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     4a0:	6f62616c 	svcvs	0x0062616c
     4a4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     4a8:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     4ac:	5049442f 	subpl	r4, r9, pc, lsr #8
     4b0:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     4b4:	2f686374 	svccs	0x00686374
     4b8:	74732f43 	ldrbtvc	r2, [r3], #-3907	; 0xfffff0bd
     4bc:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     4c0:	00632e70 	rsbeq	r2, r3, r0, ror lr
     4c4:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     4c8:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
     4cc:	00737463 	rsbseq	r7, r3, r3, ror #8
     4d0:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     4d4:	7247656c 	subvc	r6, r7, #108, 10	; 0x1b000000
     4d8:	6d007961 	vstrvs.16	s14, [r0, #-194]	; 0xffffff3e	; <UNPREDICTABLE>
     4dc:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     4e0:	72477265 	subvc	r7, r7, #1342177286	; 0x50000006
     4e4:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     4e8:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     4ec:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     4f0:	72756300 	rsbsvc	r6, r5, #0, 6
     4f4:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     4f8:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
     4fc:	006e6565 	rsbeq	r6, lr, r5, ror #10
     500:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
     504:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
     508:	616c705f 	qdsubvs	r7, pc, ip	; <UNPREDICTABLE>
     50c:	5f726579 	svcpl	0x00726579
     510:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     514:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     518:	65725070 	ldrbvs	r5, [r2, #-112]!	; 0xffffff90
     51c:	6c427373 	mcrrvs	3, 7, r7, r2, cr3
     520:	006b6361 	rsbeq	r6, fp, r1, ror #6
     524:	625f6762 	subsvs	r6, pc, #25690112	; 0x1880000
     528:	00737469 	rsbseq	r7, r3, r9, ror #8
     52c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     530:	616d496b 	cmnvs	sp, fp, ror #18
     534:	6d006567 	cfstr32vs	mvfx6, [r0, #-412]	; 0xfffffe64
     538:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     53c:	675f7265 	ldrbvs	r7, [pc, -r5, ror #4]
     540:	5f796172 	svcpl	0x00796172
     544:	73746962 	cmnvc	r4, #1605632	; 0x188000
     548:	73616300 	cmnvc	r1, #0, 6
     54c:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     550:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     554:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     558:	6d49656c 	cfstr64vs	mvdx6, [r9, #-432]	; 0xfffffe50
     55c:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     560:	6e617200 	cdpvs	2, 6, cr7, cr1, cr0, {0}
     564:	5f6d6f64 	svcpl	0x006d6f64
     568:	64656573 	strbtvs	r6, [r5], #-1395	; 0xfffffa8d
     56c:	72696600 	rsbvc	r6, r9, #0, 12
     570:	66003265 	strvs	r3, [r0], -r5, ror #4
     574:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     578:	72696600 	rsbvc	r6, r9, #0, 12
     57c:	70003465 	andvc	r3, r0, r5, ror #8
     580:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     584:	63616c42 	cmnvs	r1, #16896	; 0x4200
     588:	6f6d006b 	svcvs	0x006d006b
     58c:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     590:	616d4972 	smcvs	54418	; 0xd492
     594:	79006567 	stmdbvc	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     598:	00736f50 	rsbseq	r6, r3, r0, asr pc
     59c:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     5a0:	696c635f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
     5a4:	765f626d 	ldrbvc	r6, [pc], -sp, ror #4
     5a8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     5ac:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     5b0:	00323174 	eorseq	r3, r2, r4, ror r1
     5b4:	706d6574 	rsbvc	r6, sp, r4, ror r5
     5b8:	6c746954 			; <UNDEFINED> instruction: 0x6c746954
     5bc:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
     5c0:	75007468 	strvc	r7, [r0, #-1128]	; 0xfffffb98
     5c4:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     5c8:	72700065 	rsbsvc	r0, r0, #101	; 0x65
     5cc:	49737365 	ldmdbmi	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
     5d0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     5d4:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     5d8:	6954706d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
     5dc:	47656c74 			; <UNDEFINED> instruction: 0x47656c74
     5e0:	00796172 	rsbseq	r6, r9, r2, ror r1
     5e4:	6f6c5374 	svcvs	0x006c5374
     5e8:	78655477 	stmdavc	r5!, {r0, r1, r2, r4, r5, r6, sl, ip, lr}^
     5ec:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
     5f0:	5f38746e 	svcpl	0x0038746e
     5f4:	61620074 	smcvs	8196	; 0x2004
     5f8:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
     5fc:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     600:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     604:	61620074 	smcvs	8196	; 0x2004
     608:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
     60c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     610:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     614:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     618:	65725070 	ldrbvs	r5, [r2, #-112]!	; 0xffffff90
     61c:	694c7373 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^
     620:	00746867 	rsbseq	r6, r4, r7, ror #16
     624:	6d614774 	stclvs	7, cr4, [r1, #-464]!	; 0xfffffe30
     628:	6a624f65 	bvs	18943c4 <startup-0x1e76bc3c>
     62c:	00746365 	rsbseq	r6, r4, r5, ror #6
     630:	736f5078 	cmnvc	pc, #120	; 0x78
     634:	73616300 	cmnvc	r1, #0, 6
     638:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
     63c:	6b63616c 	blvs	18d8bf4 <startup-0x1e72740c>
     640:	6d616700 	stclvs	7, cr6, [r1, #-0]
     644:	766f5f65 	strbtvc	r5, [pc], -r5, ror #30
     648:	615f7265 	cmpvs	pc, r5, ror #4
     64c:	72656464 	rsbvc	r6, r5, #100, 8	; 0x64000000
     650:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     654:	00303174 	eorseq	r3, r0, r4, ror r1
     658:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     65c:	68003131 	stmdavs	r0, {r0, r4, r5, r8, ip, sp}
     660:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
     664:	616d0074 	smcvs	53252	; 0xd004
     668:	70006e69 	andvc	r6, r0, r9, ror #28
     66c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     670:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     674:	6f6d0074 	svcvs	0x006d0074
     678:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     67c:	616d4972 	smcvs	54418	; 0xd492
     680:	00736567 	rsbseq	r6, r3, r7, ror #10
     684:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     688:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
     68c:	70557463 	subsvc	r7, r5, r3, ror #8
     690:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     694:	2f3a4300 	svccs	0x003a4300
     698:	2f706f6d 	svccs	0x00706f6d
     69c:	6f4d2f63 	svcvs	0x004d2f63
     6a0:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     6a4:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     6a8:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     6ac:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     6b0:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     6b4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     6b8:	672f432f 	strvs	r4, [pc, -pc, lsr #6]!
     6bc:	6f656d61 	svcvs	0x00656d61
     6c0:	63656a62 	cmnvs	r5, #401408	; 0x62000
     6c4:	00632e74 	rsbeq	r2, r3, r4, ror lr
     6c8:	73696874 	cmnvc	r9, #116, 16	; 0x740000
     6cc:	72696600 	rsbvc	r6, r9, #0, 12
     6d0:	72473565 	subvc	r3, r7, #423624704	; 0x19400000
     6d4:	66007961 	strvs	r7, [r0], -r1, ror #18
     6d8:	31657269 	cmncc	r5, r9, ror #4
     6dc:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     6e0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     6e4:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     6e8:	72473265 	subvc	r3, r7, #1342177286	; 0x50000006
     6ec:	66007961 	strvs	r7, [r0], -r1, ror #18
     6f0:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     6f4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     6f8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     6fc:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     700:	72473465 	subvc	r3, r7, #1694498816	; 0x65000000
     704:	66007961 	strvs	r7, [r0], -r1, ror #18
     708:	42657269 	rsbmi	r7, r5, #-1879048186	; 0x90000006
     70c:	6b63616c 	blvs	18d8cc4 <startup-0x1e72733c>
     710:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     714:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     718:	72473365 	subvc	r3, r7, #-1811939327	; 0x94000001
     71c:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     720:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     724:	42657269 	rsbmi	r7, r5, #-1879048186	; 0x90000006
     728:	6b63616c 	blvs	18d8ce0 <startup-0x1e727320>
     72c:	72696600 	rsbvc	r6, r9, #0, 12
     730:	694c3165 	stmdbvs	ip, {r0, r2, r5, r6, r8, ip, sp}^
     734:	00746867 	rsbseq	r6, r4, r7, ror #16
     738:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     73c:	67694c34 			; <UNDEFINED> instruction: 0x67694c34
     740:	66007468 	strvs	r7, [r0], -r8, ror #8
     744:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     748:	6172675f 	cmnvs	r2, pc, asr r7
     74c:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     750:	66007374 			; <UNDEFINED> instruction: 0x66007374
     754:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     758:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     75c:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     760:	00737469 	rsbseq	r7, r3, r9, ror #8
     764:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     768:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     76c:	70007468 	andvc	r7, r0, r8, ror #8
     770:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     774:	00317265 	eorseq	r7, r1, r5, ror #4
     778:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     77c:	33726574 	cmncc	r2, #116, 10	; 0x1d000000
     780:	72696600 	rsbvc	r6, r9, #0, 12
     784:	675f3565 	ldrbvs	r3, [pc, -r5, ror #10]
     788:	5f796172 	svcpl	0x00796172
     78c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     790:	72696600 	rsbvc	r6, r9, #0, 12
     794:	6d493365 	stclvs	3, cr3, [r9, #-404]	; 0xfffffe6c
     798:	00656761 	rsbeq	r6, r5, r1, ror #14
     79c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     7a0:	30726574 	rsbscc	r6, r2, r4, ror r5
     7a4:	72696600 	rsbvc	r6, r9, #0, 12
     7a8:	694c3565 	stmdbvs	ip, {r0, r2, r5, r6, r8, sl, ip, sp}^
     7ac:	00746867 	rsbseq	r6, r4, r7, ror #16
     7b0:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     7b4:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     7b8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     7bc:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     7c0:	72473565 	subvc	r3, r7, #423624704	; 0x19400000
     7c4:	66007961 	strvs	r7, [r0], -r1, ror #18
     7c8:	31657269 	cmncc	r5, r9, ror #4
     7cc:	6172675f 	cmnvs	r2, pc, asr r7
     7d0:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     7d4:	66007374 			; <UNDEFINED> instruction: 0x66007374
     7d8:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     7dc:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     7e0:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     7e4:	5f316572 	svcpl	0x00316572
     7e8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     7ec:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     7f0:	66007374 			; <UNDEFINED> instruction: 0x66007374
     7f4:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     7f8:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     7fc:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     800:	00737469 	rsbseq	r7, r3, r9, ror #8
     804:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     808:	006a624f 	rsbeq	r6, sl, pc, asr #4
     80c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     810:	61724732 	cmnvs	r2, r2, lsr r7
     814:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     818:	5f346572 	svcpl	0x00346572
     81c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     820:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     824:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     828:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     82c:	4c336572 	cfldr32mi	mvfx6, [r3], #-456	; 0xfffffe38
     830:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     834:	72696600 	rsbvc	r6, r9, #0, 12
     838:	6d493465 	cfstrdvs	mvd3, [r9, #-404]	; 0xfffffe6c
     83c:	00656761 	rsbeq	r6, r5, r1, ror #14
     840:	706d6574 	rsbvc	r6, sp, r4, ror r5
     844:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     848:	67694c31 			; <UNDEFINED> instruction: 0x67694c31
     84c:	66007468 	strvs	r7, [r0], -r8, ror #8
     850:	74737269 	ldrbtvc	r7, [r3], #-617	; 0xfffffd97
     854:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     858:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     85c:	69665f74 	stmdbvs	r6!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     860:	66006572 			; <UNDEFINED> instruction: 0x66006572
     864:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     868:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     86c:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     870:	00737469 	rsbseq	r7, r3, r9, ror #8
     874:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     878:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     87c:	66007365 	strvs	r7, [r0], -r5, ror #6
     880:	31657269 	cmncc	r5, r9, ror #4
     884:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     888:	69660065 	stmdbvs	r6!, {r0, r2, r5, r6}^
     88c:	47346572 			; <UNDEFINED> instruction: 0x47346572
     890:	00796172 	rsbseq	r6, r9, r2, ror r1
     894:	706d6574 	rsbvc	r6, sp, r4, ror r5
     898:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     89c:	61724731 	cmnvs	r2, r1, lsr r7
     8a0:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     8a4:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     8a8:	4c346572 	cfldr32mi	mvfx6, [r4], #-456	; 0xfffffe38
     8ac:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     8b0:	72696600 	rsbvc	r6, r9, #0, 12
     8b4:	6c5f3365 	mrrcvs	3, 6, r3, pc, cr5	; <UNPREDICTABLE>
     8b8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     8bc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     8c0:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     8c4:	49356572 	ldmdbmi	r5!, {r1, r4, r5, r6, r8, sl, sp, lr}
     8c8:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     8cc:	72696600 	rsbvc	r6, r9, #0, 12
     8d0:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
     8d4:	5f6b6361 	svcpl	0x006b6361
     8d8:	69625f32 	stmdbvs	r2!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     8dc:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     8e0:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     8e4:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     8e8:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     8ec:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     8f0:	49326572 	ldmdbmi	r2!, {r1, r4, r5, r6, r8, sl, sp, lr}
     8f4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     8f8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     8fc:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     900:	694c3565 	stmdbvs	ip, {r0, r2, r5, r6, r8, sl, ip, sp}^
     904:	00746867 	rsbseq	r6, r4, r7, ror #16
     908:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     90c:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     910:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     914:	6f62616c 	svcvs	0x0062616c
     918:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     91c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     920:	5049442f 	subpl	r4, r9, pc, lsr #8
     924:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     928:	2f686374 	svccs	0x00686374
     92c:	69662f43 	stmdbvs	r6!, {r0, r1, r6, r8, r9, sl, fp, sp}^
     930:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
     934:	72696600 	rsbvc	r6, r9, #0, 12
     938:	675f3365 	ldrbvs	r3, [pc, -r5, ror #6]
     93c:	5f796172 	svcpl	0x00796172
     940:	73746962 	cmnvc	r4, #1605632	; 0x188000
     944:	73616c00 	cmnvc	r1, #0, 24
     948:	67695274 			; <UNDEFINED> instruction: 0x67695274
     94c:	61567468 	cmpvs	r6, r8, ror #8
     950:	0065756c 	rsbeq	r7, r5, ip, ror #10
     954:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     958:	706d754a 	rsbvc	r7, sp, sl, asr #10
     95c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     960:	53790065 	cmnpl	r9, #101	; 0x65
     964:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     968:	70537800 	subsvc	r7, r3, r0, lsl #16
     96c:	00646565 	rsbeq	r6, r4, r5, ror #10
     970:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     974:	7466654c 	strbtvc	r6, [r6], #-1356	; 0xfffffab4
     978:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     97c:	3a430065 	bcc	10c0b18 <startup-0x1ef3f4e8>
     980:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     984:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 8d0 <startup-0x1ffff730>
     988:	616c706f 	cmnvs	ip, pc, rrx
     98c:	61726f62 	cmnvs	r2, r2, ror #30
     990:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     994:	442f7265 	strtmi	r7, [pc], #-613	; 99c <startup-0x1ffff664>
     998:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     99c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     9a0:	2f432f68 	svccs	0x00432f68
     9a4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     9a8:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
     9ac:	616c7000 	cmnvs	ip, r0
     9b0:	55726579 	ldrbpl	r6, [r2, #-1401]!	; 0xfffffa87
     9b4:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     9b8:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
     9bc:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     9c0:	4c326472 	cfldrsmi	mvf6, [r2], #-456	; 0xfffffe38
     9c4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     9c8:	72696200 	rsbvc	r6, r9, #0, 4
     9cc:	6c5f3364 	mrrcvs	3, 6, r3, pc, cr4	; <UNPREDICTABLE>
     9d0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     9d4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     9d8:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     9dc:	49346472 	ldmdbmi	r4!, {r1, r4, r5, r6, sl, sp, lr}
     9e0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     9e4:	72696200 	rsbvc	r6, r9, #0, 4
     9e8:	6c5f3464 	cfldrdvs	mvd3, [pc], {100}	; 0x64
     9ec:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     9f0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     9f4:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     9f8:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     9fc:	4c356472 	cfldrsmi	mvf6, [r5], #-456	; 0xfffffe38
     a00:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     a04:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     a08:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     a0c:	62003431 	andvs	r3, r0, #822083584	; 0x31000000
     a10:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     a14:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     a18:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     a1c:	00737469 	rsbseq	r7, r3, r9, ror #8
     a20:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a24:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     a28:	70007468 	andvc	r7, r0, r8, ror #8
     a2c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     a30:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     a34:	72696200 	rsbvc	r6, r9, #0, 4
     a38:	694c3164 	stmdbvs	ip, {r2, r5, r6, r8, ip, sp}^
     a3c:	00746867 	rsbseq	r6, r4, r7, ror #16
     a40:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a44:	616c4233 	cmnvs	ip, r3, lsr r2
     a48:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     a4c:	31647269 	cmncc	r4, r9, ror #4
     a50:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     a54:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     a58:	72694270 	rsbvc	r4, r9, #112, 4
     a5c:	6c423464 	cfstrdvs	mvd3, [r2], {100}	; 0x64
     a60:	006b6361 	rsbeq	r6, fp, r1, ror #6
     a64:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a68:	616c4235 	cmnvs	ip, r5, lsr r2
     a6c:	70006b63 	andvc	r6, r0, r3, ror #22
     a70:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     a74:	30327265 	eorscc	r7, r2, r5, ror #4
     a78:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     a7c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     a80:	62003132 	andvs	r3, r0, #-2147483636	; 0x8000000c
     a84:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     a88:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     a8c:	72696200 	rsbvc	r6, r9, #0, 4
     a90:	6c423264 	sfmvs	f3, 2, [r2], {100}	; 0x64
     a94:	006b6361 	rsbeq	r6, fp, r1, ror #6
     a98:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     a9c:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     aa0:	6f700034 	svcvs	0x00700034
     aa4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     aa8:	00363172 	eorseq	r3, r6, r2, ror r1
     aac:	706d6574 	rsbvc	r6, sp, r4, ror r5
     ab0:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     ab4:	61724732 	cmnvs	r2, r2, lsr r7
     ab8:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     abc:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     ac0:	47346472 			; <UNDEFINED> instruction: 0x47346472
     ac4:	00796172 	rsbseq	r6, r9, r2, ror r1
     ac8:	706d6574 	rsbvc	r6, sp, r4, ror r5
     acc:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     ad0:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     ad4:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     ad8:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     adc:	47356472 			; <UNDEFINED> instruction: 0x47356472
     ae0:	00796172 	rsbseq	r6, r9, r2, ror r1
     ae4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     ae8:	31726574 	cmncc	r2, r4, ror r5
     aec:	69620033 	stmdbvs	r2!, {r0, r1, r4, r5}^
     af0:	5f326472 	svcpl	0x00326472
     af4:	63616c62 	cmnvs	r1, #25088	; 0x6200
     af8:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     afc:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     b00:	31647269 	cmncc	r4, r9, ror #4
     b04:	6172675f 	cmnvs	r2, pc, asr r7
     b08:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     b0c:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     b10:	36647269 	strbtcc	r7, [r4], -r9, ror #4
     b14:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     b18:	69620065 	stmdbvs	r2!, {r0, r2, r5, r6}^
     b1c:	5f336472 	svcpl	0x00336472
     b20:	63616c62 	cmnvs	r1, #25088	; 0x6200
     b24:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     b28:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     b2c:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     b30:	616c625f 	cmnvs	ip, pc, asr r2
     b34:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     b38:	00737469 	rsbseq	r7, r3, r9, ror #8
     b3c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b40:	616d4933 	cmnvs	sp, r3, lsr r9
     b44:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
     b48:	31647269 	cmncc	r4, r9, ror #4
     b4c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     b50:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     b54:	00737469 	rsbseq	r7, r3, r9, ror #8
     b58:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b5c:	6c625f35 	stclvs	15, cr5, [r2], #-212	; 0xffffff2c
     b60:	5f6b6361 	svcpl	0x006b6361
     b64:	73746962 	cmnvc	r4, #1605632	; 0x188000
     b68:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     b6c:	72694270 	rsbvc	r4, r9, #112, 4
     b70:	694c3364 	stmdbvs	ip, {r2, r5, r6, r8, r9, ip, sp}^
     b74:	00746867 	rsbseq	r6, r4, r7, ror #16
     b78:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b7c:	72675f35 	rsbvc	r5, r7, #53, 30	; 0xd4
     b80:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     b84:	00737469 	rsbseq	r7, r3, r9, ror #8
     b88:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b8c:	61724732 	cmnvs	r2, r2, lsr r7
     b90:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     b94:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     b98:	4c346472 	cfldrsmi	mvf6, [r4], #-456	; 0xfffffe38
     b9c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     ba0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     ba4:	72694270 	rsbvc	r4, r9, #112, 4
     ba8:	72473364 	subvc	r3, r7, #100, 6	; 0x90000001
     bac:	62007961 	andvs	r7, r0, #1589248	; 0x184000
     bb0:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     bb4:	6172675f 	cmnvs	r2, pc, asr r7
     bb8:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     bbc:	70007374 	andvc	r7, r0, r4, ror r3
     bc0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     bc4:	33327265 	teqcc	r2, #1342177286	; 0x50000006
     bc8:	72696200 	rsbvc	r6, r9, #0, 4
     bcc:	694c3564 	stmdbvs	ip, {r2, r5, r6, r8, sl, ip, sp}^
     bd0:	00746867 	rsbseq	r6, r4, r7, ror #16
     bd4:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     bd8:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     bdc:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
     be0:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     be4:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     be8:	63616c42 	cmnvs	r1, #16896	; 0x4200
     bec:	6962006b 	stmdbvs	r2!, {r0, r1, r3, r5, r6}^
     bf0:	42346472 	eorsmi	r6, r4, #1912602624	; 0x72000000
     bf4:	6b63616c 	blvs	18d91ac <startup-0x1e726e54>
     bf8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     bfc:	72694270 	rsbvc	r4, r9, #112, 4
     c00:	6c423264 	sfmvs	f3, 2, [r2], {100}	; 0x64
     c04:	006b6361 	rsbeq	r6, fp, r1, ror #6
     c08:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c0c:	72675f33 	rsbvc	r5, r7, #51, 30	; 0xcc
     c10:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     c14:	00737469 	rsbseq	r7, r3, r9, ror #8
     c18:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c1c:	616c4231 	cmnvs	ip, r1, lsr r2
     c20:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     c24:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     c28:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     c2c:	3a430074 	bcc	10c0e04 <startup-0x1ef3f1fc>
     c30:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     c34:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; b80 <startup-0x1ffff480>
     c38:	616c706f 	cmnvs	ip, pc, rrx
     c3c:	61726f62 	cmnvs	r2, r2, ror #30
     c40:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     c44:	442f7265 	strtmi	r7, [pc], #-613	; c4c <startup-0x1ffff3b4>
     c48:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     c4c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     c50:	2f432f68 	svccs	0x00432f68
     c54:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c58:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
     c5c:	5f74696e 	svcpl	0x0074696e
     c60:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c64:	72696200 	rsbvc	r6, r9, #0, 4
     c68:	6a624f64 	bvs	1894a00 <startup-0x1e76b600>
     c6c:	72696200 	rsbvc	r6, r9, #0, 4
     c70:	675f3264 	ldrbvs	r3, [pc, -r4, ror #4]
     c74:	5f796172 	svcpl	0x00796172
     c78:	73746962 	cmnvc	r4, #1605632	; 0x188000
     c7c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     c80:	72694270 	rsbvc	r4, r9, #112, 4
     c84:	61724764 	cmnvs	r2, r4, ror #14
     c88:	69620079 	stmdbvs	r2!, {r0, r3, r4, r5, r6}^
     c8c:	47356472 			; <UNDEFINED> instruction: 0x47356472
     c90:	00796172 	rsbseq	r6, r9, r2, ror r1
     c94:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c98:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
     c9c:	5f6b6361 	svcpl	0x006b6361
     ca0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     ca4:	72696200 	rsbvc	r6, r9, #0, 4
     ca8:	6d493164 	stfvse	f3, [r9, #-400]	; 0xfffffe70
     cac:	00656761 	rsbeq	r6, r5, r1, ror #14
     cb0:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     cb4:	61724733 	cmnvs	r2, r3, lsr r7
     cb8:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     cbc:	506c616e 	rsbpl	r6, ip, lr, ror #2
     cc0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     cc4:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
     cc8:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     ccc:	42647269 	rsbmi	r7, r4, #-1879048186	; 0x90000006
     cd0:	6b63616c 	blvs	18d9288 <startup-0x1e726d78>
     cd4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     cd8:	72694270 	rsbvc	r4, r9, #112, 4
     cdc:	6c423364 	mcrrvs	3, 6, r3, r2, cr4
     ce0:	006b6361 	rsbeq	r6, fp, r1, ror #6
     ce4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     ce8:	31726574 	cmncc	r2, r4, ror r5
     cec:	6f700031 	svcvs	0x00700031
     cf0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     cf4:	00323172 	eorseq	r3, r2, r2, ror r1
     cf8:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     cfc:	67694c34 			; <UNDEFINED> instruction: 0x67694c34
     d00:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
     d04:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     d08:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     d0c:	6f700065 	svcvs	0x00700065
     d10:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     d14:	00353172 	eorseq	r3, r5, r2, ror r1
     d18:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     d1c:	31726574 	cmncc	r2, r4, ror r5
     d20:	6f700037 	svcvs	0x00700037
     d24:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     d28:	00383172 	eorseq	r3, r8, r2, ror r1
     d2c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     d30:	616d4932 	cmnvs	sp, r2, lsr r9
     d34:	70006567 	andvc	r6, r0, r7, ror #10
     d38:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     d3c:	32327265 	eorscc	r7, r2, #1342177286	; 0x50000006
     d40:	72696200 	rsbvc	r6, r9, #0, 4
     d44:	6c5f3264 	lfmvs	f3, 2, [pc], {100}	; 0x64
     d48:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     d4c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     d50:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     d54:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     d58:	63616c42 	cmnvs	r1, #16896	; 0x4200
     d5c:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     d60:	31686374 	smccc	34356	; 0x8634
     d64:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     d68:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     d6c:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     d70:	694c6863 	stmdbvs	ip, {r0, r1, r5, r6, fp, sp, lr}^
     d74:	00746867 	rsbseq	r6, r4, r7, ror #16
     d78:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     d7c:	6a624f68 	bvs	1894b24 <startup-0x1e76b4dc>
     d80:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     d84:	5f316863 	svcpl	0x00316863
     d88:	63616c62 	cmnvs	r1, #25088	; 0x6200
     d8c:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     d90:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     d94:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     d98:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     d9c:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     da0:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     da4:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     da8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     dac:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
     db0:	77007468 	strvc	r7, [r0, -r8, ror #8]
     db4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     db8:	67694c31 			; <UNDEFINED> instruction: 0x67694c31
     dbc:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     dc0:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     dc4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     dc8:	616c4232 	cmnvs	ip, r2, lsr r2
     dcc:	77006b63 	strvc	r6, [r0, -r3, ror #22]
     dd0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     dd4:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     dd8:	5f746867 	svcpl	0x00746867
     ddc:	73746962 	cmnvc	r4, #1605632	; 0x188000
     de0:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     de4:	49336863 	ldmdbmi	r3!, {r0, r1, r5, r6, fp, sp, lr}
     de8:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     dec:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     df0:	42336863 	eorsmi	r6, r3, #6488064	; 0x630000
     df4:	6b63616c 	blvs	18d93ac <startup-0x1e726c54>
     df8:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     dfc:	5f336863 	svcpl	0x00336863
     e00:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     e04:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     e08:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
     e0c:	775f7469 	ldrbvc	r7, [pc, -r9, ror #8]
     e10:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e14:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     e18:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     e1c:	6c426863 	mcrrvs	8, 6, r6, r2, cr3
     e20:	006b6361 	rsbeq	r6, fp, r1, ror #6
     e24:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e28:	625f3268 	subsvs	r3, pc, #104, 4	; 0x80000006
     e2c:	6b63616c 	blvs	18d93e4 <startup-0x1e726c1c>
     e30:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     e34:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     e38:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     e3c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     e40:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     e44:	00737469 	rsbseq	r7, r3, r9, ror #8
     e48:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e4c:	72473368 	subvc	r3, r7, #104, 6	; 0xa0000001
     e50:	77007961 	strvc	r7, [r0, -r1, ror #18]
     e54:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e58:	61724732 	cmnvs	r2, r2, lsr r7
     e5c:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     e60:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     e64:	47686374 			; <UNDEFINED> instruction: 0x47686374
     e68:	00796172 	rsbseq	r6, r9, r2, ror r1
     e6c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     e70:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     e74:	72473268 	subvc	r3, r7, #104, 4	; 0x80000006
     e78:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     e7c:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     e80:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e84:	616c4233 	cmnvs	ip, r3, lsr r2
     e88:	77006b63 	strvc	r6, [r0, -r3, ror #22]
     e8c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e90:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     e94:	5f746867 	svcpl	0x00746867
     e98:	73746962 	cmnvc	r4, #1605632	; 0x188000
     e9c:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     ea0:	5f326863 	svcpl	0x00326863
     ea4:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     ea8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     eac:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     eb0:	34686374 	strbtcc	r6, [r8], #-884	; 0xfffffc8c
     eb4:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     eb8:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
     ebc:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     ec0:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     ec4:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     ec8:	31686374 	smccc	34356	; 0x8634
     ecc:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     ed0:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
     ed4:	31686374 	smccc	34356	; 0x8634
     ed8:	63616c42 	cmnvs	r1, #16896	; 0x4200
     edc:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     ee0:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     ee4:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     ee8:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     eec:	49686374 	stmdbmi	r8!, {r2, r4, r5, r6, r8, r9, sp, lr}^
     ef0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     ef4:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     ef8:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     efc:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     f00:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     f04:	2f3a4300 	svccs	0x003a4300
     f08:	2f706f6d 	svccs	0x00706f6d
     f0c:	6f4d2f63 	svcvs	0x004d2f63
     f10:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     f14:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     f18:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     f1c:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     f20:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     f24:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f28:	772f432f 	strvc	r4, [pc, -pc, lsr #6]!
     f2c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f30:	7700632e 	strvc	r6, [r0, -lr, lsr #6]
     f34:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f38:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     f3c:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     f40:	00737469 	rsbseq	r7, r3, r9, ror #8
     f44:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     f48:	625f3368 	subsvs	r3, pc, #104, 6	; 0xa0000001
     f4c:	6b63616c 	blvs	18d9504 <startup-0x1e726afc>
     f50:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     f54:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     f58:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     f5c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     f60:	61700065 	cmnvs	r0, r5, rrx
     f64:	67006567 	strvs	r6, [r0, -r7, ror #10]
     f68:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     f6c:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
     f70:	00646165 	rsbeq	r6, r4, r5, ror #2
     f74:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     f78:	70007265 	andvc	r7, r0, r5, ror #4
     f7c:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
     f80:	72640032 	rsbvc	r0, r4, #50	; 0x32
     f84:	675f7761 	ldrbvs	r7, [pc, -r1, ror #14]
     f88:	5f656d61 	svcpl	0x00656d61
     f8c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     f90:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
     f94:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     f98:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
     f9c:	67006f72 	smlsdxvs	r0, r2, pc, r6	; <UNPREDICTABLE>
     fa0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     fa4:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
     fa8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     fac:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; e38 <startup-0x1ffff1c8>
     fb0:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
     fb4:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
     fb8:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
     fbc:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
     fc0:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     fc4:	69700072 	ldmdbvs	r0!, {r1, r4, r5, r6}^
     fc8:	006c6578 	rsbeq	r6, ip, r8, ror r5
     fcc:	6a624f67 	bvs	1894d70 <startup-0x1e76b290>
     fd0:	61726700 	cmnvs	r2, r0, lsl #14
     fd4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
     fd8:	6172645f 	cmnvs	r2, pc, asr r4
     fdc:	63735f77 	cmnvs	r3, #476	; 0x1dc
     fe0:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
     fe4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
     fe8:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; f2e <startup-0x1ffff0d2>	; <UNPREDICTABLE>
     fec:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
     ff0:	6f687300 	svcvs	0x00687300
     ff4:	72665f77 	rsbvc	r5, r6, #476	; 0x1dc
     ff8:	00656d61 	rsbeq	r6, r5, r1, ror #26
     ffc:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
    1000:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
    1004:	00657469 	rsbeq	r7, r5, r9, ror #8
    1008:	616c6564 	cmnvs	ip, r4, ror #10
    100c:	30355f79 	eorscc	r5, r5, r9, ror pc
    1010:	00736e30 	rsbseq	r6, r3, r0, lsr lr
    1014:	70617267 	rsbvc	r7, r1, r7, ror #4
    1018:	5f636968 	svcpl	0x00636968
    101c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1020:	72670065 	rsbvc	r0, r7, #101	; 0x65
    1024:	63537961 	cmpvs	r3, #1589248	; 0x184000
    1028:	54656c61 	strbtpl	r6, [r5], #-3169	; 0xfffff39f
    102c:	00747365 	rsbseq	r7, r4, r5, ror #6
    1030:	70617267 	rsbvc	r7, r1, r7, ror #4
    1034:	5f636968 	svcpl	0x00636968
    1038:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    103c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1040:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
    1044:	43007261 	movwmi	r7, #609	; 0x261
    1048:	6f6d2f3a 	svcvs	0x006d2f3a
    104c:	2f632f70 	svccs	0x00632f70
    1050:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1054:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1058:	6f697461 	svcvs	0x00697461
    105c:	2f72656e 	svccs	0x0072656e
    1060:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1064:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1068:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    106c:	6172672f 	cmnvs	r2, pc, lsr #14
    1070:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1074:	00632e73 	rsbeq	r2, r3, r3, ror lr
    1078:	70617267 	rsbvc	r7, r1, r7, ror #4
    107c:	5f636968 	svcpl	0x00636968
    1080:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1084:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    1088:	6f630061 	svcvs	0x00630061
    108c:	00726f6c 	rsbseq	r6, r2, ip, ror #30
    1090:	5f746573 	svcpl	0x00746573
    1094:	645f7075 	ldrbvs	r7, [pc], #-117	; 109c <startup-0x1fffef64>
    1098:	5f776172 	svcpl	0x00776172
    109c:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    10a0:	00737265 	rsbseq	r7, r3, r5, ror #4
    10a4:	70617267 	rsbvc	r7, r1, r7, ror #4
    10a8:	5f636968 	svcpl	0x00636968
    10ac:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    10b0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    10b4:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    10b8:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    10bc:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
    10c0:	736e3035 	cmnvc	lr, #53	; 0x35
    10c4:	6c696600 	stclvs	6, cr6, [r9], #-0
    10c8:	6365526c 	cmnvs	r5, #108, 4	; 0xc0000006
    10cc:	676e6174 			; <UNDEFINED> instruction: 0x676e6174
    10d0:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
    10d4:	006b7361 	rsbeq	r7, fp, r1, ror #6
    10d8:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
    10dc:	656c5f65 	strbvs	r5, [ip, #-3941]!	; 0xfffff09b
    10e0:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    10e4:	61726700 	cmnvs	r2, r0, lsl #14
    10e8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    10ec:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    10f0:	645f6574 	ldrbvs	r6, [pc], #-1396	; 10f8 <startup-0x1fffef08>
    10f4:	00617461 	rsbeq	r7, r1, r1, ror #8
    10f8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    10fc:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
    1100:	695f6874 	ldmdbvs	pc, {r2, r4, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
    1104:	79625f6e 	stmdbvc	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1108:	00736574 	rsbseq	r6, r3, r4, ror r5
    110c:	61656c63 	cmnvs	r5, r3, ror #24
    1110:	6c615f72 	stclvs	15, cr5, [r1], #-456	; 0xfffffe38
    1114:	61625f6c 	cmnvs	r2, ip, ror #30
    1118:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
    111c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1120:	6c630073 	stclvs	0, cr0, [r3], #-460	; 0xfffffe34
    1124:	52726165 	rsbspl	r6, r2, #1073741849	; 0x40000019
    1128:	61746365 	cmnvs	r4, r5, ror #6
    112c:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0xfffff892
    1130:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1134:	73007865 	movwvc	r7, #2149	; 0x865
    1138:	63656c65 	cmnvs	r5, #25856	; 0x6500
    113c:	6f635f74 	svcvs	0x00635f74
    1140:	6f72746e 	svcvs	0x0072746e
    1144:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
    1148:	61726700 	cmnvs	r2, r0, lsl #14
    114c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1150:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1154:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
    1158:	00796461 	rsbseq	r6, r9, r1, ror #8
    115c:	61656c63 	cmnvs	r5, r3, ror #24
    1160:	68745f72 	ldmdavs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1164:	61427369 	cmpvs	r2, r9, ror #6
    1168:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
    116c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1170:	61726700 	cmnvs	r2, r0, lsl #14
    1174:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1178:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    117c:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
    1180:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1184:	70617267 	rsbvc	r7, r1, r7, ror #4
    1188:	5f636968 	svcpl	0x00636968
    118c:	61656c63 	cmnvs	r5, r3, ror #24
    1190:	63735f72 	cmnvs	r3, #456	; 0x1c8
    1194:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    1198:	616f6c00 	cmnvs	pc, r0, lsl #24
    119c:	6d695f64 	stclvs	15, cr5, [r9, #-400]!	; 0xfffffe70
    11a0:	00656761 	rsbeq	r6, r5, r1, ror #14
    11a4:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    11a8:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    11ac:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    11b0:	6f62616c 	svcvs	0x0062616c
    11b4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    11b8:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    11bc:	5049442f 	subpl	r4, r9, pc, lsr #8
    11c0:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    11c4:	2f686374 	svccs	0x00686374
    11c8:	6d692f43 	stclvs	15, cr2, [r9, #-268]!	; 0xfffffef4
    11cc:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
    11d0:	6f6c0063 	svcvs	0x006c0063
    11d4:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
    11d8:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    11dc:	3a430065 	bcc	10c1378 <startup-0x1ef3ec88>
    11e0:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    11e4:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 1130 <startup-0x1fffeed0>
    11e8:	616c706f 	cmnvs	ip, pc, rrx
    11ec:	61726f62 	cmnvs	r2, r2, ror #30
    11f0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    11f4:	442f7265 	strtmi	r7, [pc], #-613	; 11fc <startup-0x1fffee04>
    11f8:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    11fc:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1200:	2f432f68 	svccs	0x00432f68
    1204:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    1208:	632e6574 			; <UNDEFINED> instruction: 0x632e6574
    120c:	646f4d00 	strbtvs	r4, [pc], #-3328	; 1214 <startup-0x1fffedec>
    1210:	73007265 	movwvc	r7, #613	; 0x265
    1214:	755f7465 	ldrbvc	r7, [pc, #-1125]	; db7 <startup-0x1ffff249>
    1218:	49445f70 	stmdbmi	r4, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    121c:	646f004c 	strbtvs	r0, [pc], #-76	; 1224 <startup-0x1fffeddc>
    1220:	67694872 			; <UNDEFINED> instruction: 0x67694872
    1224:	546f0068 	strbtpl	r0, [pc], #-104	; 122c <startup-0x1fffedd4>
    1228:	72657079 	rsbvc	r7, r5, #121	; 0x79
    122c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1230:	7550004f 	ldrbvc	r0, [r0, #-79]	; 0xffffffb1
    1234:	00726450 	rsbseq	r6, r2, r0, asr r4
    1238:	52726469 	rsbspl	r6, r2, #1761607680	; 0x69000000
    123c:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1240:	00646576 	rsbeq	r6, r4, r6, ror r5
    1244:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1248:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    124c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1250:	6f62616c 	svcvs	0x0062616c
    1254:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1258:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    125c:	5049442f 	subpl	r4, r9, pc, lsr #8
    1260:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1264:	2f686374 	svccs	0x00686374
    1268:	70672f43 	rsbvc	r2, r7, r3, asr #30
    126c:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    1270:	52746f00 	rsbspl	r6, r4, #0, 30
    1274:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1278:	00646576 	rsbeq	r6, r4, r6, ror r5
    127c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1280:	4c49445f 	cfstrdmi	mvd4, [r9], {95}	; 0x5f
    1284:	6e69735f 	mcrvs	3, 3, r7, cr9, cr15, {2}
    1288:	00656c67 	rsbeq	r6, r5, r7, ror #24
    128c:	4c72646f 	cfldrdmi	mvd6, [r2], #-444	; 0xfffffe44
    1290:	6f00776f 	svcvs	0x0000776f
    1294:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
    1298:	69007264 	stmdbvs	r0, {r2, r5, r6, r9, ip, sp, lr}
    129c:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
    12a0:	69006867 	stmdbvs	r0, {r0, r1, r2, r5, r6, fp, sp, lr}
    12a4:	6f4c7264 	svcvs	0x004c7264
    12a8:	646f0077 	strbtvs	r0, [pc], #-119	; 12b0 <startup-0x1fffed50>
    12ac:	73655272 	cmnvc	r5, #536870919	; 0x20000007
    12b0:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    12b4:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
    12b8:	445f6461 	ldrbmi	r6, [pc], #-1121	; 12c0 <startup-0x1fffed40>
    12bc:	69004c49 	stmdbvs	r0, {r0, r3, r6, sl, fp, lr}
    12c0:	5f74696e 	svcpl	0x0074696e
    12c4:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
    12c8:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
    12cc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    12d0:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    12d4:	61003274 	tstvs	r0, r4, ror r2
    12d8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    12dc:	6165725f 	cmnvs	r5, pc, asr r2
    12e0:	61645f64 	cmnvs	r4, r4, ror #30
    12e4:	73006174 	movwvc	r6, #372	; 0x174
    12e8:	755f7465 	ldrbvc	r7, [pc, #-1125]	; e8b <startup-0x1ffff175>
    12ec:	73615f70 	cmnvc	r1, #112, 30	; 0x1c0
    12f0:	00696963 	rsbeq	r6, r9, r3, ror #18
    12f4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    12f8:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
    12fc:	63007469 	movwvs	r7, #1129	; 0x469
    1300:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
    1304:	6c63006e 	stclvs	0, cr0, [r3], #-440	; 0xfffffe48
    1308:	5f726165 	svcpl	0x00726165
    130c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1310:	73610069 	cmnvc	r1, #105	; 0x69
    1314:	5f696963 	svcpl	0x00696963
    1318:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    131c:	61705f65 	cmnvs	r0, r5, ror #30
    1320:	61007472 	tstvs	r0, r2, ror r4
    1324:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1328:	6165725f 	cmnvs	r5, pc, asr r2
    132c:	6f635f64 	svcvs	0x00635f64
    1330:	6f72746e 	svcvs	0x0072746e
    1334:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
    1338:	63736100 	cmnvs	r3, #0, 2
    133c:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
    1340:	5f6c7274 	svcpl	0x006c7274
    1344:	5f746962 	svcpl	0x00746962
    1348:	00746573 	rsbseq	r6, r4, r3, ror r5
    134c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1350:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    1354:	5f657469 	svcpl	0x00657469
    1358:	00646d63 	rsbeq	r6, r4, r3, ror #26
    135c:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
    1360:	65740031 	ldrbvs	r0, [r4, #-49]!	; 0xffffffcf
    1364:	00327473 	eorseq	r7, r2, r3, ror r4
    1368:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
    136c:	00737365 	rsbseq	r7, r3, r5, ror #6
    1370:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1374:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    1378:	5f657469 	svcpl	0x00657469
    137c:	61746164 	cmnvs	r4, r4, ror #2
    1380:	63736100 	cmnvs	r3, #0, 2
    1384:	745f6969 	ldrbvc	r6, [pc], #-2409	; 138c <startup-0x1fffec74>
    1388:	00747365 	rsbseq	r7, r4, r5, ror #6
    138c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1390:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
    1394:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
    1398:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    139c:	73610073 	cmnvc	r1, #115	; 0x73
    13a0:	5f696963 	svcpl	0x00696963
    13a4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    13a8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    13ac:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
    13b0:	61007261 	tstvs	r0, r1, ror #4
    13b4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    13b8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    13bc:	61006574 	tstvs	r0, r4, ror r5
    13c0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    13c4:	546f675f 	strbtpl	r6, [pc], #-1887	; 13cc <startup-0x1fffec34>
    13c8:	0059586f 	subseq	r5, r9, pc, ror #16
    13cc:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    13d0:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    13d4:	5f657469 	svcpl	0x00657469
    13d8:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
    13dc:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
    13e0:	61007265 	tstvs	r0, r5, ror #4
    13e4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    13e8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    13ec:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
    13f0:	00726168 	rsbseq	r6, r2, r8, ror #2
    13f4:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    13f8:	43003174 	movwmi	r3, #372	; 0x174
    13fc:	6f6d2f3a 	svcvs	0x006d2f3a
    1400:	2f632f70 	svccs	0x00632f70
    1404:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1408:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    140c:	6f697461 	svcvs	0x00697461
    1410:	2f72656e 	svccs	0x0072656e
    1414:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1418:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    141c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1420:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
    1424:	645f6969 	ldrbvs	r6, [pc], #-2409	; 142c <startup-0x1fffebd4>
    1428:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
    142c:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
    1430:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    1434:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
    1438:	745f776f 	ldrbvc	r7, [pc], #-1903	; 1440 <startup-0x1fffebc0>
    143c:	00747865 	rsbseq	r7, r4, r5, ror #16
    1440:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    1444:	6f5f6874 	svcvs	0x005f6874
    1448:	6f725f66 	svcvs	0x00725f66
    144c:	43003177 	movwmi	r3, #375	; 0x177
    1450:	6f6d2f3a 	svcvs	0x006d2f3a
    1454:	2f632f70 	svccs	0x00632f70
    1458:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    145c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1460:	6f697461 	svcvs	0x00697461
    1464:	2f72656e 	svccs	0x0072656e
    1468:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    146c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1470:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1474:	6f6c732f 	svcvs	0x006c732f
    1478:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
    147c:	632e7478 			; <UNDEFINED> instruction: 0x632e7478
    1480:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1484:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1488:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    148c:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    1490:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1494:	616c4273 	smcvs	50211	; 0xc423
    1498:	69006b63 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    149c:	6f6f646e 	svcvs	0x006f646e
    14a0:	6d497372 	stclvs	3, cr7, [r9, #-456]	; 0xfffffe38
    14a4:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    14a8:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    14ac:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    14b0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    14b4:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
    14b8:	00737469 	rsbseq	r7, r3, r9, ror #8
    14bc:	706d6574 	rsbvc	r6, sp, r4, ror r5
    14c0:	6f646e49 	svcvs	0x00646e49
    14c4:	4773726f 	ldrbmi	r7, [r3, -pc, ror #4]!
    14c8:	00796172 	rsbseq	r6, r9, r2, ror r1
    14cc:	6f646e69 	svcvs	0x00646e69
    14d0:	5f73726f 	svcpl	0x0073726f
    14d4:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    14d8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    14dc:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    14e0:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    14e4:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    14e8:	67694c73 			; <UNDEFINED> instruction: 0x67694c73
    14ec:	69007468 	stmdbvs	r0, {r3, r5, r6, sl, ip, sp, lr}
    14f0:	6f6f646e 	svcvs	0x006f646e
    14f4:	694c7372 	stmdbvs	ip, {r1, r4, r5, r6, r8, r9, ip, sp, lr}^
    14f8:	00746867 	rsbseq	r6, r4, r7, ror #16
    14fc:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1500:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1504:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1508:	6f62616c 	svcvs	0x0062616c
    150c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1510:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1514:	5049442f 	subpl	r4, r9, pc, lsr #8
    1518:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    151c:	2f686374 	svccs	0x00686374
    1520:	6e692f43 	cdpvs	15, 6, cr2, cr9, cr3, {2}
    1524:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1528:	00632e73 	rsbeq	r2, r3, r3, ror lr
    152c:	6f646e69 	svcvs	0x00646e69
    1530:	5f73726f 	svcpl	0x0073726f
    1534:	63616c62 	cmnvs	r1, #25088	; 0x6200
    1538:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    153c:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    1540:	49706d65 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    1544:	6f6f646e 	svcvs	0x006f646e
    1548:	6c427372 	mcrrvs	3, 7, r7, r2, cr2
    154c:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1550:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1554:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
    1558:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    155c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1560:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1564:	006a624f 	rsbeq	r6, sl, pc, asr #4
    1568:	6f646e69 	svcvs	0x00646e69
    156c:	4773726f 	ldrbmi	r7, [r3, -pc, ror #4]!
    1570:	00796172 	rsbseq	r6, r9, r2, ror r1
    1574:	6f646e69 	svcvs	0x00646e69
    1578:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    157c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1580:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
    1584:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1588:	625f3273 	subsvs	r3, pc, #805306375	; 0x30000007
    158c:	6b63616c 	blvs	18d9b44 <startup-0x1e7264bc>
    1590:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1594:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1598:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    159c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    15a0:	694c3273 	stmdbvs	ip, {r0, r1, r4, r5, r6, r9, ip, sp}^
    15a4:	00746867 	rsbseq	r6, r4, r7, ror #16
    15a8:	6f646e69 	svcvs	0x00646e69
    15ac:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    15b0:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    15b4:	2f3a4300 	svccs	0x003a4300
    15b8:	2f706f6d 	svccs	0x00706f6d
    15bc:	6f4d2f63 	svcvs	0x004d2f63
    15c0:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    15c4:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    15c8:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    15cc:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    15d0:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    15d4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    15d8:	692f432f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r8, r9, lr}	; <UNPREDICTABLE>
    15dc:	6f6f646e 	svcvs	0x006f646e
    15e0:	2e327372 	mrccs	3, 1, r7, cr2, cr2, {3}
    15e4:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
    15e8:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    15ec:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    15f0:	6c423273 	sfmvs	f3, 2, [r2], {115}	; 0x73
    15f4:	006b6361 	rsbeq	r6, fp, r1, ror #6
    15f8:	6f646e69 	svcvs	0x00646e69
    15fc:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1600:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1604:	6e69006b 	cdpvs	0, 6, cr0, cr9, cr11, {3}
    1608:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    160c:	6d493273 	sfmvs	f3, 2, [r9, #-460]	; 0xfffffe34
    1610:	00656761 	rsbeq	r6, r5, r1, ror #14
    1614:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1618:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
    161c:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1620:	6e690032 	mcrvs	0, 3, r0, cr9, cr2, {1}
    1624:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1628:	6c5f3273 	lfmvs	f3, 2, [pc], {115}	; 0x73
    162c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1630:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1634:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    1638:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    163c:	6d493273 	sfmvs	f3, 2, [r9, #-460]	; 0xfffffe34
    1640:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    1644:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1648:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    164c:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
    1650:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
    1654:	00737469 	rsbseq	r7, r3, r9, ror #8
    1658:	6f646e69 	svcvs	0x00646e69
    165c:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1660:	006a624f 	rsbeq	r6, sl, pc, asr #4
    1664:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1668:	6f646e49 	svcvs	0x00646e49
    166c:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1670:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000024 	andeq	r0, r0, r4, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000034 	andcs	r0, r0, r4, lsr r0
  48:	000001c8 	andeq	r0, r0, r8, asr #3
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	300e4101 	andcc	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	200001fc 	strdcs	r0, [r0], -ip
  68:	00000d78 	andeq	r0, r0, r8, ror sp
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	06d80e42 	ldrbeq	r0, [r8], r2, asr #28
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000000c 	andeq	r0, r0, ip
  84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  88:	7c020001 	stcvc	0, cr0, [r2], {1}
  8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000080 	andeq	r0, r0, r0, lsl #1
  98:	20000f74 	andcs	r0, r0, r4, ror pc
  9c:	00000010 	andeq	r0, r0, r0, lsl r0
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000080 	andeq	r0, r0, r0, lsl #1
  b8:	20000f84 	andcs	r0, r0, r4, lsl #31
  bc:	00000046 	andeq	r0, r0, r6, asr #32
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000000c 	andeq	r0, r0, ip
  d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d8:	7c020001 	stcvc	0, cr0, [r2], {1}
  dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  e8:	20000fcc 	andcs	r0, r0, ip, asr #31
  ec:	00000184 	andeq	r0, r0, r4, lsl #3
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f8:	380e4101 	stmdacc	lr, {r0, r8, lr}
  fc:	00070d41 	andeq	r0, r7, r1, asr #26
 100:	00000020 	andeq	r0, r0, r0, lsr #32
 104:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 108:	20001150 	andcs	r1, r0, r0, asr r1
 10c:	00000124 	andeq	r0, r0, r4, lsr #2
 110:	400c0e41 	andmi	r0, ip, r1, asr #28
 114:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 118:	018e4002 	orreq	r4, lr, r2
 11c:	41180e41 	tstmi	r8, r1, asr #28
 120:	0000070d 	andeq	r0, r0, sp, lsl #14
 124:	0000000c 	andeq	r0, r0, ip
 128:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 12c:	7c020001 	stcvc	0, cr0, [r2], {1}
 130:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000124 	andeq	r0, r0, r4, lsr #2
 13c:	20001274 	andcs	r1, r0, r4, ror r2
 140:	00000198 	muleq	r0, r8, r1
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000000c 	andeq	r0, r0, ip
 158:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 15c:	7c020001 	stcvc	0, cr0, [r2], {1}
 160:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 164:	0000001c 	andeq	r0, r0, ip, lsl r0
 168:	00000154 	andeq	r0, r0, r4, asr r1
 16c:	2000140c 	andcs	r1, r0, ip, lsl #8
 170:	0000020c 	andeq	r0, r0, ip, lsl #4
 174:	40080e41 	andmi	r0, r8, r1, asr #28
 178:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 17c:	480e4101 	stmdami	lr, {r0, r8, lr}
 180:	00070d41 	andeq	r0, r7, r1, asr #26
 184:	00000020 	andeq	r0, r0, r0, lsr #32
 188:	00000154 	andeq	r0, r0, r4, asr r1
 18c:	20001618 	andcs	r1, r0, r8, lsl r6
 190:	00000158 	andeq	r0, r0, r8, asr r1
 194:	400c0e41 	andmi	r0, ip, r1, asr #28
 198:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 19c:	018e4002 	orreq	r4, lr, r2
 1a0:	41180e41 	tstmi	r8, r1, asr #28
 1a4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1a8:	0000000c 	andeq	r0, r0, ip
 1ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1b0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	000001a8 	andeq	r0, r0, r8, lsr #3
 1c0:	20001770 	andcs	r1, r0, r0, ror r7
 1c4:	00000140 	andeq	r0, r0, r0, asr #2
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	300e4101 	andcc	r4, lr, r1, lsl #2
 1d4:	00070d41 	andeq	r0, r7, r1, asr #26
 1d8:	00000020 	andeq	r0, r0, r0, lsr #32
 1dc:	000001a8 	andeq	r0, r0, r8, lsr #3
 1e0:	200018b0 			; <UNDEFINED> instruction: 0x200018b0
 1e4:	000000f8 	strdeq	r0, [r0], -r8
 1e8:	400c0e41 	andmi	r0, ip, r1, asr #28
 1ec:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1f0:	018e4002 	orreq	r4, lr, r2
 1f4:	41180e41 	tstmi	r8, r1, asr #28
 1f8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1fc:	0000000c 	andeq	r0, r0, ip
 200:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 204:	7c020001 	stcvc	0, cr0, [r2], {1}
 208:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 20c:	00000018 	andeq	r0, r0, r8, lsl r0
 210:	000001fc 	strdeq	r0, [r0], -ip
 214:	200019a8 	andcs	r1, r0, r8, lsr #19
 218:	00000044 	andeq	r0, r0, r4, asr #32
 21c:	40080e41 	andmi	r0, r8, r1, asr #28
 220:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 224:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 228:	00000018 	andeq	r0, r0, r8, lsl r0
 22c:	000001fc 	strdeq	r0, [r0], -ip
 230:	200019ec 	andcs	r1, r0, ip, ror #19
 234:	00000044 	andeq	r0, r0, r4, asr #32
 238:	40080e41 	andmi	r0, r8, r1, asr #28
 23c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 240:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 244:	0000001c 	andeq	r0, r0, ip, lsl r0
 248:	000001fc 	strdeq	r0, [r0], -ip
 24c:	20001a30 	andcs	r1, r0, r0, lsr sl
 250:	0000002c 	andeq	r0, r0, ip, lsr #32
 254:	40080e41 	andmi	r0, r8, r1, asr #28
 258:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 25c:	100e4101 	andne	r4, lr, r1, lsl #2
 260:	00070d41 	andeq	r0, r7, r1, asr #26
 264:	0000001c 	andeq	r0, r0, ip, lsl r0
 268:	000001fc 	strdeq	r0, [r0], -ip
 26c:	20001a5c 	andcs	r1, r0, ip, asr sl
 270:	00000026 	andeq	r0, r0, r6, lsr #32
 274:	40080e41 	andmi	r0, r8, r1, asr #28
 278:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 27c:	100e4101 	andne	r4, lr, r1, lsl #2
 280:	00070d41 	andeq	r0, r7, r1, asr #26
 284:	0000001c 	andeq	r0, r0, ip, lsl r0
 288:	000001fc 	strdeq	r0, [r0], -ip
 28c:	20001a82 	andcs	r1, r0, r2, lsl #21
 290:	00000032 	andeq	r0, r0, r2, lsr r0
 294:	40080e41 	andmi	r0, r8, r1, asr #28
 298:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 29c:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a0:	00070d41 	andeq	r0, r7, r1, asr #26
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
 2a8:	000001fc 	strdeq	r0, [r0], -ip
 2ac:	20001ab4 			; <UNDEFINED> instruction: 0x20001ab4
 2b0:	00000018 	andeq	r0, r0, r8, lsl r0
 2b4:	40080e41 	andmi	r0, r8, r1, asr #28
 2b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2c0:	00000018 	andeq	r0, r0, r8, lsl r0
 2c4:	000001fc 	strdeq	r0, [r0], -ip
 2c8:	20001acc 	andcs	r1, r0, ip, asr #21
 2cc:	00000030 	andeq	r0, r0, r0, lsr r0
 2d0:	40080e41 	andmi	r0, r8, r1, asr #28
 2d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e0:	000001fc 	strdeq	r0, [r0], -ip
 2e4:	20001afc 	strdcs	r1, [r0], -ip
 2e8:	00000050 	andeq	r0, r0, r0, asr r0
 2ec:	40080e41 	andmi	r0, r8, r1, asr #28
 2f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2f8:	00070d41 	andeq	r0, r7, r1, asr #26
 2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 300:	000001fc 	strdeq	r0, [r0], -ip
 304:	20001b4c 	andcs	r1, r0, ip, asr #22
 308:	00000058 	andeq	r0, r0, r8, asr r0
 30c:	40080e41 	andmi	r0, r8, r1, asr #28
 310:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 314:	180e4101 	stmdane	lr, {r0, r8, lr}
 318:	00070d41 	andeq	r0, r7, r1, asr #26
 31c:	0000001c 	andeq	r0, r0, ip, lsl r0
 320:	000001fc 	strdeq	r0, [r0], -ip
 324:	20001ba4 	andcs	r1, r0, r4, lsr #23
 328:	00000066 	andeq	r0, r0, r6, rrx
 32c:	40080e41 	andmi	r0, r8, r1, asr #28
 330:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 334:	100e4101 	andne	r4, lr, r1, lsl #2
 338:	00070d41 	andeq	r0, r7, r1, asr #26
 33c:	0000001c 	andeq	r0, r0, ip, lsl r0
 340:	000001fc 	strdeq	r0, [r0], -ip
 344:	20001c0a 	andcs	r1, r0, sl, lsl #24
 348:	0000006e 	andeq	r0, r0, lr, rrx
 34c:	40080e41 	andmi	r0, r8, r1, asr #28
 350:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 354:	100e4101 	andne	r4, lr, r1, lsl #2
 358:	00070d41 	andeq	r0, r7, r1, asr #26
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	000001fc 	strdeq	r0, [r0], -ip
 364:	20001c78 	andcs	r1, r0, r8, ror ip
 368:	00000094 	muleq	r0, r4, r0
 36c:	40080e41 	andmi	r0, r8, r1, asr #28
 370:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 374:	180e4101 	stmdane	lr, {r0, r8, lr}
 378:	00070d41 	andeq	r0, r7, r1, asr #26
 37c:	0000001c 	andeq	r0, r0, ip, lsl r0
 380:	000001fc 	strdeq	r0, [r0], -ip
 384:	20001d0c 	andcs	r1, r0, ip, lsl #26
 388:	0000002a 	andeq	r0, r0, sl, lsr #32
 38c:	40080e41 	andmi	r0, r8, r1, asr #28
 390:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 394:	100e4101 	andne	r4, lr, r1, lsl #2
 398:	00070d41 	andeq	r0, r7, r1, asr #26
 39c:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a0:	000001fc 	strdeq	r0, [r0], -ip
 3a4:	20001d36 	andcs	r1, r0, r6, lsr sp
 3a8:	0000007e 	andeq	r0, r0, lr, ror r0
 3ac:	40080e41 	andmi	r0, r8, r1, asr #28
 3b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b4:	100e4101 	andne	r4, lr, r1, lsl #2
 3b8:	00070d41 	andeq	r0, r7, r1, asr #26
 3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c0:	000001fc 	strdeq	r0, [r0], -ip
 3c4:	20001db4 			; <UNDEFINED> instruction: 0x20001db4
 3c8:	00000046 	andeq	r0, r0, r6, asr #32
 3cc:	40080e41 	andmi	r0, r8, r1, asr #28
 3d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d4:	100e4101 	andne	r4, lr, r1, lsl #2
 3d8:	00070d41 	andeq	r0, r7, r1, asr #26
 3dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e0:	000001fc 	strdeq	r0, [r0], -ip
 3e4:	20001dfa 	strdcs	r1, [r0], -sl
 3e8:	00000046 	andeq	r0, r0, r6, asr #32
 3ec:	40080e41 	andmi	r0, r8, r1, asr #28
 3f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f4:	100e4101 	andne	r4, lr, r1, lsl #2
 3f8:	00070d41 	andeq	r0, r7, r1, asr #26
 3fc:	00000018 	andeq	r0, r0, r8, lsl r0
 400:	000001fc 	strdeq	r0, [r0], -ip
 404:	20001e40 	andcs	r1, r0, r0, asr #28
 408:	0000006e 	andeq	r0, r0, lr, rrx
 40c:	40080e41 	andmi	r0, r8, r1, asr #28
 410:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 414:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 418:	0000001c 	andeq	r0, r0, ip, lsl r0
 41c:	000001fc 	strdeq	r0, [r0], -ip
 420:	20001eae 	andcs	r1, r0, lr, lsr #29
 424:	00000066 	andeq	r0, r0, r6, rrx
 428:	40080e41 	andmi	r0, r8, r1, asr #28
 42c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 430:	100e4101 	andne	r4, lr, r1, lsl #2
 434:	00070d41 	andeq	r0, r7, r1, asr #26
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	000001fc 	strdeq	r0, [r0], -ip
 440:	20001f14 	andcs	r1, r0, r4, lsl pc
 444:	00000180 	andeq	r0, r0, r0, lsl #3
 448:	40080e41 	andmi	r0, r8, r1, asr #28
 44c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 450:	200e4101 	andcs	r4, lr, r1, lsl #2
 454:	00070d41 	andeq	r0, r7, r1, asr #26
 458:	0000001c 	andeq	r0, r0, ip, lsl r0
 45c:	000001fc 	strdeq	r0, [r0], -ip
 460:	20002094 	mulcs	r0, r4, r0
 464:	000001a0 	andeq	r0, r0, r0, lsr #3
 468:	40080e41 	andmi	r0, r8, r1, asr #28
 46c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 470:	280e4101 	stmdacs	lr, {r0, r8, lr}
 474:	00070d41 	andeq	r0, r7, r1, asr #26
 478:	0000001c 	andeq	r0, r0, ip, lsl r0
 47c:	000001fc 	strdeq	r0, [r0], -ip
 480:	20002234 	andcs	r2, r0, r4, lsr r2
 484:	000000d6 	ldrdeq	r0, [r0], -r6
 488:	40080e41 	andmi	r0, r8, r1, asr #28
 48c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 490:	200e4101 	andcs	r4, lr, r1, lsl #2
 494:	00070d41 	andeq	r0, r7, r1, asr #26
 498:	00000024 	andeq	r0, r0, r4, lsr #32
 49c:	000001fc 	strdeq	r0, [r0], -ip
 4a0:	2000230a 	andcs	r2, r0, sl, lsl #6
 4a4:	0000011a 	andeq	r0, r0, sl, lsl r1
 4a8:	40100e41 	andsmi	r0, r0, r1, asr #28
 4ac:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 4b0:	02874003 	addeq	r4, r7, #3
 4b4:	41018e40 	tstmi	r1, r0, asr #28
 4b8:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 4bc:	00000007 	andeq	r0, r0, r7
 4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c4:	000001fc 	strdeq	r0, [r0], -ip
 4c8:	20002424 	andcs	r2, r0, r4, lsr #8
 4cc:	00000052 	andeq	r0, r0, r2, asr r0
 4d0:	40080e41 	andmi	r0, r8, r1, asr #28
 4d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d8:	200e4101 	andcs	r4, lr, r1, lsl #2
 4dc:	00070d41 	andeq	r0, r7, r1, asr #26
 4e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e4:	000001fc 	strdeq	r0, [r0], -ip
 4e8:	20002476 	andcs	r2, r0, r6, ror r4
 4ec:	00000052 	andeq	r0, r0, r2, asr r0
 4f0:	40080e41 	andmi	r0, r8, r1, asr #28
 4f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f8:	200e4101 	andcs	r4, lr, r1, lsl #2
 4fc:	00070d41 	andeq	r0, r7, r1, asr #26
 500:	00000020 	andeq	r0, r0, r0, lsr #32
 504:	000001fc 	strdeq	r0, [r0], -ip
 508:	200024c8 	andcs	r2, r0, r8, asr #9
 50c:	00000130 	andeq	r0, r0, r0, lsr r1
 510:	400c0e41 	andmi	r0, ip, r1, asr #28
 514:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 518:	018e4002 	orreq	r4, lr, r2
 51c:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 520:	0000070d 	andeq	r0, r0, sp, lsl #14
 524:	0000001c 	andeq	r0, r0, ip, lsl r0
 528:	000001fc 	strdeq	r0, [r0], -ip
 52c:	200025f8 	strdcs	r2, [r0], -r8
 530:	00000108 	andeq	r0, r0, r8, lsl #2
 534:	40080e41 	andmi	r0, r8, r1, asr #28
 538:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 53c:	100e4101 	andne	r4, lr, r1, lsl #2
 540:	00070d41 	andeq	r0, r7, r1, asr #26
 544:	0000001c 	andeq	r0, r0, ip, lsl r0
 548:	000001fc 	strdeq	r0, [r0], -ip
 54c:	20002700 	andcs	r2, r0, r0, lsl #14
 550:	00000082 	andeq	r0, r0, r2, lsl #1
 554:	40080e41 	andmi	r0, r8, r1, asr #28
 558:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 55c:	200e4101 	andcs	r4, lr, r1, lsl #2
 560:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
 564:	0000001c 	andeq	r0, r0, ip, lsl r0
 568:	000001fc 	strdeq	r0, [r0], -ip
 56c:	20002782 	andcs	r2, r0, r2, lsl #15
 570:	0000006a 	andeq	r0, r0, sl, rrx
 574:	40080e41 	andmi	r0, r8, r1, asr #28
 578:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 57c:	100e4101 	andne	r4, lr, r1, lsl #2
 580:	00070d41 	andeq	r0, r7, r1, asr #26
 584:	0000000c 	andeq	r0, r0, ip
 588:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 58c:	7c020001 	stcvc	0, cr0, [r2], {1}
 590:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 594:	0000001c 	andeq	r0, r0, ip, lsl r0
 598:	00000584 	andeq	r0, r0, r4, lsl #11
 59c:	200027ec 	andcs	r2, r0, ip, ror #15
 5a0:	00000028 	andeq	r0, r0, r8, lsr #32
 5a4:	40080e41 	andmi	r0, r8, r1, asr #28
 5a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 5b0:	00070d41 	andeq	r0, r7, r1, asr #26
 5b4:	0000000c 	andeq	r0, r0, ip
 5b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5bc:	7c020001 	stcvc	0, cr0, [r2], {1}
 5c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c8:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
 5cc:	20002814 	andcs	r2, r0, r4, lsl r8
 5d0:	00000028 	andeq	r0, r0, r8, lsr #32
 5d4:	40080e41 	andmi	r0, r8, r1, asr #28
 5d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5dc:	180e4101 	stmdane	lr, {r0, r8, lr}
 5e0:	00070d41 	andeq	r0, r7, r1, asr #26
 5e4:	0000000c 	andeq	r0, r0, ip
 5e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5ec:	7c020001 	stcvc	0, cr0, [r2], {1}
 5f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5f4:	00000018 	andeq	r0, r0, r8, lsl r0
 5f8:	000005e4 	andeq	r0, r0, r4, ror #11
 5fc:	2000283c 	andcs	r2, r0, ip, lsr r8
 600:	00000018 	andeq	r0, r0, r8, lsl r0
 604:	40080e41 	andmi	r0, r8, r1, asr #28
 608:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 60c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 610:	00000018 	andeq	r0, r0, r8, lsl r0
 614:	000005e4 	andeq	r0, r0, r4, ror #11
 618:	20002854 	andcs	r2, r0, r4, asr r8
 61c:	00000020 	andeq	r0, r0, r0, lsr #32
 620:	40080e41 	andmi	r0, r8, r1, asr #28
 624:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 628:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 62c:	00000020 	andeq	r0, r0, r0, lsr #32
 630:	000005e4 	andeq	r0, r0, r4, ror #11
 634:	20002874 	andcs	r2, r0, r4, ror r8
 638:	00000034 	andeq	r0, r0, r4, lsr r0
 63c:	400c0e41 	andmi	r0, ip, r1, asr #28
 640:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 644:	018e4002 	orreq	r4, lr, r2
 648:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 64c:	0000070d 	andeq	r0, r0, sp, lsl #14
 650:	0000000c 	andeq	r0, r0, ip
 654:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 658:	7c020001 	stcvc	0, cr0, [r2], {1}
 65c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 660:	0000001c 	andeq	r0, r0, ip, lsl r0
 664:	00000650 	andeq	r0, r0, r0, asr r6
 668:	200028a8 	andcs	r2, r0, r8, lsr #17
 66c:	00000044 	andeq	r0, r0, r4, asr #32
 670:	40080e41 	andmi	r0, r8, r1, asr #28
 674:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 678:	180e4101 	stmdane	lr, {r0, r8, lr}
 67c:	00070d41 	andeq	r0, r7, r1, asr #26
 680:	0000001c 	andeq	r0, r0, ip, lsl r0
 684:	00000650 	andeq	r0, r0, r0, asr r6
 688:	200028ec 	andcs	r2, r0, ip, ror #17
 68c:	00000050 	andeq	r0, r0, r0, asr r0
 690:	40080e41 	andmi	r0, r8, r1, asr #28
 694:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 698:	180e4101 	stmdane	lr, {r0, r8, lr}
 69c:	00070d41 	andeq	r0, r7, r1, asr #26
 6a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6a4:	00000650 	andeq	r0, r0, r0, asr r6
 6a8:	2000293c 	andcs	r2, r0, ip, lsr r9
 6ac:	0000002a 	andeq	r0, r0, sl, lsr #32
 6b0:	40080e41 	andmi	r0, r8, r1, asr #28
 6b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6b8:	100e4101 	andne	r4, lr, r1, lsl #2
 6bc:	00070d41 	andeq	r0, r7, r1, asr #26
 6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c4:	00000650 	andeq	r0, r0, r0, asr r6
 6c8:	20002966 	andcs	r2, r0, r6, ror #18
 6cc:	0000002a 	andeq	r0, r0, sl, lsr #32
 6d0:	40080e41 	andmi	r0, r8, r1, asr #28
 6d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6d8:	100e4101 	andne	r4, lr, r1, lsl #2
 6dc:	00070d41 	andeq	r0, r7, r1, asr #26
 6e0:	00000020 	andeq	r0, r0, r0, lsr #32
 6e4:	00000650 	andeq	r0, r0, r0, asr r6
 6e8:	20002990 	mulcs	r0, r0, r9
 6ec:	00000054 	andeq	r0, r0, r4, asr r0
 6f0:	400c0e41 	andmi	r0, ip, r1, asr #28
 6f4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 6f8:	018e4002 	orreq	r4, lr, r2
 6fc:	41180e41 	tstmi	r8, r1, asr #28
 700:	0000070d 	andeq	r0, r0, sp, lsl #14
 704:	00000020 	andeq	r0, r0, r0, lsr #32
 708:	00000650 	andeq	r0, r0, r0, asr r6
 70c:	200029e4 	andcs	r2, r0, r4, ror #19
 710:	00000054 	andeq	r0, r0, r4, asr r0
 714:	400c0e41 	andmi	r0, ip, r1, asr #28
 718:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 71c:	018e4002 	orreq	r4, lr, r2
 720:	41180e41 	tstmi	r8, r1, asr #28
 724:	0000070d 	andeq	r0, r0, sp, lsl #14
 728:	0000001c 	andeq	r0, r0, ip, lsl r0
 72c:	00000650 	andeq	r0, r0, r0, asr r6
 730:	20002a38 	andcs	r2, r0, r8, lsr sl
 734:	00000030 	andeq	r0, r0, r0, lsr r0
 738:	40080e41 	andmi	r0, r8, r1, asr #28
 73c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 740:	100e4101 	andne	r4, lr, r1, lsl #2
 744:	00070d41 	andeq	r0, r7, r1, asr #26
 748:	0000001c 	andeq	r0, r0, ip, lsl r0
 74c:	00000650 	andeq	r0, r0, r0, asr r6
 750:	20002a68 	andcs	r2, r0, r8, ror #20
 754:	00000034 	andeq	r0, r0, r4, lsr r0
 758:	40080e41 	andmi	r0, r8, r1, asr #28
 75c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 760:	100e4101 	andne	r4, lr, r1, lsl #2
 764:	00070d41 	andeq	r0, r7, r1, asr #26
 768:	0000001c 	andeq	r0, r0, ip, lsl r0
 76c:	00000650 	andeq	r0, r0, r0, asr r6
 770:	20002a9c 	mulcs	r0, ip, sl
 774:	0000003c 	andeq	r0, r0, ip, lsr r0
 778:	40080e41 	andmi	r0, r8, r1, asr #28
 77c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 780:	100e4101 	andne	r4, lr, r1, lsl #2
 784:	00070d41 	andeq	r0, r7, r1, asr #26
 788:	0000001c 	andeq	r0, r0, ip, lsl r0
 78c:	00000650 	andeq	r0, r0, r0, asr r6
 790:	20002ad8 	ldrdcs	r2, [r0], -r8
 794:	00000050 	andeq	r0, r0, r0, asr r0
 798:	40080e41 	andmi	r0, r8, r1, asr #28
 79c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7a0:	180e4101 	stmdane	lr, {r0, r8, lr}
 7a4:	00070d41 	andeq	r0, r7, r1, asr #26
 7a8:	00000018 	andeq	r0, r0, r8, lsl r0
 7ac:	00000650 	andeq	r0, r0, r0, asr r6
 7b0:	20002b28 	andcs	r2, r0, r8, lsr #22
 7b4:	0000009a 	muleq	r0, sl, r0
 7b8:	40080e41 	andmi	r0, r8, r1, asr #28
 7bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7c0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 7c4:	00000018 	andeq	r0, r0, r8, lsl r0
 7c8:	00000650 	andeq	r0, r0, r0, asr r6
 7cc:	20002bc2 	andcs	r2, r0, r2, asr #23
 7d0:	0000001a 	andeq	r0, r0, sl, lsl r0
 7d4:	40080e41 	andmi	r0, r8, r1, asr #28
 7d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7dc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 7e0:	00000018 	andeq	r0, r0, r8, lsl r0
 7e4:	00000650 	andeq	r0, r0, r0, asr r6
 7e8:	20002bdc 	ldrdcs	r2, [r0], -ip
 7ec:	00000012 	andeq	r0, r0, r2, lsl r0
 7f0:	40080e41 	andmi	r0, r8, r1, asr #28
 7f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7f8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 7fc:	00000020 	andeq	r0, r0, r0, lsr #32
 800:	00000650 	andeq	r0, r0, r0, asr r6
 804:	20002bee 	andcs	r2, r0, lr, ror #23
 808:	0000006a 	andeq	r0, r0, sl, rrx
 80c:	400c0e41 	andmi	r0, ip, r1, asr #28
 810:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 814:	018e4002 	orreq	r4, lr, r2
 818:	41300e41 	teqmi	r0, r1, asr #28
 81c:	0000070d 	andeq	r0, r0, sp, lsl #14
 820:	0000001c 	andeq	r0, r0, ip, lsl r0
 824:	00000650 	andeq	r0, r0, r0, asr r6
 828:	20002c58 	andcs	r2, r0, r8, asr ip
 82c:	0000005e 	andeq	r0, r0, lr, asr r0
 830:	40080e41 	andmi	r0, r8, r1, asr #28
 834:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 838:	100e4101 	andne	r4, lr, r1, lsl #2
 83c:	00070d41 	andeq	r0, r7, r1, asr #26
 840:	0000001c 	andeq	r0, r0, ip, lsl r0
 844:	00000650 	andeq	r0, r0, r0, asr r6
 848:	20002cb6 			; <UNDEFINED> instruction: 0x20002cb6
 84c:	0000008e 	andeq	r0, r0, lr, lsl #1
 850:	40080e41 	andmi	r0, r8, r1, asr #28
 854:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 858:	200e4101 	andcs	r4, lr, r1, lsl #2
 85c:	00070d41 	andeq	r0, r7, r1, asr #26
 860:	00000020 	andeq	r0, r0, r0, lsr #32
 864:	00000650 	andeq	r0, r0, r0, asr r6
 868:	20002d44 	andcs	r2, r0, r4, asr #26
 86c:	00000084 	andeq	r0, r0, r4, lsl #1
 870:	400c0e41 	andmi	r0, ip, r1, asr #28
 874:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 878:	018e4002 	orreq	r4, lr, r2
 87c:	41380e41 	teqmi	r8, r1, asr #28
 880:	0000070d 	andeq	r0, r0, sp, lsl #14
 884:	0000000c 	andeq	r0, r0, ip
 888:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 88c:	7c020001 	stcvc	0, cr0, [r2], {1}
 890:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 894:	0000001c 	andeq	r0, r0, ip, lsl r0
 898:	00000884 	andeq	r0, r0, r4, lsl #17
 89c:	20002dc8 	andcs	r2, r0, r8, asr #27
 8a0:	0000005a 	andeq	r0, r0, sl, asr r0
 8a4:	40080e41 	andmi	r0, r8, r1, asr #28
 8a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 8b0:	00070d41 	andeq	r0, r7, r1, asr #26
 8b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8b8:	00000884 	andeq	r0, r0, r4, lsl #17
 8bc:	20002e22 	andcs	r2, r0, r2, lsr #28
 8c0:	0000003a 	andeq	r0, r0, sl, lsr r0
 8c4:	40080e41 	andmi	r0, r8, r1, asr #28
 8c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8cc:	180e4101 	stmdane	lr, {r0, r8, lr}
 8d0:	00070d41 	andeq	r0, r7, r1, asr #26
 8d4:	0000000c 	andeq	r0, r0, ip
 8d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8dc:	7c020001 	stcvc	0, cr0, [r2], {1}
 8e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 8e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e8:	000008d4 	ldrdeq	r0, [r0], -r4
 8ec:	20002e5c 	andcs	r2, r0, ip, asr lr
 8f0:	00000074 	andeq	r0, r0, r4, ror r0
 8f4:	40080e41 	andmi	r0, r8, r1, asr #28
 8f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8fc:	180e4101 	stmdane	lr, {r0, r8, lr}
 900:	00070d41 	andeq	r0, r7, r1, asr #26
 904:	00000020 	andeq	r0, r0, r0, lsr #32
 908:	000008d4 	ldrdeq	r0, [r0], -r4
 90c:	20002ed0 	ldrdcs	r2, [r0], -r0
 910:	00000074 	andeq	r0, r0, r4, ror r0
 914:	400c0e41 	andmi	r0, ip, r1, asr #28
 918:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 91c:	018e4002 	orreq	r4, lr, r2
 920:	41180e41 	tstmi	r8, r1, asr #28
 924:	0000070d 	andeq	r0, r0, sp, lsl #14
 928:	0000000c 	andeq	r0, r0, ip
 92c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 930:	7c020001 	stcvc	0, cr0, [r2], {1}
 934:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 938:	0000001c 	andeq	r0, r0, ip, lsl r0
 93c:	00000928 	andeq	r0, r0, r8, lsr #18
 940:	20002f44 	andcs	r2, r0, r4, asr #30
 944:	00000074 	andeq	r0, r0, r4, ror r0
 948:	40080e41 	andmi	r0, r8, r1, asr #28
 94c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 950:	180e4101 	stmdane	lr, {r0, r8, lr}
 954:	00070d41 	andeq	r0, r7, r1, asr #26
 958:	00000020 	andeq	r0, r0, r0, lsr #32
 95c:	00000928 	andeq	r0, r0, r8, lsr #18
 960:	20002fb8 			; <UNDEFINED> instruction: 0x20002fb8
 964:	00000074 	andeq	r0, r0, r4, ror r0
 968:	400c0e41 	andmi	r0, ip, r1, asr #28
 96c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 970:	018e4002 	orreq	r4, lr, r2
 974:	41180e41 	tstmi	r8, r1, asr #28
 978:	0000070d 	andeq	r0, r0, sp, lsl #14
 97c:	0000000c 	andeq	r0, r0, ip
 980:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 984:	7c010001 	stcvc	0, cr0, [r1], {1}
 988:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 98c:	0000000c 	andeq	r0, r0, ip
 990:	0000097c 	andeq	r0, r0, ip, ror r9
 994:	2000302d 	andcs	r3, r0, sp, lsr #32
 998:	000001cc 	andeq	r0, r0, ip, asr #3
